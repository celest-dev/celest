diff --git a/fml/mapping.cc b/fml/mapping.cc
index 5892136149..f85cfb5888 100644
--- a/fml/mapping.cc
+++ b/fml/mapping.cc
@@ -5,6 +5,7 @@
 #include "flutter/fml/mapping.h"
 
 #include <algorithm>
+#include <cstddef>
 #include <cstring>
 #include <memory>
 #include <sstream>
@@ -165,6 +166,7 @@ SymbolMapping::SymbolMapping(fml::RefPtr<fml::NativeLibrary> native_library,
                              const char* symbol_name)
     : native_library_(std::move(native_library)) {
   if (native_library_ && symbol_name != nullptr) {
+    FML_VLOG(1) << "Resolving native symbol: '" << symbol_name << "'.";
     mapping_ = native_library_->ResolveSymbol(symbol_name);
 
     if (mapping_ == nullptr) {
@@ -179,6 +181,12 @@ SymbolMapping::SymbolMapping(fml::RefPtr<fml::NativeLibrary> native_library,
       mapping_ =
           native_library_->ResolveSymbol(underscore_symbol_name.str().c_str());
     }
+
+    if (mapping_ == nullptr) {
+      FML_LOG(ERROR) << "Could not resolve symbol '" << symbol_name << "'.";
+    } else {
+      FML_VLOG(1) << "Resolved symbol '" << symbol_name << "'.";
+    }
   }
 }
 
diff --git a/fml/platform/posix/native_library_posix.cc b/fml/platform/posix/native_library_posix.cc
index 43406bc21b..fb594b70c4 100644
--- a/fml/platform/posix/native_library_posix.cc
+++ b/fml/platform/posix/native_library_posix.cc
@@ -13,7 +13,7 @@ NativeLibrary::NativeLibrary(const char* path) {
   ::dlerror();
   handle_ = ::dlopen(path, RTLD_NOW);
   if (handle_ == nullptr) {
-    FML_DLOG(ERROR) << "Could not open library '" << path << "' due to error '"
+    FML_LOG(ERROR) << "Could not open library '" << path << "' due to error '"
                     << ::dlerror() << "'.";
   }
 }
diff --git a/runtime/dart_snapshot.cc b/runtime/dart_snapshot.cc
index 5943524aa9..da3c252fef 100644
--- a/runtime/dart_snapshot.cc
+++ b/runtime/dart_snapshot.cc
@@ -56,9 +56,11 @@ static std::shared_ptr<const fml::Mapping> SearchMapping(
     const std::vector<std::string>& native_library_path,
     const char* native_library_symbol_name,
     bool is_executable) {
+  FML_VLOG(1) << "Loading symbol: " << native_library_symbol_name;
   // Ask the embedder. There is no fallback as we expect the embedders (via
   // their embedding APIs) to just specify the mappings directly.
   if (embedder_mapping_callback) {
+    FML_VLOG(1) << "Loading from embedder";
     // Note that mapping will be nullptr if the mapping callback returns an
     // invalid mapping. If all the other methods for resolving the data also
     // fail, the engine will stop with accompanying error logs.
@@ -76,7 +78,11 @@ static std::shared_ptr<const fml::Mapping> SearchMapping(
 
   // Look in application specified native library if specified.
   for (const std::string& path : native_library_path) {
+    FML_VLOG(1) << "Loading from native path: " << path;
     auto native_library = fml::NativeLibrary::Create(path.c_str());
+    if (native_library.get() == nullptr) {
+      FML_LOG(ERROR) << "Failed to load native library";
+    }
     auto symbol_mapping = std::make_unique<const fml::SymbolMapping>(
         native_library, native_library_symbol_name);
     if (symbol_mapping->GetMapping() != nullptr) {
@@ -86,6 +92,7 @@ static std::shared_ptr<const fml::Mapping> SearchMapping(
 
   // Look inside the currently loaded process.
   {
+    FML_VLOG(1) << "Loading from current proc";
     auto loaded_process = fml::NativeLibrary::CreateForCurrentProcess();
     auto symbol_mapping = std::make_unique<const fml::SymbolMapping>(
         loaded_process, native_library_symbol_name);
diff --git a/shell/testing/tester_main.cc b/shell/testing/tester_main.cc
index b9a8b19b88..2abc70b2f4 100644
--- a/shell/testing/tester_main.cc
+++ b/shell/testing/tester_main.cc
@@ -13,6 +13,9 @@
 #include "flutter/flow/embedded_views.h"
 #include "flutter/fml/build_config.h"
 #include "flutter/fml/file.h"
+#include "flutter/fml/log_level.h"
+#include "flutter/fml/log_settings.h"
+#include "flutter/fml/logging.h"
 #include "flutter/fml/make_copyable.h"
 #include "flutter/fml/message_loop.h"
 #include "flutter/fml/paths.h"
@@ -20,6 +23,7 @@
 #include "flutter/fml/task_runner.h"
 #include "flutter/shell/common/platform_view.h"
 #include "flutter/shell/common/rasterizer.h"
+#include "flutter/shell/common/run_configuration.h"
 #include "flutter/shell/common/shell.h"
 #include "flutter/shell/common/switches.h"
 #include "flutter/shell/common/thread_host.h"
@@ -285,19 +289,23 @@ class ScriptCompletionTaskObserver {
 
   void DidProcessTask() {
     last_error_ = shell_.GetUIIsolateLastError();
+    FML_VLOG(1) << "Last error: " << GetExitCodeForLastError();
     if (shell_.EngineHasLivePorts()) {
+      FML_VLOG(1) << "Engine has live ports";
       // The UI isolate still has live ports and is running. Nothing to do
       // just yet.
       return;
     }
 
     if (run_forever_) {
+      FML_VLOG(1) << "Running forever";
       // We need this script to run forever. We have already recorded the last
       // error. Keep going.
       return;
     }
 
     if (!has_terminated_) {
+      FML_VLOG(1) << "Script hasn't terminated yet. Posting \"Terminate\" task.";
       // Only try to terminate the loop once.
       has_terminated_ = true;
       fml::TaskRunner::RunNowOrPostTask(main_task_runner_, []() {
@@ -410,10 +418,17 @@ int RunTester(const flutter::Settings& settings,
     return EXIT_FAILURE;
   }
 
-  if (settings.application_kernel_asset.empty()) {
-    FML_LOG(ERROR) << "Dart kernel file not specified.";
+#if (FLUTTER_RUNTIME_MODE == FLUTTER_RUNTIME_MODE_RELEASE)
+  if (settings.application_library_path.empty()) {
+    FML_LOG(ERROR) << "Dart snapshot file not specified.";
     return EXIT_FAILURE;
   }
+#else
+    if (settings.application_kernel_asset.empty()) {
+        FML_LOG(ERROR) << "Dart kernel file not specified.";
+        return EXIT_FAILURE;
+    }
+#endif
 
   shell->GetPlatformView()->NotifyCreated();
 
@@ -430,32 +445,40 @@ int RunTester(const flutter::Settings& settings,
       std::make_unique<flutter::PlatformMessage>(
           "flutter/localization", std::move(locale_bytes), response));
 
-  std::initializer_list<fml::FileMapping::Protection> protection = {
-      fml::FileMapping::Protection::kRead};
-  auto main_dart_file_mapping = std::make_unique<fml::FileMapping>(
-      fml::OpenFile(
-          fml::paths::AbsolutePath(settings.application_kernel_asset).c_str(),
-          false, fml::FilePermission::kRead),
-      protection);
-
-  auto isolate_configuration =
-      IsolateConfiguration::CreateForKernel(std::move(main_dart_file_mapping));
-
-  if (!isolate_configuration) {
+#if (FLUTTER_RUNTIME_MODE == FLUTTER_RUNTIME_MODE_RELEASE)
+    auto run_configuration = RunConfiguration::InferFromSettings(
+            settings, io_task_runner, IsolateLaunchType::kNewGroup);
+#else
+    std::initializer_list<fml::FileMapping::Protection> protection = {
+        fml::FileMapping::Protection::kRead};
+    auto main_dart_file_mapping = std::make_unique<fml::FileMapping>(
+    fml::OpenFile(
+        fml::paths::AbsolutePath(settings.application_kernel_asset).c_str(),
+        false, fml::FilePermission::kRead),
+    protection);
+    auto isolate_configuration =
+    IsolateConfiguration::CreateForKernel(std::move(main_dart_file_mapping));
+
+    if (!isolate_configuration) {
     FML_LOG(ERROR) << "Could create isolate configuration.";
     return EXIT_FAILURE;
-  }
+    }
+
+    auto asset_manager = std::make_shared<flutter::AssetManager>();
+    if (fml::UniqueFD::traits_type::IsValid(settings.assets_dir)) {
+    asset_manager->PushBack(std::make_unique<DirectoryAssetBundle>(
+    fml::Duplicate(settings.assets_dir), true));
+    }
+    asset_manager->PushBack(std::make_unique<flutter::DirectoryAssetBundle>(
+    fml::OpenDirectory(settings.assets_path.c_str(), false,
+                    fml::FilePermission::kRead),
+    true));
 
-  auto asset_manager = std::make_shared<flutter::AssetManager>();
-  asset_manager->PushBack(std::make_unique<flutter::DirectoryAssetBundle>(
-      fml::Duplicate(settings.assets_dir), true));
-  asset_manager->PushBack(std::make_unique<flutter::DirectoryAssetBundle>(
-      fml::OpenDirectory(settings.assets_path.c_str(), false,
-                         fml::FilePermission::kRead),
-      true));
+    RunConfiguration run_configuration(std::move(isolate_configuration),
+                                std::move(asset_manager));
+#endif
 
-  RunConfiguration run_configuration(std::move(isolate_configuration),
-                                     std::move(asset_manager));
+  FML_VLOG(1) << "Created run configuration";
 
   // The script completion task observer that will be installed on the UI thread
   // that watched if the engine has any live ports.
@@ -481,6 +504,8 @@ int RunTester(const flutter::Settings& settings,
     latch.Signal();
   };
 
+  FML_VLOG(1) << "Running engine";
+
   shell->RunEngine(std::move(run_configuration),
                    [&engine_did_run, &ui_task_runner,
                     &task_observer_add](Engine::RunStatus run_status) mutable {
@@ -493,8 +518,12 @@ int RunTester(const flutter::Settings& settings,
                      }
                    });
 
+  FML_VLOG(1) << "Configuring shell";
+
   ConfigureShell(shell);
 
+  FML_VLOG(1) << "Running message loop";
+
   // Run the message loop and wait for the script to do its thing.
   fml::MessageLoop::GetCurrent().Run();
 
@@ -620,24 +649,44 @@ EXPORTED void ForceShutdownIsolate() {
 int main(int argc, char* argv[]) {
   dart::bin::SetExecutableName(argv[0]);
   dart::bin::SetExecutableArguments(argc - 1, argv);
+  fml::SetLogSettings(fml::LogSettings{fml::kLogInfo});
 
   auto command_line = fml::CommandLineFromPlatformOrArgcArgv(argc, argv);
 
+  const char* flutter_modes[] = {"debug", "profile", "release", "jit_release"};
+  auto canRunPrecompiled = flutter::DartVM::IsRunningPrecompiledCode();
+  FML_LOG(INFO) << "Flutter mode: " << flutter_modes[FLUTTER_RUNTIME_MODE-1];
+  FML_LOG(INFO) << "Precompiled: " << canRunPrecompiled;
+
   if (command_line.HasOption(flutter::FlagForSwitch(flutter::Switch::Help))) {
-    flutter::PrintUsage("flutter_tester");
+    flutter::PrintUsage("flutter_runner");
     return EXIT_SUCCESS;
   }
 
   auto settings = flutter::SettingsFromCommandLine(command_line);
+
+  if (settings.verbose_logging) {
+      // Enable all logs, including verbose logs which are logged at negative levels.
+      fml::SetLogSettings(fml::LogSettings{-fml::kLogFatal});
+  }
+
   if (!command_line.positional_args().empty()) {
     // The tester may not use the switch for the main dart file path. Specifying
     // it as a positional argument instead.
+#if (FLUTTER_RUNTIME_MODE == FLUTTER_RUNTIME_MODE_RELEASE)
+    auto snapshot_path = command_line.positional_args()[0];
+    if (snapshot_path.empty()) {
+      FML_LOG(ERROR) << "Dart snapshot not specified.";
+      return EXIT_FAILURE;
+    }
+    settings.application_library_path.emplace_back(snapshot_path);
+#else
     settings.application_kernel_asset = command_line.positional_args()[0];
-  }
-
-  if (settings.application_kernel_asset.empty()) {
-    FML_LOG(ERROR) << "Dart kernel file not specified.";
-    return EXIT_FAILURE;
+    if (settings.application_kernel_asset.empty()) {
+        FML_LOG(ERROR) << "Dart kernel file not specified.";
+        return EXIT_FAILURE;
+    }
+#endif
   }
 
   settings.leak_vm = false;
