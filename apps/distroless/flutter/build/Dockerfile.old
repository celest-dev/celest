# syntax=docker/dockerfile:1
ARG DEBIAN_VERSION=12

## Builds the custom Flutter engine
FROM ubuntu:focal AS build-engine

ARG TARGETPLATFORM

# Fix warnings related to: https://github.com/moby/moby/issues/27988
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Install download dependencies
RUN apt-get update && apt-get install -y apt-utils
RUN apt-get install -y curl git python3 python3-pip pkg-config

# Install Chrome depot tools
RUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
ENV PATH="${PWD}/depot_tools:${PATH}"

ARG FLUTTER_VERSION

# Download the custom Flutter engine
WORKDIR /engine
COPY sync.old.sh .
RUN ./sync.old.sh

# Patch the Flutter engine
WORKDIR /engine/src/flutter
COPY flutter_runner.old.patch .
RUN git apply --check flutter_runner.old.patch
RUN git apply flutter_runner.old.patch
# There's no good way to patch this since it's changed a lot
RUN sed -i 's/libdart_jit/libdart_precompiled_runtime_product/g' shell/testing/BUILD.gn

# Build a patched version of the Flutter engine
WORKDIR /engine/src
RUN ./flutter/tools/gn \
    --runtime-mode=release \
    --no-goma \
    --no-rbe \
    --stripped \
    --verbose
RUN ninja -C out/host_release

FROM gcr.io/distroless/cc-debian${DEBIAN_VERSION}:nonroot AS engine

COPY --from=build-engine /engine/src/out/host_release /engine
ENV DART_SDK="/engine/dart-sdk"

WORKDIR /engine
ENV LD_LIBRARY_PATH="/engine"

FROM gcr.io/distroless/cc-debian${DEBIAN_VERSION}:nonroot AS builder

COPY --from=engine /engine/dart-sdk/bin/utils/gen_snapshot /usr/lib/dart/bin/utils/gen_snapshot
COPY --from=engine /engine/dart-sdk/bin/utils/gen_snapshot.sym /usr/lib/dart/bin/utils/gen_snapshot.sym

ENTRYPOINT [ "/usr/lib/dart/bin/utils/gen_snapshot", "--snapshot_kind=app-aot-elf" ]
CMD [ "--elf=/app/main.aot", "/app/main.aot.dill" ]


# Builds SQLite from Source
#
# The version shipped with apt is very outdated (3.40.1). This is the only way
# it seems to get anything newer.
FROM debian:${DEBIAN_VERSION}-slim AS sqlite

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    tcl-dev \
    libreadline-dev \
    wget \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Set up build directory
WORKDIR /sqlite_build

# Download the latest SQLite source
ARG SQLITE_VERSION=3490100
RUN wget https://www.sqlite.org/2025/sqlite-autoconf-${SQLITE_VERSION}.tar.gz \
    && tar xzf sqlite-autoconf-${SQLITE_VERSION}.tar.gz \
    && cd sqlite-autoconf-${SQLITE_VERSION}

# Build SQLite with default options
WORKDIR /sqlite_build/sqlite-autoconf-${SQLITE_VERSION}
RUN CFLAGS='-DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1' \
    ./configure --prefix=/usr \
    --enable-threadsafe \
    && make -j$(nproc) \
    && make install DESTDIR=/sqlite_install

FROM debian:${DEBIAN_VERSION}-slim AS runtime

# Set up fonts for the Flutter engine
RUN apt update && apt install -y \
    fontconfig \
    fonts-cantarell \
    fonts-liberation2
RUN fc-cache -f

# Add CA certificates
RUN apt install -y ca-certificates

WORKDIR /celest
ENV LD_LIBRARY_PATH="/app:/celest:${LD_LIBRARY_PATH}"

# Clean up
RUN apt-get clean

COPY --from=sqlite /sqlite_install /
COPY --from=build-engine /engine/src/out/host_release/icudtl.dat .
COPY --from=build-engine /engine/src/out/host_release/*.so ./
COPY --from=build-engine /engine/src/out/host_release/*.so* ./
COPY --from=build-engine /engine/src/out/host_release/flutter_tester flutter_runner
COPY flutter_assets .

ENTRYPOINT [ "/app/flutter_runner", "--non-interactive", "--run-forever", "--disable-vm-service", "--icu-data-file-path=/app/icudtl.dat", "--verbose-logging", "--enable-platform-isolates", "--force-multithreading", "--cache-dir-path=/tmp", "--flutter-assets-dir=/app/flutter_assets" ]
CMD [ "/app/main.aot" ]
