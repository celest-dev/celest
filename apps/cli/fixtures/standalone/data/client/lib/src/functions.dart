// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import, deprecated_member_use, invalid_use_of_internal_member

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:isolate';

import 'package:built_value/built_value.dart' as _$built_value_built_value;
import 'package:cedar/src/authorization/authorization_response.dart'
    as _$cedar_authorization_response;
import 'package:cedar/src/model/errors.dart' as _$cedar_errors;
import 'package:celest/celest.dart' as _$celest;
import 'package:celest_backend/src/database/task_database.dart';
import 'package:celest_backend/src/database/task_database.drift.dart';
import 'package:celest_core/celest_core.dart' as _$celest;
import 'package:celest_core/src/exception/cloud_exception.dart' as _$celest;
import 'package:celest_core/src/exception/serialization_exception.dart'
    as _$celest;
import 'package:chunked_stream/src/read_chunked_stream.dart'
    as _$chunked_stream_read_chunked_stream;
import 'package:corks_cedar/src/exceptions.dart' as _$corks_cedar_exceptions;
import 'package:data_client/data_client.dart';
import 'package:drift/src/remote/communication.dart' as _$drift_communication;
import 'package:drift/src/runtime/cancellation_zone.dart'
    as _$drift_cancellation_zone;
import 'package:drift/src/runtime/exceptions.dart' as _$drift_exceptions;
import 'package:http/src/exception.dart' as _$http_exception;
import 'package:mustache_template/src/template_exception.dart'
    as _$mustache_template_template_exception;
import 'package:petitparser/src/core/exception.dart' as _$petitparser_exception;
import 'package:shelf/src/hijack_exception.dart' as _$shelf_hijack_exception;
import 'package:source_span/src/span_exception.dart'
    as _$source_span_span_exception;
import 'package:sqlite3/src/exception.dart' as _$sqlite3_exception;
import 'package:sqlite3/src/vfs.dart' as _$sqlite3_vfs;
import 'package:string_scanner/src/exception.dart'
    as _$string_scanner_exception;

class CelestFunctions {
  final tasks = CelestFunctionsTasks();
}

class CelestFunctionsTasks {
  Never _throwError({int? code, required Map<String, Object?> body}) {
    final status = body['@status'] as Map<String, Object?>?;
    final message = status?['message'] as String?;
    final details = status?['details'] as _$celest.JsonList?;
    final (errorType, errorValue, stackTrace) = switch (details) {
      null || [] => const (null, null, StackTrace.empty),
      [
        final errorDetails as Map<String, Object?>,
        {
          '@type': 'dart.core.StackTrace',
          'value': final stackTraceValue as String,
        },
        ...,
      ] =>
        (
          errorDetails['@type'],
          errorDetails['value'],
          StackTrace.fromString(stackTraceValue),
        ),
      [final errorDetails as Map<String, Object?>, ...] => (
        errorDetails['@type'],
        errorDetails['value'],
        StackTrace.empty,
      ),
    };

    switch (errorType) {
      case 'celest.core.v1.CloudException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<_$celest.CloudException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'celest.core.v1.CancelledException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.CancelledException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnknownError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<_$celest.UnknownError>(
            errorValue,
          ),
          stackTrace,
        );
      case 'celest.core.v1.BadRequestException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.BadRequestException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnauthorizedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnauthorizedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.NotFoundException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<_$celest.NotFoundException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'celest.core.v1.AlreadyExistsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.AlreadyExistsException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.PermissionDeniedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.PermissionDeniedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.ResourceExhaustedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.ResourceExhaustedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.FailedPreconditionException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.FailedPreconditionException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.AbortedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<_$celest.AbortedException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'celest.core.v1.OutOfRangeException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.OutOfRangeException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnimplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnimplementedError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.InternalServerError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.InternalServerError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnavailableError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<_$celest.UnavailableError>(
            errorValue,
          ),
          stackTrace,
        );
      case 'celest.core.v1.DataLossError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<_$celest.DataLossError>(
            errorValue,
          ),
          stackTrace,
        );
      case 'celest.core.v1.DeadlineExceededError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.DeadlineExceededError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.SerializationException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.SerializationException>(errorValue),
          stackTrace,
        );
      case 'dart.core.Error':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<Error>(errorValue),
          stackTrace,
        );
      case 'dart.core.AssertionError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AssertionError>(errorValue),
          stackTrace,
        );
      case 'dart.core.TypeError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<TypeError>(errorValue),
          stackTrace,
        );
      case 'dart.core.ArgumentError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<ArgumentError>(errorValue),
          stackTrace,
        );
      case 'dart.core.RangeError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<RangeError>(errorValue),
          stackTrace,
        );
      case 'dart.core.IndexError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<IndexError>(errorValue),
          stackTrace,
        );
      case 'dart.core.UnsupportedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<UnsupportedError>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.core.UnimplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<UnimplementedError>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.core.StateError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<StateError>(errorValue),
          stackTrace,
        );
      case 'dart.core.ConcurrentModificationError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<ConcurrentModificationError>(errorValue),
          stackTrace,
        );
      case 'dart.core.OutOfMemoryError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<OutOfMemoryError>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.core.StackOverflowError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<StackOverflowError>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.core.Exception':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<Exception>(errorValue),
          stackTrace,
        );
      case 'dart.core.FormatException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<FormatException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.core.IntegerDivisionByZeroException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<IntegerDivisionByZeroException>(errorValue),
          stackTrace,
        );
      case 'dart.async.AsyncError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AsyncError>(errorValue),
          stackTrace,
        );
      case 'dart.async.TimeoutException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<TimeoutException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.convert.JsonUnsupportedObjectError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<JsonUnsupportedObjectError>(
            errorValue,
          ),
          stackTrace,
        );
      case 'drift.DriftWrappedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$drift_exceptions.DriftWrappedException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'drift.CouldNotRollBackException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$drift_exceptions.CouldNotRollBackException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'cedar.AuthorizationException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<
            _$cedar_authorization_response.AuthorizationException
          >(errorValue),
          stackTrace,
        );
      case 'cedar.EntityNotFoundException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$cedar_errors.EntityNotFoundException>(errorValue),
          stackTrace,
        );
      case 'cedar.UnspecifiedEntityException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$cedar_errors.UnspecifiedEntityException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'cedar.TypeException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$cedar_errors.TypeException>(errorValue),
          stackTrace,
        );
      case 'cedar.AttributeAccessException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$cedar_errors.AttributeAccessException>(errorValue),
          stackTrace,
        );
      case 'cedar.OverflowException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$cedar_errors.OverflowException>(errorValue),
          stackTrace,
        );
      case 'cedar.ArityException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$cedar_errors.ArityException>(errorValue),
          stackTrace,
        );
      case 'cedar.UnknownExtensionException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$cedar_errors.UnknownExtensionException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'string_scanner.StringScannerException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$string_scanner_exception.StringScannerException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'source_span.SourceSpanException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$source_span_span_exception.SourceSpanException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'source_span.SourceSpanFormatException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<
            _$source_span_span_exception.SourceSpanFormatException
          >(errorValue),
          stackTrace,
        );
      case 'built_value.BuiltValueNullFieldError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$built_value_built_value.BuiltValueNullFieldError>(
                errorValue,
              ),
          stackTrace,
        );
      case 'built_value.BuiltValueMissingGenericsError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<
            _$built_value_built_value.BuiltValueMissingGenericsError
          >(errorValue),
          stackTrace,
        );
      case 'built_value.BuiltValueNestedFieldError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<
            _$built_value_built_value.BuiltValueNestedFieldError
          >(errorValue),
          stackTrace,
        );
      case 'corks_cedar.InvalidCorkException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$corks_cedar_exceptions.InvalidCorkException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'corks_cedar.MissingSignatureError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$corks_cedar_exceptions.MissingSignatureError>(
                errorValue,
              ),
          stackTrace,
        );
      case 'dart.io.OSError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<OSError>(errorValue),
          stackTrace,
        );
      case 'dart.io.FileSystemException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<FileSystemException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.PathAccessException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<PathAccessException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.PathExistsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<PathExistsException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.PathNotFoundException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<PathNotFoundException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.SignalException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<SignalException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.ProcessException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<ProcessException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.TlsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<TlsException>(errorValue),
          stackTrace,
        );
      case 'dart.io.HandshakeException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<HandshakeException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.CertificateException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<CertificateException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.StdoutException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<StdoutException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.io.StdinException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<StdinException>(errorValue),
          stackTrace,
        );
      case 'dart._http.HttpException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<HttpException>(errorValue),
          stackTrace,
        );
      case 'dart._http.WebSocketException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<WebSocketException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'dart.isolate.IsolateSpawnException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<IsolateSpawnException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'http.ClientException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$http_exception.ClientException>(errorValue),
          stackTrace,
        );
      case 'shelf.HijackException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$shelf_hijack_exception.HijackException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'mustache_template.TemplateException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<
            _$mustache_template_template_exception.TemplateException
          >(errorValue),
          stackTrace,
        );
      case 'drift.CancellationException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$drift_cancellation_zone.CancellationException>(
                errorValue,
              ),
          stackTrace,
        );
      case 'sqlite3.SqliteException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$sqlite3_exception.SqliteException>(errorValue),
          stackTrace,
        );
      case 'sqlite3.VfsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<_$sqlite3_vfs.VfsException>(
            errorValue,
          ),
          stackTrace,
        );
      case 'chunked_stream.MaximumSizeExceeded':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<
            _$chunked_stream_read_chunked_stream.MaximumSizeExceeded
          >(errorValue),
          stackTrace,
        );
      case 'petitparser.ParserException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$petitparser_exception.ParserException>(errorValue),
          stackTrace,
        );
      case 'drift.ConnectionClosedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$drift_communication.ConnectionClosedException>(
                errorValue,
              ),
          stackTrace,
        );
      default:
        Error.throwWithStackTrace(
          _$celest.CloudException.http(
            code: code,
            message: message,
            details: ((details ?? body) as _$celest.JsonValue),
          ),
          StackTrace.empty,
        );
    }
  }

  /// Creates a new [Task].
  @_$celest.CloudFunction(api: 'tasks', function: 'create')
  Future<Task> create({
    required String title,
    Priority priority = Priority.high,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/tasks/create'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'title': title,
        r'priority': _$celest.Serializers.instance.serialize<Priority>(
          priority,
        ),
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance.deserialize<Task>($body);
  }
}
