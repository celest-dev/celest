// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import, deprecated_member_use, invalid_use_of_internal_member

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:celest/src/core/context.dart' as _$celest;
import 'package:celest/src/runtime/data/database_registry.dart' as _$celest;
import 'package:celest_cloud_auth/src/database/auth_database.dart' as _$celest;
import 'package:drift/src/runtime/api/runtime_api.dart' as _$drift_runtime_api;

/// The data services for the Celest backend.
///
/// This class provides access to the databases that are configured
/// for the current [CelestEnvironment].
class CelestData {
  const CelestData();

  /// The `CloudAuthDatabase` instance for this project.
  _$celest.CloudAuthDatabase get cloudAuth =>
      _$celest.Context.current.expect(cloudAuth$Key);

  /// The context key for the [cloudAuth] instance.
  static _$celest.ContextKey<_$celest.CloudAuthDatabase> get cloudAuth$Key =>
      const _$celest.ContextKey('CloudAuthDatabase');

  /// All database connections registered in the current Celest context.
  List<_$drift_runtime_api.GeneratedDatabase> list() =>
      _$celest.CelestDatabaseRegistry.of(_$celest.Context.current).list();

  /// Returns the database connection registered under [name].
  ///
  /// The lookup matches either the Dart variable name or the database identifier.
  _$drift_runtime_api.GeneratedDatabase byName(String name) =>
      _$celest.CelestDatabaseRegistry.of(_$celest.Context.current).byName(name);

  /// Returns the database connection registered under [name], if any.
  ///
  /// The lookup matches either the Dart variable name or the database identifier.
  _$drift_runtime_api.GeneratedDatabase? maybeByName(String name) =>
      _$celest.CelestDatabaseRegistry.of(
        _$celest.Context.current,
      ).maybeByName(name);
}
