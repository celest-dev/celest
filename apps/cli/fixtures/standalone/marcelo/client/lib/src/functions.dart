// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import, deprecated_member_use, invalid_use_of_internal_member

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:async';
import 'dart:convert';

import 'package:_common/src/models/available_stock.dart'
    as _$_common_available_stock;
import 'package:_common/src/models/available_stocks.dart'
    as _$_common_available_stocks;
import 'package:_common/src/models/cash_balance.dart' as _$_common_cash_balance;
import 'package:_common/src/models/errors_and_exceptions.dart'
    as _$_common_errors_and_exceptions;
import 'package:_common/src/models/portfolio.dart' as _$_common_portfolio;
import 'package:_common/src/models/stock.dart' as _$_common_stock;
import 'package:_common/src/models/ui.dart' as _$_common_ui;
import 'package:celest/celest.dart' as _$celest;
import 'package:celest_backend/exceptions/overrides.dart';
import 'package:celest_core/celest_core.dart' as _$celest;
import 'package:celest_core/src/exception/cloud_exception.dart' as _$celest;
import 'package:celest_core/src/exception/serialization_exception.dart'
    as _$celest;
import 'package:celest_core/src/serialization/json_value.dart' as _$celest;
import 'package:marcelo_client/marcelo_client.dart';

class CelestFunctions {
  final exceptions = CelestFunctionsExceptions();

  final models = CelestFunctionsModels();
}

class CelestFunctionsExceptions {
  Never _throwError({
    int? code,
    required Map<String, Object?> body,
  }) {
    final status = body['@status'] as Map<String, Object?>?;
    final message = status?['message'] as String?;
    final details = status?['details'] as _$celest.JsonList?;
    final (errorType, errorValue, stackTrace) = switch (details) {
      null || [] => const (null, null, StackTrace.empty),
      [
        final errorDetails as Map<String, Object?>,
        {
          '@type': 'dart.core.StackTrace',
          'value': final stackTraceValue as String
        },
        ...
      ] =>
        (
          errorDetails['@type'],
          errorDetails['value'],
          StackTrace.fromString(stackTraceValue),
        ),
      [final errorDetails as Map<String, Object?>, ...] => (
          errorDetails['@type'],
          errorDetails['value'],
          StackTrace.empty,
        ),
    };

    switch (errorType) {
      case '_common.UserException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$_common_errors_and_exceptions.UserException>(
                  errorValue),
          stackTrace,
        );
      case 'marcelo.v1.AppError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AppError>(errorValue),
          stackTrace,
        );
      case 'marcelo.v1.AppException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AppException>(errorValue),
          stackTrace,
        );
      case 'marcelo.v1.NotYetImplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<NotYetImplementedError>(errorValue),
          stackTrace,
        );
      case '_common.ValidateError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$_common_errors_and_exceptions.ValidateError>(
                  errorValue),
          stackTrace,
        );
      case 'marcelo.v1.UserException_ShowInConsole':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<UserException_ShowInConsole>(errorValue),
          stackTrace,
        );
      case 'dart.core.Error':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<Error>(errorValue),
          stackTrace,
        );
      case 'dart.core.AssertionError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AssertionError>(errorValue),
          stackTrace,
        );
      case 'dart.core.TypeError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<TypeError>(errorValue),
          stackTrace,
        );
      case 'dart.core.ArgumentError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<ArgumentError>(errorValue),
          stackTrace,
        );
      case 'dart.core.RangeError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<RangeError>(errorValue),
          stackTrace,
        );
      case 'dart.core.IndexError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<IndexError>(errorValue),
          stackTrace,
        );
      case 'dart.core.UnsupportedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<UnsupportedError>(errorValue),
          stackTrace,
        );
      case 'dart.core.UnimplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<UnimplementedError>(errorValue),
          stackTrace,
        );
      case 'dart.core.StateError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<StateError>(errorValue),
          stackTrace,
        );
      case 'dart.core.ConcurrentModificationError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<ConcurrentModificationError>(errorValue),
          stackTrace,
        );
      case 'dart.core.OutOfMemoryError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<OutOfMemoryError>(errorValue),
          stackTrace,
        );
      case 'dart.core.StackOverflowError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<StackOverflowError>(errorValue),
          stackTrace,
        );
      case 'dart.core.Exception':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<Exception>(errorValue),
          stackTrace,
        );
      case 'dart.core.FormatException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<FormatException>(errorValue),
          stackTrace,
        );
      case 'dart.core.IntegerDivisionByZeroException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<IntegerDivisionByZeroException>(errorValue),
          stackTrace,
        );
      case 'dart.async.AsyncError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AsyncError>(errorValue),
          stackTrace,
        );
      case 'dart.async.TimeoutException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<TimeoutException>(errorValue),
          stackTrace,
        );
      case 'dart.convert.JsonUnsupportedObjectError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<JsonUnsupportedObjectError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.CloudException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.CloudException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.CancelledException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.CancelledException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnknownError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnknownError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.BadRequestException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.BadRequestException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnauthorizedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnauthorizedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.NotFoundException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.NotFoundException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.AlreadyExistsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.AlreadyExistsException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.PermissionDeniedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.PermissionDeniedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.ResourceExhaustedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.ResourceExhaustedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.FailedPreconditionException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.FailedPreconditionException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.AbortedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.AbortedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.OutOfRangeException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.OutOfRangeException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnimplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnimplementedError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.InternalServerError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.InternalServerError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnavailableError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnavailableError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.DataLossError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.DataLossError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.DeadlineExceededError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.DeadlineExceededError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.SerializationException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.SerializationException>(errorValue),
          stackTrace,
        );
      default:
        Error.throwWithStackTrace(
          _$celest.CloudException.http(
            code: code,
            message: message,
            details: ((details ?? body) as _$celest.JsonValue),
          ),
          StackTrace.empty,
        );
    }
  }

  @_$celest.CloudFunction(
    api: 'exceptions',
    function: 'throwsUserException',
  )
  Future<void> throwsUserException({_$celest.JsonValue? cause}) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-user-exception'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'cause': _$celest.Serializers.instance.serialize<_$celest.JsonValue?>(
          cause,
          const _$celest.TypeToken<_$celest.JsonValue?>('JsonValue'),
        )
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return;
  }

  @_$celest.CloudFunction(
    api: 'exceptions',
    function: 'callsThrowsUserException',
  )
  Future<void> callsThrowsUserException({_$celest.JsonValue? cause}) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/calls-throws-user-exception'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'cause': _$celest.Serializers.instance.serialize<_$celest.JsonValue?>(
          cause,
          const _$celest.TypeToken<_$celest.JsonValue?>('JsonValue'),
        )
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return;
  }

  @_$celest.CloudFunction(
    api: 'exceptions',
    function: 'throwsAppError',
  )
  Future<void> throwsAppError({
    String message = 'message',
    _$celest.JsonValue? error,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-app-error'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'message': message,
        r'error': _$celest.Serializers.instance.serialize<_$celest.JsonValue?>(
          error,
          const _$celest.TypeToken<_$celest.JsonValue?>('JsonValue'),
        ),
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return;
  }

  @_$celest.CloudFunction(
    api: 'exceptions',
    function: 'throwsAppException',
  )
  Future<void> throwsAppException() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-app-exception'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return;
  }

  @_$celest.CloudFunction(
    api: 'exceptions',
    function: 'throwsNotYetImplementedError',
  )
  Future<void> throwsNotYetImplementedError() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-not-yet-implemented-error'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return;
  }

  @_$celest.CloudFunction(
    api: 'exceptions',
    function: 'throwsValidateError',
  )
  Future<void> throwsValidateError() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-validate-error'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return;
  }

  @_$celest.CloudFunction(
    api: 'exceptions',
    function: 'throwsUserException_ShowInConsole',
  )
  Future<void> throwsUserExceptionShowInConsole({
    String message = 'message',
    _$celest.JsonValue? cause,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri
          .resolve('/exceptions/throws-user-exception-show-in-console'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'message': message,
        r'cause': _$celest.Serializers.instance.serialize<_$celest.JsonValue?>(
          cause,
          const _$celest.TypeToken<_$celest.JsonValue?>('JsonValue'),
        ),
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return;
  }
}

class CelestFunctionsModels {
  Never _throwError({
    int? code,
    required Map<String, Object?> body,
  }) {
    final status = body['@status'] as Map<String, Object?>?;
    final message = status?['message'] as String?;
    final details = status?['details'] as _$celest.JsonList?;
    final (errorType, errorValue, stackTrace) = switch (details) {
      null || [] => const (null, null, StackTrace.empty),
      [
        final errorDetails as Map<String, Object?>,
        {
          '@type': 'dart.core.StackTrace',
          'value': final stackTraceValue as String
        },
        ...
      ] =>
        (
          errorDetails['@type'],
          errorDetails['value'],
          StackTrace.fromString(stackTraceValue),
        ),
      [final errorDetails as Map<String, Object?>, ...] => (
          errorDetails['@type'],
          errorDetails['value'],
          StackTrace.empty,
        ),
    };

    switch (errorType) {
      case '_common.UserException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$_common_errors_and_exceptions.UserException>(
                  errorValue),
          stackTrace,
        );
      case 'marcelo.v1.AppError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AppError>(errorValue),
          stackTrace,
        );
      case 'marcelo.v1.AppException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AppException>(errorValue),
          stackTrace,
        );
      case 'marcelo.v1.NotYetImplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<NotYetImplementedError>(errorValue),
          stackTrace,
        );
      case '_common.ValidateError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$_common_errors_and_exceptions.ValidateError>(
                  errorValue),
          stackTrace,
        );
      case 'marcelo.v1.UserException_ShowInConsole':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<UserException_ShowInConsole>(errorValue),
          stackTrace,
        );
      case 'dart.core.Error':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<Error>(errorValue),
          stackTrace,
        );
      case 'dart.core.AssertionError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AssertionError>(errorValue),
          stackTrace,
        );
      case 'dart.core.TypeError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<TypeError>(errorValue),
          stackTrace,
        );
      case 'dart.core.ArgumentError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<ArgumentError>(errorValue),
          stackTrace,
        );
      case 'dart.core.RangeError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<RangeError>(errorValue),
          stackTrace,
        );
      case 'dart.core.IndexError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<IndexError>(errorValue),
          stackTrace,
        );
      case 'dart.core.UnsupportedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<UnsupportedError>(errorValue),
          stackTrace,
        );
      case 'dart.core.UnimplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<UnimplementedError>(errorValue),
          stackTrace,
        );
      case 'dart.core.StateError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<StateError>(errorValue),
          stackTrace,
        );
      case 'dart.core.ConcurrentModificationError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<ConcurrentModificationError>(errorValue),
          stackTrace,
        );
      case 'dart.core.OutOfMemoryError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<OutOfMemoryError>(errorValue),
          stackTrace,
        );
      case 'dart.core.StackOverflowError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<StackOverflowError>(errorValue),
          stackTrace,
        );
      case 'dart.core.Exception':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<Exception>(errorValue),
          stackTrace,
        );
      case 'dart.core.FormatException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<FormatException>(errorValue),
          stackTrace,
        );
      case 'dart.core.IntegerDivisionByZeroException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<IntegerDivisionByZeroException>(errorValue),
          stackTrace,
        );
      case 'dart.async.AsyncError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AsyncError>(errorValue),
          stackTrace,
        );
      case 'dart.async.TimeoutException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<TimeoutException>(errorValue),
          stackTrace,
        );
      case 'dart.convert.JsonUnsupportedObjectError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<JsonUnsupportedObjectError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.CloudException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.CloudException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.CancelledException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.CancelledException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnknownError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnknownError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.BadRequestException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.BadRequestException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnauthorizedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnauthorizedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.NotFoundException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.NotFoundException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.AlreadyExistsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.AlreadyExistsException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.PermissionDeniedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.PermissionDeniedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.ResourceExhaustedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.ResourceExhaustedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.FailedPreconditionException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.FailedPreconditionException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.AbortedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.AbortedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.OutOfRangeException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.OutOfRangeException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnimplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnimplementedError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.InternalServerError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.InternalServerError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnavailableError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnavailableError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.DataLossError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.DataLossError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.DeadlineExceededError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.DeadlineExceededError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.SerializationException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.SerializationException>(errorValue),
          stackTrace,
        );
      default:
        Error.throwWithStackTrace(
          _$celest.CloudException.http(
            code: code,
            message: message,
            details: ((details ?? body) as _$celest.JsonValue),
          ),
          StackTrace.empty,
        );
    }
  }

  @_$celest.CloudFunction(
    api: 'models',
    function: 'availableStock',
  )
  Future<_$_common_available_stock.AvailableStock> availableStock(
      _$_common_available_stock.AvailableStock availableStock) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/available-stock'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'availableStock': _$celest.Serializers.instance
            .serialize<_$_common_available_stock.AvailableStock>(availableStock)
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$_common_available_stock.AvailableStock>($body);
  }

  @_$celest.CloudFunction(
    api: 'models',
    function: 'availableStocks',
  )
  Future<_$_common_available_stocks.AvailableStocks> availableStocks(
      _$_common_available_stocks.AvailableStocks availableStocks) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/available-stocks'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'availableStocks': _$celest.Serializers.instance
            .serialize<_$_common_available_stocks.AvailableStocks>(
                availableStocks)
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$_common_available_stocks.AvailableStocks>($body);
  }

  @_$celest.CloudFunction(
    api: 'models',
    function: 'cashBalance',
  )
  Future<_$_common_cash_balance.CashBalance> cashBalance(
      _$_common_cash_balance.CashBalance cashBalance) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/cash-balance'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'cashBalance': _$celest.Serializers.instance
            .serialize<_$_common_cash_balance.CashBalance>(cashBalance)
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$_common_cash_balance.CashBalance>($body);
  }

  @_$celest.CloudFunction(
    api: 'models',
    function: 'portfolio',
  )
  Future<_$_common_portfolio.Portfolio> portfolio(
      _$_common_portfolio.Portfolio portfolio) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/portfolio'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'portfolio': _$celest.Serializers.instance
            .serialize<_$_common_portfolio.Portfolio>(portfolio)
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$_common_portfolio.Portfolio>($body);
  }

  @_$celest.CloudFunction(
    api: 'models',
    function: 'stock',
  )
  Future<_$_common_stock.Stock> stock(_$_common_stock.Stock stock) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/stock'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'stock': _$celest.Serializers.instance
            .serialize<_$_common_stock.Stock>(stock)
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$_common_stock.Stock>($body);
  }

  @_$celest.CloudFunction(
    api: 'models',
    function: 'ui',
  )
  Future<_$_common_ui.Ui> ui(_$_common_ui.Ui ui) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/ui'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'ui': _$celest.Serializers.instance.serialize<_$_common_ui.Ui>(ui)
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance.deserialize<_$_common_ui.Ui>($body);
  }
}
