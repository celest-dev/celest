import 'dart:collection';

import 'package:celest_ast/celest_ast.dart';
import 'package:celest_cli/src/types/dart_types.dart';
import 'package:celest_cli/src/utils/error.dart';
import 'package:celest_cli/src/utils/recase.dart';
import 'package:code_builder/code_builder.dart';

const _header = [
  'Generated by Celest. This file should not be modified manually, but',
  'it can be checked into version control.',
];

final class ResourcesGenerator {
  ResourcesGenerator({required this.project});

  final Project project;
  final _library = LibraryBuilder()
    ..name = ''
    ..comments.addAll(_header);

  // SplayTree ensures consistent ordering in output file which helps with
  // diffs.
  /// All resources, sorted by API name, then definition order.
  final _allResources = SplayTreeMap<AstNode, String>((a, b) {
    return switch ((a, b)) {
      (final Api a, final Api b) => a.name.compareTo(b.name),
      (final CloudFunction a, final CloudFunction b) => a.compareTo(b),
      (final Variable a, final Variable b) => a.name.compareTo(b.name),
      (Api(), _) => -1,
      (CloudFunction(), Api()) => 1,
      (CloudFunction(), Variable()) => -1,
      (Variable(), _) => 1,
      _ => unreachable(),
    };
  });

  final _classBuilders = <String, ClassBuilder>{};
  ClassBuilder _beginClass(String name, String? oldName) {
    final cached = _classBuilders[name];
    if (cached != null) {
      return cached;
    }

    // TODO(dnys1): Remove in 0.3.0
    // Adds a typedef for the old name to avoid breaking changes.
    if (oldName != null) {
      final typedef = TypeDef(
        (b) => b
          ..annotations.add(
            DartTypes.core.deprecated.newInstance([
              literalString('Use `$name` instead.'),
            ]),
          )
          ..name = oldName
          ..definition = refer(name),
      );
      _library.body.add(typedef);
    }

    final builder = ClassBuilder()
      ..name = name
      ..abstract = true
      ..modifier = ClassModifier.final$;
    _library.body.add(lazySpec(builder.build));
    return builder;
  }

  void _generateApi(
    Api api, {
    required Map<String, Field> apis,
    required Map<String, Field> functions,
  }) {
    final apiFieldName = api.name.camelCase;
    apis[apiFieldName] ??= Field(
      (f) => f
        ..static = true
        ..modifier = FieldModifier.constant
        ..name = api.name.camelCase
        ..assignment = DartTypes.celest.cloudApi.constInstance([], {
          'name': literalString(api.name, raw: true),
        }).code,
    );
    for (final function in api.functions.values) {
      // final inputParameters =
      //     function.parameters.where((p) => !p.type.isFunctionContext).toList();
      // // final inputType = switch (inputParameters) {
      // //   [] => refer('void'),
      // //   [final single] => single.type,
      // //   final multiple => RecordType(
      // //       (r) => r
      // //         // `TODO`(dnys1): Treat all parameters the same (named/optional)?
      // //         // This is only a Dart concept and we can handle the mapping to/from.
      // //         // i.e. it does not affect the actual HTTP API.
      // //         ..positionalFieldTypes.addAll([
      // //           for (final parameter in multiple.where((p) => !p.named))
      // //             parameter.type,
      // //         ])
      // //         ..namedFieldTypes.addAll({
      // //           for (final parameter in multiple.where((p) => p.named))
      // //             parameter.name: parameter.type,
      // //         }),
      // //     ),
      // // };
      final functionFieldName = '${api.name}_${function.name}'.camelCase;
      functions[functionFieldName] ??= Field(
        (f) => f
          ..static = true
          ..name = functionFieldName
          ..modifier = FieldModifier.constant
          ..assignment = DartTypes.celest.cloudFunction.constInstance([], {
            'api': literalString(api.name, raw: true),
            'functionName': literalString(function.name, raw: true),
          }).code,
      );
      _allResources[api] = 'Apis.$apiFieldName';
      _allResources[function] = 'Functions.$functionFieldName';
    }
  }

  void _generateEnv(Iterable<Variable> variables) {
    final env = _beginClass('env', 'Env');
    for (final envVar in variables) {
      final fieldName = envVar.name.camelCase;
      env.fields.add(
        Field(
          (f) => f
            ..static = true
            ..modifier = FieldModifier.constant
            ..name = fieldName
            ..assignment =
                DartTypes.celest.environmentVariable.constInstance([], {
              'name': literalString(envVar.name, raw: true),
            }).code,
        ),
      );
      _allResources[envVar] = 'env.$fieldName';
    }
  }

  void _generateContext() {
    final context = _beginClass('context', null)
      ..constructors.add(
        Constructor(
          (c) => c
            ..name = '_'
            ..constant = true
            ..requiredParameters.add(
              Parameter(
                (p) => p
                  ..name = 'key'
                  ..toThis = true,
              ),
            ),
        ),
      )
      ..fields.add(
        Field(
          (f) => f
            ..modifier = FieldModifier.final$
            ..type = DartTypes.core.string
            ..name = 'key',
        ),
      );
    if (project.auth != null) {
      context.constructors.add(
        Constructor(
          (c) => c
            ..constant = true
            ..name = 'user'
            ..initializers.add(
              refer('this').property('_').call([
                literalString(raw: true, r'$user'),
              ]).code,
            ),
        ),
      );
    }
  }

  Library generate() {
    // final allApis = project.apis.values;
    // if (allApis.isNotEmpty) {
    //   // Ensures consistent ordering in output file which helps with diffs.
    //   final apis = SplayTreeMap<String, Field>();
    //   final functions = SplayTreeMap<String, Field>();
    //   for (final api in allApis) {
    //     _generateApi(
    //       api,
    //       apis: apis,
    //       functions: functions,
    //     );
    //   }
    //   _beginClass('Apis').fields.addAll(apis.build().values);
    //   _beginClass('Functions').fields.addAll(functions.build().values);
    // }
    // if (project.variables.isNotEmpty) {
    //   _generateEnv(project.variables);
    // }
    return _library.build();
  }
}
