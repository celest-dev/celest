import 'cedar.drift';

import 'schema_imports.dart';

-- Stores Celest Cloud users.
CREATE TABLE IF NOT EXISTS cloud_auth_users (
    -- Immutable. The unique identifier for the user.
    --
    -- Maps to the `uid` field in the Protobuf.
    --
    -- Format: usr_<typeid>
    user_id TEXT NOT NULL PRIMARY KEY,

    -- The user's given name.
    given_name TEXT,

    -- The user's family name.
    family_name TEXT,

    -- The user's time zone.
    --
    -- Format: IANA time zone identifier
    -- Example: `America/Los_Angeles`
    time_zone TEXT,

    -- The user's preferred language.
    --
    -- Format: BCP-47 language tag
    -- Example: `en-US`
    language_code TEXT,

    -- The time the user was created.
    create_time `const TimestampType()` NOT NULL DEFAULT (unixepoch('now', 'subsec')),

    -- The time the user was last updated.
    update_time `const TimestampType()`
) WITH User;

----------------------------------------------
-------------- Cedar Triggers ----------------
----------------------------------------------

-- This trigger is used to create the Cedar entity when a row is inserted.
CREATE TRIGGER IF NOT EXISTS cloud_auth_users_create_trg
BEFORE INSERT ON cloud_auth_users
BEGIN
    INSERT INTO cedar_entities(entity_type, entity_id)
    VALUES ('Celest::User', NEW.user_id);
END;

-- This trigger is used to delete the parent relationship when the parent_id is set to NULL.
CREATE TRIGGER IF NOT EXISTS cloud_auth_users_delete_trg
AFTER DELETE ON cloud_auth_users
BEGIN
    DELETE FROM cedar_relationships
    WHERE 
        (entity_type = 'Celest::User' AND entity_id = OLD.user_id)
    OR  (parent_type = 'Celest::User' AND parent_id = OLD.user_id);
    DELETE FROM cedar_entities
    WHERE
        entity_id = OLD.user_id
    AND entity_type = 'Celest::User';
END;

----------------------------------------------
-------------- /Cedar Triggers ---------------
----------------------------------------------

-- Stores email addresses for Celest Cloud users.
CREATE TABLE IF NOT EXISTS cloud_auth_user_emails (
    -- The user's unique identifier.
    user_id TEXT NOT NULL,

    -- The user's sanitized email address.
    email TEXT NOT NULL,

    -- The email address's verification status.
    is_verified BOOLEAN NOT NULL DEFAULT FALSE,

    -- The email address's primary status.
    is_primary BOOLEAN NOT NULL DEFAULT FALSE,

    CONSTRAINT cloud_auth_user_emails_pk PRIMARY KEY (user_id, email),

    CONSTRAINT cloud_auth_user_emails_user_fk FOREIGN KEY (user_id) REFERENCES cloud_auth_users(user_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
) WITHOUT ROWID WITH Email;

-- Stores phone numbers for Celest Cloud users.
CREATE TABLE IF NOT EXISTS cloud_auth_user_phone_numbers (
    -- The user's unique identifier.
    user_id TEXT NOT NULL,

    -- The user's sanitized phone number.
    phone_number TEXT NOT NULL,

    -- The phone number's verification status.
    is_verified BOOLEAN NOT NULL DEFAULT FALSE,

    -- The phone number's primary status.
    is_primary BOOLEAN NOT NULL DEFAULT FALSE,

    CONSTRAINT cloud_auth_user_phone_numbers_pk PRIMARY KEY (user_id, phone_number),

    CONSTRAINT cloud_auth_user_phone_numbers_user_fk FOREIGN KEY (user_id) REFERENCES cloud_auth_users(user_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
) WITHOUT ROWID WITH PhoneNumber;

CREATE VIEW IF NOT EXISTS cloud_auth_users_view AS
    SELECT 
        cloud_auth_users.*,
        (
            SELECT json_group_array(
                json_object(
                    'email', email,
                    'isVerified', iif(is_verified, json('true'), json('false')),
                    'isPrimary', iif(is_primary, json('true'), json('false'))
                )
            )
            FROM cloud_auth_user_emails
            WHERE user_id = cloud_auth_users.user_id
        ) MAPPED BY `const EmailsConverter()` AS emails,
        (
            SELECT json_group_array(
                json_object(
                    'phoneNumber', phone_number,
                    'isVerified', iif(is_verified, json('true'), json('false')),
                    'isPrimary', iif(is_primary, json('true'), json('false'))
                )
            )
            FROM cloud_auth_user_phone_numbers
            WHERE user_id = cloud_auth_users.user_id
        ) MAPPED BY `const PhoneNumbersConverter()` AS phone_numbers,
        (
            SELECT json_group_array(
                json_object('type', 'Celest::Role', 'id', parent_id)
            )
            FROM
                cedar_relationships
            WHERE 
                entity_type = 'Celest::User'
            AND entity_id = cloud_auth_users.user_id
            AND parent_type = 'Celest::Role'
        ) MAPPED BY `const CedarEntityUidsConverter()` AS roles
    FROM cloud_auth_users;

createUser:
    INSERT INTO cloud_auth_users (user_id, given_name, family_name, time_zone, language_code)
    VALUES (:user_id, :given_name, :family_name, :time_zone, :language_code)
    RETURNING *;

getUser WITH User:
    SELECT * FROM cloud_auth_users_view
    WHERE user_id = :user_id;

listUsers(
    :start_time AS DATETIME OR NULL,
    :offset AS INTEGER,
    :limit AS INTEGER
):
    WITH rowed AS(
        SELECT 
            ROW_NUMBER() OVER (ORDER BY create_time DESC) AS row_num,
            user_id
        FROM cloud_auth_users
        WHERE
            cloud_auth_users.create_time < coalesce(:start_time, unixepoch('now', '+1 second', 'subsec'))
    )
    SELECT
        row_num,
        cloud_auth_users_view.**
    FROM cloud_auth_users_view
    INNER JOIN rowed ON cloud_auth_users_view.user_id = rowed.user_id
    WHERE row_num > :offset
    ORDER BY $order_by
    LIMIT :limit;

deleteUser:
    DELETE FROM cloud_auth_users
    WHERE user_id = :user_id;

upsertUserEmail(
    :is_verified AS BOOLEAN OR NULL, 
    :is_primary AS BOOLEAN OR NULL
): 
    INSERT INTO cloud_auth_user_emails (user_id, email, is_verified, is_primary)
    VALUES (
        :user_id, 
        :email, 
        coalesce(:is_verified, FALSE), 
        coalesce(
            :is_primary,
            (SELECT count(*) = 0 FROM cloud_auth_user_emails WHERE user_id = :user_id)
        )
    )
    ON CONFLICT(user_id, email) DO UPDATE SET
        is_verified = coalesce(:is_verified, excluded.is_verified),
        is_primary = coalesce(:is_primary, excluded.is_primary)
    RETURNING *;

getUserEmails:
    SELECT * FROM cloud_auth_user_emails
    WHERE user_id = :user_id;

lookupUserByEmail WITH User:
    WITH user_data AS (
        SELECT cloud_auth_users.user_id FROM cloud_auth_users
        INNER JOIN cloud_auth_user_emails ON cloud_auth_users.user_id = cloud_auth_user_emails.user_id
        WHERE 
            cloud_auth_user_emails.email = :email
        AND cloud_auth_user_emails.is_verified
        AND cloud_auth_user_emails.is_primary
        LIMIT 1
    )
    SELECT * FROM cloud_auth_users_view
    WHERE user_id = (SELECT user_id FROM user_data);

deleteUserEmail:
    DELETE FROM cloud_auth_user_emails
    WHERE user_id = :user_id AND email = :email;

upsertUserPhoneNumber(
    :is_verified AS BOOLEAN OR NULL, 
    :is_primary AS BOOLEAN OR NULL
):
    INSERT INTO cloud_auth_user_phone_numbers (user_id, phone_number, is_verified, is_primary)
    VALUES (
        :user_id, 
        :phone_number,
        coalesce(:is_verified, FALSE), 
        coalesce(
            :is_primary,
            (SELECT count(*) = 0 FROM cloud_auth_user_phone_numbers WHERE user_id = :user_id)
        )
    )
    ON CONFLICT(user_id, phone_number) DO UPDATE SET
        is_verified = coalesce(:is_verified, excluded.is_verified),
        is_primary = coalesce(:is_primary, excluded.is_primary)
    RETURNING *;

getUserPhoneNumbers:
    SELECT * FROM cloud_auth_user_phone_numbers
    WHERE user_id = :user_id;

lookupUserByPhone WITH User:
    WITH user_data AS (
        SELECT cloud_auth_users.user_id FROM cloud_auth_users
        INNER JOIN cloud_auth_user_phone_numbers ON cloud_auth_users.user_id = cloud_auth_user_phone_numbers.user_id
        WHERE 
            cloud_auth_user_phone_numbers.phone_number = :phone_number
        AND cloud_auth_user_phone_numbers.is_verified
        AND cloud_auth_user_phone_numbers.is_primary
        LIMIT 1
    )
    SELECT * FROM cloud_auth_users_view
    WHERE user_id = (SELECT user_id FROM user_data);

deleteUserPhoneNumber:
    DELETE FROM cloud_auth_user_phone_numbers
    WHERE user_id = :user_id AND phone_number = :phone_number;
