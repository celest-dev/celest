import 'cedar.drift';
import 'cloud_auth_users.drift';

import 'schema_imports.dart';

-- Stores crypto key metadata
CREATE TABLE IF NOT EXISTS cloud_auth_crypto_keys (
    -- The unique identifier of the key.
    crypto_key_id BLOB NOT NULL PRIMARY KEY,

    -- The key's purpose.
    key_purpose TEXT NOT NULL,

    -- The key's algorithm.
    key_algorithm TEXT NOT NULL,

    -- The key material.
    --
    -- Either `key_material` or `external_crypto_key_id` must be set.
    key_material BLOB,

    -- The key's external ID, if managed outside of Celest.
    --
    -- Either `key_material` or `external_crypto_key_id` must be set.
    external_crypto_key_id TEXT UNIQUE,

    CHECK (key_material IS NOT NULL OR external_crypto_key_id IS NOT NULL)
) WITH CryptoKey;

CREATE INDEX IF NOT EXISTS cloud_auth_crypto_keys_external_crypto_key_id_idx ON cloud_auth_crypto_keys(external_crypto_key_id);

-- Stores ongoing authentication sessions.
CREATE TABLE IF NOT EXISTS cloud_auth_sessions (
    -- Explicit rowid for codegen.
    rowid INTEGER PRIMARY KEY AUTOINCREMENT,
    
    -- The unique identifier of the session.
    --
    -- Format: sess_<typeid>
    session_id TEXT NOT NULL UNIQUE,

    -- The ID of the HMAC key for the session, which signs the continuation tokens
    -- and mints HOTP codes.
    --
    -- RFC4226 recommends 160 bits of entropy for HMAC-SHA1.
    crypto_key_id BLOB NOT NULL,

    -- The ID of the user who started the session.
    --
    -- All sessions belong to a user, even if the user is anonymous.
    user_id TEXT NOT NULL,

    -- Client information for the session.
    client_info BLOB MAPPED BY `const SessionClientConverter()`,

    -- The authentication factor used to start the session.
    authentication_factor BLOB NOT NULL MAPPED BY `const AuthenticationFactorConverter()`,

    -- The state of the session.
    --
    -- This is used to track the progress of the session.
    state BLOB MAPPED BY `const SessionStateConverter()`,

    -- The IP address of the client who started the session.
    ip_address TEXT,

    -- The ID of the external session, if any.
    --
    -- This field can be used to link the HOTP code to a corresponding session in
    -- another system.
    external_session_id TEXT,

    create_time `const TimestampType()` NOT NULL DEFAULT (unixepoch('now', 'subsec')),
    update_time `const TimestampType()`,
    expire_time `const TimestampType()` NOT NULL,

    CONSTRAINT cloud_auth_sessions_user_fk FOREIGN KEY (user_id) REFERENCES cloud_auth_users(user_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED,

    CONSTRAINT cloud_auth_sessions_key_fk FOREIGN KEY (crypto_key_id) REFERENCES cloud_auth_crypto_keys(crypto_key_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
) WITH Session;

-- Index for the session's FK.
CREATE INDEX IF NOT EXISTS cloud_auth_sessions_user_idx ON cloud_auth_sessions(user_id);
CREATE INDEX IF NOT EXISTS cloud_auth_sessions_crypto_key_idx ON cloud_auth_sessions(crypto_key_id);
CREATE INDEX IF NOT EXISTS cloud_auth_sessions_external_session_id_idx ON cloud_auth_sessions(external_session_id);

-- Trigger to update the update_time when a session is updated.
CREATE TRIGGER IF NOT EXISTS cloud_auth_sessions_update_time_trg
AFTER UPDATE ON cloud_auth_sessions
BEGIN
    UPDATE cloud_auth_sessions
    SET update_time = unixepoch('now', 'subsec')
    WHERE rowid = OLD.rowid;
END;

-- Stores HOTP parameters for ongoing authentication sessions.
CREATE TABLE IF NOT EXISTS cloud_auth_otp_codes (
    -- The row ID which serves as the HOTP counter.
    rowid INTEGER PRIMARY KEY AUTOINCREMENT,

    -- The ID of the session.
    session_id TEXT NOT NULL UNIQUE,

    -- The counter value for the HOTP code.
    resend_attempt INTEGER NOT NULL DEFAULT 0,

    -- The throttling parameter for bruteforce prevention.
    verify_attempt INTEGER NOT NULL DEFAULT 0,

    -- The time the HOTP code was last used.
    update_time `const TimestampType()` NOT NULL DEFAULT (unixepoch('now', 'subsec')),

    CONSTRAINT cloud_auth_otp_codes_session_id_fk FOREIGN KEY (session_id) REFERENCES cloud_auth_sessions(session_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
);

-- Index for the HOTP code's FK.
CREATE INDEX IF NOT EXISTS cloud_auth_otp_codes_session_id_idx ON cloud_auth_otp_codes(session_id);

-- Stores corks for Celest Cloud user sessions.
CREATE TABLE IF NOT EXISTS cloud_auth_corks (
    -- The unique identifier for the cork and its root key.
    cork_id BLOB NOT NULL PRIMARY KEY,

    -- The ID of the HMAC key used to sign the cork.
    --
    -- This is typically derived from the organization's root key.
    crypto_key_id BLOB NOT NULL,

    -- The Cedar type of the bearer entity.
    --
    -- For example, `Celest::User` or `Celest::ServiceAccount`.
    bearer_type TEXT,

    -- The unique identifier of the bearer entity.
    bearer_id TEXT,

    -- The Cedar type of the audience entity.
    --
    -- For example, `Celest::Service` or `Celest::Api`.
    audience_type TEXT,

    -- The unique identifier of the audience entity.
    audience_id TEXT,

    -- The Cedar type of the issuer entity.
    --
    -- For example, `Celest::Organization` or `Celest::Service`.
    issuer_type TEXT,

    -- The unique identifier of the issuer entity.
    issuer_id TEXT,

    -- The time the cork was created.
    create_time `const TimestampType()` NOT NULL DEFAULT (unixepoch('now', 'subsec')),

    -- The time the cork will expire.
    expire_time `const TimestampType()`,

    -- The time the cork was last used.
    last_use_time `const TimestampType()`,

    CONSTRAINT cloud_auth_corks_crypto_key_fk FOREIGN KEY (crypto_key_id) REFERENCES cloud_auth_crypto_keys(crypto_key_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED,

    CONSTRAINT cloud_auth_corks_bearer_fk FOREIGN KEY (bearer_type, bearer_id) REFERENCES cedar_entities(entity_type, entity_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED,

    CONSTRAINT cloud_auth_corks_audience_fk FOREIGN KEY (audience_type, audience_id) REFERENCES cedar_entities(entity_type, entity_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED,

    CONSTRAINT cloud_auth_corks_issuer_fk FOREIGN KEY (issuer_type, issuer_id) REFERENCES cedar_entities(entity_type, entity_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
);

-- Index for the cork's FK.
CREATE INDEX IF NOT EXISTS cloud_auth_corks_crypto_key_idx ON cloud_auth_corks(crypto_key_id);
CREATE INDEX IF NOT EXISTS cloud_auth_corks_bearer_idx ON cloud_auth_corks(bearer_type, bearer_id);
CREATE INDEX IF NOT EXISTS cloud_auth_corks_audience_idx ON cloud_auth_corks(audience_type, audience_id);
CREATE INDEX IF NOT EXISTS cloud_auth_corks_issuer_idx ON cloud_auth_corks(issuer_type, issuer_id);

-- Creates a new crypto key.
createCryptoKey:
    INSERT INTO cloud_auth_crypto_keys(
        crypto_key_id, 
        key_purpose, 
        key_algorithm, 
        key_material, 
        external_crypto_key_id
    )
    VALUES (
        :crypto_key_id, 
        :key_purpose, 
        :key_algorithm, 
        :key_material, 
        :external_crypto_key_id
    )
    ON CONFLICT DO NOTHING
    RETURNING *;

-- Retrieves the crypto key for the given ID.
getCryptoKey:
    SELECT * FROM cloud_auth_crypto_keys
    WHERE crypto_key_id = :crypto_key_id;

-- Retrieves the external crypto key for the given ID.
getExternalCryptoKey:
    SELECT * FROM cloud_auth_crypto_keys
    WHERE external_crypto_key_id = :external_crypto_key_id;

-- Finds the crypto key for the given purpose.
findCryptoKey:
    SELECT * FROM cloud_auth_crypto_keys
    WHERE key_purpose = :key_purpose
    AND key_algorithm = :key_algorithm;

-- Deletes the crypto key for the given ID.
deleteCryptoKey:
    DELETE FROM cloud_auth_crypto_keys
    WHERE crypto_key_id = :crypto_key_id;

-- Creates a new auth session.
createSession:
    INSERT INTO cloud_auth_sessions(
        session_id, 
        crypto_key_id, 
        user_id, 
        client_info, 
        authentication_factor, 
        state, 
        ip_address, 
        expire_time, 
        external_session_id
    )
    VALUES (
        :session_id, 
        :crypto_key_id, 
        :user_id, 
        :client_info, 
        :authentication_factor, 
        :state, 
        :ip_address, 
        :expire_time, 
        :external_session_id
    )
    RETURNING *;

-- Retrieves the auth session for the given ID.
getSession: 
    SELECT * FROM cloud_auth_sessions
    WHERE cloud_auth_sessions.session_id = :session_id
    OR    cloud_auth_sessions.external_session_id = :session_id;

-- Updates the state of the auth session for the given ID.
updateSession:
    UPDATE cloud_auth_sessions
    SET 
        state = :state,
        user_id = :user_id,
        expire_time = :expire_time
    WHERE 
        session_id = :session_id
    OR  external_session_id = :session_id
    RETURNING *;

-- Deletes the auth session for the given ID.
deleteSession:
    DELETE FROM cloud_auth_sessions
    WHERE 
        session_id = :session_id
    OR  external_session_id = :session_id;

-- Creates a cork in the database.
createCork:
    INSERT INTO cloud_auth_corks(
        cork_id, 
        crypto_key_id, 
        bearer_type, 
        bearer_id, 
        audience_type, 
        audience_id, 
        issuer_type, 
        issuer_id, 
        expire_time
    )
    VALUES (
        :cork_id, 
        :crypto_key_id, 
        :bearer_type, 
        :bearer_id, 
        :audience_type, 
        :audience_id, 
        :issuer_type, 
        :issuer_id, 
        :expire_time
    );

upsertCork:
    INSERT INTO cloud_auth_corks(
        cork_id, 
        crypto_key_id, 
        bearer_type, 
        bearer_id, 
        audience_type, 
        audience_id, 
        issuer_type, 
        issuer_id, 
        expire_time
    )
    VALUES (
        :cork_id, 
        :crypto_key_id, 
        :bearer_type, 
        :bearer_id, 
        :audience_type, 
        :audience_id, 
        :issuer_type, 
        :issuer_id, 
        :expire_time
    )
    ON CONFLICT(cork_id) DO UPDATE SET
        crypto_key_id = excluded.crypto_key_id,
        bearer_type = excluded.bearer_type,
        bearer_id = excluded.bearer_id,
        audience_type = excluded.audience_type,
        audience_id = excluded.audience_id,
        issuer_type = excluded.issuer_type,
        issuer_id = excluded.issuer_id,
        expire_time = excluded.expire_time;

-- Retrieves the cork for the given ID.
getCork:
    SELECT * FROM cloud_auth_corks
    WHERE cork_id = :cork_id;

-- Deletes the cork for the given ID.
deleteCork:
    DELETE FROM cloud_auth_corks
    WHERE cork_id = :cork_id;

-- Revokes all cloud_auth_corks under the given entity.
deletecloud_auth_corksForEntity(
    :bearer_type AS TEXT OR NULL,
    :bearer_id AS TEXT OR NULL,
    :audience_type AS TEXT OR NULL,
    :audience_id AS TEXT OR NULL,
    :issuer_type AS TEXT OR NULL,
    :issuer_id AS TEXT OR NULL
):
    DELETE FROM cloud_auth_corks
    WHERE
        (:bearer_type IS NULL OR bearer_type = :bearer_type)
    AND (:bearer_id IS NULL OR bearer_id = :bearer_id)
    AND (:audience_type IS NULL OR audience_type = :audience_type)
    AND (:audience_id IS NULL OR audience_id = :audience_id)
    AND (:issuer_type IS NULL OR issuer_type = :issuer_type)
    AND (:issuer_id IS NULL OR issuer_id = :issuer_id)
    RETURNING cork_id;

-- Creates a new HOTP code for the given session.
upsertOtpCode(
    :session_id,
    :resend_attempt AS INTEGER OR NULL, 
    :verify_attempt AS INTEGER OR NULL
):
    INSERT INTO cloud_auth_otp_codes(session_id, resend_attempt, verify_attempt)
    VALUES (:session_id, coalesce(:resend_attempt, 0), coalesce(:verify_attempt, 0))
    ON CONFLICT(session_id) DO UPDATE
    SET
        resend_attempt = coalesce(:resend_attempt, resend_attempt), 
        verify_attempt = coalesce(:verify_attempt, verify_attempt)
    RETURNING *;

-- Updates the HOTP code for the given session.
updateOtpCode(
    :resend_attempt AS INTEGER OR NULL, 
    :verify_attempt AS INTEGER OR NULL
):
    UPDATE cloud_auth_otp_codes
    SET
        resend_attempt = coalesce(:resend_attempt, resend_attempt), 
        verify_attempt = coalesce(:verify_attempt, verify_attempt)
    WHERE session_id = :session_id
    RETURNING *;

-- Retrieves the HOTP code for the given session.
getOtpCode:
    SELECT * FROM cloud_auth_otp_codes
    WHERE session_id = :session_id;
