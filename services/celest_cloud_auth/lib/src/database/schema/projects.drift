import 'cedar.drift';

import 'schema_imports.dart';

-- Stores Celest project metadata.
CREATE TABLE IF NOT EXISTS celest_projects (
    -- The unique identifier of the project.
    project_id TEXT NOT NULL PRIMARY KEY,

    -- The version of the project.
    version TEXT NOT NULL,

    -- The resolved AST.
    --
    -- Format: Proto[celest.ast.v1.ResolvedProject]
    resolved_ast BLOB NOT NULL
        MAPPED BY `const ResolvedProjectConverter()`,

    -- A hash of the project metadata.
    etag TEXT NOT NULL
);

-- Stores Celest API metadata.
CREATE TABLE IF NOT EXISTS celest_apis (
    -- The unique identifier of the API.
    api_id TEXT NOT NULL PRIMARY KEY,

    -- The project ID of the API.
    project_id TEXT NOT NULL,

    -- The resolved AST.
    --
    -- Format: Proto[celest.ast.v1.ResolvedApi]
    resolved_ast BLOB NOT NULL
        MAPPED BY `const ResolvedApiConverter()`,

    -- A hash of the API metadata.
    etag TEXT NOT NULL,

    CONSTRAINT celest_apis_project_fk FOREIGN KEY (project_id) REFERENCES celest_projects(project_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
);

-- Indexes for the API's FKs.
CREATE INDEX IF NOT EXISTS celest_apis_project_idx ON celest_apis(project_id);

----------------------------------------------
-------------- Cedar Triggers ----------------
----------------------------------------------

-- This trigger is used to create the Cedar entity when a row is inserted.
CREATE TRIGGER IF NOT EXISTS celest_apis_trigger_create
BEFORE INSERT ON celest_apis
BEGIN
    INSERT INTO cedar_entities(entity_type, entity_id)
    VALUES ('Celest::Api', NEW.api_id);
END;

-- This trigger is used to delete the entity and relationships when a row is deleted.
CREATE TRIGGER IF NOT EXISTS celest_apis_trigger_delete
AFTER DELETE ON celest_apis
BEGIN
    DELETE FROM cedar_relationships
    WHERE 
        entity_type = 'Celest::Api'
        AND entity_id = OLD.api_id;
    DELETE FROM cedar_relationships
    WHERE 
        parent_type = 'Celest::Api'
        AND parent_id = OLD.api_id;
    DELETE FROM cedar_entities
    WHERE
        entity_type = 'Celest::Api'
        AND entity_id = OLD.api_id;
END;

----------------------------------------------
-------------- /Cedar Triggers ---------------
----------------------------------------------

-- Stores Celest function metadata.
CREATE TABLE IF NOT EXISTS celest_functions (
    -- The unique identifier of the function.
    function_id TEXT NOT NULL PRIMARY KEY,

    -- The API ID of the function.
    api_id TEXT NOT NULL,

    -- The resolved function AST.
    --
    -- Format: Proto[celest.ast.v1.ResolvedFunction]
    resolved_ast BLOB NOT NULL
        MAPPED BY `const ResolvedFunctionConverter()`,

    -- A hash of the function metadata.
    etag TEXT NOT NULL,

    CONSTRAINT celest_functions_api_fk FOREIGN KEY (api_id) REFERENCES celest_apis(api_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
);

-- Indexes for the function's FKs.
CREATE INDEX IF NOT EXISTS celest_functions_api_idx ON celest_functions(api_id);

----------------------------------------------
-------------- Cedar Triggers ----------------
----------------------------------------------

-- This trigger is used to create the Cedar entity when a row is inserted.
CREATE TRIGGER IF NOT EXISTS celest_functions_trigger_create
BEFORE INSERT ON celest_functions
BEGIN
    INSERT INTO cedar_entities(entity_type, entity_id)
    VALUES ('Celest::Function', NEW.function_id);
    INSERT INTO cedar_relationships(entity_type, entity_id, parent_type, parent_id)
    VALUES ('Celest::Function', NEW.function_id, 'Celest::Api', NEW.api_id);
END;

-- This trigger is used to delete the entity and relationships when a row is deleted.
CREATE TRIGGER IF NOT EXISTS celest_functions_trigger_delete
AFTER DELETE ON celest_functions
BEGIN
    DELETE FROM cedar_relationships
    WHERE 
        entity_type = 'Celest::Function'
        AND entity_id = OLD.function_id;
    DELETE FROM cedar_relationships
    WHERE 
        parent_type = 'Celest::Function'
        AND parent_id = OLD.function_id;
    DELETE FROM cedar_entities
    WHERE
        entity_type = 'Celest::Function'
        AND entity_id = OLD.function_id;
END;

----------------------------------------------
-------------- /Cedar Triggers ---------------
----------------------------------------------

upsertProject:
    INSERT INTO celest_projects (project_id, version, resolved_ast, etag)
    VALUES (:project_id, :version, :resolved_ast, :etag)
    ON CONFLICT(project_id) DO UPDATE SET
        version = excluded.version,
        resolved_ast = excluded.resolved_ast,
        etag = excluded.etag
    RETURNING *;

getProject:
    SELECT * FROM celest_projects
    WHERE project_id = :project_id;

upsertApi:
    INSERT INTO celest_apis (api_id, project_id, resolved_ast, etag)
    VALUES (:api_id, :project_id, :resolved_ast, :etag)
    ON CONFLICT(api_id) DO UPDATE SET
        project_id = excluded.project_id,
        resolved_ast = excluded.resolved_ast,
        etag = excluded.etag
    RETURNING *;

getApi:
    SELECT * FROM celest_apis
    WHERE api_id = :api_id;

listApis:
    SELECT * FROM celest_apis
    WHERE project_id = :project_id;

upsertFunction:
    INSERT INTO celest_functions (function_id, api_id, resolved_ast, etag)
    VALUES (:function_id, :api_id, :resolved_ast, :etag)
    ON CONFLICT(function_id) DO UPDATE SET
        api_id = excluded.api_id,
        resolved_ast = excluded.resolved_ast,
        etag = excluded.etag
    RETURNING *;

getFunction:
    SELECT * FROM celest_functions
    WHERE function_id = :function_id;

listFunctions:
    SELECT * FROM celest_functions
    WHERE api_id = :api_id;
