// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'dart:typed_data' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    cloudAuthUsers,
    cedarTypes,
    cedarEntities,
    cloudAuthUsersCreateTrg,
    cedarRelationships,
    cloudAuthUsersDeleteTrg,
    cloudAuthUserEmails,
    cloudAuthUserPhoneNumbers,
    cloudAuthUsersView,
    cloudAuthProjects,
    cloudAuthApis,
    cloudAuthApisProjectIdx,
    cloudAuthApisCreateTrg,
    cloudAuthApisDeleteTrg,
    cloudAuthFunctions,
    cloudAuthFunctionsApiIdx,
    cloudAuthFunctionsCreateTrg,
    cloudAuthFunctionsDeleteTrg,
    cloudAuthMeta,
    i1.OnCreateQuery(
      'INSERT INTO cloud_auth_meta (schema_version) VALUES (6) ON CONFLICT DO NOTHING',
    ),
    cloudAuthCryptoKeys,
    cloudAuthCryptoKeysExternalCryptoKeyIdIdx,
    cloudAuthSessions,
    cloudAuthSessionsUserIdx,
    cloudAuthSessionsCryptoKeyIdx,
    cloudAuthSessionsExternalSessionIdIdx,
    cloudAuthSessionsUpdateTimeTrg,
    cloudAuthOtpCodes,
    cloudAuthOtpCodesSessionIdIdx,
    cloudAuthCorks,
    cloudAuthCorksCryptoKeyIdx,
    cloudAuthCorksBearerIdx,
    cloudAuthCorksAudienceIdx,
    cloudAuthCorksIssuerIdx,
    cedarRelationshipsFkEntityIdx,
    cedarRelationshipsFkParentIdx,
    cedarPolicies,
    cedarPolicyTemplates,
    cedarPolicyTemplateLinks,
    cedarPolicyTemplateLinksFkTemplateIdIdx,
    cedarPolicyTemplateLinksFkPrincipalIdx,
    cedarPolicyTemplateLinksFkResourceIdx,
    cedarAuthorizationLogs,
    userMemberships,
    userMembershipsParentIdx,
    userMembershipsCreateTrg,
    userMembershipsUpdateTrg,
    userMembershipsDeleteTrg,
    organizations,
    organizationsDeleteUserMembershipsTrg,
    projects,
    projectsDeleteUserMembershipsTrg,
    projectEnvironments,
    projectEnvironmentsDeleteUserMembershipsTrg,
    projectEnvironmentsParentIdx,
    projectEnvironmentsUpdateTimeTrg,
    projectEnvironmentsCreateTrg,
    projectEnvironmentsSetParentTrg,
    projectEnvironmentsDeleteTrg,
    projectEnvironmentAsts,
    projectEnvironmentAssets,
    tursoDatabases,
    projectEnvironmentStates,
    idxProjectEnvironmentTursoDatabase,
    projectsFkParentIdx,
    projectsUpdateTimeTrg,
    projectsCreateTrg,
    projectsSetParentTrg,
    projectsDeleteTrg,
    organizationsParentIdx,
    organizationsUpdateTime,
    organizationsCreate,
    organizationsCreateParent,
    organizationsAddParent,
    organizationsSetParent,
    organizationsRemoveParent,
    organizationsDelete,
    operations,
    operationsFkOwnerIdx,
    operationsFkResourceIdx,
    operationsTriggerCreate,
    operationsTriggerCreateOwner,
    operationsTriggerCreateResource,
    operationsTriggerAddOwner,
    operationsTriggerAddResource,
    operationsTriggerSetOwner,
    operationsTriggerSetResource,
    operationsTriggerDelete,
  ];
  late final Shape0 cloudAuthUsers = Shape0(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_users',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 cedarTypes = Shape1(
    source: i0.VersionedTable(
      entityName: 'cedar_types',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_7],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 cedarEntities = Shape2(
    source: i0.VersionedTable(
      entityName: 'cedar_entities',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cedar_entities_pk PRIMARY KEY(entity_type, entity_id)ON CONFLICT IGNORE',
      ],
      columns: [_column_8, _column_9, _column_10, _column_11],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Trigger cloudAuthUsersCreateTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS cloud_auth_users_create_trg BEFORE INSERT ON cloud_auth_users BEGIN INSERT INTO cedar_entities (entity_type, entity_id) VALUES (\'Celest::User\', NEW.user_id);END',
    'cloud_auth_users_create_trg',
  );
  late final Shape3 cedarRelationships = Shape3(
    source: i0.VersionedTable(
      entityName: 'cedar_relationships',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cedar_relationships_pk PRIMARY KEY(entity_type, entity_id, parent_type, parent_id)ON CONFLICT IGNORE',
        'CONSTRAINT cedar_relationships_fk_entity FOREIGN KEY(entity_type, entity_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE CASCADE',
        'CONSTRAINT cedar_relationships_fk_parent FOREIGN KEY(parent_type, parent_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE CASCADE',
      ],
      columns: [
        _column_12,
        _column_9,
        _column_11,
        _column_13,
        _column_14,
        _column_15,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Trigger cloudAuthUsersDeleteTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS cloud_auth_users_delete_trg AFTER DELETE ON cloud_auth_users BEGIN DELETE FROM cedar_relationships WHERE(entity_type = \'Celest::User\' AND entity_id = OLD.user_id)OR(parent_type = \'Celest::User\' AND parent_id = OLD.user_id);DELETE FROM cedar_entities WHERE entity_id = OLD.user_id AND entity_type = \'Celest::User\';END',
    'cloud_auth_users_delete_trg',
  );
  late final Shape4 cloudAuthUserEmails = Shape4(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_user_emails',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cloud_auth_user_emails_pk PRIMARY KEY(user_id, email)',
        'CONSTRAINT cloud_auth_user_emails_user_fk FOREIGN KEY(user_id)REFERENCES cloud_auth_users(user_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
      ],
      columns: [_column_16, _column_17, _column_18, _column_19],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 cloudAuthUserPhoneNumbers = Shape5(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_user_phone_numbers',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cloud_auth_user_phone_numbers_pk PRIMARY KEY(user_id, phone_number)',
        'CONSTRAINT cloud_auth_user_phone_numbers_user_fk FOREIGN KEY(user_id)REFERENCES cloud_auth_users(user_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
      ],
      columns: [_column_16, _column_20, _column_18, _column_19],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape6 cloudAuthUsersView = Shape6(
    source: i0.VersionedView(
      entityName: 'cloud_auth_users_view',
      createViewStmt:
          'CREATE VIEW IF NOT EXISTS cloud_auth_users_view AS SELECT cloud_auth_users.*, (SELECT json_group_array(json_object(\'email\', email, \'isVerified\', iif(is_verified, json(\'true\'), json(\'false\')), \'isPrimary\', iif(is_primary, json(\'true\'), json(\'false\')))) FROM cloud_auth_user_emails WHERE user_id = cloud_auth_users.user_id) AS emails, (SELECT json_group_array(json_object(\'phoneNumber\', phone_number, \'isVerified\', iif(is_verified, json(\'true\'), json(\'false\')), \'isPrimary\', iif(is_primary, json(\'true\'), json(\'false\')))) FROM cloud_auth_user_phone_numbers WHERE user_id = cloud_auth_users.user_id) AS phone_numbers, (SELECT json_group_array(json_object(\'type\', \'Celest::Role\', \'id\', parent_id)) FROM cedar_relationships WHERE entity_type = \'Celest::User\' AND entity_id = cloud_auth_users.user_id AND parent_type = \'Celest::Role\') AS roles FROM cloud_auth_users;',
      columns: [
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
        _column_29,
        _column_30,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape7 cloudAuthProjects = Shape7(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_projects',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_31, _column_32, _column_33, _column_34],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape8 cloudAuthApis = Shape8(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_apis',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cloud_auth_apis_project_fk FOREIGN KEY(project_id)REFERENCES cloud_auth_projects(project_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
      ],
      columns: [_column_35, _column_36, _column_33, _column_34],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index cloudAuthApisProjectIdx = i1.Index(
    'cloud_auth_apis_project_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_apis_project_idx ON cloud_auth_apis (project_id)',
  );
  final i1.Trigger cloudAuthApisCreateTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS cloud_auth_apis_create_trg BEFORE INSERT ON cloud_auth_apis BEGIN INSERT INTO cedar_entities (entity_type, entity_id) VALUES (\'Celest::Api\', NEW.api_id);END',
    'cloud_auth_apis_create_trg',
  );
  final i1.Trigger cloudAuthApisDeleteTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS cloud_auth_apis_delete_trg AFTER DELETE ON cloud_auth_apis BEGIN DELETE FROM cedar_relationships WHERE entity_type = \'Celest::Api\' AND entity_id = OLD.api_id;DELETE FROM cedar_relationships WHERE parent_type = \'Celest::Api\' AND parent_id = OLD.api_id;DELETE FROM cedar_entities WHERE entity_type = \'Celest::Api\' AND entity_id = OLD.api_id;END',
    'cloud_auth_apis_delete_trg',
  );
  late final Shape9 cloudAuthFunctions = Shape9(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_functions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cloud_auth_functions_api_fk FOREIGN KEY(api_id)REFERENCES cloud_auth_apis(api_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
      ],
      columns: [_column_37, _column_38, _column_33, _column_34],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index cloudAuthFunctionsApiIdx = i1.Index(
    'cloud_auth_functions_api_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_functions_api_idx ON cloud_auth_functions (api_id)',
  );
  final i1.Trigger cloudAuthFunctionsCreateTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS cloud_auth_functions_create_trg BEFORE INSERT ON cloud_auth_functions BEGIN INSERT INTO cedar_entities (entity_type, entity_id) VALUES (\'Celest::Function\', NEW.function_id);INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Function\', NEW.function_id, \'Celest::Api\', NEW.api_id);END',
    'cloud_auth_functions_create_trg',
  );
  final i1.Trigger cloudAuthFunctionsDeleteTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS cloud_auth_functions_delete_trg AFTER DELETE ON cloud_auth_functions BEGIN DELETE FROM cedar_relationships WHERE entity_type = \'Celest::Function\' AND entity_id = OLD.function_id;DELETE FROM cedar_relationships WHERE parent_type = \'Celest::Function\' AND parent_id = OLD.function_id;DELETE FROM cedar_entities WHERE entity_type = \'Celest::Function\' AND entity_id = OLD.function_id;END',
    'cloud_auth_functions_delete_trg',
  );
  late final Shape10 cloudAuthMeta = Shape10(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_meta',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_39],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape11 cloudAuthCryptoKeys = Shape11(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_crypto_keys',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CHECK(key_material IS NOT NULL OR external_crypto_key_id IS NOT NULL)',
      ],
      columns: [_column_40, _column_41, _column_42, _column_43, _column_44],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index cloudAuthCryptoKeysExternalCryptoKeyIdIdx = i1.Index(
    'cloud_auth_crypto_keys_external_crypto_key_id_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_crypto_keys_external_crypto_key_id_idx ON cloud_auth_crypto_keys (external_crypto_key_id)',
  );
  late final Shape12 cloudAuthSessions = Shape12(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_sessions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cloud_auth_sessions_user_fk FOREIGN KEY(user_id)REFERENCES cloud_auth_users(user_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
        'CONSTRAINT cloud_auth_sessions_key_fk FOREIGN KEY(crypto_key_id)REFERENCES cloud_auth_crypto_keys(crypto_key_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
      ],
      columns: [
        _column_45,
        _column_46,
        _column_47,
        _column_16,
        _column_48,
        _column_49,
        _column_50,
        _column_51,
        _column_52,
        _column_5,
        _column_6,
        _column_53,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index cloudAuthSessionsUserIdx = i1.Index(
    'cloud_auth_sessions_user_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_sessions_user_idx ON cloud_auth_sessions (user_id)',
  );
  final i1.Index cloudAuthSessionsCryptoKeyIdx = i1.Index(
    'cloud_auth_sessions_crypto_key_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_sessions_crypto_key_idx ON cloud_auth_sessions (crypto_key_id)',
  );
  final i1.Index cloudAuthSessionsExternalSessionIdIdx = i1.Index(
    'cloud_auth_sessions_external_session_id_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_sessions_external_session_id_idx ON cloud_auth_sessions (external_session_id)',
  );
  final i1.Trigger cloudAuthSessionsUpdateTimeTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS cloud_auth_sessions_update_time_trg AFTER UPDATE ON cloud_auth_sessions BEGIN UPDATE cloud_auth_sessions SET update_time = unixepoch(\'now\', \'subsec\') WHERE "rowid" = OLD."rowid";END',
    'cloud_auth_sessions_update_time_trg',
  );
  late final Shape13 cloudAuthOtpCodes = Shape13(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_otp_codes',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cloud_auth_otp_codes_session_id_fk FOREIGN KEY(session_id)REFERENCES cloud_auth_sessions(session_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
      ],
      columns: [_column_45, _column_46, _column_54, _column_55, _column_56],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index cloudAuthOtpCodesSessionIdIdx = i1.Index(
    'cloud_auth_otp_codes_session_id_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_otp_codes_session_id_idx ON cloud_auth_otp_codes (session_id)',
  );
  late final Shape14 cloudAuthCorks = Shape14(
    source: i0.VersionedTable(
      entityName: 'cloud_auth_corks',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT cloud_auth_corks_crypto_key_fk FOREIGN KEY(crypto_key_id)REFERENCES cloud_auth_crypto_keys(crypto_key_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
        'CONSTRAINT cloud_auth_corks_bearer_fk FOREIGN KEY(bearer_type, bearer_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
        'CONSTRAINT cloud_auth_corks_audience_fk FOREIGN KEY(audience_type, audience_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
        'CONSTRAINT cloud_auth_corks_issuer_fk FOREIGN KEY(issuer_type, issuer_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
      ],
      columns: [
        _column_57,
        _column_47,
        _column_58,
        _column_59,
        _column_60,
        _column_61,
        _column_62,
        _column_63,
        _column_5,
        _column_64,
        _column_65,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index cloudAuthCorksCryptoKeyIdx = i1.Index(
    'cloud_auth_corks_crypto_key_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_corks_crypto_key_idx ON cloud_auth_corks (crypto_key_id)',
  );
  final i1.Index cloudAuthCorksBearerIdx = i1.Index(
    'cloud_auth_corks_bearer_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_corks_bearer_idx ON cloud_auth_corks (bearer_type, bearer_id)',
  );
  final i1.Index cloudAuthCorksAudienceIdx = i1.Index(
    'cloud_auth_corks_audience_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_corks_audience_idx ON cloud_auth_corks (audience_type, audience_id)',
  );
  final i1.Index cloudAuthCorksIssuerIdx = i1.Index(
    'cloud_auth_corks_issuer_idx',
    'CREATE INDEX IF NOT EXISTS cloud_auth_corks_issuer_idx ON cloud_auth_corks (issuer_type, issuer_id)',
  );
  final i1.Index cedarRelationshipsFkEntityIdx = i1.Index(
    'cedar_relationships_fk_entity_idx',
    'CREATE INDEX IF NOT EXISTS cedar_relationships_fk_entity_idx ON cedar_relationships (entity_type, entity_id)',
  );
  final i1.Index cedarRelationshipsFkParentIdx = i1.Index(
    'cedar_relationships_fk_parent_idx',
    'CREATE INDEX IF NOT EXISTS cedar_relationships_fk_parent_idx ON cedar_relationships (parent_type, parent_id)',
  );
  late final Shape15 cedarPolicies = Shape15(
    source: i0.VersionedTable(
      entityName: 'cedar_policies',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['CHECK(enforcement_level IN (0, 1))'],
      columns: [_column_66, _column_67, _column_68, _column_69],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape16 cedarPolicyTemplates = Shape16(
    source: i0.VersionedTable(
      entityName: 'cedar_policy_templates',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['CHECK(template IS NOT NULL OR template IS NOT NULL)'],
      columns: [_column_66, _column_70, _column_71],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape17 cedarPolicyTemplateLinks = Shape17(
    source: i0.VersionedTable(
      entityName: 'cedar_policy_template_links',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CHECK(principal_type IS NOT NULL AND principal_id IS NOT NULL OR resource_type IS NOT NULL AND resource_id IS NOT NULL)',
        'CHECK(enforcement_level IN (0, 1))',
        'CONSTRAINT cedar_policy_template_links_fk_template_id FOREIGN KEY(template_id)REFERENCES cedar_policy_templates(template_id)ON UPDATE CASCADE ON DELETE CASCADE',
        'CONSTRAINT cedar_policy_template_links_fk_principal FOREIGN KEY(principal_type, principal_id)REFERENCES cedar_entities(entity_type, entity_id)ON DELETE CASCADE',
        'CONSTRAINT cedar_policy_template_links_fk_resource FOREIGN KEY(resource_type, resource_id)REFERENCES cedar_entities(entity_type, entity_id)ON DELETE CASCADE',
      ],
      columns: [
        _column_66,
        _column_67,
        _column_72,
        _column_73,
        _column_74,
        _column_75,
        _column_76,
        _column_69,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index cedarPolicyTemplateLinksFkTemplateIdIdx = i1.Index(
    'cedar_policy_template_links_fk_template_id_idx',
    'CREATE INDEX IF NOT EXISTS cedar_policy_template_links_fk_template_id_idx ON cedar_policy_template_links (template_id)',
  );
  final i1.Index cedarPolicyTemplateLinksFkPrincipalIdx = i1.Index(
    'cedar_policy_template_links_fk_principal_idx',
    'CREATE INDEX IF NOT EXISTS cedar_policy_template_links_fk_principal_idx ON cedar_policy_template_links (principal_type, principal_id)',
  );
  final i1.Index cedarPolicyTemplateLinksFkResourceIdx = i1.Index(
    'cedar_policy_template_links_fk_resource_idx',
    'CREATE INDEX IF NOT EXISTS cedar_policy_template_links_fk_resource_idx ON cedar_policy_template_links (resource_type, resource_id)',
  );
  late final Shape18 cedarAuthorizationLogs = Shape18(
    source: i0.VersionedTable(
      entityName: 'cedar_authorization_logs',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_45,
        _column_77,
        _column_78,
        _column_73,
        _column_74,
        _column_79,
        _column_80,
        _column_75,
        _column_76,
        _column_81,
        _column_82,
        _column_83,
        _column_84,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape19 userMemberships = Shape19(
    source: i0.VersionedTable(
      entityName: 'user_memberships',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CHECK(parent_type = \'Celest::Organization\' OR parent_type = \'Celest::Project\' OR parent_type = \'Celest::Project::Environment\')',
        'CONSTRAINT user_memberships_parent_fk FOREIGN KEY(parent_type, parent_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED',
      ],
      columns: [
        _column_85,
        _column_16,
        _column_13,
        _column_14,
        _column_86,
        _column_77,
        _column_87,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index userMembershipsParentIdx = i1.Index(
    'user_memberships_parent_idx',
    'CREATE INDEX IF NOT EXISTS user_memberships_parent_idx ON user_memberships (parent_type, parent_id)',
  );
  final i1.Trigger userMembershipsCreateTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS user_memberships_create_trg BEFORE INSERT ON user_memberships BEGIN INSERT INTO cedar_entities (entity_type, entity_id, attribute_json) VALUES (NEW.parent_type || \'::Member\', NEW.membership_id, json_object(\'role\', json_object(\'type\', \'Celest::Role\', \'id\', NEW.role), \'parent\', json_object(\'type\', NEW.parent_type, \'id\', NEW.parent_id)));INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::User\', NEW.user_id, NEW.parent_type || \'::Member\', NEW.membership_id);END',
    'user_memberships_create_trg',
  );
  final i1.Trigger userMembershipsUpdateTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS user_memberships_update_trg AFTER UPDATE ON user_memberships BEGIN UPDATE cedar_entities SET attribute_json = json_object(\'role\', json_object(\'type\', \'Celest::Role\', \'id\', NEW.role), \'parent\', json_object(\'type\', OLD.parent_type, \'id\', OLD.parent_id)) WHERE entity_id = OLD.membership_id AND entity_type = OLD.parent_type || \'::Member\';UPDATE cedar_relationships SET parent_id = NEW.role WHERE entity_id = OLD.membership_id AND entity_type = OLD.parent_type || \'::Member\' AND parent_type = \'Celest::Role\';END',
    'user_memberships_update_trg',
  );
  final i1.Trigger userMembershipsDeleteTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS user_memberships_delete_trg AFTER DELETE ON user_memberships BEGIN DELETE FROM cedar_relationships WHERE entity_id = OLD.membership_id AND entity_type = OLD.parent_type || \'::Member\';DELETE FROM cedar_relationships WHERE parent_id = OLD.membership_id AND parent_type = OLD.parent_type || \'::Member\';DELETE FROM cedar_entities WHERE entity_id = OLD.membership_id AND entity_type = OLD.parent_type || \'::Member\';END',
    'user_memberships_delete_trg',
  );
  late final Shape20 organizations = Shape20(
    source: i0.VersionedTable(
      entityName: 'organizations',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT organizations_parent_fk FOREIGN KEY(parent_type, parent_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE SET NULL',
      ],
      columns: [
        _column_66,
        _column_88,
        _column_89,
        _column_90,
        _column_91,
        _column_92,
        _column_77,
        _column_87,
        _column_93,
        _column_94,
        _column_95,
        _column_96,
        _column_97,
        _column_98,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Trigger organizationsDeleteUserMembershipsTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS organizations_delete_user_memberships_trg AFTER DELETE ON organizations BEGIN DELETE FROM user_memberships WHERE parent_type = \'Celest::Organization\' AND parent_id = OLD.id;END',
    'organizations_delete_user_memberships_trg',
  );
  late final Shape21 projects = Shape21(
    source: i0.VersionedTable(
      entityName: 'projects',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CHECK(parent_type = \'Celest::Organization\')',
        'CONSTRAINT projects_fk_parent FOREIGN KEY(parent_type, parent_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE CASCADE',
        'CONSTRAINT projects_fk_organization FOREIGN KEY(parent_id)REFERENCES organizations(id)ON UPDATE CASCADE ON DELETE CASCADE',
        'CONSTRAINT projects_uq_project_id UNIQUE(project_id, parent_id)',
      ],
      columns: [
        _column_66,
        _column_13,
        _column_14,
        _column_36,
        _column_91,
        _column_99,
        _column_77,
        _column_87,
        _column_93,
        _column_94,
        _column_95,
        _column_100,
        _column_97,
        _column_101,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Trigger projectsDeleteUserMembershipsTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS projects_delete_user_memberships_trg AFTER DELETE ON projects BEGIN DELETE FROM user_memberships WHERE parent_type = \'Celest::Project\' AND parent_id = OLD.id;END',
    'projects_delete_user_memberships_trg',
  );
  late final Shape22 projectEnvironments = Shape22(
    source: i0.VersionedTable(
      entityName: 'project_environments',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'CHECK(parent_type = \'Celest::Project\')',
        'CONSTRAINT project_environments_parent_fk FOREIGN KEY(parent_type, parent_id)REFERENCES cedar_entities(entity_type, entity_id)ON UPDATE CASCADE ON DELETE CASCADE',
        'CONSTRAINT project_environments_organization_fk FOREIGN KEY(parent_id)REFERENCES projects(id)ON UPDATE CASCADE ON DELETE CASCADE',
        'CONSTRAINT project_environments_project_environment_id_unique_idx UNIQUE(project_environment_id, parent_id)',
      ],
      columns: [
        _column_66,
        _column_13,
        _column_14,
        _column_102,
        _column_91,
        _column_99,
        _column_77,
        _column_87,
        _column_93,
        _column_95,
        _column_103,
        _column_104,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Trigger projectEnvironmentsDeleteUserMembershipsTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS project_environments_delete_user_memberships_trg AFTER DELETE ON project_environments BEGIN DELETE FROM user_memberships WHERE parent_type = \'Celest::Project::Environment\' AND parent_id = OLD.id;END',
    'project_environments_delete_user_memberships_trg',
  );
  final i1.Index projectEnvironmentsParentIdx = i1.Index(
    'project_environments_parent_idx',
    'CREATE INDEX IF NOT EXISTS project_environments_parent_idx ON project_environments (parent_type, parent_id)',
  );
  final i1.Trigger projectEnvironmentsUpdateTimeTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS project_environments_update_time_trg AFTER UPDATE ON project_environments BEGIN UPDATE project_environments SET update_time = unixepoch(\'now\', \'subsec\') WHERE id = OLD.id;END',
    'project_environments_update_time_trg',
  );
  final i1.Trigger projectEnvironmentsCreateTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS project_environments_create_trg BEFORE INSERT ON project_environments BEGIN INSERT INTO cedar_entities (entity_type, entity_id) VALUES (\'Celest::Project::Environment\', NEW.id);INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Project::Environment\', NEW.id, NEW.parent_type, NEW.parent_id);END',
    'project_environments_create_trg',
  );
  final i1.Trigger projectEnvironmentsSetParentTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS project_environments_set_parent_trg AFTER UPDATE OF parent_type, parent_id ON project_environments WHEN OLD.parent_type != NEW.parent_type OR OLD.parent_id != NEW.parent_id BEGIN UPDATE cedar_relationships SET parent_type = NEW.parent_type, parent_id = NEW.parent_id WHERE entity_id = OLD.id AND entity_type = \'Celest::Project::Environment\';END',
    'project_environments_set_parent_trg',
  );
  final i1.Trigger projectEnvironmentsDeleteTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS project_environments_delete_trg AFTER DELETE ON project_environments BEGIN DELETE FROM cedar_relationships WHERE entity_id = OLD.id AND entity_type = \'Celest::Project::Environment\';DELETE FROM cedar_entities WHERE entity_id = OLD.id AND entity_type = \'Celest::Project::Environment\';END',
    'project_environments_delete_trg',
  );
  late final Shape23 projectEnvironmentAsts = Shape23(
    source: i0.VersionedTable(
      entityName: 'project_environment_asts',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT fk_environment_metadata_project_environment_id FOREIGN KEY(project_environment_id)REFERENCES project_environments(id)ON UPDATE CASCADE ON DELETE CASCADE',
      ],
      columns: [_column_105, _column_106, _column_107, _column_108],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape24 projectEnvironmentAssets = Shape24(
    source: i0.VersionedTable(
      entityName: 'project_environment_assets',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: [
        'PRIMARY KEY(project_environment_id, name)',
        'CONSTRAINT fk_environment_assets_project_environment_id FOREIGN KEY(project_environment_id)REFERENCES project_environments(id)ON UPDATE CASCADE ON DELETE CASCADE',
      ],
      columns: [_column_102, _column_109, _column_110, _column_111, _column_34],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape25 tursoDatabases = Shape25(
    source: i0.VersionedTable(
      entityName: 'turso_databases',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_112, _column_113, _column_114, _column_115],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape26 projectEnvironmentStates = Shape26(
    source: i0.VersionedTable(
      entityName: 'project_environment_states',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: [
        'CONSTRAINT fk_project_environment_state_project_environment_id FOREIGN KEY(project_environment_id)REFERENCES project_environments(id)ON UPDATE CASCADE ON DELETE CASCADE',
        'CONSTRAINT fk_project_environment_state_turso_database FOREIGN KEY(turso_database_name)REFERENCES turso_databases(database_name)ON UPDATE CASCADE ON DELETE CASCADE',
      ],
      columns: [
        _column_105,
        _column_116,
        _column_117,
        _column_118,
        _column_119,
        _column_120,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index idxProjectEnvironmentTursoDatabase = i1.Index(
    'idx_project_environment_turso_database',
    'CREATE INDEX IF NOT EXISTS idx_project_environment_turso_database ON project_environment_states (turso_database_name)',
  );
  final i1.Index projectsFkParentIdx = i1.Index(
    'projects_fk_parent_idx',
    'CREATE INDEX IF NOT EXISTS projects_fk_parent_idx ON projects (parent_type, parent_id)',
  );
  final i1.Trigger projectsUpdateTimeTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS projects_update_time_trg AFTER UPDATE ON projects BEGIN UPDATE projects SET update_time = unixepoch(\'now\', \'subsec\') WHERE id = OLD.id;END',
    'projects_update_time_trg',
  );
  final i1.Trigger projectsCreateTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS projects_create_trg BEFORE INSERT ON projects BEGIN INSERT INTO cedar_entities (entity_type, entity_id) VALUES (\'Celest::Project\', NEW.id);INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Project\', NEW.id, NEW.parent_type, NEW.parent_id);END',
    'projects_create_trg',
  );
  final i1.Trigger projectsSetParentTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS projects_set_parent_trg AFTER UPDATE OF parent_type, parent_id ON projects WHEN OLD.parent_type != NEW.parent_type OR OLD.parent_id != NEW.parent_id BEGIN UPDATE cedar_relationships SET parent_type = NEW.parent_type, parent_id = NEW.parent_id WHERE entity_id = OLD.id AND entity_type = \'Celest::Project\';END',
    'projects_set_parent_trg',
  );
  final i1.Trigger projectsDeleteTrg = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS projects_delete_trg AFTER DELETE ON projects BEGIN DELETE FROM cedar_relationships WHERE entity_type = \'Celest::Project\' AND entity_id = OLD.id;DELETE FROM cedar_relationships WHERE parent_type = \'Celest::Project\' AND parent_id = OLD.id;DELETE FROM cedar_entities WHERE entity_id = OLD.id AND entity_type = \'Celest::Project\';END',
    'projects_delete_trg',
  );
  final i1.Index organizationsParentIdx = i1.Index(
    'organizations_parent_idx',
    'CREATE INDEX IF NOT EXISTS organizations_parent_idx ON organizations (parent_type, parent_id)',
  );
  final i1.Trigger organizationsUpdateTime = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS organizations_update_time AFTER UPDATE ON organizations BEGIN UPDATE organizations SET update_time = unixepoch(\'now\', \'subsec\') WHERE id = OLD.id;END',
    'organizations_update_time',
  );
  final i1.Trigger organizationsCreate = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS organizations_create BEFORE INSERT ON organizations BEGIN INSERT INTO cedar_entities (entity_type, entity_id) VALUES (\'Celest::Organization\', NEW.id);END',
    'organizations_create',
  );
  final i1.Trigger organizationsCreateParent = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS organizations_create_parent AFTER INSERT ON organizations WHEN NEW.parent_id IS NOT NULL BEGIN INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Organization\', NEW.id, NEW.parent_type, NEW.parent_id);END',
    'organizations_create_parent',
  );
  final i1.Trigger organizationsAddParent = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS organizations_add_parent AFTER UPDATE OF parent_id ON organizations WHEN OLD.parent_id IS NULL AND NEW.parent_id IS NOT NULL BEGIN INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Organization\', NEW.id, NEW.parent_type, NEW.parent_id);END',
    'organizations_add_parent',
  );
  final i1.Trigger organizationsSetParent = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS organizations_set_parent AFTER UPDATE OF parent_type, parent_id ON organizations WHEN(OLD.parent_type != NEW.parent_type OR OLD.parent_id != NEW.parent_id)AND NEW.parent_id IS NOT NULL BEGIN UPDATE cedar_relationships SET parent_type = NEW.parent_type, parent_id = NEW.parent_id WHERE entity_id = OLD.id AND entity_type = \'Celest::Organization\';END',
    'organizations_set_parent',
  );
  final i1.Trigger organizationsRemoveParent = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS organizations_remove_parent AFTER UPDATE OF parent_id ON organizations WHEN OLD.parent_id IS NOT NULL AND NEW.parent_id IS NULL BEGIN DELETE FROM cedar_relationships WHERE entity_id = OLD.id AND entity_type = \'Celest::Organization\' AND parent_id = OLD.parent_id AND parent_type = OLD.parent_type;END',
    'organizations_remove_parent',
  );
  final i1.Trigger organizationsDelete = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS organizations_delete AFTER DELETE ON organizations BEGIN DELETE FROM cedar_relationships WHERE entity_type = \'Celest::Organization\' AND entity_id = OLD.id;DELETE FROM cedar_relationships WHERE parent_type = \'Celest::Organization\' AND parent_id = OLD.id;DELETE FROM cedar_entities WHERE entity_type = \'Celest::Organization\' AND entity_id = OLD.id;END',
    'organizations_delete',
  );
  late final Shape27 operations = Shape27(
    source: i0.VersionedTable(
      entityName: 'operations',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_66,
        _column_121,
        _column_122,
        _column_123,
        _column_124,
        _column_77,
        _column_125,
        _column_126,
        _column_127,
        _column_75,
        _column_76,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index operationsFkOwnerIdx = i1.Index(
    'operations_fk_owner_idx',
    'CREATE INDEX IF NOT EXISTS operations_fk_owner_idx ON operations (owner_type, owner_id)',
  );
  final i1.Index operationsFkResourceIdx = i1.Index(
    'operations_fk_resource_idx',
    'CREATE INDEX IF NOT EXISTS operations_fk_resource_idx ON operations (resource_type, resource_id)',
  );
  final i1.Trigger operationsTriggerCreate = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS operations_trigger_create BEFORE INSERT ON operations BEGIN INSERT INTO cedar_entities (entity_type, entity_id) VALUES (\'Celest::Operation\', NEW.id);END',
    'operations_trigger_create',
  );
  final i1.Trigger operationsTriggerCreateOwner = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS operations_trigger_create_owner AFTER INSERT ON operations WHEN NEW.owner_id IS NOT NULL BEGIN INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Operation\', NEW.id, NEW.owner_type, NEW.owner_id);END',
    'operations_trigger_create_owner',
  );
  final i1.Trigger operationsTriggerCreateResource = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS operations_trigger_create_resource AFTER INSERT ON operations WHEN NEW.resource_id IS NOT NULL BEGIN INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Operation\', NEW.id, NEW.resource_type, NEW.resource_id);END',
    'operations_trigger_create_resource',
  );
  final i1.Trigger operationsTriggerAddOwner = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS operations_trigger_add_owner AFTER UPDATE OF owner_id ON operations WHEN OLD.owner_id IS NULL AND NEW.owner_id IS NOT NULL BEGIN INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Operation\', NEW.id, NEW.owner_type, NEW.owner_id);END',
    'operations_trigger_add_owner',
  );
  final i1.Trigger operationsTriggerAddResource = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS operations_trigger_add_resource AFTER UPDATE OF resource_id ON operations WHEN OLD.resource_id IS NULL AND NEW.resource_id IS NOT NULL BEGIN INSERT INTO cedar_relationships (entity_type, entity_id, parent_type, parent_id) VALUES (\'Celest::Operation\', NEW.id, NEW.resource_type, NEW.resource_id);END',
    'operations_trigger_add_resource',
  );
  final i1.Trigger operationsTriggerSetOwner = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS operations_trigger_set_owner AFTER UPDATE OF owner_type, owner_id ON operations WHEN(OLD.owner_type != NEW.owner_type OR OLD.owner_id != NEW.owner_id)AND OLD.owner_id IS NOT NULL AND NEW.owner_id IS NOT NULL BEGIN UPDATE cedar_relationships SET parent_type = NEW.owner_type, parent_id = NEW.owner_id WHERE entity_id = OLD.id AND entity_type = \'Celest::Operation\' AND parent_type = OLD.owner_type AND parent_id = OLD.owner_id;END',
    'operations_trigger_set_owner',
  );
  final i1.Trigger operationsTriggerSetResource = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS operations_trigger_set_resource AFTER UPDATE OF resource_type, resource_id ON operations WHEN(OLD.resource_type != NEW.resource_type OR OLD.resource_id != NEW.resource_id)AND OLD.resource_id IS NOT NULL AND NEW.resource_id IS NOT NULL BEGIN UPDATE cedar_relationships SET parent_type = NEW.resource_type, parent_id = NEW.resource_id WHERE entity_id = OLD.id AND entity_type = \'Celest::Operation\' AND parent_type = OLD.resource_type AND parent_id = OLD.resource_id;END',
    'operations_trigger_set_resource',
  );
  final i1.Trigger operationsTriggerDelete = i1.Trigger(
    'CREATE TRIGGER IF NOT EXISTS operations_trigger_delete AFTER DELETE ON operations BEGIN DELETE FROM cedar_relationships WHERE entity_id = OLD.id AND entity_type = \'Celest::Operation\';DELETE FROM cedar_entities WHERE entity_id = OLD.id AND entity_type = \'Celest::Operation\';END',
    'operations_trigger_delete',
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get givenName =>
      columnsByName['given_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get familyName =>
      columnsByName['family_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get timeZone =>
      columnsByName['time_zone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get languageCode =>
      columnsByName['language_code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get updateTime =>
      columnsByName['update_time']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'user_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'given_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'family_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'time_zone',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'language_code',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<double> _column_5(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'create_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
      $customConstraints: 'NOT NULL DEFAULT (unixepoch(\'now\', \'subsec\'))',
      defaultValue: const CustomExpression('unixepoch(\'now\', \'subsec\')'),
    );
i1.GeneratedColumn<double> _column_6(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'update_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.double,
      $customConstraints: '',
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get fqn =>
      columnsByName['fqn']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'fqn',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get entityType =>
      columnsByName['entity_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get entityId =>
      columnsByName['entity_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get attributeJson =>
      columnsByName['attribute_json']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get entityJson =>
      columnsByName['entity_json']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'entity_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL REFERENCES cedar_types(fqn)',
    );
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'entity_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'attribute_json',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL DEFAULT \'{}\'',
      defaultValue: const CustomExpression('\'{}\''),
    );
i1.GeneratedColumn<String> _column_11(
  String aliasedName,
) => i1.GeneratedColumn<String>(
  'entity_json',
  aliasedName,
  false,
  generatedAs: i1.GeneratedAs(
    const i1.CustomExpression(
      'json_object(\'type\', entity_type, \'id\', entity_id)',
    ),
    false,
  ),
  type: i1.DriftSqlType.string,
  $customConstraints:
      'NOT NULL GENERATED ALWAYS AS (json_object(\'type\', entity_type, \'id\', entity_id)) VIRTUAL',
);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get entityType =>
      columnsByName['entity_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get entityId =>
      columnsByName['entity_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get entityJson =>
      columnsByName['entity_json']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentType =>
      columnsByName['parent_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentId =>
      columnsByName['parent_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentJson =>
      columnsByName['parent_json']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'entity_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'parent_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'parent_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_15(
  String aliasedName,
) => i1.GeneratedColumn<String>(
  'parent_json',
  aliasedName,
  false,
  generatedAs: i1.GeneratedAs(
    const i1.CustomExpression(
      'json_object(\'type\', parent_type, \'id\', parent_id)',
    ),
    false,
  ),
  type: i1.DriftSqlType.string,
  $customConstraints:
      'NOT NULL GENERATED ALWAYS AS (json_object(\'type\', parent_type, \'id\', parent_id)) VIRTUAL',
);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isVerified =>
      columnsByName['is_verified']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isPrimary =>
      columnsByName['is_primary']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'user_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'email',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<bool> _column_18(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_verified',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      $customConstraints: 'NOT NULL DEFAULT FALSE',
      defaultValue: const CustomExpression('FALSE'),
    );
i1.GeneratedColumn<bool> _column_19(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_primary',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      $customConstraints: 'NOT NULL DEFAULT FALSE',
      defaultValue: const CustomExpression('FALSE'),
    );

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phoneNumber =>
      columnsByName['phone_number']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isVerified =>
      columnsByName['is_verified']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isPrimary =>
      columnsByName['is_primary']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'phone_number',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );

class Shape6 extends i0.VersionedView {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get givenName =>
      columnsByName['given_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get familyName =>
      columnsByName['family_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get timeZone =>
      columnsByName['time_zone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get languageCode =>
      columnsByName['language_code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i1.DriftAny> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<i1.DriftAny>;
  i1.GeneratedColumn<i1.DriftAny> get updateTime =>
      columnsByName['update_time']! as i1.GeneratedColumn<i1.DriftAny>;
  i1.GeneratedColumn<String> get emails =>
      columnsByName['emails']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phoneNumbers =>
      columnsByName['phone_numbers']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get roles =>
      columnsByName['roles']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'user_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'given_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'family_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'time_zone',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'language_code',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<i1.DriftAny> _column_26(String aliasedName) =>
    i1.GeneratedColumn<i1.DriftAny>(
      'create_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.any,
    );
i1.GeneratedColumn<i1.DriftAny> _column_27(String aliasedName) =>
    i1.GeneratedColumn<i1.DriftAny>(
      'update_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.any,
    );
i1.GeneratedColumn<String> _column_28(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'emails',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_29(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'phone_numbers',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_30(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'roles',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get projectId =>
      columnsByName['project_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get version =>
      columnsByName['version']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get resolvedAst =>
      columnsByName['resolved_ast']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get etag =>
      columnsByName['etag']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_31(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'project_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_32(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'version',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<i2.Uint8List> _column_33(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'resolved_ast',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_34(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'etag',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get apiId =>
      columnsByName['api_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get projectId =>
      columnsByName['project_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get resolvedAst =>
      columnsByName['resolved_ast']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get etag =>
      columnsByName['etag']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_35(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'api_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_36(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'project_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get functionId =>
      columnsByName['function_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get apiId =>
      columnsByName['api_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get resolvedAst =>
      columnsByName['resolved_ast']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get etag =>
      columnsByName['etag']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_37(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'function_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_38(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'api_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );

class Shape10 extends i0.VersionedTable {
  Shape10({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get schemaVersion =>
      columnsByName['schema_version']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_39(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'schema_version',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );

class Shape11 extends i0.VersionedTable {
  Shape11({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<i2.Uint8List> get cryptoKeyId =>
      columnsByName['crypto_key_id']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get keyPurpose =>
      columnsByName['key_purpose']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get keyAlgorithm =>
      columnsByName['key_algorithm']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get keyMaterial =>
      columnsByName['key_material']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get externalCryptoKeyId =>
      columnsByName['external_crypto_key_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<i2.Uint8List> _column_40(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'crypto_key_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_41(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'key_purpose',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_42(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'key_algorithm',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<i2.Uint8List> _column_43(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'key_material',
      aliasedName,
      true,
      type: i1.DriftSqlType.blob,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_44(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'external_crypto_key_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: 'UNIQUE',
    );

class Shape12 extends i0.VersionedTable {
  Shape12({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get rowid =>
      columnsByName['rowid']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get sessionId =>
      columnsByName['session_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get cryptoKeyId =>
      columnsByName['crypto_key_id']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get clientInfo =>
      columnsByName['client_info']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<i2.Uint8List> get authenticationFactor =>
      columnsByName['authentication_factor']!
          as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<i2.Uint8List> get state =>
      columnsByName['state']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get ipAddress =>
      columnsByName['ip_address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get externalSessionId =>
      columnsByName['external_session_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get updateTime =>
      columnsByName['update_time']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get expireTime =>
      columnsByName['expire_time']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<int> _column_45(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'rowid',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      $customConstraints: 'PRIMARY KEY AUTOINCREMENT',
    );
i1.GeneratedColumn<String> _column_46(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'session_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL UNIQUE',
    );
i1.GeneratedColumn<i2.Uint8List> _column_47(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'crypto_key_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<i2.Uint8List> _column_48(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'client_info',
      aliasedName,
      true,
      type: i1.DriftSqlType.blob,
      $customConstraints: '',
    );
i1.GeneratedColumn<i2.Uint8List> _column_49(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'authentication_factor',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<i2.Uint8List> _column_50(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'state',
      aliasedName,
      true,
      type: i1.DriftSqlType.blob,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_51(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'ip_address',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_52(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'external_session_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<double> _column_53(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'expire_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
      $customConstraints: 'NOT NULL',
    );

class Shape13 extends i0.VersionedTable {
  Shape13({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get rowid =>
      columnsByName['rowid']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get sessionId =>
      columnsByName['session_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get resendAttempt =>
      columnsByName['resend_attempt']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get verifyAttempt =>
      columnsByName['verify_attempt']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get updateTime =>
      columnsByName['update_time']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<int> _column_54(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'resend_attempt',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL DEFAULT 0',
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_55(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'verify_attempt',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL DEFAULT 0',
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<double> _column_56(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'update_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
      $customConstraints: 'NOT NULL DEFAULT (unixepoch(\'now\', \'subsec\'))',
      defaultValue: const CustomExpression('unixepoch(\'now\', \'subsec\')'),
    );

class Shape14 extends i0.VersionedTable {
  Shape14({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<i2.Uint8List> get corkId =>
      columnsByName['cork_id']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<i2.Uint8List> get cryptoKeyId =>
      columnsByName['crypto_key_id']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get bearerType =>
      columnsByName['bearer_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get bearerId =>
      columnsByName['bearer_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get audienceType =>
      columnsByName['audience_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get audienceId =>
      columnsByName['audience_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get issuerType =>
      columnsByName['issuer_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get issuerId =>
      columnsByName['issuer_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get expireTime =>
      columnsByName['expire_time']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get lastUseTime =>
      columnsByName['last_use_time']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<i2.Uint8List> _column_57(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'cork_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_58(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'bearer_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_59(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'bearer_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_60(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'audience_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_61(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'audience_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_62(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'issuer_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_63(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'issuer_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<double> _column_64(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'expire_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.double,
      $customConstraints: '',
    );
i1.GeneratedColumn<double> _column_65(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'last_use_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.double,
      $customConstraints: '',
    );

class Shape15 extends i0.VersionedTable {
  Shape15({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get policyId =>
      columnsByName['policy_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get policy =>
      columnsByName['policy']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get enforcementLevel =>
      columnsByName['enforcement_level']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_66(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_67(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'policy_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL UNIQUE',
    );
i1.GeneratedColumn<String> _column_68(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'policy',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<int> _column_69(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'enforcement_level',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL DEFAULT 1',
      defaultValue: const CustomExpression('1'),
    );

class Shape16 extends i0.VersionedTable {
  Shape16({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get templateId =>
      columnsByName['template_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get template =>
      columnsByName['template']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_70(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'template_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL UNIQUE',
    );
i1.GeneratedColumn<String> _column_71(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'template',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );

class Shape17 extends i0.VersionedTable {
  Shape17({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get policyId =>
      columnsByName['policy_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get templateId =>
      columnsByName['template_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get principalType =>
      columnsByName['principal_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get principalId =>
      columnsByName['principal_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceType =>
      columnsByName['resource_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceId =>
      columnsByName['resource_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get enforcementLevel =>
      columnsByName['enforcement_level']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_72(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'template_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_73(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'principal_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_74(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'principal_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_75(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'resource_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_76(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'resource_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );

class Shape18 extends i0.VersionedTable {
  Shape18({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get rowid =>
      columnsByName['rowid']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get expireTime =>
      columnsByName['expire_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get principalType =>
      columnsByName['principal_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get principalId =>
      columnsByName['principal_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get actionType =>
      columnsByName['action_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get actionId =>
      columnsByName['action_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceType =>
      columnsByName['resource_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceId =>
      columnsByName['resource_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get contextJson =>
      columnsByName['context_json']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get decision =>
      columnsByName['decision']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get reasonsJson =>
      columnsByName['reasons_json']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get errorsJson =>
      columnsByName['errors_json']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<DateTime> _column_77(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'create_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      $customConstraints: 'NOT NULL DEFAULT (unixepoch(\'now\', \'subsec\'))',
      defaultValue: const CustomExpression('unixepoch(\'now\', \'subsec\')'),
    );
i1.GeneratedColumn<DateTime> _column_78(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'expire_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_79(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'action_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_80(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'action_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_81(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'context_json',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL DEFAULT \'{}\'',
      defaultValue: const CustomExpression('\'{}\''),
    );
i1.GeneratedColumn<bool> _column_82(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'decision',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_83(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'reasons_json',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL DEFAULT \'[]\'',
      defaultValue: const CustomExpression('\'[]\''),
    );
i1.GeneratedColumn<String> _column_84(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'errors_json',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL DEFAULT \'[]\'',
      defaultValue: const CustomExpression('\'[]\''),
    );

class Shape19 extends i0.VersionedTable {
  Shape19({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get membershipId =>
      columnsByName['membership_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentType =>
      columnsByName['parent_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentId =>
      columnsByName['parent_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get role =>
      columnsByName['role']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updateTime =>
      columnsByName['update_time']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_85(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'membership_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_86(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'role',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<DateTime> _column_87(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'update_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      $customConstraints: 'NOT NULL DEFAULT (unixepoch(\'now\', \'subsec\'))',
      defaultValue: const CustomExpression('unixepoch(\'now\', \'subsec\')'),
    );

class Shape20 extends i0.VersionedTable {
  Shape20({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentType =>
      columnsByName['parent_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentId =>
      columnsByName['parent_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get organizationId =>
      columnsByName['organization_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get state =>
      columnsByName['state']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updateTime =>
      columnsByName['update_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get deleteTime =>
      columnsByName['delete_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get purgeTime =>
      columnsByName['purge_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get annotations =>
      columnsByName['annotations']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get primaryRegion =>
      columnsByName['primary_region']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get reconciling =>
      columnsByName['reconciling']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get etag =>
      columnsByName['etag']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_88(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'parent_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_89(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'parent_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_90(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'organization_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL UNIQUE',
    );
i1.GeneratedColumn<String> _column_91(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'state',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL DEFAULT \'CREATING\'',
      defaultValue: const CustomExpression('\'CREATING\''),
    );
i1.GeneratedColumn<String> _column_92(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'display_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<DateTime> _column_93(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'delete_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
      $customConstraints: '',
    );
i1.GeneratedColumn<DateTime> _column_94(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'purge_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_95(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'annotations',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_96(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'primary_region',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<bool> _column_97(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'reconciling',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      $customConstraints: 'NOT NULL DEFAULT FALSE',
      defaultValue: const CustomExpression('FALSE'),
    );
i1.GeneratedColumn<String> _column_98(
  String aliasedName,
) => i1.GeneratedColumn<String>(
  'etag',
  aliasedName,
  false,
  generatedAs: i1.GeneratedAs(
    const i1.CustomExpression(
      'hex(md5(json_array(id, parent_type, parent_id, organization_id, state, display_name, create_time, update_time, delete_time, purge_time, annotations, primary_region, reconciling)))',
    ),
    true,
  ),
  type: i1.DriftSqlType.string,
  $customConstraints:
      'NOT NULL GENERATED ALWAYS AS (hex(md5(json_array(id, parent_type, parent_id, organization_id, state, display_name, create_time, update_time, delete_time, purge_time, annotations, primary_region, reconciling)))) STORED',
);

class Shape21 extends i0.VersionedTable {
  Shape21({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentType =>
      columnsByName['parent_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentId =>
      columnsByName['parent_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get projectId =>
      columnsByName['project_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get state =>
      columnsByName['state']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updateTime =>
      columnsByName['update_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get deleteTime =>
      columnsByName['delete_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get purgeTime =>
      columnsByName['purge_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get annotations =>
      columnsByName['annotations']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get regions =>
      columnsByName['regions']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get reconciling =>
      columnsByName['reconciling']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get etag =>
      columnsByName['etag']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_99(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'display_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_100(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'regions',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_101(
  String aliasedName,
) => i1.GeneratedColumn<String>(
  'etag',
  aliasedName,
  false,
  generatedAs: i1.GeneratedAs(
    const i1.CustomExpression(
      'hex(md5(json_array(id, parent_type, parent_id, project_id, state, display_name, create_time, update_time, delete_time, purge_time, annotations, regions, reconciling)))',
    ),
    true,
  ),
  type: i1.DriftSqlType.string,
  $customConstraints:
      'NOT NULL GENERATED ALWAYS AS (hex(md5(json_array(id, parent_type, parent_id, project_id, state, display_name, create_time, update_time, delete_time, purge_time, annotations, regions, reconciling)))) STORED',
);

class Shape22 extends i0.VersionedTable {
  Shape22({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentType =>
      columnsByName['parent_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parentId =>
      columnsByName['parent_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get projectEnvironmentId =>
      columnsByName['project_environment_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get state =>
      columnsByName['state']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updateTime =>
      columnsByName['update_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get deleteTime =>
      columnsByName['delete_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get annotations =>
      columnsByName['annotations']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get reconciling =>
      columnsByName['reconciling']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get etag =>
      columnsByName['etag']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_102(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'project_environment_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<bool> _column_103(
  String aliasedName,
) => i1.GeneratedColumn<bool>(
  'reconciling',
  aliasedName,
  false,
  generatedAs: i1.GeneratedAs(
    const i1.CustomExpression(
      'state IN (\'CREATING\', \'UPDATING\', \'DELETING\')',
    ),
    false,
  ),
  type: i1.DriftSqlType.bool,
  $customConstraints:
      'NOT NULL GENERATED ALWAYS AS (state IN (\'CREATING\', \'UPDATING\', \'DELETING\')) VIRTUAL',
);
i1.GeneratedColumn<String> _column_104(
  String aliasedName,
) => i1.GeneratedColumn<String>(
  'etag',
  aliasedName,
  false,
  generatedAs: i1.GeneratedAs(
    const i1.CustomExpression(
      'hex(md5(json_array(id, parent_type, parent_id, project_environment_id, state, display_name, create_time, update_time, delete_time, annotations, reconciling)))',
    ),
    true,
  ),
  type: i1.DriftSqlType.string,
  $customConstraints:
      'NOT NULL GENERATED ALWAYS AS (hex(md5(json_array(id, parent_type, parent_id, project_environment_id, state, display_name, create_time, update_time, delete_time, annotations, reconciling)))) STORED',
);

class Shape23 extends i0.VersionedTable {
  Shape23({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get projectEnvironmentId =>
      columnsByName['project_environment_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get ast =>
      columnsByName['ast']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<int> get version =>
      columnsByName['version']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get digest =>
      columnsByName['digest']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_105(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'project_environment_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<i2.Uint8List> _column_106(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'ast',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<int> _column_107(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'version',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_108(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'digest',
      aliasedName,
      false,
      generatedAs: i1.GeneratedAs(
        const i1.CustomExpression('hex(md5(ast))'),
        true,
      ),
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL GENERATED ALWAYS AS (hex(md5(ast))) STORED',
    );

class Shape24 extends i0.VersionedTable {
  Shape24({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get projectEnvironmentId =>
      columnsByName['project_environment_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get bucket =>
      columnsByName['bucket']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get etag =>
      columnsByName['etag']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_109(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_110(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'bucket',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_111(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );

class Shape25 extends i0.VersionedTable {
  Shape25({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get databaseName =>
      columnsByName['database_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get databaseGroup =>
      columnsByName['database_group']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get databaseUrl =>
      columnsByName['database_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get databaseToken =>
      columnsByName['database_token']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_112(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'database_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL PRIMARY KEY',
    );
i1.GeneratedColumn<String> _column_113(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'database_group',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_114(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'database_url',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_115(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'database_token',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );

class Shape26 extends i0.VersionedTable {
  Shape26({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get projectEnvironmentId =>
      columnsByName['project_environment_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get flyAppName =>
      columnsByName['fly_app_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get flyVolumeName =>
      columnsByName['fly_volume_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get flyMacaroonToken =>
      columnsByName['fly_macaroon_token']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get domainName =>
      columnsByName['domain_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get tursoDatabaseName =>
      columnsByName['turso_database_name']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_116(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'fly_app_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_117(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'fly_volume_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_118(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'fly_macaroon_token',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_119(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'domain_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_120(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'turso_database_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );

class Shape27 extends i0.VersionedTable {
  Shape27({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get metadata =>
      columnsByName['metadata']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get response =>
      columnsByName['response']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get error =>
      columnsByName['error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get done =>
      columnsByName['done']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get createTime =>
      columnsByName['create_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get fullResourceName =>
      columnsByName['full_resource_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get ownerType =>
      columnsByName['owner_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get ownerId =>
      columnsByName['owner_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceType =>
      columnsByName['resource_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceId =>
      columnsByName['resource_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_121(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'metadata',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_122(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'response',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_123(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'error',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<bool> _column_124(
  String aliasedName,
) => i1.GeneratedColumn<bool>(
  'done',
  aliasedName,
  false,
  generatedAs: i1.GeneratedAs(
    const i1.CustomExpression('response IS NOT NULL OR error IS NOT NULL'),
    false,
  ),
  type: i1.DriftSqlType.bool,
  $customConstraints:
      'NOT NULL GENERATED ALWAYS AS (response IS NOT NULL OR error IS NOT NULL) VIRTUAL',
);
i1.GeneratedColumn<String> _column_125(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'full_resource_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_126(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'owner_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_127(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'owner_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from1To2: from1To2),
);
