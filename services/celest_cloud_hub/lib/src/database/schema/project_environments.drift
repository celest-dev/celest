import 'package:celest_cloud_hub/src/database/schema/projects.drift';

-- Stores project environments for a Celest Cloud project.
CREATE TABLE IF NOT EXISTS project_environments (
    -- Immutable. The unique identifier for the project environment.
    --
    -- Maps to the `uid` field in the Protobuf.
    --
    -- Format: env_<typeid>
    id TEXT NOT NULL PRIMARY KEY,

    -- The Cedar type of the parent entity.
    --
    -- Must be `Celest::Project`.
    parent_type TEXT NOT NULL,

    -- The unique identifier of the parent entity.
    --
    -- Must be an existing project.
    parent_id TEXT NOT NULL,

    -- The primary alias for the environment.
    project_environment_id TEXT NOT NULL,

    -- The state of the environment.
    state TEXT NOT NULL DEFAULT 'CREATING',

    -- A human-readable name for the environment.
    display_name TEXT,

    create_time DATETIME NOT NULL DEFAULT (unixepoch('now', 'subsec')),
    update_time DATETIME NOT NULL DEFAULT (unixepoch('now', 'subsec')),
    delete_time DATETIME,

    -- User-defined annotations for the environment.
    --
    -- Type: map[string]string
    annotations TEXT,

    -- Whether the environment is in the process of being reconciled.
    reconciling BOOLEAN NOT NULL GENERATED ALWAYS AS (state IN ('CREATING', 'UPDATING', 'DELETING')) VIRTUAL,

    -- The environment's etag.
    etag TEXT NOT NULL GENERATED ALWAYS AS (
        hex(
            md5(
                json_array(
                    id,
                    parent_type,
                    parent_id,
                    project_environment_id,
                    state,
                    display_name,
                    create_time,
                    update_time,
                    delete_time,
                    annotations,
                    reconciling
                )
            )
        )
    ) STORED,

    CHECK (parent_type = 'Celest::Project'),

    CONSTRAINT project_environments_parent_fk FOREIGN KEY (parent_type, parent_id) REFERENCES cedar_entities(entity_type, entity_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT project_environments_organization_fk FOREIGN KEY (parent_id) REFERENCES projects(id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT project_environments_project_environment_id_unique_idx UNIQUE (project_environment_id, parent_id)
);

-- Index for the project's FK.
CREATE INDEX IF NOT EXISTS project_environments_parent_idx ON project_environments(parent_type, parent_id);

-- This trigger is used to update the update_time when a row is updated.
CREATE TRIGGER IF NOT EXISTS project_environments_update_time_trg
AFTER UPDATE ON project_environments
BEGIN
    UPDATE project_environments
    SET update_time = unixepoch('now', 'subsec')
    WHERE id = OLD.id;
END;


----------------------------------------------
-------------- Cedar Triggers ----------------
----------------------------------------------

-- This trigger is used to create the Cedar entity when a row is inserted.
CREATE TRIGGER IF NOT EXISTS project_environments_create_trg
BEFORE INSERT ON project_environments
BEGIN
    INSERT INTO cedar_entities(entity_type, entity_id)
    VALUES ('Celest::Project::Environment', NEW.id);
    INSERT INTO cedar_relationships(entity_type, entity_id, parent_type, parent_id)
    VALUES ('Celest::Project::Environment', NEW.id, NEW.parent_type, NEW.parent_id);
END;

-- This trigger is used to update the parent relationship when the parent_id is set to a new value.
CREATE TRIGGER IF NOT EXISTS project_environments_set_parent_trg
AFTER UPDATE OF parent_type, parent_id ON project_environments
WHEN OLD.parent_type != NEW.parent_type OR OLD.parent_id != NEW.parent_id
BEGIN
    UPDATE cedar_relationships
    SET 
        parent_type = NEW.parent_type,
        parent_id = NEW.parent_id
    WHERE 
        entity_id = OLD.id 
        AND entity_type = 'Celest::Project::Environment';
END;

-- This trigger is used to delete the parent relationship when the parent_id is set to NULL.
CREATE TRIGGER IF NOT EXISTS project_environments_delete_trg
AFTER DELETE ON project_environments
BEGIN
    DELETE FROM cedar_relationships
    WHERE 
        entity_id = OLD.id 
        AND entity_type = 'Celest::Project::Environment';
    DELETE FROM cedar_entities
    WHERE
        entity_id = OLD.id
        AND entity_type = 'Celest::Project::Environment';
END;

----------------------------------------------
-------------- /Cedar Triggers ---------------
----------------------------------------------

-- Stores metadata for Celest Cloud project environments.
CREATE TABLE IF NOT EXISTS project_environment_asts(
    -- The ID of the linked environment.
    project_environment_id TEXT NOT NULL PRIMARY KEY,

    -- The environment's project AST.
    --
    -- Format: ProtoAny[celest.ast.<version>.ResolvedProject]
    ast BLOB NOT NULL,

    -- The environment's project AST version.
    version INTEGER NOT NULL,

    -- The environment's project AST digest.
    digest TEXT NOT NULL GENERATED ALWAYS AS (hex(md5(ast))) STORED,

    CONSTRAINT fk_environment_metadata_project_environment_id FOREIGN KEY (project_environment_id) REFERENCES project_environments(id)
        ON UPDATE CASCADE ON DELETE CASCADE
) WITHOUT ROWID;

-- Stores assets for a Celest Cloud project environment.
CREATE TABLE IF NOT EXISTS project_environment_assets(
    -- The ID of the linked environment.
    project_environment_id TEXT NOT NULL,

    -- The asset's type.
    type TEXT NOT NULL,

    -- The bucket storing the asset.
    bucket TEXT NOT NULL,

    -- The asset's name in the bucket.
    name TEXT NOT NULL,

    -- The asset's digest.
    etag TEXT NOT NULL,

    PRIMARY KEY (project_environment_id, name),

    CONSTRAINT fk_environment_assets_project_environment_id FOREIGN KEY (project_environment_id) REFERENCES project_environments(id)
        ON UPDATE CASCADE ON DELETE CASCADE
) WITHOUT ROWID;

-- Stores state for Celest Cloud project environments.
CREATE TABLE IF NOT EXISTS project_environment_states (
    -- The ID of the linked project environment.
    project_environment_id TEXT NOT NULL PRIMARY KEY,

    -- The name of the project environment's Fly app.
    fly_app_name TEXT,

    -- The name of the project environment's Fly volume.
    fly_volume_name TEXT,

    -- The attenuated macaroon token for use with Fly.io.
    fly_macaroon_token TEXT,

    -- The domain name of the project environment.
    domain_name TEXT,

    -- The name of the turso database.
    turso_database_name TEXT,

    CONSTRAINT fk_project_environment_state_project_environment_id FOREIGN KEY (project_environment_id) REFERENCES project_environments(id)
        ON UPDATE CASCADE ON DELETE CASCADE,

    CONSTRAINT fk_project_environment_state_turso_database FOREIGN KEY (turso_database_name) REFERENCES turso_databases(database_name)
        ON UPDATE CASCADE ON DELETE CASCADE
) WITHOUT ROWID;

CREATE INDEX IF NOT EXISTS idx_project_environment_turso_database ON project_environment_states(turso_database_name);

-- Stores state for Turso databases.
CREATE TABLE IF NOT EXISTS turso_databases (
    -- The name of the database.
    database_name TEXT NOT NULL PRIMARY KEY,

    -- The database's group.
    database_group TEXT NOT NULL,

    -- The URL of the database.
    database_url TEXT NOT NULL,

    -- The database token.
    database_token TEXT NOT NULL
);

createProjectEnvironment:
    INSERT INTO project_environments (
        id,
        parent_type,
        parent_id,
        project_environment_id,
        state,
        display_name,
        annotations
    ) VALUES (
        :id,
        :parentType,
        :parentId,
        :projectEnvironmentId,
        :state,
        :displayName,
        :annotations
    )
    RETURNING *;

getProjectEnvironment:
    SELECT * FROM project_environments
    WHERE id = :id;

lookupProjectEnvironment:
    SELECT * FROM project_environments
    WHERE 
        parent_type = 'Celest::Project' AND
        parent_id = :projectId AND
        (id = :projectEnvironmentId OR project_environment_id = :projectEnvironmentId)
    LIMIT 1;

listProjectEnvironments(
    :user_id AS TEXT,
    :parent_id AS TEXT OR NULL,
    :start_time AS DATETIME OR NULL,
    :offset AS INTEGER,
    :limit AS INTEGER
):
    WITH memberships AS (
        SELECT
            parent_id AS project_environment_id
        FROM
            user_memberships
        WHERE
            user_id = :user_id AND
            parent_type = 'Celest::Project::Environment'
    ),
    rowed AS(
        SELECT 
            ROW_NUMBER() OVER (ORDER BY create_time DESC) AS row_num,
            id
        FROM project_environments
        INNER JOIN memberships ON project_environments.id = memberships.project_environment_id
        WHERE
            (project_environments.parent_id IS NULL AND :parent_id IS NULL OR project_environments.parent_id = :parent_id) AND
            project_environments.create_time < coalesce(:start_time, unixepoch('now', '+1 second', 'subsec'))
    )
    SELECT
        row_num,
        project_environments.**
    FROM project_environments
    INNER JOIN rowed ON project_environments.id = rowed.id
    WHERE row_num > :offset
    ORDER BY $order_by
    LIMIT :limit;

updateProjectEnvironment(
    :parentType AS TEXT OR NULL,
    :parentId AS TEXT OR NULL,
    :projectEnvironmentId AS TEXT OR NULL,
    :state AS TEXT OR NULL,
    :displayName AS TEXT OR NULL,
    :annotations AS TEXT OR NULL
):
    UPDATE project_environments
    SET
        parent_type = coalesce(:parentType, parent_type),
        parent_id = coalesce(:parentId, parent_id),
        project_environment_id = coalesce(:projectEnvironmentId, project_environment_id),
        state = coalesce(:state, state),
        display_name = coalesce(:displayName, display_name),
        annotations = coalesce(:annotations, annotations)
    WHERE id = :id
    RETURNING *;

deleteProjectEnvironment:
    UPDATE project_environments
    SET 
        delete_time = unixepoch('now', 'subsec'),
        state = 'DELETED'
    WHERE id = :id
    RETURNING *;

purgeProjectEnvironment:
    DELETE FROM project_environments
    WHERE id = :id;

getProjectEnvironmentState:
    SELECT
        project_environment_states.**,
        turso_databases.**
    FROM project_environment_states
    LEFT JOIN turso_databases ON project_environment_states.turso_database_name = turso_databases.database_name
    WHERE project_environment_states.project_environment_id = :projectEnvironmentId;

upsertProjectEnvironmentState(
    :projectEnvironmentId AS TEXT,
    :flyAppName AS TEXT OR NULL,
    :flyMacaroonToken AS TEXT OR NULL,
    :domainName AS TEXT OR NULL,
    :tursoDatabaseName AS TEXT OR NULL
):
    INSERT INTO project_environment_states (
        project_environment_id,
        fly_app_name,
        fly_macaroon_token,
        domain_name,
        turso_database_name
    ) VALUES (
        :projectEnvironmentId,
        :flyAppName,
        :flyMacaroonToken,
        :domainName,
        :tursoDatabaseName
    )
    ON CONFLICT (project_environment_id) DO UPDATE
    SET
        fly_app_name = coalesce(:flyAppName, fly_app_name),
        fly_macaroon_token = coalesce(:flyMacaroonToken, fly_macaroon_token),
        domain_name = coalesce(:domainName, domain_name),
        turso_database_name = coalesce(:tursoDatabaseName, turso_database_name)
    RETURNING *;

createTursoDatabase:
    INSERT INTO turso_databases (
        database_group,
        database_name,
        database_url,
        database_token
    ) VALUES (
        :databaseGroup,
        :databaseName,
        :databaseUrl,
        :databaseToken
    )
    RETURNING *;
