// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import, deprecated_member_use, invalid_use_of_internal_member

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:isolate';

import 'package:celest/celest.dart' as _$celest;
import 'package:celest_backend/src/database/task_database.dart';
import 'package:celest_backend/src/functions/tasks.dart';
import 'package:celest_core/celest_core.dart' as _$celest;
import 'package:celest_core/src/exception/cloud_exception.dart' as _$celest;
import 'package:celest_core/src/exception/serialization_exception.dart'
    as _$celest;
import 'package:drift/src/remote/communication.dart' as _$drift_communication;
import 'package:drift/src/runtime/cancellation_zone.dart'
    as _$drift_cancellation_zone;
import 'package:drift/src/runtime/exceptions.dart' as _$drift_exceptions;
import 'package:google_cloud/src/bad_configuration_exception.dart'
    as _$google_cloud_bad_configuration_exception;
import 'package:google_cloud/src/bad_request_exception.dart'
    as _$google_cloud_bad_request_exception;
import 'package:hrana/src/exception.dart' as _$hrana_exception;
import 'package:http/src/exception.dart' as _$http_exception;
import 'package:shelf/src/hijack_exception.dart' as _$shelf_hijack_exception;
import 'package:sqlite3/src/exception.dart' as _$sqlite3_exception;
import 'package:sqlite3/src/vfs.dart' as _$sqlite3_vfs;
import 'package:tasks_client/tasks_client.dart';

class CelestFunctions {
  final tasks = CelestFunctionsTasks();
}

class CelestFunctionsTasks {
  Never _throwError({
    int? code,
    required Map<String, Object?> body,
  }) {
    final status = body['@status'] as Map<String, Object?>?;
    final message = status?['message'] as String?;
    final details = status?['details'] as _$celest.JsonList?;
    final (errorType, errorValue, stackTrace) = switch (details) {
      null || [] => const (null, null, StackTrace.empty),
      [
        final errorDetails as Map<String, Object?>,
        {
          '@type': 'dart.core.StackTrace',
          'value': final stackTraceValue as String
        },
        ...
      ] =>
        (
          errorDetails['@type'],
          errorDetails['value'],
          StackTrace.fromString(stackTraceValue),
        ),
      [final errorDetails as Map<String, Object?>, ...] => (
          errorDetails['@type'],
          errorDetails['value'],
          StackTrace.empty,
        ),
    };

    switch (errorType) {
      case 'tasks.v1.ServerException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<ServerException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.CloudException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.CloudException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.CancelledException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.CancelledException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnknownError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnknownError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.BadRequestException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.BadRequestException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnauthorizedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnauthorizedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.NotFoundException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.NotFoundException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.AlreadyExistsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.AlreadyExistsException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.PermissionDeniedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.PermissionDeniedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.ResourceExhaustedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.ResourceExhaustedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.FailedPreconditionException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.FailedPreconditionException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.AbortedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.AbortedException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.OutOfRangeException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.OutOfRangeException>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnimplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnimplementedError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.InternalServerError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.InternalServerError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.UnavailableError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.UnavailableError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.DataLossError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.DataLossError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.DeadlineExceededError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.DeadlineExceededError>(errorValue),
          stackTrace,
        );
      case 'celest.core.v1.SerializationException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$celest.SerializationException>(errorValue),
          stackTrace,
        );
      case 'dart.core.Error':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<Error>(errorValue),
          stackTrace,
        );
      case 'dart.core.AssertionError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AssertionError>(errorValue),
          stackTrace,
        );
      case 'dart.core.TypeError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<TypeError>(errorValue),
          stackTrace,
        );
      case 'dart.core.ArgumentError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<ArgumentError>(errorValue),
          stackTrace,
        );
      case 'dart.core.RangeError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<RangeError>(errorValue),
          stackTrace,
        );
      case 'dart.core.IndexError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<IndexError>(errorValue),
          stackTrace,
        );
      case 'dart.core.UnsupportedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<UnsupportedError>(errorValue),
          stackTrace,
        );
      case 'dart.core.UnimplementedError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<UnimplementedError>(errorValue),
          stackTrace,
        );
      case 'dart.core.StateError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<StateError>(errorValue),
          stackTrace,
        );
      case 'dart.core.ConcurrentModificationError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<ConcurrentModificationError>(errorValue),
          stackTrace,
        );
      case 'dart.core.OutOfMemoryError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<OutOfMemoryError>(errorValue),
          stackTrace,
        );
      case 'dart.core.StackOverflowError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<StackOverflowError>(errorValue),
          stackTrace,
        );
      case 'dart.core.Exception':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<Exception>(errorValue),
          stackTrace,
        );
      case 'dart.core.FormatException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<FormatException>(errorValue),
          stackTrace,
        );
      case 'dart.core.IntegerDivisionByZeroException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<IntegerDivisionByZeroException>(errorValue),
          stackTrace,
        );
      case 'dart.async.AsyncError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<AsyncError>(errorValue),
          stackTrace,
        );
      case 'dart.async.TimeoutException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<TimeoutException>(errorValue),
          stackTrace,
        );
      case 'dart.convert.JsonUnsupportedObjectError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<JsonUnsupportedObjectError>(errorValue),
          stackTrace,
        );
      case 'drift.DriftWrappedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$drift_exceptions.DriftWrappedException>(
                  errorValue),
          stackTrace,
        );
      case 'drift.CouldNotRollBackException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$drift_exceptions.CouldNotRollBackException>(
                  errorValue),
          stackTrace,
        );
      case 'dart.io.OSError':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<OSError>(errorValue),
          stackTrace,
        );
      case 'dart.io.FileSystemException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<FileSystemException>(errorValue),
          stackTrace,
        );
      case 'dart.io.PathAccessException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<PathAccessException>(errorValue),
          stackTrace,
        );
      case 'dart.io.PathExistsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<PathExistsException>(errorValue),
          stackTrace,
        );
      case 'dart.io.PathNotFoundException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<PathNotFoundException>(errorValue),
          stackTrace,
        );
      case 'dart.io.SignalException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<SignalException>(errorValue),
          stackTrace,
        );
      case 'dart.io.ProcessException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<ProcessException>(errorValue),
          stackTrace,
        );
      case 'dart.io.TlsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<TlsException>(errorValue),
          stackTrace,
        );
      case 'dart.io.HandshakeException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<HandshakeException>(errorValue),
          stackTrace,
        );
      case 'dart.io.CertificateException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<CertificateException>(errorValue),
          stackTrace,
        );
      case 'dart.io.StdoutException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<StdoutException>(errorValue),
          stackTrace,
        );
      case 'dart.io.StdinException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<StdinException>(errorValue),
          stackTrace,
        );
      case 'dart._http.HttpException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<HttpException>(errorValue),
          stackTrace,
        );
      case 'dart._http.WebSocketException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<WebSocketException>(errorValue),
          stackTrace,
        );
      case 'dart.isolate.IsolateSpawnException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<IsolateSpawnException>(errorValue),
          stackTrace,
        );
      case 'google_cloud.BadConfigurationException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<
              _$google_cloud_bad_configuration_exception
              .BadConfigurationException>(errorValue),
          stackTrace,
        );
      case 'google_cloud.BadRequestException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance.deserialize<
              _$google_cloud_bad_request_exception
              .BadRequestException>(errorValue),
          stackTrace,
        );
      case 'http.ClientException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$http_exception.ClientException>(errorValue),
          stackTrace,
        );
      case 'shelf.HijackException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$shelf_hijack_exception.HijackException>(
                  errorValue),
          stackTrace,
        );
      case 'sqlite3.SqliteException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$sqlite3_exception.SqliteException>(errorValue),
          stackTrace,
        );
      case 'drift.CancellationException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$drift_cancellation_zone.CancellationException>(
                  errorValue),
          stackTrace,
        );
      case 'drift.ConnectionClosedException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$drift_communication.ConnectionClosedException>(
                  errorValue),
          stackTrace,
        );
      case 'sqlite3.VfsException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$sqlite3_vfs.VfsException>(errorValue),
          stackTrace,
        );
      case 'hrana.ConnectionClosed':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$hrana_exception.ConnectionClosed>(errorValue),
          stackTrace,
        );
      case 'hrana.ServerException':
        Error.throwWithStackTrace(
          _$celest.Serializers.instance
              .deserialize<_$hrana_exception.ServerException>(errorValue),
          stackTrace,
        );
      default:
        Error.throwWithStackTrace(
          _$celest.CloudException.http(
            code: code,
            message: message,
            details: ((details ?? body) as _$celest.JsonValue),
          ),
          StackTrace.empty,
        );
    }
  }

  @_$celest.CloudFunction(
    api: 'tasks',
    function: 'listAllTasks',
  )
  Future<List<Task>> listAllTasks() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/tasks/list-all-tasks'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return ($body as Iterable<Object?>)
        .map((el) => _$celest.Serializers.instance.deserialize<Task>(el))
        .toList();
  }

  @_$celest.CloudFunction(
    api: 'tasks',
    function: 'addTask',
  )
  Future<Task> addTask({
    required String title,
    Priority priority = Priority.high,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/tasks/add-task'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({
        r'title': title,
        r'priority':
            _$celest.Serializers.instance.serialize<Priority>(priority),
      }),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance.deserialize<Task>($body);
  }

  @_$celest.CloudFunction(
    api: 'tasks',
    function: 'deleteTask',
  )
  Future<Task?> deleteTask({required int id}) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/tasks/delete-task'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({r'id': id}),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance.deserialize<Task?>($body);
  }

  @_$celest.CloudFunction(
    api: 'tasks',
    function: 'markAsComplete',
  )
  Future<Task> markAsComplete({required int id}) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/tasks/mark-as-complete'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({r'id': id}),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance.deserialize<Task>($body);
  }

  @_$celest.CloudFunction(
    api: 'tasks',
    function: 'markAsIncomplete',
  )
  Future<Task> markAsIncomplete({required int id}) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/tasks/mark-as-incomplete'),
      headers: const {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: _$celest.JsonUtf8.encode({r'id': id}),
    );
    final $body = _$celest.JsonUtf8.decode($response.bodyBytes);
    if ($response.statusCode != 200) {
      _throwError(
        code: $response.statusCode,
        body: ($body as Map<String, Object?>),
      );
    }
    return _$celest.Serializers.instance.deserialize<Task>($body);
  }
}
