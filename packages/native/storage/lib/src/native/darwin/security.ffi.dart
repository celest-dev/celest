// ignore_for_file: type=lint
// ignore_for_file: return_of_invalid_type
// ignore_for_file: unnecessary_non_null_assertion

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

import 'package:native_storage/src/native/darwin/core_foundation.ffi.dart'
    as cf;

@ffi.Native<ffi.Double>()
external double kCFCoreFoundationVersionNumber;

/// Constant used by some functions to indicate failed searches.
@ffi.Native<ffi.Long>()
external final int kCFNotFound;

/// the singleton null instance
@ffi.Native<ffi.Pointer<__CFNull>>()
external final ffi.Pointer<__CFNull> kCFNull;

/// This is a synonym for NULL, if you'd rather use a named constant.
@ffi.Native<ffi.Pointer<__CFAllocator>>()
external final ffi.Pointer<__CFAllocator> kCFAllocatorDefault;

/// Default system allocator; you rarely need to use this.
@ffi.Native<ffi.Pointer<__CFAllocator>>()
external final ffi.Pointer<__CFAllocator> kCFAllocatorSystemDefault;

/// This allocator uses malloc(), realloc(), and free(). This should not be
/// generally used; stick to kCFAllocatorDefault whenever possible. This
/// allocator is useful as the "bytesDeallocator" in CFData or
/// "contentsDeallocator" in CFString where the memory was obtained as a
/// result of malloc() type functions.
@ffi.Native<ffi.Pointer<__CFAllocator>>()
external final ffi.Pointer<__CFAllocator> kCFAllocatorMalloc;

/// This allocator explicitly uses the default malloc zone, returned by
/// malloc_default_zone(). It should only be used when an object is
/// safe to be allocated in non-scanned memory.
@ffi.Native<ffi.Pointer<__CFAllocator>>()
external final ffi.Pointer<__CFAllocator> kCFAllocatorMallocZone;

/// Null allocator which does nothing and allocates no memory. This allocator
/// is useful as the "bytesDeallocator" in CFData or "contentsDeallocator"
/// in CFString where the memory should not be freed.
@ffi.Native<ffi.Pointer<__CFAllocator>>()
external final ffi.Pointer<__CFAllocator> kCFAllocatorNull;

/// Special allocator argument to CFAllocatorCreate() which means
/// "use the functions given in the context to allocate the allocator
/// itself as well".
@ffi.Native<ffi.Pointer<__CFAllocator>>()
external final ffi.Pointer<__CFAllocator> kCFAllocatorUseContext;

/// !
/// @function SecCopyErrorMessageString
/// @abstract Returns a string describing the specified error result code.
/// @param status An error result code of type OSStatus or CSSM_RETURN, as returned by a Security or CSSM function.
/// @reserved Reserved for future use. Your code should pass NULL in this parameter.
/// @result A reference to an error string, or NULL if no error string is available for the specified result code. Your code must release this reference by calling the CFRelease function.
@ffi.Native<cf.CFStringRef Function(ffi.Int, ffi.Pointer<ffi.Void>)>()
external cf.CFStringRef SecCopyErrorMessageString(
  int status,
  ffi.Pointer<ffi.Void> reserved,
);

@ffi.Native<ffi.Pointer<__CFBoolean>>()
external final ffi.Pointer<__CFBoolean> kCFBooleanTrue;

@ffi.Native<ffi.Pointer<__CFBoolean>>()
external final ffi.Pointer<__CFBoolean> kCFBooleanFalse;

@ffi.Native<ffi.Pointer<__CFNumber>>()
external final ffi.Pointer<__CFNumber> kCFNumberPositiveInfinity;

@ffi.Native<ffi.Pointer<__CFNumber>>()
external final ffi.Pointer<__CFNumber> kCFNumberNegativeInfinity;

@ffi.Native<ffi.Pointer<__CFNumber>>()
external final ffi.Pointer<__CFNumber> kCFNumberNaN;

/// !
/// @constant kCFTypeArrayCallBacks
/// Predefined CFArrayCallBacks structure containing a set of callbacks
/// appropriate for use when the values in a CFArray are all CFTypes.
@ffi.Native<CFArrayCallBacks>()
external final CFArrayCallBacks kCFTypeArrayCallBacks;

/// !
/// @constant kCFTypeDictionaryKeyCallBacks
/// Predefined CFDictionaryKeyCallBacks structure containing a
/// set of callbacks appropriate for use when the keys of a
/// CFDictionary are all CFTypes.
@ffi.Native<CFDictionaryKeyCallBacks>()
external final CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks;

/// !
/// @constant kCFCopyStringDictionaryKeyCallBacks
/// Predefined CFDictionaryKeyCallBacks structure containing a
/// set of callbacks appropriate for use when the keys of a
/// CFDictionary are all CFStrings, which may be mutable and
/// need to be copied in order to serve as constant keys for
/// the values in the dictionary.
@ffi.Native<CFDictionaryKeyCallBacks>()
external final CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks;

/// !
/// @constant kCFTypeDictionaryValueCallBacks
/// Predefined CFDictionaryValueCallBacks structure containing a set
/// of callbacks appropriate for use when the values in a CFDictionary
/// are all CFTypes.
@ffi.Native<CFDictionaryValueCallBacks>()
external final CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks;

/// !
/// @enum Class Key Constant
/// @discussion Predefined key constant used to get or set item class values in
/// a dictionary. Its value is one of the constants defined in the Value
/// Constants for kSecClass.
/// @constant kSecClass Specifies a dictionary key whose value is the item's
/// class code.  You use this key to get or set a value of type CFTypeRef
/// that contains the item class code.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecClass;

/// !
/// @enum Class Value Constants
/// @discussion Predefined item class constants used to get or set values in
/// a dictionary. The kSecClass constant is the key and its value is one
/// of the constants defined here. Note: on Mac OS X 10.6, only items
/// of class kSecClassInternetPassword are supported.
/// @constant kSecClassInternetPassword Specifies Internet password items.
/// @constant kSecClassGenericPassword Specifies generic password items.
/// @constant kSecClassCertificate Specifies certificate items.
/// @constant kSecClassKey Specifies key items.
/// @constant kSecClassIdentity Specifies identity items.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecClassInternetPassword;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecClassGenericPassword;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecClassCertificate;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecClassKey;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecClassIdentity;

/// !
/// @enum Attribute Key Constants
/// @discussion Predefined item attribute keys used to get or set values in a
/// dictionary. Not all attributes apply to each item class. The table
/// below lists the currently defined attributes for each item class:
///
/// kSecClassGenericPassword item attributes:
/// kSecAttrAccess (OS X only)
/// kSecAttrAccessControl
/// kSecAttrAccessGroup (iOS; also OS X if kSecAttrSynchronizable and/or kSecUseDataProtectionKeychain set)
/// kSecAttrAccessible (iOS; also OS X if kSecAttrSynchronizable and/or kSecUseDataProtectionKeychain set)
/// kSecAttrCreationDate
/// kSecAttrModificationDate
/// kSecAttrDescription
/// kSecAttrComment
/// kSecAttrCreator
/// kSecAttrType
/// kSecAttrLabel
/// kSecAttrIsInvisible
/// kSecAttrIsNegative
/// kSecAttrAccount
/// kSecAttrService
/// kSecAttrGeneric
/// kSecAttrSynchronizable
///
/// kSecClassInternetPassword item attributes:
/// kSecAttrAccess (OS X only)
/// kSecAttrAccessControl
/// kSecAttrAccessGroup (iOS; also OS X if kSecAttrSynchronizable and/or kSecUseDataProtectionKeychain set)
/// kSecAttrAccessible (iOS; also OS X if kSecAttrSynchronizable and/or kSecUseDataProtectionKeychain set)
/// kSecAttrCreationDate
/// kSecAttrModificationDate
/// kSecAttrDescription
/// kSecAttrComment
/// kSecAttrCreator
/// kSecAttrType
/// kSecAttrLabel
/// kSecAttrIsInvisible
/// kSecAttrIsNegative
/// kSecAttrAccount
/// kSecAttrSecurityDomain
/// kSecAttrServer
/// kSecAttrProtocol
/// kSecAttrAuthenticationType
/// kSecAttrPort
/// kSecAttrPath
/// kSecAttrSynchronizable
///
/// kSecClassCertificate item attributes:
/// kSecAttrAccessible    (iOS only)
/// kSecAttrAccessControl (iOS only)
/// kSecAttrAccessGroup   (iOS only)
/// kSecAttrCertificateType
/// kSecAttrCertificateEncoding
/// kSecAttrLabel
/// kSecAttrSubject
/// kSecAttrIssuer
/// kSecAttrSerialNumber
/// kSecAttrSubjectKeyID
/// kSecAttrPublicKeyHash
/// kSecAttrSynchronizable
///
/// kSecClassKey item attributes:
/// kSecAttrAccess (OS X only)
/// kSecAttrAccessControl
/// kSecAttrAccessGroup (iOS; also OS X if kSecAttrSynchronizable and/or kSecUseDataProtectionKeychain set)
/// kSecAttrAccessible (iOS; also OS X if kSecAttrSynchronizable and/or kSecUseDataProtectionKeychain set)
/// kSecAttrKeyClass
/// kSecAttrLabel
/// kSecAttrApplicationLabel
/// kSecAttrIsPermanent
/// kSecAttrApplicationTag
/// kSecAttrKeyType
/// kSecAttrPRF    (OS X only)
/// kSecAttrSalt   (OS X only)
/// kSecAttrRounds (OS X only)
/// kSecAttrKeySizeInBits
/// kSecAttrEffectiveKeySize
/// kSecAttrCanEncrypt
/// kSecAttrCanDecrypt
/// kSecAttrCanDerive
/// kSecAttrCanSign
/// kSecAttrCanVerify
/// kSecAttrCanWrap
/// kSecAttrCanUnwrap
/// kSecAttrSynchronizable
///
/// Note that the attributes kSecAttrCan* describe attributes of the
/// key itself at relatively high level. Some of these attributes are
/// mathematical -- for example, a DSA key cannot encrypt. Others are
/// key-level policy issues -- for example, it is good cryptographic
/// hygiene to use an RSA key either for encryption or signing but not
/// both. Compare these to the certificate-level policy values in
/// SecPolicy.h.
///
/// kSecClassIdentity item attributes:
/// Since an identity is the combination of a private key and a
/// certificate, this class shares attributes of both kSecClassKey and
/// kSecClassCertificate.
///
/// @constant kSecAttrAccessible Specifies a dictionary key whose value
/// indicates when your application needs access to an item's data.  You
/// should choose the most restrictive option that meets your application's
/// needs to allow the system to protect that item in the best way possible.
/// See the "kSecAttrAccessible Value Constants" section for a list of
/// values which can be specified.
/// IMPORTANT: This attribute is currently not supported for OS X keychain
/// items, unless the kSecAttrSynchronizable attribute is also present. If
/// both attributes are specified on either OS X or iOS, the value for the
/// kSecAttrAccessible key may only be one whose name does not end with
/// "ThisDeviceOnly", as those cannot sync to another device.
///
/// @constant kSecAttrAccessControl Specifies a dictionary key whose value
/// is SecAccessControl instance which contains access control conditions
/// for item.
/// IMPORTANT: This attribute is mutually exclusive with kSecAttrAccess
/// attribute.
///
/// @constant kSecAttrAccess Specifies a dictionary key whose value
/// is a SecAccessRef describing the access control settings for this item.
/// This key is available on OS X only.
///
/// @constant kSecAttrAccessGroup Specifies a dictionary key whose value is
/// a CFStringRef indicating which access group a item is in.  The access
/// groups that a particular application has membership in are determined by
/// two entitlements for that application.  The application-identifier
/// entitlement contains the application's single access group, unless
/// there is a keychain-access-groups entitlement present.  The latter
/// has as its value a list of access groups; the first item in this list
/// is the default access group. Unless a specific access group is provided
/// as the value of kSecAttrAccessGroup when SecItemAdd is called, new items
/// are created in the application's default access group.  Specifying this
/// attribute in SecItemCopyMatching, SecItemUpdate, or SecItemDelete calls
/// limits the search to the specified access group (of which the calling
/// application must be a member to obtain matching results.)  To share
/// keychain items between multiple applications, each application must have
/// a common group listed in its keychain-access-groups entitlement, and each
/// must specify this shared access group name as the value for the
/// kSecAttrAccessGroup key in the dictionary passed to SecItem functions.
///
/// @constant kSecAttrSynchronizable Specifies a dictionary key whose value is
/// a CFBooleanRef indicating whether the item in question can be synchronized.
/// To add a new item which can be synced to other devices, or to obtain
/// synchronizable results from a query, supply this key with a value of
/// kCFBooleanTrue. If the key is not supplied, or has a value of
/// kCFBooleanFalse, then no synchronizable items will be added or returned.
/// A predefined value, kSecAttrSynchronizableAny, may be provided instead of
/// kCFBooleanTrue if both synchronizable and non-synchronizable results are
/// desired.
///
/// IMPORTANT: Specifying the kSecAttrSynchronizable key has several caveats:
///
/// - Updating or deleting items using the kSecAttrSynchronizable key will
/// affect all copies of the item, not just the one on your local device.
/// Be sure that it makes sense to use the same password on all devices
/// before deciding to make a password synchronizable.
/// - Starting in iOS 14, macOS 11, and watchOS 7, the keychain
/// synchronizes passwords, certificates, and cryptographic keys.
/// Earlier OS versions synchronize only passwords.
/// - Items stored or obtained using the kSecAttrSynchronizable key cannot
/// specify SecAccessRef-based access control with kSecAttrAccess. If a
/// password is intended to be shared between multiple applications, the
/// kSecAttrAccessGroup key must be specified, and each application
/// using this password must have a 'keychain-access-groups' entitlement
/// with the specified access group value.
/// - Items stored or obtained using the kSecAttrSynchronizable key may
/// not also specify a kSecAttrAccessible value which is incompatible
/// with syncing (namely, those whose names end with "ThisDeviceOnly".)
/// - On macOS, when kSecAttrSynchronizable is set to true, returning
/// references is supported only for Certificate, Key or Identity items.
/// - Persistent references to synchronizable items should be avoided;
/// while they may work locally, they cannot be moved between devices,
/// and may not resolve if the item is modified on some other device.
/// - When specifying a query that uses the kSecAttrSynchronizable key,
/// search keys are limited to the item's class and attributes.
/// The only search constant which may be used is kSecMatchLimit; other
/// constants using the kSecMatch prefix are not supported at this time.
///
/// @constant kSecAttrSynchronizableAny Specifies that both synchronizable and
/// non-synchronizable results should be returned from this query. This may be
/// used as a value for the kSecAttrSynchronizable dictionary key in a call to
/// SecItemCopyMatching, SecItemUpdate, or SecItemDelete.
///
/// @constant kSecAttrCreationDate (read-only) Specifies a dictionary key whose
/// value is the item's creation date. You use this key to get a value
/// of type CFDateRef that represents the date the item was created.
/// @constant kSecAttrModificationDate (read-only) Specifies a dictionary key
/// whose value is the item's modification date. You use this key to get
/// a value of type CFDateRef that represents the last time the item was
/// updated.
/// @constant kSecAttrDescription Specifies a dictionary key whose value is
/// the item's description attribute. You use this key to set or get a
/// value of type CFStringRef that represents a user-visible string
/// describing this particular kind of item (e.g., "disk image password").
/// @constant kSecAttrComment Specifies a dictionary key whose value is the
/// item's comment attribute. You use this key to set or get a value of
/// type CFStringRef containing the user-editable comment for this item.
/// @constant kSecAttrCreator Specifies a dictionary key whose value is the
/// item's creator attribute. You use this key to set or get a value of
/// type CFNumberRef that represents the item's creator. This number is
/// the unsigned integer representation of a four-character code (e.g.,
/// 'aCrt').
/// @constant kSecAttrType Specifies a dictionary key whose value is the item's
/// type attribute. You use this key to set or get a value of type
/// CFNumberRef that represents the item's type. This number is the
/// unsigned integer representation of a four-character code (e.g.,
/// 'aTyp').
/// @constant kSecAttrLabel Specifies a dictionary key whose value is the
/// item's label attribute. You use this key to set or get a value of
/// type CFStringRef containing the user-visible label for this item.
/// @constant kSecAttrIsInvisible Specifies a dictionary key whose value is the
/// item's invisible attribute. You use this key to set or get a value
/// of type CFBooleanRef that indicates whether the item is invisible
/// (i.e., should not be displayed.)
/// @constant kSecAttrIsNegative Specifies a dictionary key whose value is the
/// item's negative attribute. You use this key to set or get a value of
/// type CFBooleanRef that indicates whether there is a valid password
/// associated with this keychain item. This is useful if your application
/// doesn't want a password for some particular service to be stored in
/// the keychain, but prefers that it always be entered by the user.
/// @constant kSecAttrAccount Specifies a dictionary key whose value is the
/// item's account attribute. You use this key to set or get a CFStringRef
/// that contains an account name. (Items of class
/// kSecClassGenericPassword, kSecClassInternetPassword have this
/// attribute.)
/// @constant kSecAttrService Specifies a dictionary key whose value is the
/// item's service attribute. You use this key to set or get a CFStringRef
/// that represents the service associated with this item. (Items of class
/// kSecClassGenericPassword have this attribute.)
/// @constant kSecAttrGeneric Specifies a dictionary key whose value is the
/// item's generic attribute. You use this key to set or get a value of
/// CFDataRef that contains a user-defined attribute. (Items of class
/// kSecClassGenericPassword have this attribute.)
/// @constant kSecAttrSecurityDomain Specifies a dictionary key whose value
/// is the item's security domain attribute. You use this key to set or
/// get a CFStringRef value that represents the Internet security domain.
/// (Items of class kSecClassInternetPassword have this attribute.)
/// @constant kSecAttrServer Specifies a dictionary key whose value is the
/// item's server attribute. You use this key to set or get a value of
/// type CFStringRef that contains the server's domain name or IP address.
/// (Items of class kSecClassInternetPassword have this attribute.)
/// @constant kSecAttrProtocol Specifies a dictionary key whose value is the
/// item's protocol attribute. You use this key to set or get a value of
/// type CFNumberRef that denotes the protocol for this item (see the
/// SecProtocolType enum in SecKeychainItem.h). (Items of class
/// kSecClassInternetPassword have this attribute.)
/// @constant kSecAttrAuthenticationType Specifies a dictionary key whose value
/// is the item's authentication type attribute. You use this key to set
/// or get a value of type CFNumberRef that denotes the authentication
/// scheme for this item (see the kSecAttrAuthenticationType value
/// constants below).
/// @constant kSecAttrPort Specifies a dictionary key whose value is the item's
/// port attribute. You use this key to set or get a CFNumberRef value
/// that represents an Internet port number. (Items of class
/// kSecClassInternetPassword have this attribute.)
/// @constant kSecAttrPath Specifies a dictionary key whose value is the item's
/// path attribute, typically this is the path component of the URL.  You use
/// this key to set or get a CFStringRef value that represents a path. (Items
/// of class kSecClassInternetPassword have this attribute.)
/// @constant kSecAttrSubject (read-only) Specifies a dictionary key whose
/// value is the item's subject. You use this key to get a value of type
/// CFDataRef that contains the X.500 subject name of a certificate.
/// (Items of class kSecClassCertificate have this attribute.)
/// @constant kSecAttrIssuer (read-only) Specifies a dictionary key whose value
/// is the item's issuer. You use this key to get a value of type
/// CFDataRef that contains the X.500 issuer name of a certificate. (Items
/// of class kSecClassCertificate have this attribute.)
/// @constant kSecAttrSerialNumber (read-only) Specifies a dictionary key whose
/// value is the item's serial number.  You use this key to get a value
/// of type CFDataRef that contains the serial number data of a
/// certificate. (Items of class kSecClassCertificate have this
/// attribute.)
/// @constant kSecAttrSubjectKeyID (read-only) Specifies a dictionary key whose
/// value is the item's subject key ID. You use this key to get a value
/// of type CFDataRef that contains the subject key ID of a certificate.
/// (Items of class kSecClassCertificate have this attribute.)
/// @constant kSecAttrPublicKeyHash (read-only) Specifies a dictionary key
/// whose value is the item's public key hash. You use this key to get a
/// value of type CFDataRef that contains the hash of a certificate's
/// public key. (Items of class kSecClassCertificate have this attribute.)
/// @constant kSecAttrCertificateType (read-only) Specifies a dictionary key
/// whose value is the item's certificate type. You use this key to get
/// a value of type CFNumberRef that denotes the certificate type
/// (On iOS, currently the value of this attribute must be equal to the
/// version of the X509 certificate.  So, 1 for v1, 2 for v2, and 3 for v3
/// certificates). (On OSX, see the CSSM_CERT_TYPE enum in cssmtype.h).
/// Only items of class kSecClassCertificate have this attribute.
/// @constant kSecAttrCertificateEncoding (read-only) Specifies a dictionary
/// key whose value is the item's certificate encoding. You use this key
/// to get a value of type CFNumberRef that denotes the certificate
/// encoding (On iOS, currently only the value 3 meaning
/// kSecAttrCertificateEncodingDER is supported). On OSX, see the
/// CSSM_CERT_ENCODING enum in cssmtype.h. Only items of class
/// kSecClassCertificate have this attribute.
/// @constant kSecAttrKeyClass (read only) Specifies a dictionary key whose
/// value is one of kSecAttrKeyClassPublic, kSecAttrKeyClassPrivate or
/// kSecAttrKeyClassSymmetric.
/// @constant kSecAttrApplicationLabel Specifies a dictionary key whose value
/// is the key's application label attribute. This is different from the
/// kSecAttrLabel (which is intended to be human-readable). This attribute
/// is used to look up a key programmatically; in particular, for keys of
/// class kSecAttrKeyClassPublic and kSecAttrKeyClassPrivate, the value of
/// this attribute is the hash of the public key. This item is a type of CFDataRef.
/// Legacy keys may contain a UUID in this field as a CFStringRef.
/// @constant kSecAttrIsPermanent Specifies a dictionary key whose value is a
/// CFBooleanRef indicating whether the key in question will be stored
/// permanently.
/// @constant kSecAttrIsSensitive Specifies a dictionary key whose value is a
/// CFBooleanRef indicating that the key in question can only be exported
/// in a wrapped (encrypted) format. OS X only.
/// @constant kSecAttrIsExtractable Specifies a dictionary key whose value is a
/// CFBooleanRef indicating whether the key in question can be exported from
/// its keychain container. OS X only.
/// @constant kSecAttrApplicationTag Specifies a dictionary key whose value is a
/// CFDataRef containing private tag data.
/// @constant kSecAttrKeyType Specifies a dictionary key whose value is a
/// CFNumberRef indicating the algorithm associated with this key
/// (On iOS, currently only the value 42 is supported, alternatively you can use
/// kSecAttrKeyTypeRSA). (On OSX, see the CSSM_ALGORITHMS enum in cssmtype.h).
///
/// @constant kSecAttrPRF Specifies a dictionary key whose value is the PRF
/// (pseudo-random function) for this key (see "kSecAttrPRF Value Constants".)
/// OS X only.
/// @constant kSecAttrSalt Specifies a dictionary key whose value is a
/// CFData containing the salt to use for this key. OS X only.
/// @constant kSecAttrRounds Specifies a dictionary key whose value is the
/// number of rounds for the pseudo-random function specified by kSecAttrPRF.
/// OS X only.
/// @constant kSecAttrKeySizeInBits Specifies a dictionary key whose value
/// is a CFNumberRef indicating the number of bits in this key.
/// @constant kSecAttrEffectiveKeySize Specifies a dictionary key whose value
/// is a CFNumberRef indicating the effective number of bits in this key.
/// For example, a DES key has a kSecAttrKeySizeInBits of 64, but a
/// kSecAttrEffectiveKeySize of 56 bits.
/// @constant kSecAttrCanEncrypt Specifies a dictionary key whole value is a
/// CFBooleanRef indicating whether the key in question can be used to
/// encrypt data.
/// @constant kSecAttrCanDecrypt Specifies a dictionary key whose value is a
/// CFBooleanRef indicating whether the key in question can be used to
/// decrypt data.
/// @constant kSecAttrCanDerive Specifies a dictionary key whole value is a
/// CFBooleanRef indicating whether the key in question can be used to
/// derive another key.
/// @constant kSecAttrCanSign Specifies a dictionary key whole value is a
/// CFBooleanRef indicating whether the key in question can be used to
/// create a digital signature.
/// @constant kSecAttrCanVerify Specifies a dictionary key whole value is a
/// CFBooleanRef indicating whether the key in question can be used to
/// verify a digital signature.
/// @constant kSecAttrCanWrap Specifies a dictionary key whole value is a
/// CFBooleanRef indicating whether the key in question can be used to
/// wrap another key.
/// @constant kSecAttrCanUnwrap Specifies a dictionary key whole value is a
/// CFBooleanRef indicating whether the key in question can be used to
/// unwrap another key.
/// @constant kSecAttrSyncViewHint Specifies a dictionary key whose value is
/// a CFStringRef. This value is part of the primary key of each item, and
/// can be used to help distiguish Sync Views when defining their
/// queries. iOS and sychronizable items only.
/// @constant kSecAttrTokenID Specifies a dictionary key whose presence
/// indicates that item is backed by external token. Value of this attribute
/// is CFStringRef uniquely identifying containing token. When this attribute
/// is not present, item is stored in internal keychain database.
/// Note that once item is created, this attribute cannot be changed - in other
/// words it is not possible to migrate existing items to, from or between tokens.
/// Currently the only available value for this attribute is
/// kSecAttrTokenIDSecureEnclave, which indicates that item (private key) is
/// backed by device's Secure Enclave.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessible;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccess;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessControl;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessGroup;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrSynchronizable;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrSynchronizableAny;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCreationDate;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrModificationDate;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrDescription;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrComment;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCreator;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrType;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrLabel;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrIsInvisible;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrIsNegative;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccount;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrService;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrGeneric;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrSecurityDomain;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrServer;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocol;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationType;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPort;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPath;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrSubject;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrIssuer;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrSerialNumber;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrSubjectKeyID;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPublicKeyHash;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCertificateType;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCertificateEncoding;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyClass;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrApplicationLabel;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrIsPermanent;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrIsSensitive;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrIsExtractable;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrApplicationTag;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyType;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPRF;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrSalt;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrRounds;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeySizeInBits;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrEffectiveKeySize;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCanEncrypt;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCanDecrypt;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCanDerive;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCanSign;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCanVerify;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCanWrap;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrCanUnwrap;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrSyncViewHint;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrTokenID;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPersistantReference;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPersistentReference;

/// !
/// @enum kSecAttrAccessible Value Constants
/// @discussion Predefined item attribute constants used to get or set values
/// in a dictionary. The kSecAttrAccessible constant is the key and its
/// value is one of the constants defined here.
/// When asking SecItemCopyMatching to return the item's data, the error
/// errSecInteractionNotAllowed will be returned if the item's data is not
/// available until a device unlock occurs.
/// @constant kSecAttrAccessibleWhenUnlocked Item data can only be accessed
/// while the device is unlocked. This is recommended for items that only
/// need be accesible while the application is in the foreground.  Items
/// with this attribute will migrate to a new device when using encrypted
/// backups.
/// @constant kSecAttrAccessibleAfterFirstUnlock Item data can only be
/// accessed once the device has been unlocked after a restart.  This is
/// recommended for items that need to be accesible by background
/// applications. Items with this attribute will migrate to a new device
/// when using encrypted backups.
/// @constant kSecAttrAccessibleAlways Item data can always be accessed
/// regardless of the lock state of the device.  This is not recommended
/// for anything except system use. Items with this attribute will migrate
/// to a new device when using encrypted backups.
/// @constant kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly Item data can
/// only be accessed while the device is unlocked. This is recommended for
/// items that only need to be accessible while the application is in the
/// foreground and requires a passcode to be set on the device. Items with
/// this attribute will never migrate to a new device, so after a backup
/// is restored to a new device, these items will be missing. This
/// attribute will not be available on devices without a passcode. Disabling
/// the device passcode will cause all previously protected items to
/// be deleted.
/// @constant kSecAttrAccessibleWhenUnlockedThisDeviceOnly Item data can only
/// be accessed while the device is unlocked. This is recommended for items
/// that only need be accesible while the application is in the foreground.
/// Items with this attribute will never migrate to a new device, so after
/// a backup is restored to a new device, these items will be missing.
/// @constant kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly Item data can
/// only be accessed once the device has been unlocked after a restart.
/// This is recommended for items that need to be accessible by background
/// applications. Items with this attribute will never migrate to a new
/// device, so after a backup is restored to a new device these items will
/// be missing.
/// @constant kSecAttrAccessibleAlwaysThisDeviceOnly Item data can always
/// be accessed regardless of the lock state of the device.  This option
/// is not recommended for anything except system use. Items with this
/// attribute will never migrate to a new device, so after a backup is
/// restored to a new device, these items will be missing.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessibleWhenUnlocked;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessibleAfterFirstUnlock;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessibleAlways;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessibleWhenUnlockedThisDeviceOnly;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessibleAlwaysThisDeviceOnly;

/// !
/// @enum kSecAttrProtocol Value Constants
/// @discussion Predefined item attribute constants used to get or set values
/// in a dictionary. The kSecAttrProtocol constant is the key and its
/// value is one of the constants defined here.
/// @constant kSecAttrProtocolFTP.
/// @constant kSecAttrProtocolFTPAccount.
/// @constant kSecAttrProtocolHTTP.
/// @constant kSecAttrProtocolIRC.
/// @constant kSecAttrProtocolNNTP.
/// @constant kSecAttrProtocolPOP3.
/// @constant kSecAttrProtocolSMTP.
/// @constant kSecAttrProtocolSOCKS.
/// @constant kSecAttrProtocolIMAP.
/// @constant kSecAttrProtocolLDAP.
/// @constant kSecAttrProtocolAppleTalk.
/// @constant kSecAttrProtocolAFP.
/// @constant kSecAttrProtocolTelnet.
/// @constant kSecAttrProtocolSSH.
/// @constant kSecAttrProtocolFTPS.
/// @constant kSecAttrProtocolHTTPS.
/// @constant kSecAttrProtocolHTTPProxy.
/// @constant kSecAttrProtocolHTTPSProxy.
/// @constant kSecAttrProtocolFTPProxy.
/// @constant kSecAttrProtocolSMB.
/// @constant kSecAttrProtocolRTSP.
/// @constant kSecAttrProtocolRTSPProxy.
/// @constant kSecAttrProtocolDAAP.
/// @constant kSecAttrProtocolEPPC.
/// @constant kSecAttrProtocolIPP.
/// @constant kSecAttrProtocolNNTPS.
/// @constant kSecAttrProtocolLDAPS.
/// @constant kSecAttrProtocolTelnetS.
/// @constant kSecAttrProtocolIMAPS.
/// @constant kSecAttrProtocolIRCS.
/// @constant kSecAttrProtocolPOP3S.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolFTP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolFTPAccount;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolHTTP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolIRC;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolNNTP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolPOP3;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolSMTP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolSOCKS;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolIMAP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolLDAP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolAppleTalk;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolAFP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolTelnet;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolSSH;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolFTPS;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolHTTPS;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolHTTPProxy;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolHTTPSProxy;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolFTPProxy;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolSMB;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolRTSP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolRTSPProxy;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolDAAP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolEPPC;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolIPP;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolNNTPS;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolLDAPS;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolTelnetS;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolIMAPS;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolIRCS;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrProtocolPOP3S;

/// !
/// @enum kSecAttrAuthenticationType Value Constants
/// @discussion Predefined item attribute constants used to get or set values
/// in a dictionary. The kSecAttrAuthenticationType constant is the key
/// and its value is one of the constants defined here.
/// @constant kSecAttrAuthenticationTypeNTLM.
/// @constant kSecAttrAuthenticationTypeMSN.
/// @constant kSecAttrAuthenticationTypeDPA.
/// @constant kSecAttrAuthenticationTypeRPA.
/// @constant kSecAttrAuthenticationTypeHTTPBasic.
/// @constant kSecAttrAuthenticationTypeHTTPDigest.
/// @constant kSecAttrAuthenticationTypeHTMLForm.
/// @constant kSecAttrAuthenticationTypeDefault.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationTypeNTLM;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationTypeMSN;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationTypeDPA;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationTypeRPA;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationTypeHTTPBasic;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationTypeHTTPDigest;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationTypeHTMLForm;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAuthenticationTypeDefault;

/// !
/// @enum kSecAttrKeyClass Value Constants
/// @discussion Predefined item attribute constants used to get or set values
/// in a dictionary. The kSecAttrKeyClass constant is the key
/// and its value is one of the constants defined here.
/// @constant kSecAttrKeyClassPublic.
/// @constant kSecAttrKeyClassPrivate.
/// @constant kSecAttrKeyClassSymmetric.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyClassPublic;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyClassPrivate;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyClassSymmetric;

/// !
/// @enum kSecAttrKeyType Value Constants
/// @discussion Predefined item attribute constants used to get or set values
/// in a dictionary. The kSecAttrKeyType constant is the key
/// and its value is one of the constants defined here.
/// @constant kSecAttrKeyTypeECSECPrimeRandom. The used curve is P-192, P-256, P-384 or P-521.
/// The size is specified by kSecAttrKeySizeInBits attribute. Curves are defined in FIPS PUB 186-4 standard.
/// @constant kSecAttrKeyTypeEC This is the legacy name for kSecAttrKeyTypeECSECPrimeRandom, new applications should not use it.
/// @constant kSecAttrKeyTypeDSA (OSX only)
/// @constant kSecAttrKeyTypeAES (OSX only)
/// @constant kSecAttrKeyType3DES (OSX only)
/// @constant kSecAttrKeyTypeRC4 (OSX only)
/// @constant kSecAttrKeyTypeRC2 (OSX only)
/// @constant kSecAttrKeyTypeCAST (OSX only)
/// @constant kSecAttrKeyTypeECDSA (deprecated; use kSecAttrKeyTypeECSECPrimeRandom instead.) (OSX only)
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeRSA;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeDSA;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeAES;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeDES;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyType3DES;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeRC4;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeRC2;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeCAST;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeECDSA;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeEC;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrKeyTypeECSECPrimeRandom;

/// @enum kSecAttrPRF Value Constants
/// @discussion Predefined item attribute constants used to specify the PRF
/// to use with SecKeyDeriveFromPassword. OS X only.
/// @constant kSecAttrPRFHmacAlgSHA1
/// @constant kSecAttrPRFHmacAlgSHA224
/// @constant kSecAttrPRFHmacAlgSHA256
/// @constant kSecAttrPRFHmacAlgSHA384
/// @constant kSecAttrPRFHmacAlgSHA512
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPRFHmacAlgSHA1;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPRFHmacAlgSHA224;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPRFHmacAlgSHA256;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPRFHmacAlgSHA384;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrPRFHmacAlgSHA512;

/// !
/// @enum Search Constants
/// @discussion Predefined search constants used to set values in a query
/// dictionary. You can specify a combination of search attributes and
/// item attributes when looking for matching items with the
/// SecItemCopyMatching function.
/// @constant kSecMatchPolicy Specifies a dictionary key whose value is a
/// SecPolicyRef. If provided, returned certificates or identities must
/// verify with this policy.
/// @constant kSecMatchItemList OS X only. Specifies a dictionary key whose value is a
/// CFArray of SecKeychainItemRef items. If provided, returned items will be
/// limited to the subset which are contained in this list.
/// @constant kSecMatchSearchList Specifies a dictionary key whose value is a
/// CFArray of SecKeychainRef items. If provided, the search will be limited
/// to the keychains contained in this list.
/// @constant kSecMatchIssuers Specifies a dictionary key whose value is a
/// CFArray of X.500 names (of type CFDataRef). If provided, returned
/// certificates or identities will be limited to those whose
/// certificate chain contains one of the issuers provided in this list.
/// @constant kSecMatchEmailAddressIfPresent Specifies a dictionary key whose
/// value is a CFStringRef containing an RFC822 email address. If
/// provided, returned certificates or identities will be limited to those
/// that contain the address in their subject or subject alternative name.
/// @constant kSecMatchSubjectContains Specifies a dictionary key whose value
/// is a CFStringRef. If provided, returned certificates or identities
/// will be limited to those containing this string in the subject.
/// @constant kSecMatchSubjectStartsWith OS X only. Specifies a dictionary key whose value
/// is a CFStringRef. If provided, returned certificates or identities
/// will be limited to those with subject names that start with this string.
/// @constant kSecMatchSubjectEndsWith OS X only. Specifies a dictionary key whose value
/// is a CFStringRef. If provided, returned certificates or identities
/// will be limited to those with subject names that end with this string.
/// @constant kSecMatchSubjectWholeString OS X only. Specifies a dictionary key whose
/// value is a CFStringRef. If provided, returned certificates or identities
/// will be limited to those matching this string exactly in the subject.
/// @constant kSecMatchCaseInsensitive Specifies a dictionary key whose value
/// is a CFBooleanRef. If this value is kCFBooleanFalse, or is not
/// provided, then case-sensitive string matching is performed.
/// @constant kSecMatchDiacriticInsensitive OS X only. Specifies a dictionary key whose
/// value is a CFBooleanRef. If this value is kCFBooleanFalse, or is not
/// provided, then diacritic-sensitive string matching is performed.
/// @constant kSecMatchWidthInsensitive OS X only. Specifies a dictionary key whose
/// value is a CFBooleanRef. If this value is kCFBooleanFalse, or is not
/// provided, then string matching is width-sensitive (e.g. 'a' != 0xFF41).
/// @constant kSecMatchTrustedOnly Specifies a dictionary key whose value is
/// a CFBooleanRef. If provided with a value of kCFBooleanTrue, only
/// certificates which can be verified back to a trusted anchor will be
/// returned. If this value is kCFBooleanFalse, or is not provided, then
/// both trusted and untrusted certificates may be returned.
/// @constant kSecMatchValidOnDate Specifies a dictionary key whose value is
/// of type CFDateRef. If provided, returned keys, certificates or
/// identities will be limited to those which are valid for the given date.
/// Pass a value of kCFNull to indicate the current date.
/// @constant kSecMatchLimit Specifies a dictionary key whose value is a
/// CFNumberRef. If provided, this value specifies the maximum number of
/// results to return. If not provided, results are limited to the first
/// item found. Predefined values are provided for a single item
/// (kSecMatchLimitOne) and all matching items (kSecMatchLimitAll).
/// @constant kSecMatchLimitOne Specifies that results are limited to the first
/// item found; used as a value for the kSecMatchLimit dictionary key.
/// @constant kSecMatchLimitAll Specifies that an unlimited number of results
/// may be returned; used as a value for the kSecMatchLimit dictionary
/// key.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchPolicy;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchItemList;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchSearchList;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchIssuers;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchEmailAddressIfPresent;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchSubjectContains;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchSubjectStartsWith;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchSubjectEndsWith;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchSubjectWholeString;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchCaseInsensitive;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchDiacriticInsensitive;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchWidthInsensitive;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchTrustedOnly;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchValidOnDate;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchLimit;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchLimitOne;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecMatchLimitAll;

/// !
/// @enum Return Type Key Constants
/// @discussion Predefined return type keys used to set values in a dictionary.
/// You use these keys to specify the type of results which should be
/// returned by the SecItemCopyMatching or SecItemAdd function. You can
/// specify zero or more of these return types. If more than one of these
/// result types is specified, the result is returned as a CFDictionaryRef
/// whose keys are the result types and values are the requested data.
/// @constant kSecReturnData Specifies a dictionary key whose value is of type
/// CFBooleanRef. A value of kCFBooleanTrue indicates that the data of
/// an item (CFDataRef) should be returned. For keys and password
/// items, data is secret (encrypted) and may require the user to enter
/// a password for access.
/// @constant kSecReturnAttributes Specifies a dictionary key whose value is
/// of type CFBooleanRef. A value of kCFBooleanTrue indicates that the
/// (non-encrypted) attributes of an item (CFDictionaryRef) should be
/// returned.
/// @constant kSecReturnRef Specifies a dictionary key whose value is a
/// CFBooleanRef. A value of kCFBooleanTrue indicates that a reference
/// should be returned. Depending on the item class requested, the
/// returned reference(s) may be of type SecKeychainItemRef, SecKeyRef,
/// SecCertificateRef, or SecIdentityRef. Note that returning references is
/// supported only for Certificate, Key or Identity items on iOS, watchOS and
/// tvOS. Similarly, returning references is supported only for Certificate, Key
/// or Identity items on macOS when either kSecUseDataProtectionKeychain
/// is set to true or kSecAttrSynchronizable is set to true.
/// @constant kSecReturnPersistentRef Specifies a dictionary key whose value
/// is of type CFBooleanRef. A value of kCFBooleanTrue indicates that a
/// persistent reference to an item (CFDataRef) should be returned.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecReturnData;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecReturnAttributes;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecReturnRef;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecReturnPersistentRef;

/// !
/// @enum Value Type Key Constants
/// @discussion Predefined value type keys used to pass values in a dictionary.
/// You can specify zero or more of these types depending on the function
/// you are calling.  For SecItemCopyMatching or SecItemAdd these are
/// used as keys in the results dictionary.
/// @constant kSecValueData Specifies a dictionary key whose value is of type
/// CFDataRef.  For keys and password items, data is secret (encrypted)
/// and may require the user to enter a password for access.
/// @constant kSecValueRef Specifies a dictionary key whose value, depending
/// on the item class requested, is of type SecKeychainItemRef, SecKeyRef,
/// SecCertificateRef, or SecIdentityRef.
/// @constant kSecValuePersistentRef Specifies a dictionary key whose value
/// is of type CFDataRef.  The bytes in this CFDataRef can be stored by
/// the caller and used on a subsequent invocation of the application (or
/// even a different application) to retrieve the item referenced by it.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecValueData;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecValueRef;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecValuePersistentRef;

/// !
/// @enum Other Constants
/// @discussion Predefined constants used to set values in a dictionary.
/// @constant kSecUseItemList Specifies a dictionary key whose value is a
/// CFArray of items. If provided, this array is treated as the set of
/// all possible items to search, or add if the API being called is
/// SecItemAdd. The items in this array may be of type SecKeyRef,
/// SecCertificateRef, SecIdentityRef, or CFDataRef (for a persistent
/// item reference.) The items in the array must all be of the same
/// type. When this attribute is provided, no keychains are searched.
/// @constant kSecUseKeychain OS X only. Specifies a dictionary key whose value is a
/// keychain reference. You use this key to specify a value of type
/// SecKeychainRef to which SecItemAdd will add the provided item(s).
/// @constant kSecUseOperationPrompt Specifies a dictionary key whose value
/// is a CFStringRef that represents a user-visible string describing
/// the operation for which the application is attempting to authenticate.
/// The application is responsible for the text localization.
/// @constant kSecUseNoAuthenticationUI OS X only. Specifies a dictionary key whose value
/// is a CFBooleanRef. If provided with a value of kCFBooleanTrue, the error
/// errSecInteractionNotAllowed will be returned if the item is attempting
/// to authenticate with UI.
/// @constant kSecUseAuthenticationUI Specifies a dictionary key whose value
/// is one of kSecUseAuthenticationUIAllow, kSecUseAuthenticationUIFail, kSecUseAuthenticationUISkip.
/// @constant kSecUseAuthenticationContext Specifies a dictionary key whose value
/// is LAContext to be used for keychain item authentication.
/// If the item requires authentication and this key is omitted, a new context
/// will be created just for the purpose of the single call.
/// If the specified context has been previously authenticated, the operation
/// will succeed without asking user for authentication.
/// If the specified context has not been previously authenticated, the new
/// authentication will be started on this context, allowing caller to
/// eventually reuse the successfully authenticated context in subsequent
/// keychain operations.
/// @constant kSecUseDataProtectionKeychain Specifies a dictionary key whose value
/// is a CFBooleanRef. Set to kCFBooleanTrue to use kSecAttrAccessGroup and/or
/// kSecAttrAccessible on macOS without requiring the item to be marked synchronizable.
/// Note that when kSecUseDataProtectionKeychain is set to true, returning references is
/// supported only for Certificate, Key or Identity items.
/// @constant kSecUseUserIndependentKeychain Specifies a dctionary key whose value is a CFBooleanRef
/// indicating whether the item is shared with other personas on the system.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseItemList;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseKeychain;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseOperationPrompt;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseNoAuthenticationUI;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseAuthenticationUI;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseAuthenticationContext;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseDataProtectionKeychain;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseUserIndependentKeychain;

/// !
/// @enum kSecUseAuthenticationUI Value Constants
/// @discussion Predefined item attribute constants used to get or set values
/// in a dictionary. The kSecUseAuthenticationUI constant is the key and its
/// value is one of the constants defined here.
/// If the key kSecUseAuthenticationUI not provided then kSecUseAuthenticationUIAllow
/// is used as default.
/// @constant kSecUseAuthenticationUIAllow Specifies that authenticate UI can appear.
/// @constant kSecUseAuthenticationUIFail Specifies that the error
/// errSecInteractionNotAllowed will be returned if an item needs
/// to authenticate with UI
/// @constant kSecUseAuthenticationUISkip Specifies that all items which need
/// to authenticate with UI will be silently skipped. This value can be used
/// only with SecItemCopyMatching.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseAuthenticationUIAllow;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseAuthenticationUIFail;

@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecUseAuthenticationUISkip;

/// !
/// @enum kSecAttrTokenID Value Constants
/// @discussion Predefined item attribute constant used to get or set values
/// in a dictionary. The kSecAttrTokenID constant is the key and its value
/// can be kSecAttrTokenIDSecureEnclave.
/// @constant kSecAttrTokenIDSecureEnclave Specifies well-known identifier of the
/// token implemented using device's Secure Enclave. The only keychain items
/// supported by the Secure Enclave token are 256-bit elliptic curve keys
/// (kSecAttrKeyTypeECSecPrimeRandom). Keys must be generated on the secure enclave using
/// SecKeyGenerateKeyPair call with kSecAttrTokenID set to
/// kSecAttrTokenIDSecureEnclave in the parameters dictionary, it is not
/// possible to import pregenerated keys to kSecAttrTokenIDSecureEnclave token.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrTokenIDSecureEnclave;

/// !
/// @enum kSecAttrAccessGroup Value Constants
/// @constant kSecAttrAccessGroupToken Represents well-known access group
/// which contains items provided by external token (typically smart card).
/// This may be used as a value for kSecAttrAccessGroup attribute. Every
/// application has access to this access group so it is not needed to
/// explicitly list it in keychain-access-groups entitlement, but application
/// must explicitly state this access group in keychain queries in order to
/// be able to access items from external tokens.
@ffi.Native<cf.CFStringRef>()
external cf.CFStringRef kSecAttrAccessGroupToken;

/// !
/// @function SecItemCopyMatching
/// @abstract Returns one or more items which match a search query.
/// @param query A dictionary containing an item class specification and
/// optional attributes for controlling the search. See the "Keychain
/// Search Attributes" section for a description of currently defined
/// search attributes.
/// @param result On return, a CFTypeRef reference to the found item(s). The
/// exact type of the result is based on the search attributes supplied
/// in the query, as discussed below.
/// @result A result code. See "Security Error Codes" (SecBase.h).
/// @discussion Attributes defining a search are specified by adding key/value
/// pairs to the query dictionary.
///
/// A typical query consists of:
///
/// a kSecClass key, whose value is a constant from the Class
/// Constants section that specifies the class of item(s) to be searched
/// one or more keys from the "Attribute Key Constants" section, whose value
/// is the attribute data to be matched
/// one or more keys from the "Search Constants" section, whose value is
/// used to further refine the search
/// a key from the "Return Type Key Constants" section, specifying the type of
/// results desired
///
/// Result types are specified as follows:
///
/// To obtain the data of a matching item (CFDataRef), specify
/// kSecReturnData with a value of kCFBooleanTrue.
/// To obtain the attributes of a matching item (CFDictionaryRef), specify
/// kSecReturnAttributes with a value of kCFBooleanTrue.
/// To obtain a reference to a matching item (SecKeychainItemRef,
/// SecKeyRef, SecCertificateRef, or SecIdentityRef), specify kSecReturnRef
/// with a value of kCFBooleanTrue. Note that returning references is
/// supported only for Certificate, Key or Identity items on iOS, watchOS and
/// tvOS. Similarly, returning references is supported only for Certificate, Key
/// or Identity items on macOS when either kSecUseDataProtectionKeychain
/// is set to true or kSecAttrSynchronizable is set to true.
/// To obtain a persistent reference to a matching item (CFDataRef),
/// specify kSecReturnPersistentRef with a value of kCFBooleanTrue. Note
/// that unlike normal references, a persistent reference may be stored
/// on disk or passed between processes.
/// If more than one of these result types is specified, the result is
/// returned as a CFDictionaryRef containing all the requested data.
/// If a result type is not specified, no results are returned.
///
/// By default, this function returns only the first match found. To obtain
/// more than one matching item at a time, specify kSecMatchLimit with a value
/// greater than 1. The result will be a CFArrayRef containing up to that
/// number of matching items; the items' types are described above.
///
/// To filter a provided list of items down to those matching the query,
/// specify a kSecMatchItemList whose value is a CFArray of SecKeychainItemRef,
/// SecKeyRef, SecCertificateRef, or SecIdentityRef items. The objects in the
/// provided array must be of the same type.
///
/// On iOS, to convert from a persistent item reference to a normal item reference,
/// specify a kSecValuePersistentRef whose value a CFDataRef (the persistent
/// reference), and a kSecReturnRef whose value is kCFBooleanTrue.
///
/// On OSX, to convert from persistent item references to normal item references,
/// specify a kSecMatchItemList whose value is a CFArray containing one or
/// more CFDataRef elements (the persistent reference), and a kSecReturnRef
/// whose value is kCFBooleanTrue. The objects in the provided array must be
/// of the same type.
@ffi.Native<ffi.Int Function(cf.CFDictionaryRef, ffi.Pointer<cf.CFTypeRef>)>()
external int SecItemCopyMatching(
  cf.CFDictionaryRef query,
  ffi.Pointer<cf.CFTypeRef> result,
);

/// !
/// @function SecItemAdd
/// @abstract Add one or more items to a keychain.
/// @param attributes A dictionary containing an item class specification and
/// optional entries specifying the item's attribute values. See the
/// "Attribute Key Constants" section for a description of currently defined
/// attributes.
/// @param result On return, a CFTypeRef reference to the newly added item(s).
/// The exact type of the result is based on the values supplied
/// in attributes, as discussed below. Pass NULL if this result is not
/// required.
/// @result A result code. See "Security Error Codes" (SecBase.h).
/// @discussion Attributes defining an item are specified by adding key/value
/// pairs to the attributes dictionary.  To add multiple items to a keychain
/// at once use the kSecUseItemList key with an array of items as its value.
/// This is currently only supported for non password items.
///
/// On OSX, To add an item to a particular keychain, supply kSecUseKeychain
/// with a SecKeychainRef as its value.
///
/// On iOS, watchOS & tvOS, Certificate, Key, and Identity items may be
/// added by reference, but neither Internet Passwords nor Generic Passwords
/// may be. Similarly, on macOS with either kSecUseDataProtectionKeychain
/// set to true or kSecAttrSynchronizable set to true, Certificate, Key, and Identity
/// items may be added by reference, but neither Internet Passwords nor Generic
/// Passwords may be.
///
/// Result types are specified as follows:
///
/// To obtain the data of the added item (CFDataRef), specify
/// kSecReturnData with a value of kCFBooleanTrue.
/// To obtain all the attributes of the added item (CFDictionaryRef),
/// specify kSecReturnAttributes with a value of kCFBooleanTrue.
/// To obtain a reference to the added item (SecKeychainItemRef, SecKeyRef,
/// SecCertificateRef, or SecIdentityRef), specify kSecReturnRef with a
/// value of kCFBooleanTrue. See also note about kSecReturnRef and
/// macOS.
/// To obtain a persistent reference to the added item (CFDataRef), specify
/// kSecReturnPersistentRef with a value of kCFBooleanTrue. Note that
/// unlike normal references, a persistent reference may be stored on disk
/// or passed between processes.
/// If more than one of these result types is specified, the result is
/// returned as a CFDictionaryRef containing all the requested data.
/// On iOS, if a result type is not specified, no results are returned.
/// On OSX, the added item is returned.
@ffi.Native<ffi.Int Function(cf.CFDictionaryRef, ffi.Pointer<cf.CFTypeRef>)>()
external int SecItemAdd(
  cf.CFDictionaryRef attributes,
  ffi.Pointer<cf.CFTypeRef> result,
);

/// !
/// @function SecItemUpdate
/// @abstract Modify zero or more items which match a search query.
/// @param query A dictionary containing an item class specification and
/// optional attributes for controlling the search. See the "Attribute
/// Constants" and "Search Constants" sections for a description of
/// currently defined search attributes.
/// @param attributesToUpdate A dictionary containing one or more attributes
/// whose values should be set to the ones specified. Only real keychain
/// attributes are permitted in this dictionary (no "meta" attributes are
/// allowed.) See the "Attribute Key Constants" section for a description of
/// currently defined value attributes.
/// @result A result code. See "Security Error Codes" (SecBase.h).
/// @discussion Attributes defining a search are specified by adding key/value
/// pairs to the query dictionary.
@ffi.Native<ffi.Int Function(cf.CFDictionaryRef, cf.CFDictionaryRef)>()
external int SecItemUpdate(
  cf.CFDictionaryRef query,
  cf.CFDictionaryRef attributesToUpdate,
);

/// !
/// @function SecItemDelete
/// @abstract Delete zero or more items which match a search query.
/// @param query A dictionary containing an item class specification and
/// optional attributes for controlling the search. See the "Attribute
/// Constants" and "Search Constants" sections for a description of
/// currently defined search attributes.
/// @result A result code.  See "Security Error Codes" (SecBase.h).
/// @discussion Attributes defining a search are specified by adding key/value
/// pairs to the query dictionary.
///
/// By default, this function deletes all items matching the specified query.
/// You can change this behavior by specifying one of the follow keys:
///
/// To delete an item identified by a transient reference, on iOS, specify
/// kSecValueRef with a item reference. On OS X, give a kSecMatchItemList
/// containing an item reference.
/// To delete an item identified by a persistent reference, on iOS, specify
/// kSecValuePersistentRef with a persistent reference returned by
/// using the kSecReturnPersistentRef key to SecItemCopyMatching or
/// SecItemAdd. on OSX, use kSecMatchItemList with a persistent reference
/// returned by using the kSecReturnPersistentRef key with
/// SecItemCopyMatching or SecItemAdd.
/// To delete multiple items specify kSecMatchItemList with an array
/// of references.
/// If more than one of these result keys is specified, the behavior is
/// undefined.
@ffi.Native<ffi.Int Function(cf.CFDictionaryRef)>()
external int SecItemDelete(
  cf.CFDictionaryRef query,
);

/// !
/// @function SecKeychainItemGetTypeID
/// @abstract Returns the type identifier of SecKeychainItem instances.
/// @result The CFTypeID of SecKeychainItem instances.
@ffi.Native<ffi.UnsignedLong Function()>()
external int SecKeychainItemGetTypeID();

/// !
/// @function SecKeychainItemModifyAttributesAndData
/// @abstract Updates an existing keychain item after changing its attributes or data.
/// @param itemRef A reference to the keychain item to modify.
/// @param attrList The list of attributes to modify, along with their new values. Pass NULL if you don't need to modify any attributes.
/// @param length The length of the buffer pointed to by data.
/// @param data Pointer to a buffer containing the data to store. Pass NULL if you don't need to modify the data.
/// @result A result code. See "Security Error Codes" (SecBase.h).
/// @discussion The keychain item is written to the keychain's permanent data store. If the keychain item has not previously been added to a keychain, a call to the SecKeychainItemModifyContent function does nothing and returns errSecSuccess.
@ffi.Native<
    ffi.Int Function(SecKeychainItemRef, ffi.Pointer<SecKeychainAttributeList>,
        ffi.UnsignedInt, ffi.Pointer<ffi.Void>)>()
external int SecKeychainItemModifyAttributesAndData(
  SecKeychainItemRef itemRef,
  ffi.Pointer<SecKeychainAttributeList> attrList,
  int length,
  ffi.Pointer<ffi.Void> data,
);

/// !
/// @function SecKeychainItemCreateFromContent
/// @abstract Creates a new keychain item from the supplied parameters.
/// @param itemClass A constant identifying the class of item to create.
/// @param attrList The list of attributes of the item to create.
/// @param length The length of the buffer pointed to by data.
/// @param data A pointer to a buffer containing the data to store.
/// @param initialAccess A reference to the access for this keychain item.
/// @param keychainRef A reference to the keychain in which to add the item.
/// @param itemRef On return, a pointer to a reference to the newly created keychain item (optional). When the item reference is no longer required, call CFRelease to deallocate memory occupied by the item.
/// @result A result code. See "Security Error Codes" (SecBase.h). In addition, errSecParam (-50) may be returned if not enough valid parameters are supplied, or errSecAllocate (-108) if there is not enough memory in the current heap zone to create the object.
@ffi.Native<
    ffi.Int Function(
        SecItemClass,
        ffi.Pointer<SecKeychainAttributeList>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Void>,
        SecKeychainRef,
        SecAccessRef,
        ffi.Pointer<SecKeychainItemRef>)>()
external int SecKeychainItemCreateFromContent(
  int itemClass,
  ffi.Pointer<SecKeychainAttributeList> attrList,
  int length,
  ffi.Pointer<ffi.Void> data,
  SecKeychainRef keychainRef,
  SecAccessRef initialAccess,
  ffi.Pointer<SecKeychainItemRef> itemRef,
);

/// !
/// @function SecKeychainItemModifyContent
/// @abstract Updates an existing keychain item after changing its attributes or data. This call should only be used in conjunction with SecKeychainItemCopyContent().
/// @param itemRef A reference to the keychain item to modify.
/// @param attrList The list of attributes to modify, along with their new values. Pass NULL if you don't need to modify any attributes.
/// @param length The length of the buffer pointed to by data.
/// @param data A pointer to a buffer containing the data to store. Pass NULL if you don't need to modify the data.
/// @result A result code.  See "Security Error Codes" (SecBase.h).
@ffi.Native<
    ffi.Int Function(SecKeychainItemRef, ffi.Pointer<SecKeychainAttributeList>,
        ffi.UnsignedInt, ffi.Pointer<ffi.Void>)>()
external int SecKeychainItemModifyContent(
  SecKeychainItemRef itemRef,
  ffi.Pointer<SecKeychainAttributeList> attrList,
  int length,
  ffi.Pointer<ffi.Void> data,
);

/// !
/// @function SecKeychainItemCopyContent
/// @abstract Copies the data and/or attributes stored in the given keychain item. It is recommended that you use SecKeychainItemCopyAttributesAndData(). You must call SecKeychainItemFreeContent when you no longer need the attributes and data. If you want to modify the attributes returned here, use SecKeychainModifyContent().
/// @param itemRef A reference to the keychain item to modify.
/// @param itemClass On return, the item's class. Pass NULL if you don't require this information.
/// @param attrList On input, the list of attributes to retrieve. On output, the attributes are filled in. Pass NULL if you don't need to retrieve any attributes. You must call SecKeychainItemFreeContent when you no longer need the attributes.
/// @param length On return, the length of the buffer pointed to by outData.
/// @param outData On return, a pointer to a buffer containing the data in this item. Pass NULL if you don't need to retrieve the data. You must call SecKeychainItemFreeContent when you no longer need the data.
/// @result A result code. See "Security Error Codes" (SecBase.h). In addition, errSecParam (-50) may be returned if not enough valid parameters are supplied.
@ffi.Native<
    ffi.Int Function(
        SecKeychainItemRef,
        ffi.Pointer<SecItemClass>,
        ffi.Pointer<SecKeychainAttributeList>,
        ffi.Pointer<ffi.UnsignedInt>,
        ffi.Pointer<ffi.Pointer<ffi.Void>>)>()
external int SecKeychainItemCopyContent(
  SecKeychainItemRef itemRef,
  ffi.Pointer<SecItemClass> itemClass,
  ffi.Pointer<SecKeychainAttributeList> attrList,
  ffi.Pointer<ffi.UnsignedInt> length,
  ffi.Pointer<ffi.Pointer<ffi.Void>> outData,
);

/// !
/// @function SecKeychainItemFreeContent
/// @abstract Releases the memory used by the keychain attribute list and the keychain data retrieved in a previous call to SecKeychainItemCopyContent.
/// @param attrList A pointer to the attribute list to release. Pass NULL to ignore this parameter.
/// @param data A pointer to the data buffer to release. Pass NULL to ignore this parameter.
@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<SecKeychainAttributeList>, ffi.Pointer<ffi.Void>)>()
external int SecKeychainItemFreeContent(
  ffi.Pointer<SecKeychainAttributeList> attrList,
  ffi.Pointer<ffi.Void> data,
);

/// !
/// @function SecKeychainItemCopyAttributesAndData
/// @abstract Copies the data and/or attributes stored in the given keychain item. You must call SecKeychainItemFreeAttributesAndData when you no longer need the attributes and data. If you want to modify the attributes returned here, use SecKeychainModifyAttributesAndData.
/// @param itemRef A reference to the keychain item to copy.
/// @param info A list of tags and formats of the attributes you wish to retrieve. Pass NULL if you don't need to retrieve any attributes. You can call SecKeychainAttributeInfoForItemID to obtain a list with all possible attribute tags and formats for the item's class.
/// @param itemClass On return, the item's class. Pass NULL if you don't require this information.
/// @param attrList On return, a pointer to the list of retrieved attributes. Pass NULL if you don't need to retrieve any attributes. You must call SecKeychainItemFreeAttributesAndData when you no longer need this list.
/// @param length On return, the length of the buffer pointed to by outData.
/// @param outData On return, a pointer to a buffer containing the data in this item. Pass NULL if you don't need to retrieve the data. You must call SecKeychainItemFreeAttributesAndData when you no longer need the data.
/// @result A result code. See "Security Error Codes" (SecBase.h). In addition, errSecParam (-50) may be returned if not enough valid parameters are supplied.
@ffi.Native<
    ffi.Int Function(
        SecKeychainItemRef,
        ffi.Pointer<SecKeychainAttributeInfo>,
        ffi.Pointer<SecItemClass>,
        ffi.Pointer<ffi.Pointer<SecKeychainAttributeList>>,
        ffi.Pointer<ffi.UnsignedInt>,
        ffi.Pointer<ffi.Pointer<ffi.Void>>)>()
external int SecKeychainItemCopyAttributesAndData(
  SecKeychainItemRef itemRef,
  ffi.Pointer<SecKeychainAttributeInfo> info,
  ffi.Pointer<SecItemClass> itemClass,
  ffi.Pointer<ffi.Pointer<SecKeychainAttributeList>> attrList,
  ffi.Pointer<ffi.UnsignedInt> length,
  ffi.Pointer<ffi.Pointer<ffi.Void>> outData,
);

/// !
/// @function SecKeychainItemFreeAttributesAndData
/// @abstract Releases the memory used by the keychain attribute list and the keychain data retrieved in a previous call to SecKeychainItemCopyAttributesAndData.
/// @param attrList A pointer to the attribute list to release. Pass NULL to ignore this parameter.
/// @param data A pointer to the data buffer to release. Pass NULL to ignore this parameter.
/// @result A result code. See "Security Error Codes" (SecBase.h).
@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<SecKeychainAttributeList>, ffi.Pointer<ffi.Void>)>()
external int SecKeychainItemFreeAttributesAndData(
  ffi.Pointer<SecKeychainAttributeList> attrList,
  ffi.Pointer<ffi.Void> data,
);

/// !
/// @function SecKeychainItemDelete
/// @abstract Deletes a keychain item from the default keychain's permanent data store.
/// @param itemRef A keychain item reference of the item to delete.
/// @result A result code. See "Security Error Codes" (SecBase.h).
/// @discussion If itemRef has not previously been added to the keychain, SecKeychainItemDelete does nothing and returns errSecSuccess. IMPORTANT: SecKeychainItemDelete does not dispose the memory occupied by the item reference itself; use the CFRelease function when you are completely finished with an item.
@ffi.Native<ffi.Int Function(SecKeychainItemRef)>()
external int SecKeychainItemDelete(
  SecKeychainItemRef itemRef,
);

/// !
/// @function SecKeychainItemCopyKeychain
/// @abstract Copies an existing keychain reference from a keychain item.
/// @param itemRef A keychain item reference.
/// @param keychainRef On return, the keychain reference for the specified item. Release this reference by calling the CFRelease function.
/// @result A result code. See "Security Error Codes" (SecBase.h).
@ffi.Native<ffi.Int Function(SecKeychainItemRef, ffi.Pointer<SecKeychainRef>)>()
external int SecKeychainItemCopyKeychain(
  SecKeychainItemRef itemRef,
  ffi.Pointer<SecKeychainRef> keychainRef,
);

/// !
/// @function SecKeychainItemCreateCopy
/// @abstract Copies a keychain item.
/// @param itemRef A reference to the keychain item to copy.
/// @param destKeychainRef A reference to the keychain in which to insert the copied keychain item.
/// @param initialAccess The initial access for the copied keychain item.
/// @param itemCopy On return, a reference to the copied keychain item.
/// @result A result code. See "Security Error Codes" (SecBase.h).
@ffi.Native<
    ffi.Int Function(SecKeychainItemRef, SecKeychainRef, SecAccessRef,
        ffi.Pointer<SecKeychainItemRef>)>()
external int SecKeychainItemCreateCopy(
  SecKeychainItemRef itemRef,
  SecKeychainRef destKeychainRef,
  SecAccessRef initialAccess,
  ffi.Pointer<SecKeychainItemRef> itemCopy,
);

/// !
/// @function SecKeychainItemCreatePersistentReference
/// @abstract Returns a CFDataRef which can be used as a persistent reference to the given keychain item. The data obtained can be turned back into a SecKeychainItemRef later by calling SecKeychainItemCopyFromPersistentReference().
/// @param itemRef A reference to a keychain item.
/// @param persistentItemRef On return, a CFDataRef containing a persistent reference. You must release this data reference by calling the CFRelease function.
/// @result A result code. See "Security Error Codes" (SecBase.h).
@ffi.Native<ffi.Int Function(SecKeychainItemRef, ffi.Pointer<cf.CFDataRef>)>()
external int SecKeychainItemCreatePersistentReference(
  SecKeychainItemRef itemRef,
  ffi.Pointer<cf.CFDataRef> persistentItemRef,
);

/// !
/// @function SecKeychainItemCopyFromPersistentReference
/// @abstract Returns a SecKeychainItemRef, given a persistent reference previously obtained by calling SecKeychainItemCreatePersistentReference().
/// @param persistentItemRef A CFDataRef containing a persistent reference to a keychain item.
/// @param itemRef On return, a SecKeychainItemRef for the keychain item described by the persistent reference. You must release this item reference by calling the CFRelease function.
/// @result A result code. See "Security Error Codes" (SecBase.h).
@ffi.Native<ffi.Int Function(cf.CFDataRef, ffi.Pointer<SecKeychainItemRef>)>()
external int SecKeychainItemCopyFromPersistentReference(
  cf.CFDataRef persistentItemRef,
  ffi.Pointer<SecKeychainItemRef> itemRef,
);

/// !
/// @function SecKeychainItemGetDLDBHandle
/// @abstract Returns the CSSM_DL_DB_HANDLE for a given keychain item reference.
/// @param keyItemRef A keychain item reference.
/// @param dldbHandle On return, a CSSM_DL_DB_HANDLE for the keychain database containing the given item. The handle is valid until the keychain reference is released.
/// @result A result code. See "Security Error Codes" (SecBase.h).
/// @discussion This API is deprecated for 10.7. It should no longer be needed.
@ffi.Native<
    ffi.Int Function(SecKeychainItemRef, ffi.Pointer<cssm_dl_db_handle>)>()
external int SecKeychainItemGetDLDBHandle(
  SecKeychainItemRef keyItemRef,
  ffi.Pointer<cssm_dl_db_handle> dldbHandle,
);

/// !
/// @function SecKeychainItemGetUniqueRecordID
/// @abstract Returns a CSSM_DB_UNIQUE_RECORD for the given keychain item reference.
/// @param itemRef A keychain item reference.
/// @param uniqueRecordID On return, a pointer to a CSSM_DB_UNIQUE_RECORD structure for the given item. The unique record is valid until the item reference is released.
/// @result A result code. See "Security Error Codes" (SecBase.h).
/// @discussion This API is deprecated for 10.7. It should no longer be needed.
@ffi.Native<
    ffi.Int Function(
        SecKeychainItemRef, ffi.Pointer<ffi.Pointer<cssm_db_unique_record>>)>()
external int SecKeychainItemGetUniqueRecordID(
  SecKeychainItemRef itemRef,
  ffi.Pointer<ffi.Pointer<cssm_db_unique_record>> uniqueRecordID,
);

/// !
/// @function SecKeychainItemCopyAccess
/// @abstract Copies the access of a given keychain item.
/// @param itemRef A reference to a keychain item.
/// @param access On return, a reference to the keychain item's access.
/// @result A result code. See "Security Error Codes" (SecBase.h).
@ffi.Native<ffi.Int Function(SecKeychainItemRef, ffi.Pointer<SecAccessRef>)>()
external int SecKeychainItemCopyAccess(
  SecKeychainItemRef itemRef,
  ffi.Pointer<SecAccessRef> access,
);

/// !
/// @function SecKeychainItemSetAccess
/// @abstract Sets the access of a given keychain item.
/// @param itemRef A reference to a keychain item.
/// @param access A reference to an access to replace the keychain item's current access.
/// @result A result code. See "Security Error Codes" (SecBase.h).
@ffi.Native<ffi.Int Function(SecKeychainItemRef, SecAccessRef)>()
external int SecKeychainItemSetAccess(
  SecKeychainItemRef itemRef,
  SecAccessRef access,
);

final class __CFNull extends ffi.Opaque {}

final class __CFAllocator extends ffi.Opaque {}

final class __CFBoolean extends ffi.Opaque {}

final class __CFNumber extends ffi.Opaque {}

final class CFArrayCallBacks extends ffi.Struct {
  @ffi.Long()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<cf.CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> equal;
}

final class CFDictionaryKeyCallBacks extends ffi.Struct {
  @ffi.Long()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<cf.CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> equal;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>
      hash;
}

/// !
/// @typedef CFDictionaryValueCallBacks
/// Structure containing the callbacks for values of a CFDictionary.
/// @field version The version number of the structure type being passed
/// in as a parameter to the CFDictionary creation functions.
/// This structure is version 0.
/// @field retain The callback used to add a retain for the dictionary
/// on values as they are put into the dictionary.
/// This callback returns the value to use as the value in the
/// dictionary, which is usually the value parameter passed to
/// this callback, but may be a different value if a different
/// value should be added to the dictionary. The dictionary's
/// allocator is passed as the first argument.
/// @field release The callback used to remove a retain previously added
/// for the dictionary from values as they are removed from
/// the dictionary. The dictionary's allocator is passed as the
/// first argument.
/// @field copyDescription The callback used to create a descriptive
/// string representation of each value in the dictionary. This
/// is used by the CFCopyDescription() function.
/// @field equal The callback used to compare values in the dictionary for
/// equality in some operations.
final class CFDictionaryValueCallBacks extends ffi.Struct {
  @ffi.Long()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<cf.CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> equal;
}

/// !
/// @typedef SecKeychainItemRef
/// @abstract Contains information about a keychain item.
typedef SecKeychainItemRef = ffi.Pointer<__SecKeychainItem>;

final class __SecKeychainItem extends ffi.Opaque {}

/// !
/// @typedef SecKeychainAttributeList
/// @abstract Represents a list of keychain attributes.
/// @field count An unsigned 32-bit integer that represents the number of keychain attributes in the array.
/// @field attr A pointer to the first keychain attribute in the array.
final class SecKeychainAttributeList extends ffi.Struct {
  @ffi.UnsignedInt()
  external int count;

  external ffi.Pointer<SecKeychainAttribute> attr;
}

/// !
/// @struct SecKeychainAttribute
/// @abstract Contains keychain attributes.
/// @field tag A 4-byte attribute tag.
/// @field length The length of the buffer pointed to by data.
/// @field data A pointer to the attribute data.
final class SecKeychainAttribute extends ffi.Struct {
  @SecKeychainAttrType()
  external int tag;

  @ffi.UnsignedInt()
  external int length;

  external ffi.Pointer<ffi.Void> data;
}

/// !
/// @typedef SecKeychainAttrType
/// @abstract Represents a keychain attribute type.
typedef SecKeychainAttrType = ffi.UnsignedInt;
typedef DartSecKeychainAttrType = int;

/// !
/// @enum ItemClassConstants
/// @abstract Specifies a keychain item's class code.
/// @constant kSecInternetPasswordItemClass Indicates that the item is an Internet password.
/// @constant kSecGenericPasswordItemClass Indicates that the item is a generic password.
/// @constant kSecAppleSharePasswordItemClass Indicates that the item is an AppleShare password.
/// Note: AppleShare passwords are no longer used by OS X, starting in Leopard (10.5). Use of this item class is deprecated in OS X 10.9 and later; kSecInternetPasswordItemClass should be used instead when storing or looking up passwords for an Apple Filing Protocol (AFP) server.
/// @constant kSecCertificateItemClass Indicates that the item is a digital certificate.
/// @constant kSecPublicKeyItemClass Indicates that the item is a public key.
/// @constant kSecPrivateKeyItemClass Indicates that the item is a private key.
/// @constant kSecSymmetricKeyItemClass Indicates that the item is a symmetric key.
/// @discussion The SecItemClass enumeration defines constants your application can use to specify the type of the keychain item you wish to create, dispose, add, delete, update, copy, or locate. You can also use these constants with the tag constant SecItemAttr.
typedef SecItemClass = ffi.UnsignedInt;
typedef DartSecItemClass = int;

/// !
/// @typedef SecKeychainRef
/// @abstract Contains information about a keychain.
typedef SecKeychainRef = ffi.Pointer<__SecKeychain>;

final class __SecKeychain extends ffi.Opaque {}

/// !
/// @typedef SecAccessRef
/// @abstract Contains information about an access.
typedef SecAccessRef = ffi.Pointer<__SecAccess>;

final class __SecAccess extends ffi.Opaque {}

/// !
/// @typedef SecKeychainAttributeInfo
/// @abstract Represents an attribute.
/// @field count The number of tag-format pairs in the respective arrays.
/// @field tag A pointer to the first attribute tag in the array.
/// @field format A pointer to the first CSSM_DB_ATTRIBUTE_FORMAT in the array.
/// @discussion Each tag and format item form a pair.
final class SecKeychainAttributeInfo extends ffi.Struct {
  @ffi.UnsignedInt()
  external int count;

  external ffi.Pointer<ffi.UnsignedInt> tag;

  external ffi.Pointer<ffi.UnsignedInt> format;
}

/// From DL.
final class cssm_dl_db_handle extends ffi.Struct {
  @ffi.IntPtr()
  external int DLHandle;

  @ffi.IntPtr()
  external int DBHandle;
}

final class cssm_db_unique_record extends ffi.Struct {
  external cssm_db_index_info RecordLocator;

  external SecAsn1Item RecordIdentifier;
}

final class cssm_db_index_info extends ffi.Struct {
  @ffi.Uint32()
  external int IndexType;

  @ffi.Uint32()
  external int IndexedDataLocation;

  external cssm_db_attribute_info Info;
}

final class cssm_db_attribute_info extends ffi.Struct {
  @ffi.Uint32()
  external int AttributeNameFormat;

  external cssm_db_attribute_label Label;

  @ffi.Uint32()
  external int AttributeFormat;
}

final class cssm_db_attribute_label extends ffi.Union {
  /// e.g., "record label"
  external ffi.Pointer<ffi.Char> AttributeName;

  /// e.g., CSSMOID_RECORDLABEL
  external SecAsn1Oid AttributeOID;

  /// e.g., FOUR_CHAR_CODE('recl')
  @ffi.Uint32()
  external int AttributeID;
}

typedef SecAsn1Oid = cssm_data;

final class cssm_data extends ffi.Struct {
  @ffi.Size()
  external int Length;

  external ffi.Pointer<ffi.Uint8> Data;
}

typedef SecAsn1Item = cssm_data;

const int errSecSuccess = 0;

const int errSecUnimplemented = -4;

const int errSecDiskFull = -34;

const int errSecDskFull = -34;

const int errSecIO = -36;

const int errSecOpWr = -49;

const int errSecParam = -50;

const int errSecWrPerm = -61;

const int errSecAllocate = -108;

const int errSecUserCanceled = -128;

const int errSecBadReq = -909;

const int errSecInternalComponent = -2070;

const int errSecCoreFoundationUnknown = -4960;

const int errSecMissingEntitlement = -34018;

const int errSecRestrictedAPI = -34020;

const int errSecNotAvailable = -25291;

const int errSecReadOnly = -25292;

const int errSecAuthFailed = -25293;

const int errSecNoSuchKeychain = -25294;

const int errSecInvalidKeychain = -25295;

const int errSecDuplicateKeychain = -25296;

const int errSecDuplicateCallback = -25297;

const int errSecInvalidCallback = -25298;

const int errSecDuplicateItem = -25299;

const int errSecItemNotFound = -25300;

const int errSecBufferTooSmall = -25301;

const int errSecDataTooLarge = -25302;

const int errSecNoSuchAttr = -25303;

const int errSecInvalidItemRef = -25304;

const int errSecInvalidSearchRef = -25305;

const int errSecNoSuchClass = -25306;

const int errSecNoDefaultKeychain = -25307;

const int errSecInteractionNotAllowed = -25308;

const int errSecReadOnlyAttr = -25309;

const int errSecWrongSecVersion = -25310;

const int errSecKeySizeNotAllowed = -25311;

const int errSecNoStorageModule = -25312;

const int errSecNoCertificateModule = -25313;

const int errSecNoPolicyModule = -25314;

const int errSecInteractionRequired = -25315;

const int errSecDataNotAvailable = -25316;

const int errSecDataNotModifiable = -25317;

const int errSecCreateChainFailed = -25318;

const int errSecInvalidPrefsDomain = -25319;

const int errSecInDarkWake = -25320;

const int errSecACLNotSimple = -25240;

const int errSecPolicyNotFound = -25241;

const int errSecInvalidTrustSetting = -25242;

const int errSecNoAccessForItem = -25243;

const int errSecInvalidOwnerEdit = -25244;

const int errSecTrustNotAvailable = -25245;

const int errSecUnsupportedFormat = -25256;

const int errSecUnknownFormat = -25257;

const int errSecKeyIsSensitive = -25258;

const int errSecMultiplePrivKeys = -25259;

const int errSecPassphraseRequired = -25260;

const int errSecInvalidPasswordRef = -25261;

const int errSecInvalidTrustSettings = -25262;

const int errSecNoTrustSettings = -25263;

const int errSecPkcs12VerifyFailure = -25264;

const int errSecNotSigner = -26267;

const int errSecDecode = -26275;

const int errSecServiceNotAvailable = -67585;

const int errSecInsufficientClientID = -67586;

const int errSecDeviceReset = -67587;

const int errSecDeviceFailed = -67588;

const int errSecAppleAddAppACLSubject = -67589;

const int errSecApplePublicKeyIncomplete = -67590;

const int errSecAppleSignatureMismatch = -67591;

const int errSecAppleInvalidKeyStartDate = -67592;

const int errSecAppleInvalidKeyEndDate = -67593;

const int errSecConversionError = -67594;

const int errSecAppleSSLv2Rollback = -67595;

const int errSecQuotaExceeded = -67596;

const int errSecFileTooBig = -67597;

const int errSecInvalidDatabaseBlob = -67598;

const int errSecInvalidKeyBlob = -67599;

const int errSecIncompatibleDatabaseBlob = -67600;

const int errSecIncompatibleKeyBlob = -67601;

const int errSecHostNameMismatch = -67602;

const int errSecUnknownCriticalExtensionFlag = -67603;

const int errSecNoBasicConstraints = -67604;

const int errSecNoBasicConstraintsCA = -67605;

const int errSecInvalidAuthorityKeyID = -67606;

const int errSecInvalidSubjectKeyID = -67607;

const int errSecInvalidKeyUsageForPolicy = -67608;

const int errSecInvalidExtendedKeyUsage = -67609;

const int errSecInvalidIDLinkage = -67610;

const int errSecPathLengthConstraintExceeded = -67611;

const int errSecInvalidRoot = -67612;

const int errSecCRLExpired = -67613;

const int errSecCRLNotValidYet = -67614;

const int errSecCRLNotFound = -67615;

const int errSecCRLServerDown = -67616;

const int errSecCRLBadURI = -67617;

const int errSecUnknownCertExtension = -67618;

const int errSecUnknownCRLExtension = -67619;

const int errSecCRLNotTrusted = -67620;

const int errSecCRLPolicyFailed = -67621;

const int errSecIDPFailure = -67622;

const int errSecSMIMEEmailAddressesNotFound = -67623;

const int errSecSMIMEBadExtendedKeyUsage = -67624;

const int errSecSMIMEBadKeyUsage = -67625;

const int errSecSMIMEKeyUsageNotCritical = -67626;

const int errSecSMIMENoEmailAddress = -67627;

const int errSecSMIMESubjAltNameNotCritical = -67628;

const int errSecSSLBadExtendedKeyUsage = -67629;

const int errSecOCSPBadResponse = -67630;

const int errSecOCSPBadRequest = -67631;

const int errSecOCSPUnavailable = -67632;

const int errSecOCSPStatusUnrecognized = -67633;

const int errSecEndOfData = -67634;

const int errSecIncompleteCertRevocationCheck = -67635;

const int errSecNetworkFailure = -67636;

const int errSecOCSPNotTrustedToAnchor = -67637;

const int errSecRecordModified = -67638;

const int errSecOCSPSignatureError = -67639;

const int errSecOCSPNoSigner = -67640;

const int errSecOCSPResponderMalformedReq = -67641;

const int errSecOCSPResponderInternalError = -67642;

const int errSecOCSPResponderTryLater = -67643;

const int errSecOCSPResponderSignatureRequired = -67644;

const int errSecOCSPResponderUnauthorized = -67645;

const int errSecOCSPResponseNonceMismatch = -67646;

const int errSecCodeSigningBadCertChainLength = -67647;

const int errSecCodeSigningNoBasicConstraints = -67648;

const int errSecCodeSigningBadPathLengthConstraint = -67649;

const int errSecCodeSigningNoExtendedKeyUsage = -67650;

const int errSecCodeSigningDevelopment = -67651;

const int errSecResourceSignBadCertChainLength = -67652;

const int errSecResourceSignBadExtKeyUsage = -67653;

const int errSecTrustSettingDeny = -67654;

const int errSecInvalidSubjectName = -67655;

const int errSecUnknownQualifiedCertStatement = -67656;

const int errSecMobileMeRequestQueued = -67657;

const int errSecMobileMeRequestRedirected = -67658;

const int errSecMobileMeServerError = -67659;

const int errSecMobileMeServerNotAvailable = -67660;

const int errSecMobileMeServerAlreadyExists = -67661;

const int errSecMobileMeServerServiceErr = -67662;

const int errSecMobileMeRequestAlreadyPending = -67663;

const int errSecMobileMeNoRequestPending = -67664;

const int errSecMobileMeCSRVerifyFailure = -67665;

const int errSecMobileMeFailedConsistencyCheck = -67666;

const int errSecNotInitialized = -67667;

const int errSecInvalidHandleUsage = -67668;

const int errSecPVCReferentNotFound = -67669;

const int errSecFunctionIntegrityFail = -67670;

const int errSecInternalError = -67671;

const int errSecMemoryError = -67672;

const int errSecInvalidData = -67673;

const int errSecMDSError = -67674;

const int errSecInvalidPointer = -67675;

const int errSecSelfCheckFailed = -67676;

const int errSecFunctionFailed = -67677;

const int errSecModuleManifestVerifyFailed = -67678;

const int errSecInvalidGUID = -67679;

const int errSecInvalidHandle = -67680;

const int errSecInvalidDBList = -67681;

const int errSecInvalidPassthroughID = -67682;

const int errSecInvalidNetworkAddress = -67683;

const int errSecCRLAlreadySigned = -67684;

const int errSecInvalidNumberOfFields = -67685;

const int errSecVerificationFailure = -67686;

const int errSecUnknownTag = -67687;

const int errSecInvalidSignature = -67688;

const int errSecInvalidName = -67689;

const int errSecInvalidCertificateRef = -67690;

const int errSecInvalidCertificateGroup = -67691;

const int errSecTagNotFound = -67692;

const int errSecInvalidQuery = -67693;

const int errSecInvalidValue = -67694;

const int errSecCallbackFailed = -67695;

const int errSecACLDeleteFailed = -67696;

const int errSecACLReplaceFailed = -67697;

const int errSecACLAddFailed = -67698;

const int errSecACLChangeFailed = -67699;

const int errSecInvalidAccessCredentials = -67700;

const int errSecInvalidRecord = -67701;

const int errSecInvalidACL = -67702;

const int errSecInvalidSampleValue = -67703;

const int errSecIncompatibleVersion = -67704;

const int errSecPrivilegeNotGranted = -67705;

const int errSecInvalidScope = -67706;

const int errSecPVCAlreadyConfigured = -67707;

const int errSecInvalidPVC = -67708;

const int errSecEMMLoadFailed = -67709;

const int errSecEMMUnloadFailed = -67710;

const int errSecAddinLoadFailed = -67711;

const int errSecInvalidKeyRef = -67712;

const int errSecInvalidKeyHierarchy = -67713;

const int errSecAddinUnloadFailed = -67714;

const int errSecLibraryReferenceNotFound = -67715;

const int errSecInvalidAddinFunctionTable = -67716;

const int errSecInvalidServiceMask = -67717;

const int errSecModuleNotLoaded = -67718;

const int errSecInvalidSubServiceID = -67719;

const int errSecAttributeNotInContext = -67720;

const int errSecModuleManagerInitializeFailed = -67721;

const int errSecModuleManagerNotFound = -67722;

const int errSecEventNotificationCallbackNotFound = -67723;

const int errSecInputLengthError = -67724;

const int errSecOutputLengthError = -67725;

const int errSecPrivilegeNotSupported = -67726;

const int errSecDeviceError = -67727;

const int errSecAttachHandleBusy = -67728;

const int errSecNotLoggedIn = -67729;

const int errSecAlgorithmMismatch = -67730;

const int errSecKeyUsageIncorrect = -67731;

const int errSecKeyBlobTypeIncorrect = -67732;

const int errSecKeyHeaderInconsistent = -67733;

const int errSecUnsupportedKeyFormat = -67734;

const int errSecUnsupportedKeySize = -67735;

const int errSecInvalidKeyUsageMask = -67736;

const int errSecUnsupportedKeyUsageMask = -67737;

const int errSecInvalidKeyAttributeMask = -67738;

const int errSecUnsupportedKeyAttributeMask = -67739;

const int errSecInvalidKeyLabel = -67740;

const int errSecUnsupportedKeyLabel = -67741;

const int errSecInvalidKeyFormat = -67742;

const int errSecUnsupportedVectorOfBuffers = -67743;

const int errSecInvalidInputVector = -67744;

const int errSecInvalidOutputVector = -67745;

const int errSecInvalidContext = -67746;

const int errSecInvalidAlgorithm = -67747;

const int errSecInvalidAttributeKey = -67748;

const int errSecMissingAttributeKey = -67749;

const int errSecInvalidAttributeInitVector = -67750;

const int errSecMissingAttributeInitVector = -67751;

const int errSecInvalidAttributeSalt = -67752;

const int errSecMissingAttributeSalt = -67753;

const int errSecInvalidAttributePadding = -67754;

const int errSecMissingAttributePadding = -67755;

const int errSecInvalidAttributeRandom = -67756;

const int errSecMissingAttributeRandom = -67757;

const int errSecInvalidAttributeSeed = -67758;

const int errSecMissingAttributeSeed = -67759;

const int errSecInvalidAttributePassphrase = -67760;

const int errSecMissingAttributePassphrase = -67761;

const int errSecInvalidAttributeKeyLength = -67762;

const int errSecMissingAttributeKeyLength = -67763;

const int errSecInvalidAttributeBlockSize = -67764;

const int errSecMissingAttributeBlockSize = -67765;

const int errSecInvalidAttributeOutputSize = -67766;

const int errSecMissingAttributeOutputSize = -67767;

const int errSecInvalidAttributeRounds = -67768;

const int errSecMissingAttributeRounds = -67769;

const int errSecInvalidAlgorithmParms = -67770;

const int errSecMissingAlgorithmParms = -67771;

const int errSecInvalidAttributeLabel = -67772;

const int errSecMissingAttributeLabel = -67773;

const int errSecInvalidAttributeKeyType = -67774;

const int errSecMissingAttributeKeyType = -67775;

const int errSecInvalidAttributeMode = -67776;

const int errSecMissingAttributeMode = -67777;

const int errSecInvalidAttributeEffectiveBits = -67778;

const int errSecMissingAttributeEffectiveBits = -67779;

const int errSecInvalidAttributeStartDate = -67780;

const int errSecMissingAttributeStartDate = -67781;

const int errSecInvalidAttributeEndDate = -67782;

const int errSecMissingAttributeEndDate = -67783;

const int errSecInvalidAttributeVersion = -67784;

const int errSecMissingAttributeVersion = -67785;

const int errSecInvalidAttributePrime = -67786;

const int errSecMissingAttributePrime = -67787;

const int errSecInvalidAttributeBase = -67788;

const int errSecMissingAttributeBase = -67789;

const int errSecInvalidAttributeSubprime = -67790;

const int errSecMissingAttributeSubprime = -67791;

const int errSecInvalidAttributeIterationCount = -67792;

const int errSecMissingAttributeIterationCount = -67793;

const int errSecInvalidAttributeDLDBHandle = -67794;

const int errSecMissingAttributeDLDBHandle = -67795;

const int errSecInvalidAttributeAccessCredentials = -67796;

const int errSecMissingAttributeAccessCredentials = -67797;

const int errSecInvalidAttributePublicKeyFormat = -67798;

const int errSecMissingAttributePublicKeyFormat = -67799;

const int errSecInvalidAttributePrivateKeyFormat = -67800;

const int errSecMissingAttributePrivateKeyFormat = -67801;

const int errSecInvalidAttributeSymmetricKeyFormat = -67802;

const int errSecMissingAttributeSymmetricKeyFormat = -67803;

const int errSecInvalidAttributeWrappedKeyFormat = -67804;

const int errSecMissingAttributeWrappedKeyFormat = -67805;

const int errSecStagedOperationInProgress = -67806;

const int errSecStagedOperationNotStarted = -67807;

const int errSecVerifyFailed = -67808;

const int errSecQuerySizeUnknown = -67809;

const int errSecBlockSizeMismatch = -67810;

const int errSecPublicKeyInconsistent = -67811;

const int errSecDeviceVerifyFailed = -67812;

const int errSecInvalidLoginName = -67813;

const int errSecAlreadyLoggedIn = -67814;

const int errSecInvalidDigestAlgorithm = -67815;

const int errSecInvalidCRLGroup = -67816;

const int errSecCertificateCannotOperate = -67817;

const int errSecCertificateExpired = -67818;

const int errSecCertificateNotValidYet = -67819;

const int errSecCertificateRevoked = -67820;

const int errSecCertificateSuspended = -67821;

const int errSecInsufficientCredentials = -67822;

const int errSecInvalidAction = -67823;

const int errSecInvalidAuthority = -67824;

const int errSecVerifyActionFailed = -67825;

const int errSecInvalidCertAuthority = -67826;

const int errSecInvalidCRLAuthority = -67827;

const int errSecInvaldCRLAuthority = -67827;

const int errSecInvalidCRLEncoding = -67828;

const int errSecInvalidCRLType = -67829;

const int errSecInvalidCRL = -67830;

const int errSecInvalidFormType = -67831;

const int errSecInvalidID = -67832;

const int errSecInvalidIdentifier = -67833;

const int errSecInvalidIndex = -67834;

const int errSecInvalidPolicyIdentifiers = -67835;

const int errSecInvalidTimeString = -67836;

const int errSecInvalidReason = -67837;

const int errSecInvalidRequestInputs = -67838;

const int errSecInvalidResponseVector = -67839;

const int errSecInvalidStopOnPolicy = -67840;

const int errSecInvalidTuple = -67841;

const int errSecMultipleValuesUnsupported = -67842;

const int errSecNotTrusted = -67843;

const int errSecNoDefaultAuthority = -67844;

const int errSecRejectedForm = -67845;

const int errSecRequestLost = -67846;

const int errSecRequestRejected = -67847;

const int errSecUnsupportedAddressType = -67848;

const int errSecUnsupportedService = -67849;

const int errSecInvalidTupleGroup = -67850;

const int errSecInvalidBaseACLs = -67851;

const int errSecInvalidTupleCredentials = -67852;

const int errSecInvalidTupleCredendtials = -67852;

const int errSecInvalidEncoding = -67853;

const int errSecInvalidValidityPeriod = -67854;

const int errSecInvalidRequestor = -67855;

const int errSecRequestDescriptor = -67856;

const int errSecInvalidBundleInfo = -67857;

const int errSecInvalidCRLIndex = -67858;

const int errSecNoFieldValues = -67859;

const int errSecUnsupportedFieldFormat = -67860;

const int errSecUnsupportedIndexInfo = -67861;

const int errSecUnsupportedLocality = -67862;

const int errSecUnsupportedNumAttributes = -67863;

const int errSecUnsupportedNumIndexes = -67864;

const int errSecUnsupportedNumRecordTypes = -67865;

const int errSecFieldSpecifiedMultiple = -67866;

const int errSecIncompatibleFieldFormat = -67867;

const int errSecInvalidParsingModule = -67868;

const int errSecDatabaseLocked = -67869;

const int errSecDatastoreIsOpen = -67870;

const int errSecMissingValue = -67871;

const int errSecUnsupportedQueryLimits = -67872;

const int errSecUnsupportedNumSelectionPreds = -67873;

const int errSecUnsupportedOperator = -67874;

const int errSecInvalidDBLocation = -67875;

const int errSecInvalidAccessRequest = -67876;

const int errSecInvalidIndexInfo = -67877;

const int errSecInvalidNewOwner = -67878;

const int errSecInvalidModifyMode = -67879;

const int errSecMissingRequiredExtension = -67880;

const int errSecExtendedKeyUsageNotCritical = -67881;

const int errSecTimestampMissing = -67882;

const int errSecTimestampInvalid = -67883;

const int errSecTimestampNotTrusted = -67884;

const int errSecTimestampServiceNotAvailable = -67885;

const int errSecTimestampBadAlg = -67886;

const int errSecTimestampBadRequest = -67887;

const int errSecTimestampBadDataFormat = -67888;

const int errSecTimestampTimeNotAvailable = -67889;

const int errSecTimestampUnacceptedPolicy = -67890;

const int errSecTimestampUnacceptedExtension = -67891;

const int errSecTimestampAddInfoNotAvailable = -67892;

const int errSecTimestampSystemFailure = -67893;

const int errSecSigningTimeMissing = -67894;

const int errSecTimestampRejection = -67895;

const int errSecTimestampWaiting = -67896;

const int errSecTimestampRevocationWarning = -67897;

const int errSecTimestampRevocationNotification = -67898;

const int errSecCertificatePolicyNotAllowed = -67899;

const int errSecCertificateNameNotAllowed = -67900;

const int errSecCertificateValidityPeriodTooLong = -67901;

const int errSecCertificateIsCA = -67902;

const int errSecCertificateDuplicateExtension = -67903;
