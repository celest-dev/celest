syntax = "proto3";

package cedar.v3;

import "cedar/v3/value.proto";
import "dart/dart_options.proto";

message Expr {
  oneof expr {
    ExprValue value = 1;
    ExprVar var = 2 [(dart_options.dart_name) = "var_"];
    ExprSlot slot = 3;
    ExprUnknown unknown = 4;
    ExprNot not = 5;
    ExprNeg neg = 6;
    ExprEquals equals = 7;
    ExprNotEquals not_equals = 8;
    ExprIn in = 9 [(dart_options.dart_name) = "in_"];
    ExprLessThan less_than = 10;
    ExprLessThanOrEquals less_than_or_equals = 11;
    ExprGreaterThan greater_than = 12;
    ExprGreaterThanOrEquals greater_than_or_equals = 13;
    ExprAnd and = 14;
    ExprOr or = 15;
    ExprPlus plus = 16;
    ExprMinus minus = 17;
    ExprTimes times = 18;
    ExprContains contains = 19;
    ExprContainsAll contains_all = 20;
    ExprContainsAny contains_any = 21;
    ExprGetAttribute get_attribute = 22;
    ExprHasAttribute has_attribute = 23;
    ExprLike like = 24;
    ExprIs is = 25 [(dart_options.dart_name) = "is_"];
    ExprIfThenElse if_then_else = 26;
    ExprSet set = 27;
    ExprRecord record = 28;
    ExprFuncCall func_call = 29;
  }
}

message ExprValue {
  Value value = 1;
}

enum Variable {
  VARIABLE_UNSPECIFIED = 0;
  VARIABLE_PRINCIPAL = 1;
  VARIABLE_ACTION = 2;
  VARIABLE_RESOURCE = 3;
  VARIABLE_CONTEXT = 4;
}

message ExprVar {
  Variable variable = 1;
}

enum SlotId {
  SLOT_ID_UNSPECIFIED = 0;
  SLOT_ID_PRINCIPAL = 1;
  SLOT_ID_RESOURCE = 2;
}

message ExprSlot {
  SlotId slot_id = 1;
}

message ExprUnknown {
  string name = 1;
}

message ExprNot {
  Expr expr = 1;
}

message ExprNeg {
  Expr expr = 1;
}

message ExprEquals {
  Expr left = 1;
  Expr right = 2;
}

message ExprNotEquals {
  Expr left = 1;
  Expr right = 2;
}

message ExprIn {
  Expr left = 1;
  Expr right = 2;
}

message ExprLessThan {
  Expr left = 1;
  Expr right = 2;
}

message ExprLessThanOrEquals {
  Expr left = 1;
  Expr right = 2;
}

message ExprGreaterThan {
  Expr left = 1;
  Expr right = 2;
}

message ExprGreaterThanOrEquals {
  Expr left = 1;
  Expr right = 2;
}

message ExprAnd {
  Expr left = 1;
  Expr right = 2;
}

message ExprOr {
  Expr left = 1;
  Expr right = 2;
}

message ExprPlus {
  Expr left = 1;
  Expr right = 2;
}

message ExprMinus {
  Expr left = 1;
  Expr right = 2;
}

message ExprTimes {
  Expr left = 1;
  Expr right = 2;
}

message ExprContains {
  Expr left = 1;
  Expr right = 2;
}

message ExprContainsAll {
  Expr left = 1;
  Expr right = 2;
}

message ExprContainsAny {
  Expr left = 1;
  Expr right = 2;
}

message ExprGetAttribute {
  Expr left = 1;
  string attr = 2;
}

message ExprHasAttribute {
  Expr left = 1;
  string attr = 2;
}

message ExprLike {
  Expr left = 1;
  string pattern = 2;
}

message ExprIs {
  Expr left = 1;
  string entity_type = 2;
  optional Expr in = 3 [(dart_options.dart_name) = "in_"];
}

message ExprIfThenElse {
  Expr if = 1 [(dart_options.dart_name) = "if_"];
  Expr then = 2;
  Expr else = 3 [(dart_options.dart_name) = "else_"];
}

message ExprSet {
  repeated Expr expressions = 1;
}

message ExprRecord {
  map<string, Expr> attributes = 1;
}

message ExprFuncCall {
  string fn = 1;
  repeated Expr args = 2;
}
