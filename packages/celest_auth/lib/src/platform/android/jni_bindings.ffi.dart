// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: android.net.Uri$Builder
class Uri_Builder extends jni.JObject {
  @override
  late final jni.JObjType<Uri_Builder> $type = type;

  Uri_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/net/Uri$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $Uri_BuilderType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Uri_Builder() {
    return Uri_Builder.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_scheme = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"scheme", r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder scheme(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder scheme(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_scheme, jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_opaquePart = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"opaquePart",
      r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder opaquePart(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder opaquePart(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_opaquePart,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_encodedOpaquePart = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"encodedOpaquePart",
      r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder encodedOpaquePart(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedOpaquePart(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_encodedOpaquePart,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_authority = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"authority", r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder authority(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder authority(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_authority,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_encodedAuthority = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"encodedAuthority",
      r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder encodedAuthority(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedAuthority(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_encodedAuthority,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_path = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"path", r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder path(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder path(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_path, jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_encodedPath = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"encodedPath",
      r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder encodedPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedPath(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_encodedPath,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_appendPath = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"appendPath",
      r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder appendPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendPath(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_appendPath,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_appendEncodedPath = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"appendEncodedPath",
      r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder appendEncodedPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendEncodedPath(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_appendEncodedPath,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_query = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"query", r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder query(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder query(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_query, jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_encodedQuery = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"encodedQuery",
      r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder encodedQuery(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedQuery(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_encodedQuery,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_fragment = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"fragment", r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder fragment(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder fragment(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_fragment, jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_encodedFragment = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"encodedFragment",
      r"(Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder encodedFragment(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedFragment(
    jni.JString string,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_encodedFragment,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_appendQueryParameter = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"appendQueryParameter",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder appendQueryParameter(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendQueryParameter(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_appendQueryParameter,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_clearQuery = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"clearQuery", r"()Landroid/net/Uri$Builder;");

  /// from: public android.net.Uri$Builder clearQuery()
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder clearQuery() {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_clearQuery, jni.JniCallType.objectType, []).object);
  }

  static final _id_build = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"build", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri build()
  /// The returned object must be released after use, by calling the [release] method.
  Uri build() {
    return const $UriType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_build, jni.JniCallType.objectType, []).object);
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }
}

final class $Uri_BuilderType extends jni.JObjType<Uri_Builder> {
  const $Uri_BuilderType();

  @override
  String get signature => r"Landroid/net/Uri$Builder;";

  @override
  Uri_Builder fromRef(jni.JObjectPtr ref) => Uri_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Uri_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri_BuilderType) && other is $Uri_BuilderType;
  }
}

/// from: android.net.Uri
class Uri extends jni.JObject {
  @override
  late final jni.JObjType<Uri> $type = type;

  Uri.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/net/Uri");

  /// The type which includes information such as the signature of this class.
  static const type = $UriType();
  static final _id_CREATOR = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getStaticField(_class.reference, _id_CREATOR, jni.JniCallType.objectType)
      .object);

  static final _id_EMPTY = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"EMPTY",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EMPTY
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EMPTY => const $UriType().fromRef(jni.Jni.accessors
      .getStaticField(_class.reference, _id_EMPTY, jni.JniCallType.objectType)
      .object);

  static final _id_isHierarchical = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isHierarchical", r"()Z");

  /// from: public abstract boolean isHierarchical()
  bool isHierarchical() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isHierarchical, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isOpaque =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isOpaque", r"()Z");

  /// from: public boolean isOpaque()
  bool isOpaque() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isOpaque, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isRelative =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isRelative", r"()Z");

  /// from: public abstract boolean isRelative()
  bool isRelative() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isRelative, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isAbsolute =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isAbsolute", r"()Z");

  /// from: public boolean isAbsolute()
  bool isAbsolute() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isAbsolute, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getScheme = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getScheme", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getScheme() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getScheme, jni.JniCallType.objectType, []).object);
  }

  static final _id_getSchemeSpecificPart = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSchemeSpecificPart", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getSchemeSpecificPart()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSchemeSpecificPart() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSchemeSpecificPart,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getEncodedSchemeSpecificPart = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getEncodedSchemeSpecificPart",
          r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedSchemeSpecificPart()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedSchemeSpecificPart() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getEncodedSchemeSpecificPart,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getAuthority = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getAuthority", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getAuthority()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAuthority() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getAuthority, jni.JniCallType.objectType, []).object);
  }

  static final _id_getEncodedAuthority = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getEncodedAuthority", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedAuthority()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedAuthority() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getEncodedAuthority,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getUserInfo = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getUserInfo", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUserInfo() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getUserInfo, jni.JniCallType.objectType, []).object);
  }

  static final _id_getEncodedUserInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getEncodedUserInfo", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedUserInfo() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getEncodedUserInfo,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getHost = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getHost", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getHost()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHost() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getHost, jni.JniCallType.objectType, []).object);
  }

  static final _id_getPort =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getPort", r"()I");

  /// from: public abstract int getPort()
  int getPort() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getPort, jni.JniCallType.intType, []).integer;
  }

  static final _id_getPath = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getPath", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPath() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getPath, jni.JniCallType.objectType, []).object);
  }

  static final _id_getEncodedPath = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getEncodedPath", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedPath() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getEncodedPath, jni.JniCallType.objectType, []).object);
  }

  static final _id_getQuery = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getQuery", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getQuery()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getQuery() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getQuery, jni.JniCallType.objectType, []).object);
  }

  static final _id_getEncodedQuery = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getEncodedQuery", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedQuery()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedQuery() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getEncodedQuery, jni.JniCallType.objectType, []).object);
  }

  static final _id_getFragment = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getFragment", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFragment() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getFragment, jni.JniCallType.objectType, []).object);
  }

  static final _id_getEncodedFragment = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getEncodedFragment", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedFragment() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getEncodedFragment,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPathSegments = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPathSegments", r"()Ljava/util/List;");

  /// from: public abstract java.util.List getPathSegments()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getPathSegments() {
    return const jni.JListType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getPathSegments,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getLastPathSegment = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLastPathSegment", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getLastPathSegment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLastPathSegment() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLastPathSegment,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_equals1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(
    jni.JObject object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_equals1,
        jni.JniCallType.booleanType, [object.reference]).boolean;
  }

  static final _id_hashCode1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hashCode", r"()I");

  /// from: public int hashCode()
  int hashCode1() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hashCode1, jni.JniCallType.intType, []).integer;
  }

  static final _id_compareTo = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"compareTo", r"(Landroid/net/Uri;)I");

  /// from: public int compareTo(android.net.Uri uri)
  int compareTo(
    Uri uri,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_compareTo,
        jni.JniCallType.intType, [uri.reference]).integer;
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }

  static final _id_buildUpon = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"buildUpon", r"()Landroid/net/Uri$Builder;");

  /// from: public abstract android.net.Uri$Builder buildUpon()
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder buildUpon() {
    return const $Uri_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_buildUpon, jni.JniCallType.objectType, []).object);
  }

  static final _id_parse = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"parse", r"(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri parse(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri parse(
    jni.JString string,
  ) {
    return const $UriType().fromRef(jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_parse,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_fromFile = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"fromFile", r"(Ljava/io/File;)Landroid/net/Uri;");

  /// from: static public android.net.Uri fromFile(java.io.File file)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri fromFile(
    jni.JObject file,
  ) {
    return const $UriType().fromRef(jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_fromFile,
        jni.JniCallType.objectType,
        [file.reference]).object);
  }

  static final _id_fromParts = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"fromParts",
      r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri fromParts(java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri fromParts(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return const $UriType().fromRef(jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_fromParts,
        jni.JniCallType.objectType,
        [string.reference, string1.reference, string2.reference]).object);
  }

  static final _id_getQueryParameterNames = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getQueryParameterNames", r"()Ljava/util/Set;");

  /// from: public java.util.Set getQueryParameterNames()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getQueryParameterNames() {
    return const jni.JSetType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getQueryParameterNames,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getQueryParameters = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getQueryParameters",
      r"(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List getQueryParameters(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getQueryParameters(
    jni.JString string,
  ) {
    return const jni.JListType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getQueryParameters,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getQueryParameter = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getQueryParameter",
      r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getQueryParameter(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getQueryParameter(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getQueryParameter,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getBooleanQueryParameter = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBooleanQueryParameter", r"(Ljava/lang/String;Z)Z");

  /// from: public boolean getBooleanQueryParameter(java.lang.String string, boolean z)
  bool getBooleanQueryParameter(
    jni.JString string,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBooleanQueryParameter,
        jni.JniCallType.booleanType,
        [string.reference, z ? 1 : 0]).boolean;
  }

  static final _id_normalizeScheme = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"normalizeScheme", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri normalizeScheme()
  /// The returned object must be released after use, by calling the [release] method.
  Uri normalizeScheme() {
    return const $UriType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_normalizeScheme, jni.JniCallType.objectType, []).object);
  }

  static final _id_writeToParcel = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"writeToParcel",
      r"(Landroid/os/Parcel;Landroid/net/Uri;)V");

  /// from: static public void writeToParcel(android.os.Parcel parcel, android.net.Uri uri)
  static void writeToParcel(
    jni.JObject parcel,
    Uri uri,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_writeToParcel,
        jni.JniCallType.voidType,
        [parcel.reference, uri.reference]).check();
  }

  static final _id_encode = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"encode", r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String encode(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString encode(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_encode,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_encode1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"encode",
      r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String encode(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString encode1(
    jni.JString string,
    jni.JString string1,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_encode1,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_decode = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"decode", r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String decode(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString decode(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_decode,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_withAppendedPath = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"withAppendedPath",
      r"(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri withAppendedPath(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri withAppendedPath(
    Uri uri,
    jni.JString string,
  ) {
    return const $UriType().fromRef(jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_withAppendedPath,
        jni.JniCallType.objectType,
        [uri.reference, string.reference]).object);
  }

  static final _id_compareTo1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"compareTo", r"(Ljava/lang/Object;)I");

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(
    jni.JObject object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_compareTo1,
        jni.JniCallType.intType, [object.reference]).integer;
  }
}

final class $UriType extends jni.JObjType<Uri> {
  const $UriType();

  @override
  String get signature => r"Landroid/net/Uri;";

  @override
  Uri fromRef(jni.JObjectPtr ref) => Uri.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UriType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UriType) && other is $UriType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsIntent$ActivityHeightResizeBehavior
class CustomTabsIntent_ActivityHeightResizeBehavior extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsIntent_ActivityHeightResizeBehavior> $type =
      type;

  CustomTabsIntent_ActivityHeightResizeBehavior.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/browser/customtabs/CustomTabsIntent$ActivityHeightResizeBehavior");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsIntent_ActivityHeightResizeBehaviorType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CustomTabsIntent_ActivityHeightResizeBehaviorImpl>
      _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CustomTabsIntent_ActivityHeightResizeBehavior.implement(
    $CustomTabsIntent_ActivityHeightResizeBehaviorImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CustomTabsIntent_ActivityHeightResizeBehavior.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.browser.customtabs.CustomTabsIntent$ActivityHeightResizeBehavior",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CustomTabsIntent_ActivityHeightResizeBehaviorImpl {
  factory $CustomTabsIntent_ActivityHeightResizeBehaviorImpl() =
      _$CustomTabsIntent_ActivityHeightResizeBehaviorImpl;
}

class _$CustomTabsIntent_ActivityHeightResizeBehaviorImpl
    implements $CustomTabsIntent_ActivityHeightResizeBehaviorImpl {
  _$CustomTabsIntent_ActivityHeightResizeBehaviorImpl();
}

final class $CustomTabsIntent_ActivityHeightResizeBehaviorType
    extends jni.JObjType<CustomTabsIntent_ActivityHeightResizeBehavior> {
  const $CustomTabsIntent_ActivityHeightResizeBehaviorType();

  @override
  String get signature =>
      r"Landroidx/browser/customtabs/CustomTabsIntent$ActivityHeightResizeBehavior;";

  @override
  CustomTabsIntent_ActivityHeightResizeBehavior fromRef(jni.JObjectPtr ref) =>
      CustomTabsIntent_ActivityHeightResizeBehavior.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CustomTabsIntent_ActivityHeightResizeBehaviorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CustomTabsIntent_ActivityHeightResizeBehaviorType) &&
        other is $CustomTabsIntent_ActivityHeightResizeBehaviorType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsIntent$Builder
class CustomTabsIntent_Builder extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsIntent_Builder> $type = type;

  CustomTabsIntent_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/browser/customtabs/CustomTabsIntent$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsIntent_BuilderType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomTabsIntent_Builder() {
    return CustomTabsIntent_Builder.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Landroidx/browser/customtabs/CustomTabsSession;)V");

  /// from: public void <init>(androidx.browser.customtabs.CustomTabsSession customTabsSession)
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomTabsIntent_Builder.new1(
    jni.JObject customTabsSession,
  ) {
    return CustomTabsIntent_Builder.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [customTabsSession.reference]).object);
  }

  static final _id_setSession = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setSession",
      r"(Landroidx/browser/customtabs/CustomTabsSession;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setSession(androidx.browser.customtabs.CustomTabsSession customTabsSession)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setSession(
    jni.JObject customTabsSession,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setSession,
            jni.JniCallType.objectType, [customTabsSession.reference]).object);
  }

  static final _id_setPendingSession = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setPendingSession",
      r"(Landroidx/browser/customtabs/CustomTabsSession$PendingSession;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setPendingSession(androidx.browser.customtabs.CustomTabsSession$PendingSession pendingSession)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setPendingSession(
    jni.JObject pendingSession,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setPendingSession,
            jni.JniCallType.objectType, [pendingSession.reference]).object);
  }

  static final _id_setToolbarColor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setToolbarColor",
      r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setToolbarColor(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setToolbarColor(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setToolbarColor,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_enableUrlBarHiding = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enableUrlBarHiding",
      r"()Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder enableUrlBarHiding()
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder enableUrlBarHiding() {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_enableUrlBarHiding,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_setUrlBarHidingEnabled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setUrlBarHidingEnabled",
      r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setUrlBarHidingEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setUrlBarHidingEnabled(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setUrlBarHidingEnabled,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_setCloseButtonIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setCloseButtonIcon",
      r"(Landroid/graphics/Bitmap;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setCloseButtonIcon(android.graphics.Bitmap bitmap)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setCloseButtonIcon(
    jni.JObject bitmap,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setCloseButtonIcon,
            jni.JniCallType.objectType, [bitmap.reference]).object);
  }

  static final _id_setShowTitle = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setShowTitle",
      r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setShowTitle(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setShowTitle(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setShowTitle,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_addMenuItem = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addMenuItem",
      r"(Ljava/lang/String;Landroid/app/PendingIntent;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder addMenuItem(java.lang.String string, android.app.PendingIntent pendingIntent)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder addMenuItem(
    jni.JString string,
    jni.JObject pendingIntent,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_addMenuItem,
            jni.JniCallType.objectType,
            [string.reference, pendingIntent.reference]).object);
  }

  static final _id_addDefaultShareMenuItem = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addDefaultShareMenuItem",
      r"()Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder addDefaultShareMenuItem()
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder addDefaultShareMenuItem() {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addDefaultShareMenuItem,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_setDefaultShareMenuItemEnabled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setDefaultShareMenuItemEnabled",
          r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setDefaultShareMenuItemEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setDefaultShareMenuItemEnabled(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setDefaultShareMenuItemEnabled,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_setShareState = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setShareState",
      r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setShareState(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setShareState(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setShareState,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_setActionButton = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setActionButton",
      r"(Landroid/graphics/Bitmap;Ljava/lang/String;Landroid/app/PendingIntent;Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setActionButton(android.graphics.Bitmap bitmap, java.lang.String string, android.app.PendingIntent pendingIntent, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setActionButton(
    jni.JObject bitmap,
    jni.JString string,
    jni.JObject pendingIntent,
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_setActionButton, jni.JniCallType.objectType, [
      bitmap.reference,
      string.reference,
      pendingIntent.reference,
      z ? 1 : 0
    ]).object);
  }

  static final _id_setActionButton1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setActionButton",
      r"(Landroid/graphics/Bitmap;Ljava/lang/String;Landroid/app/PendingIntent;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setActionButton(android.graphics.Bitmap bitmap, java.lang.String string, android.app.PendingIntent pendingIntent)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setActionButton1(
    jni.JObject bitmap,
    jni.JString string,
    jni.JObject pendingIntent,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_setActionButton1, jni.JniCallType.objectType, [
      bitmap.reference,
      string.reference,
      pendingIntent.reference
    ]).object);
  }

  static final _id_addToolbarItem = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addToolbarItem",
      r"(ILandroid/graphics/Bitmap;Ljava/lang/String;Landroid/app/PendingIntent;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder addToolbarItem(int i, android.graphics.Bitmap bitmap, java.lang.String string, android.app.PendingIntent pendingIntent)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder addToolbarItem(
    int i,
    jni.JObject bitmap,
    jni.JString string,
    jni.JObject pendingIntent,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_addToolbarItem, jni.JniCallType.objectType, [
      jni.JValueInt(i),
      bitmap.reference,
      string.reference,
      pendingIntent.reference
    ]).object);
  }

  static final _id_setSecondaryToolbarColor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setSecondaryToolbarColor",
      r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setSecondaryToolbarColor(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setSecondaryToolbarColor(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setSecondaryToolbarColor,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_setNavigationBarColor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setNavigationBarColor",
      r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setNavigationBarColor(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setNavigationBarColor(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setNavigationBarColor,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_setNavigationBarDividerColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setNavigationBarDividerColor",
          r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setNavigationBarDividerColor(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setNavigationBarDividerColor(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setNavigationBarDividerColor,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_setSecondaryToolbarViews = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setSecondaryToolbarViews",
      r"(Landroid/widget/RemoteViews;[ILandroid/app/PendingIntent;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setSecondaryToolbarViews(android.widget.RemoteViews remoteViews, int[] is, android.app.PendingIntent pendingIntent)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setSecondaryToolbarViews(
    jni.JObject remoteViews,
    jni.JArray<jni.jint> is0,
    jni.JObject pendingIntent,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setSecondaryToolbarViews,
            jni.JniCallType.objectType, [
      remoteViews.reference,
      is0.reference,
      pendingIntent.reference
    ]).object);
  }

  static final _id_setSecondaryToolbarSwipeUpGesture = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setSecondaryToolbarSwipeUpGesture",
          r"(Landroid/app/PendingIntent;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setSecondaryToolbarSwipeUpGesture(android.app.PendingIntent pendingIntent)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setSecondaryToolbarSwipeUpGesture(
    jni.JObject pendingIntent,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setSecondaryToolbarSwipeUpGesture,
            jni.JniCallType.objectType, [pendingIntent.reference]).object);
  }

  static final _id_setInstantAppsEnabled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setInstantAppsEnabled",
      r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setInstantAppsEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setInstantAppsEnabled(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setInstantAppsEnabled,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_setStartAnimations = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setStartAnimations",
      r"(Landroid/content/Context;II)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setStartAnimations(android.content.Context context, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setStartAnimations(
    Context context,
    int i,
    int i1,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setStartAnimations,
            jni.JniCallType.objectType,
            [context.reference, jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_setExitAnimations = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setExitAnimations",
      r"(Landroid/content/Context;II)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setExitAnimations(android.content.Context context, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setExitAnimations(
    Context context,
    int i,
    int i1,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setExitAnimations,
            jni.JniCallType.objectType,
            [context.reference, jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_setColorScheme = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setColorScheme",
      r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setColorScheme(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setColorScheme(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setColorScheme,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_setColorSchemeParams = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setColorSchemeParams",
      r"(ILandroidx/browser/customtabs/CustomTabColorSchemeParams;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setColorSchemeParams(int i, androidx.browser.customtabs.CustomTabColorSchemeParams customTabColorSchemeParams)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setColorSchemeParams(
    int i,
    jni.JObject customTabColorSchemeParams,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setColorSchemeParams,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), customTabColorSchemeParams.reference]).object);
  }

  static final _id_setDefaultColorSchemeParams = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setDefaultColorSchemeParams",
      r"(Landroidx/browser/customtabs/CustomTabColorSchemeParams;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setDefaultColorSchemeParams(androidx.browser.customtabs.CustomTabColorSchemeParams customTabColorSchemeParams)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setDefaultColorSchemeParams(
    jni.JObject customTabColorSchemeParams,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setDefaultColorSchemeParams,
            jni.JniCallType.objectType,
            [customTabColorSchemeParams.reference]).object);
  }

  static final _id_setInitialActivityHeightPx = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setInitialActivityHeightPx",
      r"(II)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setInitialActivityHeightPx(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setInitialActivityHeightPx(
    int i,
    int i1,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setInitialActivityHeightPx,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_setInitialActivityHeightPx1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setInitialActivityHeightPx",
          r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setInitialActivityHeightPx(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setInitialActivityHeightPx1(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setInitialActivityHeightPx1,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_setToolbarCornerRadiusDp = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setToolbarCornerRadiusDp",
      r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setToolbarCornerRadiusDp(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setToolbarCornerRadiusDp(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setToolbarCornerRadiusDp,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_setCloseButtonPosition = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setCloseButtonPosition",
      r"(I)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setCloseButtonPosition(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setCloseButtonPosition(
    int i,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setCloseButtonPosition,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_setBookmarksButtonEnabled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setBookmarksButtonEnabled",
      r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setBookmarksButtonEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setBookmarksButtonEnabled(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setBookmarksButtonEnabled,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_setDownloadButtonEnabled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setDownloadButtonEnabled",
      r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setDownloadButtonEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setDownloadButtonEnabled(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setDownloadButtonEnabled,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_setSendToExternalDefaultHandlerEnabled = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference,
          r"setSendToExternalDefaultHandlerEnabled",
          r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setSendToExternalDefaultHandlerEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setSendToExternalDefaultHandlerEnabled(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setSendToExternalDefaultHandlerEnabled,
            jni.JniCallType.objectType,
            [z ? 1 : 0]).object);
  }

  static final _id_setTranslateLocale = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setTranslateLocale",
      r"(Ljava/util/Locale;)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setTranslateLocale(java.util.Locale locale)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setTranslateLocale(
    jni.JObject locale,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setTranslateLocale,
            jni.JniCallType.objectType, [locale.reference]).object);
  }

  static final _id_setBackgroundInteractionEnabled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setBackgroundInteractionEnabled",
          r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setBackgroundInteractionEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setBackgroundInteractionEnabled(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setBackgroundInteractionEnabled,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_setShareIdentityEnabled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setShareIdentityEnabled",
      r"(Z)Landroidx/browser/customtabs/CustomTabsIntent$Builder;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent$Builder setShareIdentityEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent_Builder setShareIdentityEnabled(
    bool z,
  ) {
    return const $CustomTabsIntent_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setShareIdentityEnabled,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_build = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"build", r"()Landroidx/browser/customtabs/CustomTabsIntent;");

  /// from: public androidx.browser.customtabs.CustomTabsIntent build()
  /// The returned object must be released after use, by calling the [release] method.
  CustomTabsIntent build() {
    return const $CustomTabsIntentType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_build, jni.JniCallType.objectType, []).object);
  }
}

final class $CustomTabsIntent_BuilderType
    extends jni.JObjType<CustomTabsIntent_Builder> {
  const $CustomTabsIntent_BuilderType();

  @override
  String get signature =>
      r"Landroidx/browser/customtabs/CustomTabsIntent$Builder;";

  @override
  CustomTabsIntent_Builder fromRef(jni.JObjectPtr ref) =>
      CustomTabsIntent_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsIntent_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsIntent_BuilderType) &&
        other is $CustomTabsIntent_BuilderType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsIntent$CloseButtonPosition
class CustomTabsIntent_CloseButtonPosition extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsIntent_CloseButtonPosition> $type = type;

  CustomTabsIntent_CloseButtonPosition.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/browser/customtabs/CustomTabsIntent$CloseButtonPosition");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsIntent_CloseButtonPositionType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CustomTabsIntent_CloseButtonPositionImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CustomTabsIntent_CloseButtonPosition.implement(
    $CustomTabsIntent_CloseButtonPositionImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CustomTabsIntent_CloseButtonPosition.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.browser.customtabs.CustomTabsIntent$CloseButtonPosition",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CustomTabsIntent_CloseButtonPositionImpl {
  factory $CustomTabsIntent_CloseButtonPositionImpl() =
      _$CustomTabsIntent_CloseButtonPositionImpl;
}

class _$CustomTabsIntent_CloseButtonPositionImpl
    implements $CustomTabsIntent_CloseButtonPositionImpl {
  _$CustomTabsIntent_CloseButtonPositionImpl();
}

final class $CustomTabsIntent_CloseButtonPositionType
    extends jni.JObjType<CustomTabsIntent_CloseButtonPosition> {
  const $CustomTabsIntent_CloseButtonPositionType();

  @override
  String get signature =>
      r"Landroidx/browser/customtabs/CustomTabsIntent$CloseButtonPosition;";

  @override
  CustomTabsIntent_CloseButtonPosition fromRef(jni.JObjectPtr ref) =>
      CustomTabsIntent_CloseButtonPosition.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsIntent_CloseButtonPositionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsIntent_CloseButtonPositionType) &&
        other is $CustomTabsIntent_CloseButtonPositionType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsIntent$ColorScheme
class CustomTabsIntent_ColorScheme extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsIntent_ColorScheme> $type = type;

  CustomTabsIntent_ColorScheme.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/browser/customtabs/CustomTabsIntent$ColorScheme");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsIntent_ColorSchemeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CustomTabsIntent_ColorSchemeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CustomTabsIntent_ColorScheme.implement(
    $CustomTabsIntent_ColorSchemeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CustomTabsIntent_ColorScheme.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.browser.customtabs.CustomTabsIntent$ColorScheme",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CustomTabsIntent_ColorSchemeImpl {
  factory $CustomTabsIntent_ColorSchemeImpl() =
      _$CustomTabsIntent_ColorSchemeImpl;
}

class _$CustomTabsIntent_ColorSchemeImpl
    implements $CustomTabsIntent_ColorSchemeImpl {
  _$CustomTabsIntent_ColorSchemeImpl();
}

final class $CustomTabsIntent_ColorSchemeType
    extends jni.JObjType<CustomTabsIntent_ColorScheme> {
  const $CustomTabsIntent_ColorSchemeType();

  @override
  String get signature =>
      r"Landroidx/browser/customtabs/CustomTabsIntent$ColorScheme;";

  @override
  CustomTabsIntent_ColorScheme fromRef(jni.JObjectPtr ref) =>
      CustomTabsIntent_ColorScheme.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsIntent_ColorSchemeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsIntent_ColorSchemeType) &&
        other is $CustomTabsIntent_ColorSchemeType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsIntent$ShareState
class CustomTabsIntent_ShareState extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsIntent_ShareState> $type = type;

  CustomTabsIntent_ShareState.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/browser/customtabs/CustomTabsIntent$ShareState");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsIntent_ShareStateType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CustomTabsIntent_ShareStateImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CustomTabsIntent_ShareState.implement(
    $CustomTabsIntent_ShareStateImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CustomTabsIntent_ShareState.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.browser.customtabs.CustomTabsIntent$ShareState",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CustomTabsIntent_ShareStateImpl {
  factory $CustomTabsIntent_ShareStateImpl() =
      _$CustomTabsIntent_ShareStateImpl;
}

class _$CustomTabsIntent_ShareStateImpl
    implements $CustomTabsIntent_ShareStateImpl {
  _$CustomTabsIntent_ShareStateImpl();
}

final class $CustomTabsIntent_ShareStateType
    extends jni.JObjType<CustomTabsIntent_ShareState> {
  const $CustomTabsIntent_ShareStateType();

  @override
  String get signature =>
      r"Landroidx/browser/customtabs/CustomTabsIntent$ShareState;";

  @override
  CustomTabsIntent_ShareState fromRef(jni.JObjectPtr ref) =>
      CustomTabsIntent_ShareState.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsIntent_ShareStateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsIntent_ShareStateType) &&
        other is $CustomTabsIntent_ShareStateType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsIntent
class CustomTabsIntent extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsIntent> $type = type;

  CustomTabsIntent.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/browser/customtabs/CustomTabsIntent");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsIntentType();

  /// from: static public final java.lang.String EXTRA_SESSION
  static const EXTRA_SESSION = r"""android.support.customtabs.extra.SESSION""";

  /// from: static public final java.lang.String EXTRA_SESSION_ID
  static const EXTRA_SESSION_ID =
      r"""android.support.customtabs.extra.SESSION_ID""";

  /// from: static public final int COLOR_SCHEME_SYSTEM
  static const COLOR_SCHEME_SYSTEM = 0;

  /// from: static public final int COLOR_SCHEME_LIGHT
  static const COLOR_SCHEME_LIGHT = 1;

  /// from: static public final int COLOR_SCHEME_DARK
  static const COLOR_SCHEME_DARK = 2;

  /// from: static public final java.lang.String EXTRA_COLOR_SCHEME
  static const EXTRA_COLOR_SCHEME =
      r"""androidx.browser.customtabs.extra.COLOR_SCHEME""";

  /// from: static public final java.lang.String EXTRA_TOOLBAR_COLOR
  static const EXTRA_TOOLBAR_COLOR =
      r"""android.support.customtabs.extra.TOOLBAR_COLOR""";

  /// from: static public final java.lang.String EXTRA_ENABLE_URLBAR_HIDING
  static const EXTRA_ENABLE_URLBAR_HIDING =
      r"""android.support.customtabs.extra.ENABLE_URLBAR_HIDING""";

  /// from: static public final java.lang.String EXTRA_CLOSE_BUTTON_ICON
  static const EXTRA_CLOSE_BUTTON_ICON =
      r"""android.support.customtabs.extra.CLOSE_BUTTON_ICON""";

  /// from: static public final java.lang.String EXTRA_TITLE_VISIBILITY_STATE
  static const EXTRA_TITLE_VISIBILITY_STATE =
      r"""android.support.customtabs.extra.TITLE_VISIBILITY""";

  /// from: static public final java.lang.String EXTRA_DISABLE_BOOKMARKS_BUTTON
  static const EXTRA_DISABLE_BOOKMARKS_BUTTON =
      r"""org.chromium.chrome.browser.customtabs.EXTRA_DISABLE_STAR_BUTTON""";

  /// from: static public final java.lang.String EXTRA_DISABLE_DOWNLOAD_BUTTON
  static const EXTRA_DISABLE_DOWNLOAD_BUTTON =
      r"""org.chromium.chrome.browser.customtabs.EXTRA_DISABLE_DOWNLOAD_BUTTON""";

  /// from: static public final java.lang.String EXTRA_SEND_TO_EXTERNAL_DEFAULT_HANDLER
  static const EXTRA_SEND_TO_EXTERNAL_DEFAULT_HANDLER =
      r"""android.support.customtabs.extra.SEND_TO_EXTERNAL_HANDLER""";

  /// from: static public final java.lang.String EXTRA_TRANSLATE_LANGUAGE_TAG
  static const EXTRA_TRANSLATE_LANGUAGE_TAG =
      r"""androidx.browser.customtabs.extra.TRANSLATE_LANGUAGE_TAG""";

  /// from: static public final java.lang.String EXTRA_DISABLE_BACKGROUND_INTERACTION
  static const EXTRA_DISABLE_BACKGROUND_INTERACTION =
      r"""androidx.browser.customtabs.extra.DISABLE_BACKGROUND_INTERACTION""";

  /// from: static public final java.lang.String EXTRA_SECONDARY_TOOLBAR_SWIPE_UP_GESTURE
  static const EXTRA_SECONDARY_TOOLBAR_SWIPE_UP_GESTURE =
      r"""androidx.browser.customtabs.extra.SECONDARY_TOOLBAR_SWIPE_UP_GESTURE""";

  /// from: static public final int NO_TITLE
  static const NO_TITLE = 0;

  /// from: static public final int SHOW_PAGE_TITLE
  static const SHOW_PAGE_TITLE = 1;

  /// from: static public final java.lang.String EXTRA_ACTION_BUTTON_BUNDLE
  static const EXTRA_ACTION_BUTTON_BUNDLE =
      r"""android.support.customtabs.extra.ACTION_BUTTON_BUNDLE""";

  /// from: static public final java.lang.String EXTRA_TOOLBAR_ITEMS
  static const EXTRA_TOOLBAR_ITEMS =
      r"""android.support.customtabs.extra.TOOLBAR_ITEMS""";

  /// from: static public final java.lang.String EXTRA_SECONDARY_TOOLBAR_COLOR
  static const EXTRA_SECONDARY_TOOLBAR_COLOR =
      r"""android.support.customtabs.extra.SECONDARY_TOOLBAR_COLOR""";

  /// from: static public final java.lang.String KEY_ICON
  static const KEY_ICON = r"""android.support.customtabs.customaction.ICON""";

  /// from: static public final java.lang.String KEY_DESCRIPTION
  static const KEY_DESCRIPTION =
      r"""android.support.customtabs.customaction.DESCRIPTION""";

  /// from: static public final java.lang.String KEY_PENDING_INTENT
  static const KEY_PENDING_INTENT =
      r"""android.support.customtabs.customaction.PENDING_INTENT""";

  /// from: static public final java.lang.String EXTRA_TINT_ACTION_BUTTON
  static const EXTRA_TINT_ACTION_BUTTON =
      r"""android.support.customtabs.extra.TINT_ACTION_BUTTON""";

  /// from: static public final java.lang.String EXTRA_MENU_ITEMS
  static const EXTRA_MENU_ITEMS =
      r"""android.support.customtabs.extra.MENU_ITEMS""";

  /// from: static public final java.lang.String KEY_MENU_ITEM_TITLE
  static const KEY_MENU_ITEM_TITLE =
      r"""android.support.customtabs.customaction.MENU_ITEM_TITLE""";

  /// from: static public final java.lang.String EXTRA_EXIT_ANIMATION_BUNDLE
  static const EXTRA_EXIT_ANIMATION_BUNDLE =
      r"""android.support.customtabs.extra.EXIT_ANIMATION_BUNDLE""";

  /// from: static public final int SHARE_STATE_DEFAULT
  static const SHARE_STATE_DEFAULT = 0;

  /// from: static public final int SHARE_STATE_ON
  static const SHARE_STATE_ON = 1;

  /// from: static public final int SHARE_STATE_OFF
  static const SHARE_STATE_OFF = 2;

  /// from: static public final java.lang.String EXTRA_SHARE_STATE
  static const EXTRA_SHARE_STATE =
      r"""androidx.browser.customtabs.extra.SHARE_STATE""";

  /// from: static public final java.lang.String EXTRA_DEFAULT_SHARE_MENU_ITEM
  static const EXTRA_DEFAULT_SHARE_MENU_ITEM =
      r"""android.support.customtabs.extra.SHARE_MENU_ITEM""";

  /// from: static public final java.lang.String EXTRA_REMOTEVIEWS
  static const EXTRA_REMOTEVIEWS =
      r"""android.support.customtabs.extra.EXTRA_REMOTEVIEWS""";

  /// from: static public final java.lang.String EXTRA_REMOTEVIEWS_VIEW_IDS
  static const EXTRA_REMOTEVIEWS_VIEW_IDS =
      r"""android.support.customtabs.extra.EXTRA_REMOTEVIEWS_VIEW_IDS""";

  /// from: static public final java.lang.String EXTRA_REMOTEVIEWS_PENDINGINTENT
  static const EXTRA_REMOTEVIEWS_PENDINGINTENT =
      r"""android.support.customtabs.extra.EXTRA_REMOTEVIEWS_PENDINGINTENT""";

  /// from: static public final java.lang.String EXTRA_REMOTEVIEWS_CLICKED_ID
  static const EXTRA_REMOTEVIEWS_CLICKED_ID =
      r"""android.support.customtabs.extra.EXTRA_REMOTEVIEWS_CLICKED_ID""";

  /// from: static public final java.lang.String EXTRA_ENABLE_INSTANT_APPS
  static const EXTRA_ENABLE_INSTANT_APPS =
      r"""android.support.customtabs.extra.EXTRA_ENABLE_INSTANT_APPS""";

  /// from: static public final java.lang.String EXTRA_COLOR_SCHEME_PARAMS
  static const EXTRA_COLOR_SCHEME_PARAMS =
      r"""androidx.browser.customtabs.extra.COLOR_SCHEME_PARAMS""";

  /// from: static public final java.lang.String EXTRA_NAVIGATION_BAR_COLOR
  static const EXTRA_NAVIGATION_BAR_COLOR =
      r"""androidx.browser.customtabs.extra.NAVIGATION_BAR_COLOR""";

  /// from: static public final java.lang.String EXTRA_INITIAL_ACTIVITY_HEIGHT_PX
  static const EXTRA_INITIAL_ACTIVITY_HEIGHT_PX =
      r"""androidx.browser.customtabs.extra.INITIAL_ACTIVITY_HEIGHT_PX""";

  /// from: static public final int ACTIVITY_HEIGHT_DEFAULT
  static const ACTIVITY_HEIGHT_DEFAULT = 0;

  /// from: static public final int ACTIVITY_HEIGHT_ADJUSTABLE
  static const ACTIVITY_HEIGHT_ADJUSTABLE = 1;

  /// from: static public final int ACTIVITY_HEIGHT_FIXED
  static const ACTIVITY_HEIGHT_FIXED = 2;

  /// from: static public final java.lang.String EXTRA_ACTIVITY_HEIGHT_RESIZE_BEHAVIOR
  static const EXTRA_ACTIVITY_HEIGHT_RESIZE_BEHAVIOR =
      r"""androidx.browser.customtabs.extra.ACTIVITY_HEIGHT_RESIZE_BEHAVIOR""";

  /// from: static public final java.lang.String EXTRA_TOOLBAR_CORNER_RADIUS_DP
  static const EXTRA_TOOLBAR_CORNER_RADIUS_DP =
      r"""androidx.browser.customtabs.extra.TOOLBAR_CORNER_RADIUS_DP""";

  /// from: static public final int CLOSE_BUTTON_POSITION_DEFAULT
  static const CLOSE_BUTTON_POSITION_DEFAULT = 0;

  /// from: static public final int CLOSE_BUTTON_POSITION_START
  static const CLOSE_BUTTON_POSITION_START = 1;

  /// from: static public final int CLOSE_BUTTON_POSITION_END
  static const CLOSE_BUTTON_POSITION_END = 2;

  /// from: static public final java.lang.String EXTRA_CLOSE_BUTTON_POSITION
  static const EXTRA_CLOSE_BUTTON_POSITION =
      r"""androidx.browser.customtabs.extra.CLOSE_BUTTON_POSITION""";

  /// from: static public final java.lang.String EXTRA_NAVIGATION_BAR_DIVIDER_COLOR
  static const EXTRA_NAVIGATION_BAR_DIVIDER_COLOR =
      r"""androidx.browser.customtabs.extra.NAVIGATION_BAR_DIVIDER_COLOR""";

  /// from: static public final java.lang.String KEY_ID
  static const KEY_ID = r"""android.support.customtabs.customaction.ID""";

  /// from: static public final int TOOLBAR_ACTION_BUTTON_ID
  static const TOOLBAR_ACTION_BUTTON_ID = 0;

  static final _id_intent = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"intent",
    r"Landroid/content/Intent;",
  );

  /// from: public final android.content.Intent intent
  /// The returned object must be released after use, by calling the [release] method.
  Intent get intent => const $IntentType().fromRef(jni.Jni.accessors
      .getField(reference, _id_intent, jni.JniCallType.objectType)
      .object);

  static final _id_startAnimationBundle = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"startAnimationBundle",
    r"Landroid/os/Bundle;",
  );

  /// from: public final android.os.Bundle startAnimationBundle
  /// The returned object must be released after use, by calling the [release] method.
  Bundle get startAnimationBundle => const $BundleType().fromRef(jni
      .Jni.accessors
      .getField(reference, _id_startAnimationBundle, jni.JniCallType.objectType)
      .object);

  static final _id_launchUrl = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"launchUrl", r"(Landroid/content/Context;Landroid/net/Uri;)V");

  /// from: public void launchUrl(android.content.Context context, android.net.Uri uri)
  void launchUrl(
    Context context,
    Uri uri,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_launchUrl,
        jni.JniCallType.voidType, [context.reference, uri.reference]).check();
  }

  static final _id_getMaxToolbarItems = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getMaxToolbarItems", r"()I");

  /// from: static public int getMaxToolbarItems()
  static int getMaxToolbarItems() {
    return jni.Jni.accessors.callStaticMethodWithArgs(_class.reference,
        _id_getMaxToolbarItems, jni.JniCallType.intType, []).integer;
  }

  static final _id_setAlwaysUseBrowserUI = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"setAlwaysUseBrowserUI",
          r"(Landroid/content/Intent;)Landroid/content/Intent;");

  /// from: static public android.content.Intent setAlwaysUseBrowserUI(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent setAlwaysUseBrowserUI(
    Intent intent,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_setAlwaysUseBrowserUI,
            jni.JniCallType.objectType, [intent.reference]).object);
  }

  static final _id_shouldAlwaysUseBrowserUI = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"shouldAlwaysUseBrowserUI",
          r"(Landroid/content/Intent;)Z");

  /// from: static public boolean shouldAlwaysUseBrowserUI(android.content.Intent intent)
  static bool shouldAlwaysUseBrowserUI(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_shouldAlwaysUseBrowserUI,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_getColorSchemeParams = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getColorSchemeParams",
      r"(Landroid/content/Intent;I)Landroidx/browser/customtabs/CustomTabColorSchemeParams;");

  /// from: static public androidx.browser.customtabs.CustomTabColorSchemeParams getColorSchemeParams(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getColorSchemeParams(
    Intent intent,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_getColorSchemeParams,
            jni.JniCallType.objectType,
            [intent.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getActivityResizeBehavior = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getActivityResizeBehavior",
          r"(Landroid/content/Intent;)I");

  /// from: static public int getActivityResizeBehavior(android.content.Intent intent)
  static int getActivityResizeBehavior(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_getActivityResizeBehavior,
        jni.JniCallType.intType,
        [intent.reference]).integer;
  }

  static final _id_getInitialActivityHeightPx = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getInitialActivityHeightPx",
          r"(Landroid/content/Intent;)I");

  /// from: static public int getInitialActivityHeightPx(android.content.Intent intent)
  static int getInitialActivityHeightPx(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_getInitialActivityHeightPx,
        jni.JniCallType.intType,
        [intent.reference]).integer;
  }

  static final _id_getToolbarCornerRadiusDp = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getToolbarCornerRadiusDp",
          r"(Landroid/content/Intent;)I");

  /// from: static public int getToolbarCornerRadiusDp(android.content.Intent intent)
  static int getToolbarCornerRadiusDp(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_getToolbarCornerRadiusDp,
        jni.JniCallType.intType,
        [intent.reference]).integer;
  }

  static final _id_getCloseButtonPosition = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getCloseButtonPosition",
          r"(Landroid/content/Intent;)I");

  /// from: static public int getCloseButtonPosition(android.content.Intent intent)
  static int getCloseButtonPosition(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_getCloseButtonPosition,
        jni.JniCallType.intType,
        [intent.reference]).integer;
  }

  static final _id_isBookmarksButtonEnabled = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"isBookmarksButtonEnabled",
          r"(Landroid/content/Intent;)Z");

  /// from: static public boolean isBookmarksButtonEnabled(android.content.Intent intent)
  static bool isBookmarksButtonEnabled(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_isBookmarksButtonEnabled,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_isDownloadButtonEnabled = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"isDownloadButtonEnabled",
          r"(Landroid/content/Intent;)Z");

  /// from: static public boolean isDownloadButtonEnabled(android.content.Intent intent)
  static bool isDownloadButtonEnabled(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_isDownloadButtonEnabled,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_isSendToExternalDefaultHandlerEnabled = jni.Jni.accessors
      .getStaticMethodIDOf(
          _class.reference,
          r"isSendToExternalDefaultHandlerEnabled",
          r"(Landroid/content/Intent;)Z");

  /// from: static public boolean isSendToExternalDefaultHandlerEnabled(android.content.Intent intent)
  static bool isSendToExternalDefaultHandlerEnabled(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_isSendToExternalDefaultHandlerEnabled,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_getTranslateLocale = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getTranslateLocale",
      r"(Landroid/content/Intent;)Ljava/util/Locale;");

  /// from: static public java.util.Locale getTranslateLocale(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getTranslateLocale(
    Intent intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getTranslateLocale,
            jni.JniCallType.objectType, [intent.reference]).object);
  }

  static final _id_isBackgroundInteractionEnabled = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"isBackgroundInteractionEnabled",
          r"(Landroid/content/Intent;)Z");

  /// from: static public boolean isBackgroundInteractionEnabled(android.content.Intent intent)
  static bool isBackgroundInteractionEnabled(
    Intent intent,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_isBackgroundInteractionEnabled,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_getSecondaryToolbarSwipeUpGesture = jni.Jni.accessors
      .getStaticMethodIDOf(
          _class.reference,
          r"getSecondaryToolbarSwipeUpGesture",
          r"(Landroid/content/Intent;)Landroid/app/PendingIntent;");

  /// from: static public android.app.PendingIntent getSecondaryToolbarSwipeUpGesture(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getSecondaryToolbarSwipeUpGesture(
    Intent intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_getSecondaryToolbarSwipeUpGesture,
            jni.JniCallType.objectType,
            [intent.reference]).object);
  }
}

final class $CustomTabsIntentType extends jni.JObjType<CustomTabsIntent> {
  const $CustomTabsIntentType();

  @override
  String get signature => r"Landroidx/browser/customtabs/CustomTabsIntent;";

  @override
  CustomTabsIntent fromRef(jni.JObjectPtr ref) => CustomTabsIntent.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsIntentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsIntentType) &&
        other is $CustomTabsIntentType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsService$FilePurpose
class CustomTabsService_FilePurpose extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsService_FilePurpose> $type = type;

  CustomTabsService_FilePurpose.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/browser/customtabs/CustomTabsService$FilePurpose");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsService_FilePurposeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CustomTabsService_FilePurposeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CustomTabsService_FilePurpose.implement(
    $CustomTabsService_FilePurposeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CustomTabsService_FilePurpose.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.browser.customtabs.CustomTabsService$FilePurpose",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CustomTabsService_FilePurposeImpl {
  factory $CustomTabsService_FilePurposeImpl() =
      _$CustomTabsService_FilePurposeImpl;
}

class _$CustomTabsService_FilePurposeImpl
    implements $CustomTabsService_FilePurposeImpl {
  _$CustomTabsService_FilePurposeImpl();
}

final class $CustomTabsService_FilePurposeType
    extends jni.JObjType<CustomTabsService_FilePurpose> {
  const $CustomTabsService_FilePurposeType();

  @override
  String get signature =>
      r"Landroidx/browser/customtabs/CustomTabsService$FilePurpose;";

  @override
  CustomTabsService_FilePurpose fromRef(jni.JObjectPtr ref) =>
      CustomTabsService_FilePurpose.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsService_FilePurposeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsService_FilePurposeType) &&
        other is $CustomTabsService_FilePurposeType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsService$Relation
class CustomTabsService_Relation extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsService_Relation> $type = type;

  CustomTabsService_Relation.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/browser/customtabs/CustomTabsService$Relation");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsService_RelationType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CustomTabsService_RelationImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CustomTabsService_Relation.implement(
    $CustomTabsService_RelationImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CustomTabsService_Relation.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.browser.customtabs.CustomTabsService$Relation",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CustomTabsService_RelationImpl {
  factory $CustomTabsService_RelationImpl() = _$CustomTabsService_RelationImpl;
}

class _$CustomTabsService_RelationImpl
    implements $CustomTabsService_RelationImpl {
  _$CustomTabsService_RelationImpl();
}

final class $CustomTabsService_RelationType
    extends jni.JObjType<CustomTabsService_Relation> {
  const $CustomTabsService_RelationType();

  @override
  String get signature =>
      r"Landroidx/browser/customtabs/CustomTabsService$Relation;";

  @override
  CustomTabsService_Relation fromRef(jni.JObjectPtr ref) =>
      CustomTabsService_Relation.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsService_RelationType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsService_RelationType) &&
        other is $CustomTabsService_RelationType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsService$Result
class CustomTabsService_Result extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsService_Result> $type = type;

  CustomTabsService_Result.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/browser/customtabs/CustomTabsService$Result");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsService_ResultType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CustomTabsService_ResultImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CustomTabsService_Result.implement(
    $CustomTabsService_ResultImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CustomTabsService_Result.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.browser.customtabs.CustomTabsService$Result",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CustomTabsService_ResultImpl {
  factory $CustomTabsService_ResultImpl() = _$CustomTabsService_ResultImpl;
}

class _$CustomTabsService_ResultImpl implements $CustomTabsService_ResultImpl {
  _$CustomTabsService_ResultImpl();
}

final class $CustomTabsService_ResultType
    extends jni.JObjType<CustomTabsService_Result> {
  const $CustomTabsService_ResultType();

  @override
  String get signature =>
      r"Landroidx/browser/customtabs/CustomTabsService$Result;";

  @override
  CustomTabsService_Result fromRef(jni.JObjectPtr ref) =>
      CustomTabsService_Result.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsService_ResultType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsService_ResultType) &&
        other is $CustomTabsService_ResultType;
  }
}

/// from: androidx.browser.customtabs.CustomTabsService
class CustomTabsService extends jni.JObject {
  @override
  late final jni.JObjType<CustomTabsService> $type = type;

  CustomTabsService.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/browser/customtabs/CustomTabsService");

  /// The type which includes information such as the signature of this class.
  static const type = $CustomTabsServiceType();

  /// from: static public final java.lang.String ACTION_CUSTOM_TABS_CONNECTION
  static const ACTION_CUSTOM_TABS_CONNECTION =
      r"""android.support.customtabs.action.CustomTabsService""";

  /// from: static public final java.lang.String CATEGORY_NAVBAR_COLOR_CUSTOMIZATION
  static const CATEGORY_NAVBAR_COLOR_CUSTOMIZATION =
      r"""androidx.browser.customtabs.category.NavBarColorCustomization""";

  /// from: static public final java.lang.String CATEGORY_COLOR_SCHEME_CUSTOMIZATION
  static const CATEGORY_COLOR_SCHEME_CUSTOMIZATION =
      r"""androidx.browser.customtabs.category.ColorSchemeCustomization""";

  /// from: static public final java.lang.String TRUSTED_WEB_ACTIVITY_CATEGORY
  static const TRUSTED_WEB_ACTIVITY_CATEGORY =
      r"""androidx.browser.trusted.category.TrustedWebActivities""";

  /// from: static public final java.lang.String CATEGORY_WEB_SHARE_TARGET_V2
  static const CATEGORY_WEB_SHARE_TARGET_V2 =
      r"""androidx.browser.trusted.category.WebShareTargetV2""";

  /// from: static public final java.lang.String CATEGORY_TRUSTED_WEB_ACTIVITY_IMMERSIVE_MODE
  static const CATEGORY_TRUSTED_WEB_ACTIVITY_IMMERSIVE_MODE =
      r"""androidx.browser.trusted.category.ImmersiveMode""";

  /// from: static public final java.lang.String KEY_URL
  static const KEY_URL = r"""android.support.customtabs.otherurls.URL""";

  /// from: static public final java.lang.String KEY_SUCCESS
  static const KEY_SUCCESS = r"""androidx.browser.customtabs.SUCCESS""";

  /// from: static public final int RESULT_SUCCESS
  static const RESULT_SUCCESS = 0;

  /// from: static public final int RESULT_FAILURE_DISALLOWED
  static const RESULT_FAILURE_DISALLOWED = -1;

  /// from: static public final int RESULT_FAILURE_REMOTE_ERROR
  static const RESULT_FAILURE_REMOTE_ERROR = -2;

  /// from: static public final int RESULT_FAILURE_MESSAGING_ERROR
  static const RESULT_FAILURE_MESSAGING_ERROR = -3;

  /// from: static public final int RELATION_USE_AS_ORIGIN
  static const RELATION_USE_AS_ORIGIN = 1;

  /// from: static public final int RELATION_HANDLE_ALL_URLS
  static const RELATION_HANDLE_ALL_URLS = 2;

  /// from: static public final int FILE_PURPOSE_TRUSTED_WEB_ACTIVITY_SPLASH_IMAGE
  static const FILE_PURPOSE_TRUSTED_WEB_ACTIVITY_SPLASH_IMAGE = 1;

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomTabsService() {
    return CustomTabsService.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_onBind = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"onBind", r"(Landroid/content/Intent;)Landroid/os/IBinder;");

  /// from: public android.os.IBinder onBind(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onBind(
    Intent intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onBind,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_cleanUpSession = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"cleanUpSession",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;)Z");

  /// from: protected boolean cleanUpSession(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken)
  bool cleanUpSession(
    jni.JObject customTabsSessionToken,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_cleanUpSession,
        jni.JniCallType.booleanType,
        [customTabsSessionToken.reference]).boolean;
  }

  static final _id_warmup =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"warmup", r"(J)Z");

  /// from: protected abstract boolean warmup(long j)
  bool warmup(
    int j,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_warmup, jni.JniCallType.booleanType, [j]).boolean;
  }

  static final _id_newSession = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"newSession",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;)Z");

  /// from: protected abstract boolean newSession(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken)
  bool newSession(
    jni.JObject customTabsSessionToken,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_newSession,
        jni.JniCallType.booleanType,
        [customTabsSessionToken.reference]).boolean;
  }

  static final _id_mayLaunchUrl = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"mayLaunchUrl",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;Landroid/net/Uri;Landroid/os/Bundle;Ljava/util/List;)Z");

  /// from: protected abstract boolean mayLaunchUrl(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, android.net.Uri uri, android.os.Bundle bundle, java.util.List list)
  bool mayLaunchUrl(
    jni.JObject customTabsSessionToken,
    Uri uri,
    Bundle bundle,
    jni.JList<Bundle> list,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_mayLaunchUrl, jni.JniCallType.booleanType, [
      customTabsSessionToken.reference,
      uri.reference,
      bundle.reference,
      list.reference
    ]).boolean;
  }

  static final _id_extraCommand = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"extraCommand",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: protected abstract android.os.Bundle extraCommand(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Bundle extraCommand(
    jni.JString string,
    Bundle bundle,
  ) {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_extraCommand,
        jni.JniCallType.objectType,
        [string.reference, bundle.reference]).object);
  }

  static final _id_updateVisuals = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"updateVisuals",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;Landroid/os/Bundle;)Z");

  /// from: protected abstract boolean updateVisuals(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, android.os.Bundle bundle)
  bool updateVisuals(
    jni.JObject customTabsSessionToken,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_updateVisuals,
        jni.JniCallType.booleanType,
        [customTabsSessionToken.reference, bundle.reference]).boolean;
  }

  static final _id_requestPostMessageChannel = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"requestPostMessageChannel",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;Landroid/net/Uri;)Z");

  /// from: protected abstract boolean requestPostMessageChannel(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, android.net.Uri uri)
  bool requestPostMessageChannel(
    jni.JObject customTabsSessionToken,
    Uri uri,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestPostMessageChannel,
        jni.JniCallType.booleanType,
        [customTabsSessionToken.reference, uri.reference]).boolean;
  }

  static final _id_requestPostMessageChannel1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"requestPostMessageChannel",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;Landroid/net/Uri;Landroid/net/Uri;Landroid/os/Bundle;)Z");

  /// from: protected boolean requestPostMessageChannel(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, android.net.Uri uri, android.net.Uri uri1, android.os.Bundle bundle)
  bool requestPostMessageChannel1(
    jni.JObject customTabsSessionToken,
    Uri uri,
    Uri uri1,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_requestPostMessageChannel1, jni.JniCallType.booleanType, [
      customTabsSessionToken.reference,
      uri.reference,
      uri1.reference,
      bundle.reference
    ]).boolean;
  }

  static final _id_postMessage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"postMessage",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;Ljava/lang/String;Landroid/os/Bundle;)I");

  /// from: protected abstract int postMessage(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, java.lang.String string, android.os.Bundle bundle)
  int postMessage(
    jni.JObject customTabsSessionToken,
    jni.JString string,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_postMessage, jni.JniCallType.intType, [
      customTabsSessionToken.reference,
      string.reference,
      bundle.reference
    ]).integer;
  }

  static final _id_validateRelationship = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"validateRelationship",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;ILandroid/net/Uri;Landroid/os/Bundle;)Z");

  /// from: protected abstract boolean validateRelationship(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, int i, android.net.Uri uri, android.os.Bundle bundle)
  bool validateRelationship(
    jni.JObject customTabsSessionToken,
    int i,
    Uri uri,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_validateRelationship, jni.JniCallType.booleanType, [
      customTabsSessionToken.reference,
      jni.JValueInt(i),
      uri.reference,
      bundle.reference
    ]).boolean;
  }

  static final _id_receiveFile = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"receiveFile",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;Landroid/net/Uri;ILandroid/os/Bundle;)Z");

  /// from: protected abstract boolean receiveFile(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, android.net.Uri uri, int i, android.os.Bundle bundle)
  bool receiveFile(
    jni.JObject customTabsSessionToken,
    Uri uri,
    int i,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_receiveFile, jni.JniCallType.booleanType, [
      customTabsSessionToken.reference,
      uri.reference,
      jni.JValueInt(i),
      bundle.reference
    ]).boolean;
  }

  static final _id_isEngagementSignalsApiAvailable = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isEngagementSignalsApiAvailable",
          r"(Landroidx/browser/customtabs/CustomTabsSessionToken;Landroid/os/Bundle;)Z");

  /// from: protected boolean isEngagementSignalsApiAvailable(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, android.os.Bundle bundle)
  bool isEngagementSignalsApiAvailable(
    jni.JObject customTabsSessionToken,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isEngagementSignalsApiAvailable,
        jni.JniCallType.booleanType,
        [customTabsSessionToken.reference, bundle.reference]).boolean;
  }

  static final _id_setEngagementSignalsCallback = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setEngagementSignalsCallback",
      r"(Landroidx/browser/customtabs/CustomTabsSessionToken;Landroidx/browser/customtabs/EngagementSignalsCallback;Landroid/os/Bundle;)Z");

  /// from: protected boolean setEngagementSignalsCallback(androidx.browser.customtabs.CustomTabsSessionToken customTabsSessionToken, androidx.browser.customtabs.EngagementSignalsCallback engagementSignalsCallback, android.os.Bundle bundle)
  bool setEngagementSignalsCallback(
    jni.JObject customTabsSessionToken,
    jni.JObject engagementSignalsCallback,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_setEngagementSignalsCallback, jni.JniCallType.booleanType, [
      customTabsSessionToken.reference,
      engagementSignalsCallback.reference,
      bundle.reference
    ]).boolean;
  }
}

final class $CustomTabsServiceType extends jni.JObjType<CustomTabsService> {
  const $CustomTabsServiceType();

  @override
  String get signature => r"Landroidx/browser/customtabs/CustomTabsService;";

  @override
  CustomTabsService fromRef(jni.JObjectPtr ref) =>
      CustomTabsService.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CustomTabsServiceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomTabsServiceType) &&
        other is $CustomTabsServiceType;
  }
}

/// from: android.app.Activity$ScreenCaptureCallback
class Activity_ScreenCaptureCallback extends jni.JObject {
  @override
  late final jni.JObjType<Activity_ScreenCaptureCallback> $type = type;

  Activity_ScreenCaptureCallback.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/app/Activity$ScreenCaptureCallback");

  /// The type which includes information such as the signature of this class.
  static const type = $Activity_ScreenCaptureCallbackType();
  static final _id_onScreenCaptured = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onScreenCaptured", r"()V");

  /// from: public abstract void onScreenCaptured()
  void onScreenCaptured() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onScreenCaptured, jni.JniCallType.voidType, []).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Activity_ScreenCaptureCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onScreenCaptured()V") {
        _$impls[$p]!.onScreenCaptured();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Activity_ScreenCaptureCallback.implement(
    $Activity_ScreenCaptureCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Activity_ScreenCaptureCallback.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"android.app.Activity$ScreenCaptureCallback",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Activity_ScreenCaptureCallbackImpl {
  factory $Activity_ScreenCaptureCallbackImpl({
    required void Function() onScreenCaptured,
  }) = _$Activity_ScreenCaptureCallbackImpl;

  void onScreenCaptured();
}

class _$Activity_ScreenCaptureCallbackImpl
    implements $Activity_ScreenCaptureCallbackImpl {
  _$Activity_ScreenCaptureCallbackImpl({
    required void Function() onScreenCaptured,
  }) : _onScreenCaptured = onScreenCaptured;

  final void Function() _onScreenCaptured;

  void onScreenCaptured() {
    return _onScreenCaptured();
  }
}

final class $Activity_ScreenCaptureCallbackType
    extends jni.JObjType<Activity_ScreenCaptureCallback> {
  const $Activity_ScreenCaptureCallbackType();

  @override
  String get signature => r"Landroid/app/Activity$ScreenCaptureCallback;";

  @override
  Activity_ScreenCaptureCallback fromRef(jni.JObjectPtr ref) =>
      Activity_ScreenCaptureCallback.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Activity_ScreenCaptureCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity_ScreenCaptureCallbackType) &&
        other is $Activity_ScreenCaptureCallbackType;
  }
}

/// from: android.app.Activity
class Activity extends jni.JObject {
  @override
  late final jni.JObjType<Activity> $type = type;

  Activity.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/app/Activity");

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityType();

  /// from: static public final int DEFAULT_KEYS_DIALER
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: static public final int DEFAULT_KEYS_DISABLE
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: static public final int DEFAULT_KEYS_SEARCH_GLOBAL
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: static public final int DEFAULT_KEYS_SEARCH_LOCAL
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: static public final int DEFAULT_KEYS_SHORTCUT
  static const DEFAULT_KEYS_SHORTCUT = 2;

  static final _id_FOCUSED_STATE_SET = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"FOCUSED_STATE_SET",
    r"[I",
  );

  /// from: static protected final int[] FOCUSED_STATE_SET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jint> get FOCUSED_STATE_SET =>
      const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_FOCUSED_STATE_SET,
              jni.JniCallType.objectType)
          .object);

  /// from: static public final int FULLSCREEN_MODE_REQUEST_ENTER
  static const FULLSCREEN_MODE_REQUEST_ENTER = 1;

  /// from: static public final int FULLSCREEN_MODE_REQUEST_EXIT
  static const FULLSCREEN_MODE_REQUEST_EXIT = 0;

  /// from: static public final int OVERRIDE_TRANSITION_CLOSE
  static const OVERRIDE_TRANSITION_CLOSE = 1;

  /// from: static public final int OVERRIDE_TRANSITION_OPEN
  static const OVERRIDE_TRANSITION_OPEN = 0;

  /// from: static public final int RESULT_CANCELED
  static const RESULT_CANCELED = 0;

  /// from: static public final int RESULT_FIRST_USER
  static const RESULT_FIRST_USER = 1;

  /// from: static public final int RESULT_OK
  static const RESULT_OK = -1;

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getIntent", r"()Landroid/content/Intent;");

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getIntent() {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getIntent, jni.JniCallType.objectType, []).object);
  }

  static final _id_setIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setIntent", r"(Landroid/content/Intent;)V");

  /// from: public void setIntent(android.content.Intent intent)
  void setIntent(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setIntent,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_setLocusContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setLocusContext",
      r"(Landroid/content/LocusId;Landroid/os/Bundle;)V");

  /// from: public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)
  void setLocusContext(
    jni.JObject locusId,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setLocusContext,
        jni.JniCallType.voidType,
        [locusId.reference, bundle.reference]).check();
  }

  static final _id_getApplication = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getApplication", r"()Landroid/app/Application;");

  /// from: public final android.app.Application getApplication()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplication() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getApplication, jni.JniCallType.objectType, []).object);
  }

  static final _id_isChild =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isChild", r"()Z");

  /// from: public final boolean isChild()
  bool isChild() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isChild, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getParent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getParent", r"()Landroid/app/Activity;");

  /// from: public final android.app.Activity getParent()
  /// The returned object must be released after use, by calling the [release] method.
  Activity getParent() {
    return const $ActivityType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getParent, jni.JniCallType.objectType, []).object);
  }

  static final _id_getWindowManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getWindowManager", r"()Landroid/view/WindowManager;");

  /// from: public android.view.WindowManager getWindowManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindowManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getWindowManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getWindow = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getWindow", r"()Landroid/view/Window;");

  /// from: public android.view.Window getWindow()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindow() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getWindow, jni.JniCallType.objectType, []).object);
  }

  static final _id_getLoaderManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLoaderManager", r"()Landroid/app/LoaderManager;");

  /// from: public android.app.LoaderManager getLoaderManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLoaderManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLoaderManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCurrentFocus = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCurrentFocus", r"()Landroid/view/View;");

  /// from: public android.view.View getCurrentFocus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCurrentFocus() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCurrentFocus, jni.JniCallType.objectType, []).object);
  }

  static final _id_attachBaseContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"attachBaseContext", r"(Landroid/content/Context;)V");

  /// from: protected void attachBaseContext(android.content.Context context)
  void attachBaseContext(
    Context context,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_attachBaseContext,
        jni.JniCallType.voidType,
        [context.reference]).check();
  }

  static final _id_registerActivityLifecycleCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"registerActivityLifecycleCallbacks",
          r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V");

  /// from: public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void registerActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerActivityLifecycleCallbacks,
        jni.JniCallType.voidType,
        [activityLifecycleCallbacks.reference]).check();
  }

  static final _id_unregisterActivityLifecycleCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterActivityLifecycleCallbacks",
          r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V");

  /// from: public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void unregisterActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterActivityLifecycleCallbacks,
        jni.JniCallType.voidType,
        [activityLifecycleCallbacks.reference]).check();
  }

  static final _id_registerComponentCallbacks = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerComponentCallbacks",
      r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_unregisterComponentCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterComponentCallbacks",
          r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_onCreate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onCreate", r"(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle bundle)
  void onCreate(
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onCreate,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_getSplashScreen = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSplashScreen", r"()Landroid/window/SplashScreen;");

  /// from: public final android.window.SplashScreen getSplashScreen()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSplashScreen() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getSplashScreen, jni.JniCallType.objectType, []).object);
  }

  static final _id_onCreate1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"onCreate", r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onCreate1(
    Bundle bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreate1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onRestoreInstanceState = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onRestoreInstanceState", r"(Landroid/os/Bundle;)V");

  /// from: protected void onRestoreInstanceState(android.os.Bundle bundle)
  void onRestoreInstanceState(
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRestoreInstanceState,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onRestoreInstanceState1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onRestoreInstanceState",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onRestoreInstanceState1(
    Bundle bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRestoreInstanceState1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onPostCreate = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPostCreate", r"(Landroid/os/Bundle;)V");

  /// from: protected void onPostCreate(android.os.Bundle bundle)
  void onPostCreate(
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPostCreate,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_onPostCreate1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPostCreate",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onPostCreate1(
    Bundle bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPostCreate1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onStart =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onStart", r"()V");

  /// from: protected void onStart()
  void onStart() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStart, jni.JniCallType.voidType, []).check();
  }

  static final _id_onRestart =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onRestart", r"()V");

  /// from: protected void onRestart()
  void onRestart() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onRestart, jni.JniCallType.voidType, []).check();
  }

  static final _id_onStateNotSaved = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onStateNotSaved", r"()V");

  /// from: public void onStateNotSaved()
  void onStateNotSaved() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStateNotSaved, jni.JniCallType.voidType, []).check();
  }

  static final _id_onResume =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onResume", r"()V");

  /// from: protected void onResume()
  void onResume() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onResume, jni.JniCallType.voidType, []).check();
  }

  static final _id_onPostResume = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPostResume", r"()V");

  /// from: protected void onPostResume()
  void onPostResume() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPostResume, jni.JniCallType.voidType, []).check();
  }

  static final _id_onTopResumedActivityChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onTopResumedActivityChanged", r"(Z)V");

  /// from: public void onTopResumedActivityChanged(boolean z)
  void onTopResumedActivityChanged(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onTopResumedActivityChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isVoiceInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isVoiceInteraction", r"()Z");

  /// from: public boolean isVoiceInteraction()
  bool isVoiceInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isVoiceInteraction, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isVoiceInteractionRoot = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isVoiceInteractionRoot", r"()Z");

  /// from: public boolean isVoiceInteractionRoot()
  bool isVoiceInteractionRoot() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isVoiceInteractionRoot, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getVoiceInteractor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getVoiceInteractor",
      r"()Landroid/app/VoiceInteractor;");

  /// from: public android.app.VoiceInteractor getVoiceInteractor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getVoiceInteractor() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getVoiceInteractor,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_isLocalVoiceInteractionSupported = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"isLocalVoiceInteractionSupported", r"()Z");

  /// from: public boolean isLocalVoiceInteractionSupported()
  bool isLocalVoiceInteractionSupported() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isLocalVoiceInteractionSupported,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_startLocalVoiceInteraction = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startLocalVoiceInteraction",
      r"(Landroid/os/Bundle;)V");

  /// from: public void startLocalVoiceInteraction(android.os.Bundle bundle)
  void startLocalVoiceInteraction(
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startLocalVoiceInteraction,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onLocalVoiceInteractionStarted = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onLocalVoiceInteractionStarted", r"()V");

  /// from: public void onLocalVoiceInteractionStarted()
  void onLocalVoiceInteractionStarted() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onLocalVoiceInteractionStarted,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_onLocalVoiceInteractionStopped = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onLocalVoiceInteractionStopped", r"()V");

  /// from: public void onLocalVoiceInteractionStopped()
  void onLocalVoiceInteractionStopped() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onLocalVoiceInteractionStopped,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_stopLocalVoiceInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"stopLocalVoiceInteraction", r"()V");

  /// from: public void stopLocalVoiceInteraction()
  void stopLocalVoiceInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_stopLocalVoiceInteraction, jni.JniCallType.voidType, []).check();
  }

  static final _id_onNewIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onNewIntent", r"(Landroid/content/Intent;)V");

  /// from: protected void onNewIntent(android.content.Intent intent)
  void onNewIntent(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onNewIntent,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_onSaveInstanceState = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onSaveInstanceState", r"(Landroid/os/Bundle;)V");

  /// from: protected void onSaveInstanceState(android.os.Bundle bundle)
  void onSaveInstanceState(
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSaveInstanceState,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onSaveInstanceState1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onSaveInstanceState",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onSaveInstanceState1(
    Bundle bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSaveInstanceState1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onPause =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onPause", r"()V");

  /// from: protected void onPause()
  void onPause() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPause, jni.JniCallType.voidType, []).check();
  }

  static final _id_onUserLeaveHint = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onUserLeaveHint", r"()V");

  /// from: protected void onUserLeaveHint()
  void onUserLeaveHint() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onUserLeaveHint, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateThumbnail = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateThumbnail",
      r"(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z");

  /// from: public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)
  bool onCreateThumbnail(
    jni.JObject bitmap,
    jni.JObject canvas,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateThumbnail,
        jni.JniCallType.booleanType,
        [bitmap.reference, canvas.reference]).boolean;
  }

  static final _id_onCreateDescription = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateDescription", r"()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence onCreateDescription()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDescription() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDescription,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onProvideAssistData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onProvideAssistData", r"(Landroid/os/Bundle;)V");

  /// from: public void onProvideAssistData(android.os.Bundle bundle)
  void onProvideAssistData(
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideAssistData,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onProvideAssistContent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onProvideAssistContent",
      r"(Landroid/app/assist/AssistContent;)V");

  /// from: public void onProvideAssistContent(android.app.assist.AssistContent assistContent)
  void onProvideAssistContent(
    jni.JObject assistContent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideAssistContent,
        jni.JniCallType.voidType,
        [assistContent.reference]).check();
  }

  static final _id_onGetDirectActions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onGetDirectActions",
      r"(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V");

  /// from: public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onGetDirectActions(
    CancellationSignal cancellationSignal,
    jni.JObject consumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onGetDirectActions,
        jni.JniCallType.voidType,
        [cancellationSignal.reference, consumer.reference]).check();
  }

  static final _id_onPerformDirectAction = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPerformDirectAction",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V");

  /// from: public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onPerformDirectAction(
    jni.JString string,
    Bundle bundle,
    CancellationSignal cancellationSignal,
    jni.JObject consumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPerformDirectAction, jni.JniCallType.voidType, [
      string.reference,
      bundle.reference,
      cancellationSignal.reference,
      consumer.reference
    ]).check();
  }

  static final _id_requestShowKeyboardShortcuts = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestShowKeyboardShortcuts", r"()V");

  /// from: public final void requestShowKeyboardShortcuts()
  void requestShowKeyboardShortcuts() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_requestShowKeyboardShortcuts, jni.JniCallType.voidType, []).check();
  }

  static final _id_dismissKeyboardShortcutsHelper = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"dismissKeyboardShortcutsHelper", r"()V");

  /// from: public final void dismissKeyboardShortcutsHelper()
  void dismissKeyboardShortcutsHelper() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dismissKeyboardShortcutsHelper,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_onProvideKeyboardShortcuts = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onProvideKeyboardShortcuts",
      r"(Ljava/util/List;Landroid/view/Menu;I)V");

  /// from: public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)
  void onProvideKeyboardShortcuts(
    jni.JList<jni.JObject> list,
    jni.JObject menu,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideKeyboardShortcuts,
        jni.JniCallType.voidType,
        [list.reference, menu.reference, jni.JValueInt(i)]).check();
  }

  static final _id_showAssist = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"showAssist", r"(Landroid/os/Bundle;)Z");

  /// from: public boolean showAssist(android.os.Bundle bundle)
  bool showAssist(
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_showAssist,
        jni.JniCallType.booleanType, [bundle.reference]).boolean;
  }

  static final _id_onStop =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onStop", r"()V");

  /// from: protected void onStop()
  void onStop() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStop, jni.JniCallType.voidType, []).check();
  }

  static final _id_onDestroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onDestroy", r"()V");

  /// from: protected void onDestroy()
  void onDestroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onDestroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_reportFullyDrawn = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"reportFullyDrawn", r"()V");

  /// from: public void reportFullyDrawn()
  void reportFullyDrawn() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_reportFullyDrawn, jni.JniCallType.voidType, []).check();
  }

  static final _id_onMultiWindowModeChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onMultiWindowModeChanged",
      r"(ZLandroid/content/res/Configuration;)V");

  /// from: public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)
  void onMultiWindowModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMultiWindowModeChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0, configuration.reference]).check();
  }

  static final _id_onMultiWindowModeChanged1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onMultiWindowModeChanged", r"(Z)V");

  /// from: public void onMultiWindowModeChanged(boolean z)
  void onMultiWindowModeChanged1(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMultiWindowModeChanged1,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isInMultiWindowMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isInMultiWindowMode", r"()Z");

  /// from: public boolean isInMultiWindowMode()
  bool isInMultiWindowMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isInMultiWindowMode, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onPictureInPictureModeChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureModeChanged",
          r"(ZLandroid/content/res/Configuration;)V");

  /// from: public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)
  void onPictureInPictureModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureModeChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0, configuration.reference]).check();
  }

  static final _id_onPictureInPictureUiStateChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureUiStateChanged",
          r"(Landroid/app/PictureInPictureUiState;)V");

  /// from: public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)
  void onPictureInPictureUiStateChanged(
    jni.JObject pictureInPictureUiState,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureUiStateChanged,
        jni.JniCallType.voidType,
        [pictureInPictureUiState.reference]).check();
  }

  static final _id_onPictureInPictureModeChanged1 = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onPictureInPictureModeChanged", r"(Z)V");

  /// from: public void onPictureInPictureModeChanged(boolean z)
  void onPictureInPictureModeChanged1(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureModeChanged1,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isInPictureInPictureMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isInPictureInPictureMode", r"()Z");

  /// from: public boolean isInPictureInPictureMode()
  bool isInPictureInPictureMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isInPictureInPictureMode, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_enterPictureInPictureMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enterPictureInPictureMode", r"()V");

  /// from: public void enterPictureInPictureMode()
  void enterPictureInPictureMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_enterPictureInPictureMode, jni.JniCallType.voidType, []).check();
  }

  static final _id_enterPictureInPictureMode1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enterPictureInPictureMode",
      r"(Landroid/app/PictureInPictureParams;)Z");

  /// from: public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)
  bool enterPictureInPictureMode1(
    jni.JObject pictureInPictureParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enterPictureInPictureMode1,
        jni.JniCallType.booleanType,
        [pictureInPictureParams.reference]).boolean;
  }

  static final _id_setPictureInPictureParams = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setPictureInPictureParams",
      r"(Landroid/app/PictureInPictureParams;)V");

  /// from: public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)
  void setPictureInPictureParams(
    jni.JObject pictureInPictureParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setPictureInPictureParams,
        jni.JniCallType.voidType,
        [pictureInPictureParams.reference]).check();
  }

  static final _id_getMaxNumPictureInPictureActions = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"getMaxNumPictureInPictureActions", r"()I");

  /// from: public int getMaxNumPictureInPictureActions()
  int getMaxNumPictureInPictureActions() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getMaxNumPictureInPictureActions,
        jni.JniCallType.intType, []).integer;
  }

  static final _id_onPictureInPictureRequested = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureRequested", r"()Z");

  /// from: public boolean onPictureInPictureRequested()
  bool onPictureInPictureRequested() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureRequested,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_requestFullscreenMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"requestFullscreenMode",
      r"(ILandroid/os/OutcomeReceiver;)V");

  /// from: public void requestFullscreenMode(int i, android.os.OutcomeReceiver outcomeReceiver)
  void requestFullscreenMode(
    int i,
    jni.JObject outcomeReceiver,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestFullscreenMode,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), outcomeReceiver.reference]).check();
  }

  static final _id_setShouldDockBigOverlays = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setShouldDockBigOverlays", r"(Z)V");

  /// from: public void setShouldDockBigOverlays(boolean z)
  void setShouldDockBigOverlays(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setShouldDockBigOverlays,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_shouldDockBigOverlays = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"shouldDockBigOverlays", r"()Z");

  /// from: public boolean shouldDockBigOverlays()
  bool shouldDockBigOverlays() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_shouldDockBigOverlays, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onConfigurationChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onConfigurationChanged",
      r"(Landroid/content/res/Configuration;)V");

  /// from: public void onConfigurationChanged(android.content.res.Configuration configuration)
  void onConfigurationChanged(
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onConfigurationChanged,
        jni.JniCallType.voidType,
        [configuration.reference]).check();
  }

  static final _id_getChangingConfigurations = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getChangingConfigurations", r"()I");

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getChangingConfigurations, jni.JniCallType.intType, []).integer;
  }

  static final _id_getLastNonConfigurationInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLastNonConfigurationInstance",
          r"()Ljava/lang/Object;");

  /// from: public java.lang.Object getLastNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLastNonConfigurationInstance() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLastNonConfigurationInstance,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onRetainNonConfigurationInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onRetainNonConfigurationInstance",
          r"()Ljava/lang/Object;");

  /// from: public java.lang.Object onRetainNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onRetainNonConfigurationInstance() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRetainNonConfigurationInstance,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onLowMemory =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onLowMemory", r"()V");

  /// from: public void onLowMemory()
  void onLowMemory() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onLowMemory, jni.JniCallType.voidType, []).check();
  }

  static final _id_onTrimMemory = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onTrimMemory", r"(I)V");

  /// from: public void onTrimMemory(int i)
  void onTrimMemory(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTrimMemory,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getFragmentManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getFragmentManager",
      r"()Landroid/app/FragmentManager;");

  /// from: public android.app.FragmentManager getFragmentManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFragmentManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getFragmentManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onAttachFragment = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onAttachFragment", r"(Landroid/app/Fragment;)V");

  /// from: public void onAttachFragment(android.app.Fragment fragment)
  void onAttachFragment(
    jni.JObject fragment,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onAttachFragment,
        jni.JniCallType.voidType, [fragment.reference]).check();
  }

  static final _id_managedQuery = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"managedQuery",
      r"(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;");

  /// from: public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject managedQuery(
    Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_managedQuery, jni.JniCallType.objectType, [
      uri.reference,
      strings.reference,
      string.reference,
      strings1.reference,
      string1.reference
    ]).object);
  }

  static final _id_startManagingCursor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startManagingCursor",
      r"(Landroid/database/Cursor;)V");

  /// from: public void startManagingCursor(android.database.Cursor cursor)
  void startManagingCursor(
    jni.JObject cursor,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startManagingCursor,
        jni.JniCallType.voidType,
        [cursor.reference]).check();
  }

  static final _id_stopManagingCursor = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"stopManagingCursor", r"(Landroid/database/Cursor;)V");

  /// from: public void stopManagingCursor(android.database.Cursor cursor)
  void stopManagingCursor(
    jni.JObject cursor,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_stopManagingCursor,
        jni.JniCallType.voidType,
        [cursor.reference]).check();
  }

  static final _id_findViewById = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"findViewById", r"(I)Landroid/view/View;");

  /// from: public T findViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T findViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_findViewById,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_requireViewById = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"requireViewById", r"(I)Landroid/view/View;");

  /// from: public final T requireViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T requireViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requireViewById,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getActionBar = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getActionBar", r"()Landroid/app/ActionBar;");

  /// from: public android.app.ActionBar getActionBar()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActionBar() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getActionBar, jni.JniCallType.objectType, []).object);
  }

  static final _id_setActionBar = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setActionBar", r"(Landroid/widget/Toolbar;)V");

  /// from: public void setActionBar(android.widget.Toolbar toolbar)
  void setActionBar(
    jni.JObject toolbar,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setActionBar,
        jni.JniCallType.voidType, [toolbar.reference]).check();
  }

  static final _id_setContentView = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setContentView", r"(I)V");

  /// from: public void setContentView(int i)
  void setContentView(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setContentView,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setContentView1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setContentView", r"(Landroid/view/View;)V");

  /// from: public void setContentView(android.view.View view)
  void setContentView1(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setContentView1,
        jni.JniCallType.voidType, [view.reference]).check();
  }

  static final _id_setContentView2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setContentView",
      r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V");

  /// from: public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void setContentView2(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setContentView2,
        jni.JniCallType.voidType,
        [view.reference, layoutParams.reference]).check();
  }

  static final _id_addContentView = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addContentView",
      r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V");

  /// from: public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void addContentView(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addContentView,
        jni.JniCallType.voidType,
        [view.reference, layoutParams.reference]).check();
  }

  static final _id_getContentTransitionManager = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getContentTransitionManager",
          r"()Landroid/transition/TransitionManager;");

  /// from: public android.transition.TransitionManager getContentTransitionManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentTransitionManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getContentTransitionManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setContentTransitionManager = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setContentTransitionManager",
          r"(Landroid/transition/TransitionManager;)V");

  /// from: public void setContentTransitionManager(android.transition.TransitionManager transitionManager)
  void setContentTransitionManager(
    jni.JObject transitionManager,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setContentTransitionManager,
        jni.JniCallType.voidType,
        [transitionManager.reference]).check();
  }

  static final _id_getContentScene = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getContentScene", r"()Landroid/transition/Scene;");

  /// from: public android.transition.Scene getContentScene()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentScene() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getContentScene, jni.JniCallType.objectType, []).object);
  }

  static final _id_setFinishOnTouchOutside = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFinishOnTouchOutside", r"(Z)V");

  /// from: public void setFinishOnTouchOutside(boolean z)
  void setFinishOnTouchOutside(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFinishOnTouchOutside,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setDefaultKeyMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setDefaultKeyMode", r"(I)V");

  /// from: public final void setDefaultKeyMode(int i)
  void setDefaultKeyMode(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setDefaultKeyMode,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_onKeyDown = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyDown", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)
  bool onKeyDown(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyDown,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyLongPress = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyLongPress", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)
  bool onKeyLongPress(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyLongPress,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyUp = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyUp", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)
  bool onKeyUp(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyUp,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyMultiple = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyMultiple", r"(IILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)
  bool onKeyMultiple(
    int i,
    int i1,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyMultiple,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), jni.JValueInt(i1), keyEvent.reference]).boolean;
  }

  static final _id_onBackPressed = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onBackPressed", r"()V");

  /// from: public void onBackPressed()
  void onBackPressed() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onBackPressed, jni.JniCallType.voidType, []).check();
  }

  static final _id_onKeyShortcut = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyShortcut", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)
  bool onKeyShortcut(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyShortcut,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onTouchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTouchEvent", r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTouchEvent,
        jni.JniCallType.booleanType, [motionEvent.reference]).boolean;
  }

  static final _id_onTrackballEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTrackballEvent", r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTrackballEvent(android.view.MotionEvent motionEvent)
  bool onTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTrackballEvent,
        jni.JniCallType.booleanType, [motionEvent.reference]).boolean;
  }

  static final _id_onGenericMotionEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onGenericMotionEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool onGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onGenericMotionEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_onUserInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onUserInteraction", r"()V");

  /// from: public void onUserInteraction()
  void onUserInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onUserInteraction, jni.JniCallType.voidType, []).check();
  }

  static final _id_onWindowAttributesChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onWindowAttributesChanged",
      r"(Landroid/view/WindowManager$LayoutParams;)V");

  /// from: public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)
  void onWindowAttributesChanged(
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowAttributesChanged,
        jni.JniCallType.voidType,
        [layoutParams.reference]).check();
  }

  static final _id_onContentChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onContentChanged", r"()V");

  /// from: public void onContentChanged()
  void onContentChanged() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onContentChanged, jni.JniCallType.voidType, []).check();
  }

  static final _id_onWindowFocusChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onWindowFocusChanged", r"(Z)V");

  /// from: public void onWindowFocusChanged(boolean z)
  void onWindowFocusChanged(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowFocusChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_onAttachedToWindow = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onAttachedToWindow", r"()V");

  /// from: public void onAttachedToWindow()
  void onAttachedToWindow() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onAttachedToWindow, jni.JniCallType.voidType, []).check();
  }

  static final _id_onDetachedFromWindow = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onDetachedFromWindow", r"()V");

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onDetachedFromWindow, jni.JniCallType.voidType, []).check();
  }

  static final _id_hasWindowFocus = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasWindowFocus", r"()Z");

  /// from: public boolean hasWindowFocus()
  bool hasWindowFocus() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasWindowFocus, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_dispatchKeyEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"dispatchKeyEvent", r"(Landroid/view/KeyEvent;)Z");

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyEvent(
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_dispatchKeyEvent,
        jni.JniCallType.booleanType, [keyEvent.reference]).boolean;
  }

  static final _id_dispatchKeyShortcutEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchKeyShortcutEvent",
      r"(Landroid/view/KeyEvent;)Z");

  /// from: public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyShortcutEvent(
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchKeyShortcutEvent,
        jni.JniCallType.booleanType,
        [keyEvent.reference]).boolean;
  }

  static final _id_dispatchTouchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchTouchEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)
  bool dispatchTouchEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchTouchEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchTrackballEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchTrackballEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)
  bool dispatchTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchTrackballEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchGenericMotionEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchGenericMotionEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool dispatchGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchGenericMotionEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"dispatchPopulateAccessibilityEvent",
          r"(Landroid/view/accessibility/AccessibilityEvent;)Z");

  /// from: public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)
  bool dispatchPopulateAccessibilityEvent(
    jni.JObject accessibilityEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchPopulateAccessibilityEvent,
        jni.JniCallType.booleanType,
        [accessibilityEvent.reference]).boolean;
  }

  static final _id_onCreatePanelView = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreatePanelView", r"(I)Landroid/view/View;");

  /// from: public android.view.View onCreatePanelView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreatePanelView(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreatePanelView,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_onCreatePanelMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreatePanelMenu", r"(ILandroid/view/Menu;)Z");

  /// from: public boolean onCreatePanelMenu(int i, android.view.Menu menu)
  bool onCreatePanelMenu(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreatePanelMenu,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menu.reference]).boolean;
  }

  static final _id_onPreparePanel = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPreparePanel",
      r"(ILandroid/view/View;Landroid/view/Menu;)Z");

  /// from: public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)
  bool onPreparePanel(
    int i,
    jni.JObject view,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPreparePanel,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), view.reference, menu.reference]).boolean;
  }

  static final _id_onMenuOpened = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onMenuOpened", r"(ILandroid/view/Menu;)Z");

  /// from: public boolean onMenuOpened(int i, android.view.Menu menu)
  bool onMenuOpened(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMenuOpened,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menu.reference]).boolean;
  }

  static final _id_onMenuItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onMenuItemSelected", r"(ILandroid/view/MenuItem;)Z");

  /// from: public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)
  bool onMenuItemSelected(
    int i,
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMenuItemSelected,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menuItem.reference]).boolean;
  }

  static final _id_onPanelClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPanelClosed", r"(ILandroid/view/Menu;)V");

  /// from: public void onPanelClosed(int i, android.view.Menu menu)
  void onPanelClosed(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPanelClosed,
        jni.JniCallType.voidType, [jni.JValueInt(i), menu.reference]).check();
  }

  static final _id_invalidateOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"invalidateOptionsMenu", r"()V");

  /// from: public void invalidateOptionsMenu()
  void invalidateOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_invalidateOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateOptionsMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateOptionsMenu", r"(Landroid/view/Menu;)Z");

  /// from: public boolean onCreateOptionsMenu(android.view.Menu menu)
  bool onCreateOptionsMenu(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateOptionsMenu,
        jni.JniCallType.booleanType,
        [menu.reference]).boolean;
  }

  static final _id_onPrepareOptionsMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPrepareOptionsMenu", r"(Landroid/view/Menu;)Z");

  /// from: public boolean onPrepareOptionsMenu(android.view.Menu menu)
  bool onPrepareOptionsMenu(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareOptionsMenu,
        jni.JniCallType.booleanType,
        [menu.reference]).boolean;
  }

  static final _id_onOptionsItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onOptionsItemSelected",
      r"(Landroid/view/MenuItem;)Z");

  /// from: public boolean onOptionsItemSelected(android.view.MenuItem menuItem)
  bool onOptionsItemSelected(
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onOptionsItemSelected,
        jni.JniCallType.booleanType,
        [menuItem.reference]).boolean;
  }

  static final _id_onNavigateUp = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onNavigateUp", r"()Z");

  /// from: public boolean onNavigateUp()
  bool onNavigateUp() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onNavigateUp, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onNavigateUpFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onNavigateUpFromChild", r"(Landroid/app/Activity;)Z");

  /// from: public boolean onNavigateUpFromChild(android.app.Activity activity)
  bool onNavigateUpFromChild(
    Activity activity,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onNavigateUpFromChild,
        jni.JniCallType.booleanType,
        [activity.reference]).boolean;
  }

  static final _id_onCreateNavigateUpTaskStack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onCreateNavigateUpTaskStack",
          r"(Landroid/app/TaskStackBuilder;)V");

  /// from: public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onCreateNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateNavigateUpTaskStack,
        jni.JniCallType.voidType,
        [taskStackBuilder.reference]).check();
  }

  static final _id_onPrepareNavigateUpTaskStack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPrepareNavigateUpTaskStack",
          r"(Landroid/app/TaskStackBuilder;)V");

  /// from: public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onPrepareNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareNavigateUpTaskStack,
        jni.JniCallType.voidType,
        [taskStackBuilder.reference]).check();
  }

  static final _id_onOptionsMenuClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onOptionsMenuClosed", r"(Landroid/view/Menu;)V");

  /// from: public void onOptionsMenuClosed(android.view.Menu menu)
  void onOptionsMenuClosed(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onOptionsMenuClosed,
        jni.JniCallType.voidType,
        [menu.reference]).check();
  }

  static final _id_openOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"openOptionsMenu", r"()V");

  /// from: public void openOptionsMenu()
  void openOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_openOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_closeOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"closeOptionsMenu", r"()V");

  /// from: public void closeOptionsMenu()
  void closeOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_closeOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateContextMenu",
      r"(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V");

  /// from: public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)
  void onCreateContextMenu(
    jni.JObject contextMenu,
    jni.JObject view,
    jni.JObject contextMenuInfo,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onCreateContextMenu, jni.JniCallType.voidType, [
      contextMenu.reference,
      view.reference,
      contextMenuInfo.reference
    ]).check();
  }

  static final _id_registerForContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"registerForContextMenu", r"(Landroid/view/View;)V");

  /// from: public void registerForContextMenu(android.view.View view)
  void registerForContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerForContextMenu,
        jni.JniCallType.voidType,
        [view.reference]).check();
  }

  static final _id_unregisterForContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"unregisterForContextMenu", r"(Landroid/view/View;)V");

  /// from: public void unregisterForContextMenu(android.view.View view)
  void unregisterForContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterForContextMenu,
        jni.JniCallType.voidType,
        [view.reference]).check();
  }

  static final _id_openContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"openContextMenu", r"(Landroid/view/View;)V");

  /// from: public void openContextMenu(android.view.View view)
  void openContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_openContextMenu,
        jni.JniCallType.voidType, [view.reference]).check();
  }

  static final _id_closeContextMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"closeContextMenu", r"()V");

  /// from: public void closeContextMenu()
  void closeContextMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_closeContextMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onContextItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onContextItemSelected",
      r"(Landroid/view/MenuItem;)Z");

  /// from: public boolean onContextItemSelected(android.view.MenuItem menuItem)
  bool onContextItemSelected(
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onContextItemSelected,
        jni.JniCallType.booleanType,
        [menuItem.reference]).boolean;
  }

  static final _id_onContextMenuClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onContextMenuClosed", r"(Landroid/view/Menu;)V");

  /// from: public void onContextMenuClosed(android.view.Menu menu)
  void onContextMenuClosed(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onContextMenuClosed,
        jni.JniCallType.voidType,
        [menu.reference]).check();
  }

  static final _id_onCreateDialog = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateDialog", r"(I)Landroid/app/Dialog;");

  /// from: protected android.app.Dialog onCreateDialog(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDialog,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_onCreateDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateDialog",
      r"(ILandroid/os/Bundle;)Landroid/app/Dialog;");

  /// from: protected android.app.Dialog onCreateDialog(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog1(
    int i,
    Bundle bundle,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDialog1,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), bundle.reference]).object);
  }

  static final _id_onPrepareDialog = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPrepareDialog", r"(ILandroid/app/Dialog;)V");

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog)
  void onPrepareDialog(
    int i,
    jni.JObject dialog,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPrepareDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i), dialog.reference]).check();
  }

  static final _id_onPrepareDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPrepareDialog",
      r"(ILandroid/app/Dialog;Landroid/os/Bundle;)V");

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog, android.os.Bundle bundle)
  void onPrepareDialog1(
    int i,
    jni.JObject dialog,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareDialog1,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), dialog.reference, bundle.reference]).check();
  }

  static final _id_showDialog =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"showDialog", r"(I)V");

  /// from: public final void showDialog(int i)
  void showDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_showDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_showDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"showDialog", r"(ILandroid/os/Bundle;)Z");

  /// from: public final boolean showDialog(int i, android.os.Bundle bundle)
  bool showDialog1(
    int i,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_showDialog1,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), bundle.reference]).boolean;
  }

  static final _id_dismissDialog = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"dismissDialog", r"(I)V");

  /// from: public final void dismissDialog(int i)
  void dismissDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_dismissDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_removeDialog = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"removeDialog", r"(I)V");

  /// from: public final void removeDialog(int i)
  void removeDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_removeDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_onSearchRequested = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onSearchRequested", r"(Landroid/view/SearchEvent;)Z");

  /// from: public boolean onSearchRequested(android.view.SearchEvent searchEvent)
  bool onSearchRequested(
    jni.JObject searchEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSearchRequested,
        jni.JniCallType.booleanType,
        [searchEvent.reference]).boolean;
  }

  static final _id_onSearchRequested1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onSearchRequested", r"()Z");

  /// from: public boolean onSearchRequested()
  bool onSearchRequested1() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onSearchRequested1, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getSearchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSearchEvent", r"()Landroid/view/SearchEvent;");

  /// from: public final android.view.SearchEvent getSearchEvent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSearchEvent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getSearchEvent, jni.JniCallType.objectType, []).object);
  }

  static final _id_startSearch = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startSearch",
      r"(Ljava/lang/String;ZLandroid/os/Bundle;Z)V");

  /// from: public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)
  void startSearch(
    jni.JString string,
    bool z,
    Bundle bundle,
    bool z1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startSearch,
        jni.JniCallType.voidType,
        [string.reference, z ? 1 : 0, bundle.reference, z1 ? 1 : 0]).check();
  }

  static final _id_triggerSearch = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"triggerSearch",
      r"(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void triggerSearch(java.lang.String string, android.os.Bundle bundle)
  void triggerSearch(
    jni.JString string,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_triggerSearch,
        jni.JniCallType.voidType, [string.reference, bundle.reference]).check();
  }

  static final _id_takeKeyEvents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"takeKeyEvents", r"(Z)V");

  /// from: public void takeKeyEvents(boolean z)
  void takeKeyEvents(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_takeKeyEvents,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_requestWindowFeature = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestWindowFeature", r"(I)Z");

  /// from: public final boolean requestWindowFeature(int i)
  bool requestWindowFeature(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestWindowFeature,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i)]).boolean;
  }

  static final _id_setFeatureDrawableResource = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFeatureDrawableResource", r"(II)V");

  /// from: public final void setFeatureDrawableResource(int i, int i1)
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableResource,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_setFeatureDrawableUri = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setFeatureDrawableUri", r"(ILandroid/net/Uri;)V");

  /// from: public final void setFeatureDrawableUri(int i, android.net.Uri uri)
  void setFeatureDrawableUri(
    int i,
    Uri uri,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableUri,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), uri.reference]).check();
  }

  static final _id_setFeatureDrawable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setFeatureDrawable",
      r"(ILandroid/graphics/drawable/Drawable;)V");

  /// from: public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)
  void setFeatureDrawable(
    int i,
    jni.JObject drawable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawable,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), drawable.reference]).check();
  }

  static final _id_setFeatureDrawableAlpha = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFeatureDrawableAlpha", r"(II)V");

  /// from: public final void setFeatureDrawableAlpha(int i, int i1)
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableAlpha,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_getLayoutInflater = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getLayoutInflater",
      r"()Landroid/view/LayoutInflater;");

  /// from: public android.view.LayoutInflater getLayoutInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLayoutInflater() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLayoutInflater,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getMenuInflater = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getMenuInflater", r"()Landroid/view/MenuInflater;");

  /// from: public android.view.MenuInflater getMenuInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMenuInflater() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMenuInflater, jni.JniCallType.objectType, []).object);
  }

  static final _id_setTheme =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setTheme", r"(I)V");

  /// from: public void setTheme(int i)
  void setTheme(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTheme,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_onApplyThemeResource = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onApplyThemeResource",
      r"(Landroid/content/res/Resources$Theme;IZ)V");

  /// from: protected void onApplyThemeResource(android.content.res.Resources$Theme theme, int i, boolean z)
  void onApplyThemeResource(
    jni.JObject theme,
    int i,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onApplyThemeResource,
        jni.JniCallType.voidType,
        [theme.reference, jni.JValueInt(i), z ? 1 : 0]).check();
  }

  static final _id_requestPermissions = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"requestPermissions", r"([Ljava/lang/String;I)V");

  /// from: public final void requestPermissions(java.lang.String[] strings, int i)
  void requestPermissions(
    jni.JArray<jni.JString> strings,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestPermissions,
        jni.JniCallType.voidType,
        [strings.reference, jni.JValueInt(i)]).check();
  }

  static final _id_onRequestPermissionsResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onRequestPermissionsResult",
      r"(I[Ljava/lang/String;[I)V");

  /// from: public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)
  void onRequestPermissionsResult(
    int i,
    jni.JArray<jni.JString> strings,
    jni.JArray<jni.jint> is0,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRequestPermissionsResult,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), strings.reference, is0.reference]).check();
  }

  static final _id_shouldShowRequestPermissionRationale = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"shouldShowRequestPermissionRationale",
          r"(Ljava/lang/String;)Z");

  /// from: public boolean shouldShowRequestPermissionRationale(java.lang.String string)
  bool shouldShowRequestPermissionRationale(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_shouldShowRequestPermissionRationale,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_startActivityForResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityForResult",
      r"(Landroid/content/Intent;I)V");

  /// from: public void startActivityForResult(android.content.Intent intent, int i)
  void startActivityForResult(
    Intent intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityForResult,
        jni.JniCallType.voidType,
        [intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityForResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityForResult",
      r"(Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityForResult1(
    Intent intent,
    int i,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityForResult1,
        jni.JniCallType.voidType,
        [intent.reference, jni.JValueInt(i), bundle.reference]).check();
  }

  static final _id_isActivityTransitionRunning = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isActivityTransitionRunning", r"()Z");

  /// from: public boolean isActivityTransitionRunning()
  bool isActivityTransitionRunning() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isActivityTransitionRunning,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_startIntentSenderForResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderForResult",
      r"(Landroid/content/IntentSender;ILandroid/content/Intent;III)V");

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderForResult(
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderForResult, jni.JniCallType.voidType, [
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_startIntentSenderForResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderForResult",
      r"(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderForResult1(
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderForResult1, jni.JniCallType.voidType, [
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3),
      bundle.reference
    ]).check();
  }

  static final _id_startActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivity", r"(Landroid/content/Intent;)V");

  /// from: public void startActivity(android.content.Intent intent)
  void startActivity(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_startActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivity",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    Intent intent,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity1,
        jni.JniCallType.voidType, [intent.reference, bundle.reference]).check();
  }

  static final _id_startActivities = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivities", r"([Landroid/content/Intent;)V");

  /// from: public void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<Intent> intents,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivities,
        jni.JniCallType.voidType, [intents.reference]).check();
  }

  static final _id_startActivities1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivities",
      r"([Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<Intent> intents,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivities1,
        jni.JniCallType.voidType,
        [intents.reference, bundle.reference]).check();
  }

  static final _id_startIntentSender = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V");

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).check();
  }

  static final _id_startIntentSender1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender1, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      bundle.reference
    ]).check();
  }

  static final _id_startActivityIfNeeded = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityIfNeeded",
      r"(Landroid/content/Intent;I)Z");

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i)
  bool startActivityIfNeeded(
    Intent intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityIfNeeded,
        jni.JniCallType.booleanType,
        [intent.reference, jni.JValueInt(i)]).boolean;
  }

  static final _id_startActivityIfNeeded1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityIfNeeded",
      r"(Landroid/content/Intent;ILandroid/os/Bundle;)Z");

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)
  bool startActivityIfNeeded1(
    Intent intent,
    int i,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityIfNeeded1,
        jni.JniCallType.booleanType,
        [intent.reference, jni.JValueInt(i), bundle.reference]).boolean;
  }

  static final _id_startNextMatchingActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startNextMatchingActivity",
      r"(Landroid/content/Intent;)Z");

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent)
  bool startNextMatchingActivity(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startNextMatchingActivity,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_startNextMatchingActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startNextMatchingActivity",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)Z");

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)
  bool startNextMatchingActivity1(
    Intent intent,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startNextMatchingActivity1,
        jni.JniCallType.booleanType,
        [intent.reference, bundle.reference]).boolean;
  }

  static final _id_startActivityFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;I)V");

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)
  void startActivityFromChild(
    Activity activity,
    Intent intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityFromChild,
        jni.JniCallType.voidType,
        [activity.reference, intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityFromChild1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromChild1(
    Activity activity,
    Intent intent,
    int i,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startActivityFromChild1, jni.JniCallType.voidType, [
      activity.reference,
      intent.reference,
      jni.JValueInt(i),
      bundle.reference
    ]).check();
  }

  static final _id_startActivityFromFragment = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromFragment",
      r"(Landroid/app/Fragment;Landroid/content/Intent;I)V");

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)
  void startActivityFromFragment(
    jni.JObject fragment,
    Intent intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityFromFragment,
        jni.JniCallType.voidType,
        [fragment.reference, intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityFromFragment1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromFragment",
      r"(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromFragment1(
    jni.JObject fragment,
    Intent intent,
    int i,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startActivityFromFragment1, jni.JniCallType.voidType, [
      fragment.reference,
      intent.reference,
      jni.JValueInt(i),
      bundle.reference
    ]).check();
  }

  static final _id_startIntentSenderFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderFromChild",
      r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V");

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderFromChild(
    Activity activity,
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderFromChild, jni.JniCallType.voidType, [
      activity.reference,
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_startIntentSenderFromChild1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderFromChild",
      r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderFromChild1(
    Activity activity,
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderFromChild1, jni.JniCallType.voidType, [
      activity.reference,
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3),
      bundle.reference
    ]).check();
  }

  static final _id_overrideActivityTransition = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"overrideActivityTransition", r"(III)V");

  /// from: public void overrideActivityTransition(int i, int i1, int i2)
  void overrideActivityTransition(
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overrideActivityTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueInt(i2)]).check();
  }

  static final _id_overrideActivityTransition1 = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"overrideActivityTransition", r"(IIII)V");

  /// from: public void overrideActivityTransition(int i, int i1, int i2, int i3)
  void overrideActivityTransition1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_overrideActivityTransition1, jni.JniCallType.voidType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_clearOverrideActivityTransition = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"clearOverrideActivityTransition", r"(I)V");

  /// from: public void clearOverrideActivityTransition(int i)
  void clearOverrideActivityTransition(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_clearOverrideActivityTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_overridePendingTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"overridePendingTransition", r"(II)V");

  /// from: public void overridePendingTransition(int i, int i1)
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overridePendingTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_overridePendingTransition1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"overridePendingTransition", r"(III)V");

  /// from: public void overridePendingTransition(int i, int i1, int i2)
  void overridePendingTransition1(
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overridePendingTransition1,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueInt(i2)]).check();
  }

  static final _id_setResult =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setResult", r"(I)V");

  /// from: public final void setResult(int i)
  void setResult(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setResult,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setResult", r"(ILandroid/content/Intent;)V");

  /// from: public final void setResult(int i, android.content.Intent intent)
  void setResult1(
    int i,
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setResult1,
        jni.JniCallType.voidType, [jni.JValueInt(i), intent.reference]).check();
  }

  static final _id_getReferrer = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getReferrer", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri getReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  Uri getReferrer() {
    return const $UriType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getReferrer, jni.JniCallType.objectType, []).object);
  }

  static final _id_onProvideReferrer = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onProvideReferrer", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri onProvideReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  Uri onProvideReferrer() {
    return const $UriType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideReferrer,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCallingPackage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCallingPackage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getCallingPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCallingPackage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCallingPackage,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCallingActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCallingActivity",
      r"()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getCallingActivity()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCallingActivity() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCallingActivity,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getLaunchedFromUid = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLaunchedFromUid", r"()I");

  /// from: public int getLaunchedFromUid()
  int getLaunchedFromUid() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getLaunchedFromUid, jni.JniCallType.intType, []).integer;
  }

  static final _id_getLaunchedFromPackage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLaunchedFromPackage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getLaunchedFromPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLaunchedFromPackage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLaunchedFromPackage,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setVisible =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setVisible", r"(Z)V");

  /// from: public void setVisible(boolean z)
  void setVisible(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setVisible,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_isFinishing =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isFinishing", r"()Z");

  /// from: public boolean isFinishing()
  bool isFinishing() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isFinishing, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isDestroyed =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isDestroyed", r"()Z");

  /// from: public boolean isDestroyed()
  bool isDestroyed() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isDestroyed, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isChangingConfigurations = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isChangingConfigurations", r"()Z");

  /// from: public boolean isChangingConfigurations()
  bool isChangingConfigurations() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isChangingConfigurations, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_recreate =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"recreate", r"()V");

  /// from: public void recreate()
  void recreate() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_recreate, jni.JniCallType.voidType, []).check();
  }

  static final _id_finish =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finish", r"()V");

  /// from: public void finish()
  void finish() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finish, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishAffinity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAffinity", r"()V");

  /// from: public void finishAffinity()
  void finishAffinity() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finishAffinity, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"finishFromChild", r"(Landroid/app/Activity;)V");

  /// from: public void finishFromChild(android.app.Activity activity)
  void finishFromChild(
    Activity activity,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_finishFromChild,
        jni.JniCallType.voidType, [activity.reference]).check();
  }

  static final _id_finishAfterTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAfterTransition", r"()V");

  /// from: public void finishAfterTransition()
  void finishAfterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_finishAfterTransition, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishActivity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishActivity", r"(I)V");

  /// from: public void finishActivity(int i)
  void finishActivity(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_finishActivity,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_finishActivityFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"finishActivityFromChild",
      r"(Landroid/app/Activity;I)V");

  /// from: public void finishActivityFromChild(android.app.Activity activity, int i)
  void finishActivityFromChild(
    Activity activity,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_finishActivityFromChild,
        jni.JniCallType.voidType,
        [activity.reference, jni.JValueInt(i)]).check();
  }

  static final _id_finishAndRemoveTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAndRemoveTask", r"()V");

  /// from: public void finishAndRemoveTask()
  void finishAndRemoveTask() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_finishAndRemoveTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_releaseInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"releaseInstance", r"()Z");

  /// from: public boolean releaseInstance()
  bool releaseInstance() {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_releaseInstance,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onActivityResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onActivityResult", r"(IILandroid/content/Intent;)V");

  /// from: protected void onActivityResult(int i, int i1, android.content.Intent intent)
  void onActivityResult(
    int i,
    int i1,
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActivityResult,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), intent.reference]).check();
  }

  static final _id_onActivityReenter = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onActivityReenter", r"(ILandroid/content/Intent;)V");

  /// from: public void onActivityReenter(int i, android.content.Intent intent)
  void onActivityReenter(
    int i,
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActivityReenter,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), intent.reference]).check();
  }

  static final _id_createPendingResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createPendingResult",
      r"(ILandroid/content/Intent;I)Landroid/app/PendingIntent;");

  /// from: public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createPendingResult(
    int i,
    Intent intent,
    int i1,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createPendingResult,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), intent.reference, jni.JValueInt(i1)]).object);
  }

  static final _id_setRequestedOrientation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setRequestedOrientation", r"(I)V");

  /// from: public void setRequestedOrientation(int i)
  void setRequestedOrientation(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setRequestedOrientation,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_getRequestedOrientation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getRequestedOrientation", r"()I");

  /// from: public int getRequestedOrientation()
  int getRequestedOrientation() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getRequestedOrientation, jni.JniCallType.intType, []).integer;
  }

  static final _id_getTaskId =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getTaskId", r"()I");

  /// from: public int getTaskId()
  int getTaskId() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTaskId, jni.JniCallType.intType, []).integer;
  }

  static final _id_isTaskRoot =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isTaskRoot", r"()Z");

  /// from: public boolean isTaskRoot()
  bool isTaskRoot() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isTaskRoot, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_moveTaskToBack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"moveTaskToBack", r"(Z)Z");

  /// from: public boolean moveTaskToBack(boolean z)
  bool moveTaskToBack(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_moveTaskToBack,
        jni.JniCallType.booleanType, [z ? 1 : 0]).boolean;
  }

  static final _id_getLocalClassName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLocalClassName", r"()Ljava/lang/String;");

  /// from: public java.lang.String getLocalClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalClassName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLocalClassName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getComponentName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getComponentName",
      r"()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponentName() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getComponentName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPreferences = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPreferences",
      r"(I)Landroid/content/SharedPreferences;");

  /// from: public android.content.SharedPreferences getPreferences(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferences(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPreferences,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_isLaunchedFromBubble = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isLaunchedFromBubble", r"()Z");

  /// from: public boolean isLaunchedFromBubble()
  bool isLaunchedFromBubble() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isLaunchedFromBubble, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getSystemService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemService",
      r"(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemService,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_setTitle = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setTitle", r"(Ljava/lang/CharSequence;)V");

  /// from: public void setTitle(java.lang.CharSequence charSequence)
  void setTitle(
    jni.JObject charSequence,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitle,
        jni.JniCallType.voidType, [charSequence.reference]).check();
  }

  static final _id_setTitle1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setTitle", r"(I)V");

  /// from: public void setTitle(int i)
  void setTitle1(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitle1,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setTitleColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTitleColor", r"(I)V");

  /// from: public void setTitleColor(int i)
  void setTitleColor(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitleColor,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getTitle = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getTitle", r"()Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTitle() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTitle, jni.JniCallType.objectType, []).object);
  }

  static final _id_getTitleColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getTitleColor", r"()I");

  /// from: public final int getTitleColor()
  int getTitleColor() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTitleColor, jni.JniCallType.intType, []).integer;
  }

  static final _id_onTitleChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTitleChanged", r"(Ljava/lang/CharSequence;I)V");

  /// from: protected void onTitleChanged(java.lang.CharSequence charSequence, int i)
  void onTitleChanged(
    jni.JObject charSequence,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onTitleChanged,
        jni.JniCallType.voidType,
        [charSequence.reference, jni.JValueInt(i)]).check();
  }

  static final _id_onChildTitleChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onChildTitleChanged",
      r"(Landroid/app/Activity;Ljava/lang/CharSequence;)V");

  /// from: protected void onChildTitleChanged(android.app.Activity activity, java.lang.CharSequence charSequence)
  void onChildTitleChanged(
    Activity activity,
    jni.JObject charSequence,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onChildTitleChanged,
        jni.JniCallType.voidType,
        [activity.reference, charSequence.reference]).check();
  }

  static final _id_setTaskDescription = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setTaskDescription",
      r"(Landroid/app/ActivityManager$TaskDescription;)V");

  /// from: public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)
  void setTaskDescription(
    jni.JObject taskDescription,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setTaskDescription,
        jni.JniCallType.voidType,
        [taskDescription.reference]).check();
  }

  static final _id_setProgressBarVisibility = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgressBarVisibility", r"(Z)V");

  /// from: public final void setProgressBarVisibility(boolean z)
  void setProgressBarVisibility(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarVisibility,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgressBarIndeterminateVisibility = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"setProgressBarIndeterminateVisibility", r"(Z)V");

  /// from: public final void setProgressBarIndeterminateVisibility(boolean z)
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarIndeterminateVisibility,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgressBarIndeterminate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgressBarIndeterminate", r"(Z)V");

  /// from: public final void setProgressBarIndeterminate(boolean z)
  void setProgressBarIndeterminate(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarIndeterminate,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgress = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgress", r"(I)V");

  /// from: public final void setProgress(int i)
  void setProgress(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setProgress,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setSecondaryProgress = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setSecondaryProgress", r"(I)V");

  /// from: public final void setSecondaryProgress(int i)
  void setSecondaryProgress(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setSecondaryProgress,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_setVolumeControlStream = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setVolumeControlStream", r"(I)V");

  /// from: public final void setVolumeControlStream(int i)
  void setVolumeControlStream(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setVolumeControlStream,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_getVolumeControlStream = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getVolumeControlStream", r"()I");

  /// from: public final int getVolumeControlStream()
  int getVolumeControlStream() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getVolumeControlStream, jni.JniCallType.intType, []).integer;
  }

  static final _id_setMediaController = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setMediaController",
      r"(Landroid/media/session/MediaController;)V");

  /// from: public final void setMediaController(android.media.session.MediaController mediaController)
  void setMediaController(
    jni.JObject mediaController,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setMediaController,
        jni.JniCallType.voidType,
        [mediaController.reference]).check();
  }

  static final _id_getMediaController = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getMediaController",
      r"()Landroid/media/session/MediaController;");

  /// from: public final android.media.session.MediaController getMediaController()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMediaController() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getMediaController,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_runOnUiThread = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"runOnUiThread", r"(Ljava/lang/Runnable;)V");

  /// from: public final void runOnUiThread(java.lang.Runnable runnable)
  void runOnUiThread(
    Runnable runnable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_runOnUiThread,
        jni.JniCallType.voidType, [runnable.reference]).check();
  }

  static final _id_onCreateView = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateView",
      r"(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;");

  /// from: public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView(
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateView,
        jni.JniCallType.objectType,
        [string.reference, context.reference, attributeSet.reference]).object);
  }

  static final _id_onCreateView1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateView",
      r"(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;");

  /// from: public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView1(
    jni.JObject view,
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onCreateView1, jni.JniCallType.objectType, [
      view.reference,
      string.reference,
      context.reference,
      attributeSet.reference
    ]).object);
  }

  static final _id_dump = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dump",
      r"(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V");

  /// from: public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)
  void dump(
    jni.JString string,
    jni.JObject fileDescriptor,
    jni.JObject printWriter,
    jni.JArray<jni.JString> strings,
  ) {
    return jni.Jni.accessors
        .callMethodWithArgs(reference, _id_dump, jni.JniCallType.voidType, [
      string.reference,
      fileDescriptor.reference,
      printWriter.reference,
      strings.reference
    ]).check();
  }

  static final _id_isImmersive =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isImmersive", r"()Z");

  /// from: public boolean isImmersive()
  bool isImmersive() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isImmersive, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_setTranslucent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTranslucent", r"(Z)Z");

  /// from: public boolean setTranslucent(boolean z)
  bool setTranslucent(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTranslucent,
        jni.JniCallType.booleanType, [z ? 1 : 0]).boolean;
  }

  static final _id_requestVisibleBehind = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestVisibleBehind", r"(Z)Z");

  /// from: public boolean requestVisibleBehind(boolean z)
  bool requestVisibleBehind(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestVisibleBehind,
        jni.JniCallType.booleanType,
        [z ? 1 : 0]).boolean;
  }

  static final _id_onVisibleBehindCanceled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onVisibleBehindCanceled", r"()V");

  /// from: public void onVisibleBehindCanceled()
  void onVisibleBehindCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onVisibleBehindCanceled, jni.JniCallType.voidType, []).check();
  }

  static final _id_onEnterAnimationComplete = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onEnterAnimationComplete", r"()V");

  /// from: public void onEnterAnimationComplete()
  void onEnterAnimationComplete() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onEnterAnimationComplete, jni.JniCallType.voidType, []).check();
  }

  static final _id_setImmersive = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setImmersive", r"(Z)V");

  /// from: public void setImmersive(boolean z)
  void setImmersive(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setImmersive,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_setVrModeEnabled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setVrModeEnabled",
      r"(ZLandroid/content/ComponentName;)V");

  /// from: public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)
  void setVrModeEnabled(
    bool z,
    jni.JObject componentName,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setVrModeEnabled,
        jni.JniCallType.voidType, [z ? 1 : 0, componentName.reference]).check();
  }

  static final _id_startActionMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActionMode",
      r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode(
    jni.JObject callback,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActionMode,
        jni.JniCallType.objectType,
        [callback.reference]).object);
  }

  static final _id_startActionMode1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActionMode",
      r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActionMode1,
        jni.JniCallType.objectType,
        [callback.reference, jni.JValueInt(i)]).object);
  }

  static final _id_onWindowStartingActionMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onWindowStartingActionMode",
      r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode(
    jni.JObject callback,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowStartingActionMode,
        jni.JniCallType.objectType,
        [callback.reference]).object);
  }

  static final _id_onWindowStartingActionMode1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onWindowStartingActionMode",
          r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowStartingActionMode1,
        jni.JniCallType.objectType,
        [callback.reference, jni.JValueInt(i)]).object);
  }

  static final _id_onActionModeStarted = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onActionModeStarted",
      r"(Landroid/view/ActionMode;)V");

  /// from: public void onActionModeStarted(android.view.ActionMode actionMode)
  void onActionModeStarted(
    jni.JObject actionMode,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActionModeStarted,
        jni.JniCallType.voidType,
        [actionMode.reference]).check();
  }

  static final _id_onActionModeFinished = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onActionModeFinished",
      r"(Landroid/view/ActionMode;)V");

  /// from: public void onActionModeFinished(android.view.ActionMode actionMode)
  void onActionModeFinished(
    jni.JObject actionMode,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActionModeFinished,
        jni.JniCallType.voidType,
        [actionMode.reference]).check();
  }

  static final _id_shouldUpRecreateTask = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"shouldUpRecreateTask",
      r"(Landroid/content/Intent;)Z");

  /// from: public boolean shouldUpRecreateTask(android.content.Intent intent)
  bool shouldUpRecreateTask(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_shouldUpRecreateTask,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_navigateUpTo = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"navigateUpTo", r"(Landroid/content/Intent;)Z");

  /// from: public boolean navigateUpTo(android.content.Intent intent)
  bool navigateUpTo(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_navigateUpTo,
        jni.JniCallType.booleanType, [intent.reference]).boolean;
  }

  static final _id_navigateUpToFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"navigateUpToFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;)Z");

  /// from: public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)
  bool navigateUpToFromChild(
    Activity activity,
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_navigateUpToFromChild,
        jni.JniCallType.booleanType,
        [activity.reference, intent.reference]).boolean;
  }

  static final _id_getParentActivityIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParentActivityIntent",
      r"()Landroid/content/Intent;");

  /// from: public android.content.Intent getParentActivityIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getParentActivityIntent() {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParentActivityIntent,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setEnterSharedElementCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setEnterSharedElementCallback",
          r"(Landroid/app/SharedElementCallback;)V");

  /// from: public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setEnterSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setEnterSharedElementCallback,
        jni.JniCallType.voidType,
        [sharedElementCallback.reference]).check();
  }

  static final _id_setExitSharedElementCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setExitSharedElementCallback",
          r"(Landroid/app/SharedElementCallback;)V");

  /// from: public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setExitSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setExitSharedElementCallback,
        jni.JniCallType.voidType,
        [sharedElementCallback.reference]).check();
  }

  static final _id_postponeEnterTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"postponeEnterTransition", r"()V");

  /// from: public void postponeEnterTransition()
  void postponeEnterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_postponeEnterTransition, jni.JniCallType.voidType, []).check();
  }

  static final _id_startPostponedEnterTransition = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"startPostponedEnterTransition", r"()V");

  /// from: public void startPostponedEnterTransition()
  void startPostponedEnterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startPostponedEnterTransition,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_requestDragAndDropPermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestDragAndDropPermissions",
          r"(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;");

  /// from: public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject requestDragAndDropPermissions(
    jni.JObject dragEvent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestDragAndDropPermissions,
        jni.JniCallType.objectType,
        [dragEvent.reference]).object);
  }

  static final _id_startLockTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"startLockTask", r"()V");

  /// from: public void startLockTask()
  void startLockTask() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startLockTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_stopLockTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"stopLockTask", r"()V");

  /// from: public void stopLockTask()
  void stopLockTask() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_stopLockTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_showLockTaskEscapeMessage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"showLockTaskEscapeMessage", r"()V");

  /// from: public void showLockTaskEscapeMessage()
  void showLockTaskEscapeMessage() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_showLockTaskEscapeMessage, jni.JniCallType.voidType, []).check();
  }

  static final _id_setRecentsScreenshotEnabled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setRecentsScreenshotEnabled", r"(Z)V");

  /// from: public void setRecentsScreenshotEnabled(boolean z)
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setRecentsScreenshotEnabled,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setShowWhenLocked = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setShowWhenLocked", r"(Z)V");

  /// from: public void setShowWhenLocked(boolean z)
  void setShowWhenLocked(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_setShowWhenLocked, jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_setInheritShowWhenLocked = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setInheritShowWhenLocked", r"(Z)V");

  /// from: public void setInheritShowWhenLocked(boolean z)
  void setInheritShowWhenLocked(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setInheritShowWhenLocked,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setTurnScreenOn = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTurnScreenOn", r"(Z)V");

  /// from: public void setTurnScreenOn(boolean z)
  void setTurnScreenOn(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTurnScreenOn,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_getOnBackInvokedDispatcher = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getOnBackInvokedDispatcher",
      r"()Landroid/window/OnBackInvokedDispatcher;");

  /// from: public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getOnBackInvokedDispatcher() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getOnBackInvokedDispatcher,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_registerScreenCaptureCallback = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerScreenCaptureCallback",
      r"(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V");

  /// from: public void registerScreenCaptureCallback(java.util.concurrent.Executor executor, android.app.Activity$ScreenCaptureCallback screenCaptureCallback)
  void registerScreenCaptureCallback(
    Executor executor,
    Activity_ScreenCaptureCallback screenCaptureCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerScreenCaptureCallback,
        jni.JniCallType.voidType,
        [executor.reference, screenCaptureCallback.reference]).check();
  }

  static final _id_unregisterScreenCaptureCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterScreenCaptureCallback",
          r"(Landroid/app/Activity$ScreenCaptureCallback;)V");

  /// from: public void unregisterScreenCaptureCallback(android.app.Activity$ScreenCaptureCallback screenCaptureCallback)
  void unregisterScreenCaptureCallback(
    Activity_ScreenCaptureCallback screenCaptureCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterScreenCaptureCallback,
        jni.JniCallType.voidType,
        [screenCaptureCallback.reference]).check();
  }
}

final class $ActivityType extends jni.JObjType<Activity> {
  const $ActivityType();

  @override
  String get signature => r"Landroid/app/Activity;";

  @override
  Activity fromRef(jni.JObjectPtr ref) => Activity.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ActivityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityType) && other is $ActivityType;
  }
}

/// from: android.content.Context$BindServiceFlags
class Context_BindServiceFlags extends jni.JObject {
  @override
  late final jni.JObjType<Context_BindServiceFlags> $type = type;

  Context_BindServiceFlags.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/Context$BindServiceFlags");

  /// The type which includes information such as the signature of this class.
  static const type = $Context_BindServiceFlagsType();
  static final _id_of = jni.Jni.accessors.getStaticMethodIDOf(_class.reference,
      r"of", r"(J)Landroid/content/Context$BindServiceFlags;");

  /// from: static public android.content.Context$BindServiceFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Context_BindServiceFlags of(
    int j,
  ) {
    return const $Context_BindServiceFlagsType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_of, jni.JniCallType.objectType, [j]).object);
  }
}

final class $Context_BindServiceFlagsType
    extends jni.JObjType<Context_BindServiceFlags> {
  const $Context_BindServiceFlagsType();

  @override
  String get signature => r"Landroid/content/Context$BindServiceFlags;";

  @override
  Context_BindServiceFlags fromRef(jni.JObjectPtr ref) =>
      Context_BindServiceFlags.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Context_BindServiceFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context_BindServiceFlagsType) &&
        other is $Context_BindServiceFlagsType;
  }
}

/// from: android.content.Context
class Context extends jni.JObject {
  @override
  late final jni.JObjType<Context> $type = type;

  Context.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/content/Context");

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();

  /// from: static public final java.lang.String ACCESSIBILITY_SERVICE
  static const ACCESSIBILITY_SERVICE = r"""accessibility""";

  /// from: static public final java.lang.String ACCOUNT_SERVICE
  static const ACCOUNT_SERVICE = r"""account""";

  /// from: static public final java.lang.String ACTIVITY_SERVICE
  static const ACTIVITY_SERVICE = r"""activity""";

  /// from: static public final java.lang.String ALARM_SERVICE
  static const ALARM_SERVICE = r"""alarm""";

  /// from: static public final java.lang.String APPWIDGET_SERVICE
  static const APPWIDGET_SERVICE = r"""appwidget""";

  /// from: static public final java.lang.String APP_OPS_SERVICE
  static const APP_OPS_SERVICE = r"""appops""";

  /// from: static public final java.lang.String APP_SEARCH_SERVICE
  static const APP_SEARCH_SERVICE = r"""app_search""";

  /// from: static public final java.lang.String AUDIO_SERVICE
  static const AUDIO_SERVICE = r"""audio""";

  /// from: static public final java.lang.String BATTERY_SERVICE
  static const BATTERY_SERVICE = r"""batterymanager""";

  /// from: static public final int BIND_ABOVE_CLIENT
  static const BIND_ABOVE_CLIENT = 8;

  /// from: static public final int BIND_ADJUST_WITH_ACTIVITY
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: static public final int BIND_ALLOW_ACTIVITY_STARTS
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: static public final int BIND_ALLOW_OOM_MANAGEMENT
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: static public final int BIND_AUTO_CREATE
  static const BIND_AUTO_CREATE = 1;

  /// from: static public final int BIND_DEBUG_UNBIND
  static const BIND_DEBUG_UNBIND = 2;

  /// from: static public final int BIND_EXTERNAL_SERVICE
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: static public final long BIND_EXTERNAL_SERVICE_LONG
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: static public final int BIND_IMPORTANT
  static const BIND_IMPORTANT = 64;

  /// from: static public final int BIND_INCLUDE_CAPABILITIES
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: static public final int BIND_NOT_FOREGROUND
  static const BIND_NOT_FOREGROUND = 4;

  /// from: static public final int BIND_NOT_PERCEPTIBLE
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: static public final int BIND_SHARED_ISOLATED_PROCESS
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: static public final int BIND_WAIVE_PRIORITY
  static const BIND_WAIVE_PRIORITY = 32;

  /// from: static public final java.lang.String BIOMETRIC_SERVICE
  static const BIOMETRIC_SERVICE = r"""biometric""";

  /// from: static public final java.lang.String BLOB_STORE_SERVICE
  static const BLOB_STORE_SERVICE = r"""blob_store""";

  /// from: static public final java.lang.String BLUETOOTH_SERVICE
  static const BLUETOOTH_SERVICE = r"""bluetooth""";

  /// from: static public final java.lang.String BUGREPORT_SERVICE
  static const BUGREPORT_SERVICE = r"""bugreport""";

  /// from: static public final java.lang.String CAMERA_SERVICE
  static const CAMERA_SERVICE = r"""camera""";

  /// from: static public final java.lang.String CAPTIONING_SERVICE
  static const CAPTIONING_SERVICE = r"""captioning""";

  /// from: static public final java.lang.String CARRIER_CONFIG_SERVICE
  static const CARRIER_CONFIG_SERVICE = r"""carrier_config""";

  /// from: static public final java.lang.String CLIPBOARD_SERVICE
  static const CLIPBOARD_SERVICE = r"""clipboard""";

  /// from: static public final java.lang.String COMPANION_DEVICE_SERVICE
  static const COMPANION_DEVICE_SERVICE = r"""companiondevice""";

  /// from: static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE
  static const CONNECTIVITY_DIAGNOSTICS_SERVICE =
      r"""connectivity_diagnostics""";

  /// from: static public final java.lang.String CONNECTIVITY_SERVICE
  static const CONNECTIVITY_SERVICE = r"""connectivity""";

  /// from: static public final java.lang.String CONSUMER_IR_SERVICE
  static const CONSUMER_IR_SERVICE = r"""consumer_ir""";

  /// from: static public final int CONTEXT_IGNORE_SECURITY
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: static public final int CONTEXT_INCLUDE_CODE
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: static public final int CONTEXT_RESTRICTED
  static const CONTEXT_RESTRICTED = 4;

  /// from: static public final java.lang.String CREDENTIAL_SERVICE
  static const CREDENTIAL_SERVICE = r"""credential""";

  /// from: static public final java.lang.String CROSS_PROFILE_APPS_SERVICE
  static const CROSS_PROFILE_APPS_SERVICE = r"""crossprofileapps""";

  /// from: static public final int DEVICE_ID_DEFAULT
  static const DEVICE_ID_DEFAULT = 0;

  /// from: static public final int DEVICE_ID_INVALID
  static const DEVICE_ID_INVALID = -1;

  /// from: static public final java.lang.String DEVICE_LOCK_SERVICE
  static const DEVICE_LOCK_SERVICE = r"""device_lock""";

  /// from: static public final java.lang.String DEVICE_POLICY_SERVICE
  static const DEVICE_POLICY_SERVICE = r"""device_policy""";

  /// from: static public final java.lang.String DISPLAY_HASH_SERVICE
  static const DISPLAY_HASH_SERVICE = r"""display_hash""";

  /// from: static public final java.lang.String DISPLAY_SERVICE
  static const DISPLAY_SERVICE = r"""display""";

  /// from: static public final java.lang.String DOMAIN_VERIFICATION_SERVICE
  static const DOMAIN_VERIFICATION_SERVICE = r"""domain_verification""";

  /// from: static public final java.lang.String DOWNLOAD_SERVICE
  static const DOWNLOAD_SERVICE = r"""download""";

  /// from: static public final java.lang.String DROPBOX_SERVICE
  static const DROPBOX_SERVICE = r"""dropbox""";

  /// from: static public final java.lang.String EUICC_SERVICE
  static const EUICC_SERVICE = r"""euicc""";

  /// from: static public final java.lang.String FILE_INTEGRITY_SERVICE
  static const FILE_INTEGRITY_SERVICE = r"""file_integrity""";

  /// from: static public final java.lang.String FINGERPRINT_SERVICE
  static const FINGERPRINT_SERVICE = r"""fingerprint""";

  /// from: static public final java.lang.String GAME_SERVICE
  static const GAME_SERVICE = r"""game""";

  /// from: static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE
  static const GRAMMATICAL_INFLECTION_SERVICE = r"""grammatical_inflection""";

  /// from: static public final java.lang.String HARDWARE_PROPERTIES_SERVICE
  static const HARDWARE_PROPERTIES_SERVICE = r"""hardware_properties""";

  /// from: static public final java.lang.String HEALTHCONNECT_SERVICE
  static const HEALTHCONNECT_SERVICE = r"""healthconnect""";

  /// from: static public final java.lang.String INPUT_METHOD_SERVICE
  static const INPUT_METHOD_SERVICE = r"""input_method""";

  /// from: static public final java.lang.String INPUT_SERVICE
  static const INPUT_SERVICE = r"""input""";

  /// from: static public final java.lang.String IPSEC_SERVICE
  static const IPSEC_SERVICE = r"""ipsec""";

  /// from: static public final java.lang.String JOB_SCHEDULER_SERVICE
  static const JOB_SCHEDULER_SERVICE = r"""jobscheduler""";

  /// from: static public final java.lang.String KEYGUARD_SERVICE
  static const KEYGUARD_SERVICE = r"""keyguard""";

  /// from: static public final java.lang.String LAUNCHER_APPS_SERVICE
  static const LAUNCHER_APPS_SERVICE = r"""launcherapps""";

  /// from: static public final java.lang.String LAYOUT_INFLATER_SERVICE
  static const LAYOUT_INFLATER_SERVICE = r"""layout_inflater""";

  /// from: static public final java.lang.String LOCALE_SERVICE
  static const LOCALE_SERVICE = r"""locale""";

  /// from: static public final java.lang.String LOCATION_SERVICE
  static const LOCATION_SERVICE = r"""location""";

  /// from: static public final java.lang.String MEDIA_COMMUNICATION_SERVICE
  static const MEDIA_COMMUNICATION_SERVICE = r"""media_communication""";

  /// from: static public final java.lang.String MEDIA_METRICS_SERVICE
  static const MEDIA_METRICS_SERVICE = r"""media_metrics""";

  /// from: static public final java.lang.String MEDIA_PROJECTION_SERVICE
  static const MEDIA_PROJECTION_SERVICE = r"""media_projection""";

  /// from: static public final java.lang.String MEDIA_ROUTER_SERVICE
  static const MEDIA_ROUTER_SERVICE = r"""media_router""";

  /// from: static public final java.lang.String MEDIA_SESSION_SERVICE
  static const MEDIA_SESSION_SERVICE = r"""media_session""";

  /// from: static public final java.lang.String MIDI_SERVICE
  static const MIDI_SERVICE = r"""midi""";

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 32768;

  /// from: static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: static public final int MODE_MULTI_PROCESS
  static const MODE_MULTI_PROCESS = 4;

  /// from: static public final int MODE_NO_LOCALIZED_COLLATORS
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: static public final int MODE_PRIVATE
  static const MODE_PRIVATE = 0;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;

  /// from: static public final java.lang.String NETWORK_STATS_SERVICE
  static const NETWORK_STATS_SERVICE = r"""netstats""";

  /// from: static public final java.lang.String NFC_SERVICE
  static const NFC_SERVICE = r"""nfc""";

  /// from: static public final java.lang.String NOTIFICATION_SERVICE
  static const NOTIFICATION_SERVICE = r"""notification""";

  /// from: static public final java.lang.String NSD_SERVICE
  static const NSD_SERVICE = r"""servicediscovery""";

  /// from: static public final java.lang.String OVERLAY_SERVICE
  static const OVERLAY_SERVICE = r"""overlay""";

  /// from: static public final java.lang.String PEOPLE_SERVICE
  static const PEOPLE_SERVICE = r"""people""";

  /// from: static public final java.lang.String PERFORMANCE_HINT_SERVICE
  static const PERFORMANCE_HINT_SERVICE = r"""performance_hint""";

  /// from: static public final java.lang.String POWER_SERVICE
  static const POWER_SERVICE = r"""power""";

  /// from: static public final java.lang.String PRINT_SERVICE
  static const PRINT_SERVICE = r"""print""";

  /// from: static public final int RECEIVER_EXPORTED
  static const RECEIVER_EXPORTED = 2;

  /// from: static public final int RECEIVER_NOT_EXPORTED
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;

  /// from: static public final java.lang.String RESTRICTIONS_SERVICE
  static const RESTRICTIONS_SERVICE = r"""restrictions""";

  /// from: static public final java.lang.String ROLE_SERVICE
  static const ROLE_SERVICE = r"""role""";

  /// from: static public final java.lang.String SEARCH_SERVICE
  static const SEARCH_SERVICE = r"""search""";

  /// from: static public final java.lang.String SENSOR_SERVICE
  static const SENSOR_SERVICE = r"""sensor""";

  /// from: static public final java.lang.String SHORTCUT_SERVICE
  static const SHORTCUT_SERVICE = r"""shortcut""";

  /// from: static public final java.lang.String STATUS_BAR_SERVICE
  static const STATUS_BAR_SERVICE = r"""statusbar""";

  /// from: static public final java.lang.String STORAGE_SERVICE
  static const STORAGE_SERVICE = r"""storage""";

  /// from: static public final java.lang.String STORAGE_STATS_SERVICE
  static const STORAGE_STATS_SERVICE = r"""storagestats""";

  /// from: static public final java.lang.String SYSTEM_HEALTH_SERVICE
  static const SYSTEM_HEALTH_SERVICE = r"""systemhealth""";

  /// from: static public final java.lang.String TELECOM_SERVICE
  static const TELECOM_SERVICE = r"""telecom""";

  /// from: static public final java.lang.String TELEPHONY_IMS_SERVICE
  static const TELEPHONY_IMS_SERVICE = r"""telephony_ims""";

  /// from: static public final java.lang.String TELEPHONY_SERVICE
  static const TELEPHONY_SERVICE = r"""phone""";

  /// from: static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE
  static const TELEPHONY_SUBSCRIPTION_SERVICE =
      r"""telephony_subscription_service""";

  /// from: static public final java.lang.String TEXT_CLASSIFICATION_SERVICE
  static const TEXT_CLASSIFICATION_SERVICE = r"""textclassification""";

  /// from: static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE
  static const TEXT_SERVICES_MANAGER_SERVICE = r"""textservices""";

  /// from: static public final java.lang.String TV_INPUT_SERVICE
  static const TV_INPUT_SERVICE = r"""tv_input""";

  /// from: static public final java.lang.String TV_INTERACTIVE_APP_SERVICE
  static const TV_INTERACTIVE_APP_SERVICE = r"""tv_interactive_app""";

  /// from: static public final java.lang.String UI_MODE_SERVICE
  static const UI_MODE_SERVICE = r"""uimode""";

  /// from: static public final java.lang.String USAGE_STATS_SERVICE
  static const USAGE_STATS_SERVICE = r"""usagestats""";

  /// from: static public final java.lang.String USB_SERVICE
  static const USB_SERVICE = r"""usb""";

  /// from: static public final java.lang.String USER_SERVICE
  static const USER_SERVICE = r"""user""";

  /// from: static public final java.lang.String VIBRATOR_MANAGER_SERVICE
  static const VIBRATOR_MANAGER_SERVICE = r"""vibrator_manager""";

  /// from: static public final java.lang.String VIBRATOR_SERVICE
  static const VIBRATOR_SERVICE = r"""vibrator""";

  /// from: static public final java.lang.String VIRTUAL_DEVICE_SERVICE
  static const VIRTUAL_DEVICE_SERVICE = r"""virtualdevice""";

  /// from: static public final java.lang.String VPN_MANAGEMENT_SERVICE
  static const VPN_MANAGEMENT_SERVICE = r"""vpn_management""";

  /// from: static public final java.lang.String WALLPAPER_SERVICE
  static const WALLPAPER_SERVICE = r"""wallpaper""";

  /// from: static public final java.lang.String WIFI_AWARE_SERVICE
  static const WIFI_AWARE_SERVICE = r"""wifiaware""";

  /// from: static public final java.lang.String WIFI_P2P_SERVICE
  static const WIFI_P2P_SERVICE = r"""wifip2p""";

  /// from: static public final java.lang.String WIFI_RTT_RANGING_SERVICE
  static const WIFI_RTT_RANGING_SERVICE = r"""wifirtt""";

  /// from: static public final java.lang.String WIFI_SERVICE
  static const WIFI_SERVICE = r"""wifi""";

  /// from: static public final java.lang.String WINDOW_SERVICE
  static const WINDOW_SERVICE = r"""window""";

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context() {
    return Context.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getAssets = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getAssets", r"()Landroid/content/res/AssetManager;");

  /// from: public abstract android.content.res.AssetManager getAssets()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAssets() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getAssets, jni.JniCallType.objectType, []).object);
  }

  static final _id_getResources = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getResources", r"()Landroid/content/res/Resources;");

  /// from: public abstract android.content.res.Resources getResources()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResources() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getResources, jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageManager",
      r"()Landroid/content/pm/PackageManager;");

  /// from: public abstract android.content.pm.PackageManager getPackageManager()
  /// The returned object must be released after use, by calling the [release] method.
  PackageManager getPackageManager() {
    return const $PackageManagerType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getPackageManager,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getContentResolver = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getContentResolver",
      r"()Landroid/content/ContentResolver;");

  /// from: public abstract android.content.ContentResolver getContentResolver()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentResolver() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getContentResolver,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getMainLooper = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getMainLooper", r"()Landroid/os/Looper;");

  /// from: public abstract android.os.Looper getMainLooper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainLooper() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMainLooper, jni.JniCallType.objectType, []).object);
  }

  static final _id_getMainExecutor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getMainExecutor",
      r"()Ljava/util/concurrent/Executor;");

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  Executor getMainExecutor() {
    return const $ExecutorType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMainExecutor, jni.JniCallType.objectType, []).object);
  }

  static final _id_getApplicationContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationContext",
      r"()Landroid/content/Context;");

  /// from: public abstract android.content.Context getApplicationContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context getApplicationContext() {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationContext,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_registerComponentCallbacks = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerComponentCallbacks",
      r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_unregisterComponentCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterComponentCallbacks",
          r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_getText = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getText", r"(I)Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getText(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getText,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getString = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getString", r"(I)Ljava/lang/String;");

  /// from: public final java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getString,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getString1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getString",
      r"(I[Ljava/lang/Object;)Ljava/lang/String;");

  /// from: public final java.lang.String getString(int i, java.lang.Object[] objects)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString1(
    int i,
    jni.JArray<jni.JObject> objects,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getString1,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), objects.reference]).object);
  }

  static final _id_getColor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getColor", r"(I)I");

  /// from: public final int getColor(int i)
  int getColor(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getColor,
        jni.JniCallType.intType, [jni.JValueInt(i)]).integer;
  }

  static final _id_getDrawable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDrawable",
      r"(I)Landroid/graphics/drawable/Drawable;");

  /// from: public final android.graphics.drawable.Drawable getDrawable(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getDrawable,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getColorStateList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getColorStateList",
      r"(I)Landroid/content/res/ColorStateList;");

  /// from: public final android.content.res.ColorStateList getColorStateList(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorStateList(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getColorStateList,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_setTheme =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setTheme", r"(I)V");

  /// from: public abstract void setTheme(int i)
  void setTheme(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTheme,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getTheme = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"getTheme", r"()Landroid/content/res/Resources$Theme;");

  /// from: public abstract android.content.res.Resources$Theme getTheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTheme() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTheme, jni.JniCallType.objectType, []).object);
  }

  static final _id_obtainStyledAttributes = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"obtainStyledAttributes",
      r"([I)Landroid/content/res/TypedArray;");

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes(
    jni.JArray<jni.jint> is0,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_obtainStyledAttributes,
        jni.JniCallType.objectType,
        [is0.reference]).object);
  }

  static final _id_obtainStyledAttributes1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"obtainStyledAttributes",
      r"(I[I)Landroid/content/res/TypedArray;");

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes1(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_obtainStyledAttributes1,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), is0.reference]).object);
  }

  static final _id_obtainStyledAttributes2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"obtainStyledAttributes",
      r"(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;");

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes2(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_obtainStyledAttributes2,
        jni.JniCallType.objectType,
        [attributeSet.reference, is0.reference]).object);
  }

  static final _id_obtainStyledAttributes3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"obtainStyledAttributes",
      r"(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;");

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes3(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_obtainStyledAttributes3, jni.JniCallType.objectType, [
      attributeSet.reference,
      is0.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1)
    ]).object);
  }

  static final _id_getClassLoader = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getClassLoader", r"()Ljava/lang/ClassLoader;");

  /// from: public abstract java.lang.ClassLoader getClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClassLoader() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getClassLoader, jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageName", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getPackageName, jni.JniCallType.objectType, []).object);
  }

  static final _id_getOpPackageName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getOpPackageName", r"()Ljava/lang/String;");

  /// from: public java.lang.String getOpPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOpPackageName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getOpPackageName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getAttributionTag = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getAttributionTag", r"()Ljava/lang/String;");

  /// from: public java.lang.String getAttributionTag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAttributionTag() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getAttributionTag,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getAttributionSource = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getAttributionSource",
      r"()Landroid/content/AttributionSource;");

  /// from: public android.content.AttributionSource getAttributionSource()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAttributionSource() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getAttributionSource,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getParams = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getParams", r"()Landroid/content/ContextParams;");

  /// from: public android.content.ContextParams getParams()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParams() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getParams, jni.JniCallType.objectType, []).object);
  }

  static final _id_getApplicationInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationInfo",
      r"()Landroid/content/pm/ApplicationInfo;");

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationInfo() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationInfo,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageResourcePath = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageResourcePath", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPackageResourcePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageResourcePath() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageResourcePath,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageCodePath = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageCodePath", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPackageCodePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageCodePath() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageCodePath,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getSharedPreferences = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSharedPreferences",
      r"(Ljava/lang/String;I)Landroid/content/SharedPreferences;");

  /// from: public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSharedPreferences(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSharedPreferences,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_moveSharedPreferencesFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"moveSharedPreferencesFrom",
      r"(Landroid/content/Context;Ljava/lang/String;)Z");

  /// from: public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)
  bool moveSharedPreferencesFrom(
    Context context,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_moveSharedPreferencesFrom,
        jni.JniCallType.booleanType,
        [context.reference, string.reference]).boolean;
  }

  static final _id_deleteSharedPreferences = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"deleteSharedPreferences", r"(Ljava/lang/String;)Z");

  /// from: public abstract boolean deleteSharedPreferences(java.lang.String string)
  bool deleteSharedPreferences(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_deleteSharedPreferences,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_openFileInput = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openFileInput",
      r"(Ljava/lang/String;)Ljava/io/FileInputStream;");

  /// from: public abstract java.io.FileInputStream openFileInput(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileInput(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_openFileInput,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_openFileOutput = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openFileOutput",
      r"(Ljava/lang/String;I)Ljava/io/FileOutputStream;");

  /// from: public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileOutput(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_openFileOutput,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_deleteFile = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"deleteFile", r"(Ljava/lang/String;)Z");

  /// from: public abstract boolean deleteFile(java.lang.String string)
  bool deleteFile(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deleteFile,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_getFileStreamPath = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getFileStreamPath",
      r"(Ljava/lang/String;)Ljava/io/File;");

  /// from: public abstract java.io.File getFileStreamPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFileStreamPath(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getFileStreamPath,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getDataDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getDataDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getDataDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDataDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getFilesDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getFilesDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilesDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getFilesDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getNoBackupFilesDir = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getNoBackupFilesDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getNoBackupFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getNoBackupFilesDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getNoBackupFilesDir,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getExternalFilesDir = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getExternalFilesDir",
      r"(Ljava/lang/String;)Ljava/io/File;");

  /// from: public abstract java.io.File getExternalFilesDir(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalFilesDir(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getExternalFilesDir,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getExternalFilesDirs = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getExternalFilesDirs",
      r"(Ljava/lang/String;)[Ljava/io/File;");

  /// from: public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalFilesDirs(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getExternalFilesDirs,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getObbDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getObbDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getObbDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObbDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getObbDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getObbDirs = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getObbDirs", r"()[Ljava/io/File;");

  /// from: public abstract java.io.File[] getObbDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getObbDirs() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getObbDirs, jni.JniCallType.objectType, []).object);
  }

  static final _id_getCacheDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCacheDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCacheDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCacheDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getCodeCacheDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCodeCacheDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getCodeCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCodeCacheDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCodeCacheDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getExternalCacheDir = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getExternalCacheDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getExternalCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalCacheDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getExternalCacheDir,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getExternalCacheDirs = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getExternalCacheDirs", r"()[Ljava/io/File;");

  /// from: public abstract java.io.File[] getExternalCacheDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalCacheDirs() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getExternalCacheDirs,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getExternalMediaDirs = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getExternalMediaDirs", r"()[Ljava/io/File;");

  /// from: public abstract java.io.File[] getExternalMediaDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalMediaDirs() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getExternalMediaDirs,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_fileList = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"fileList", r"()[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] fileList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> fileList() {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_fileList, jni.JniCallType.objectType, []).object);
  }

  static final _id_getDir = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDir", r"(Ljava/lang/String;I)Ljava/io/File;");

  /// from: public abstract java.io.File getDir(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDir(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getDir,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_openOrCreateDatabase = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openOrCreateDatabase",
      r"(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;");

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_openOrCreateDatabase,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i), cursorFactory.reference]).object);
  }

  static final _id_openOrCreateDatabase1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openOrCreateDatabase",
      r"(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;");

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase1(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
    jni.JObject databaseErrorHandler,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_openOrCreateDatabase1, jni.JniCallType.objectType, [
      string.reference,
      jni.JValueInt(i),
      cursorFactory.reference,
      databaseErrorHandler.reference
    ]).object);
  }

  static final _id_moveDatabaseFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"moveDatabaseFrom",
      r"(Landroid/content/Context;Ljava/lang/String;)Z");

  /// from: public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)
  bool moveDatabaseFrom(
    Context context,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_moveDatabaseFrom,
        jni.JniCallType.booleanType,
        [context.reference, string.reference]).boolean;
  }

  static final _id_deleteDatabase = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"deleteDatabase", r"(Ljava/lang/String;)Z");

  /// from: public abstract boolean deleteDatabase(java.lang.String string)
  bool deleteDatabase(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deleteDatabase,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_getDatabasePath = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDatabasePath",
      r"(Ljava/lang/String;)Ljava/io/File;");

  /// from: public abstract java.io.File getDatabasePath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDatabasePath(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getDatabasePath,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_databaseList = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"databaseList", r"()[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] databaseList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> databaseList() {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_databaseList,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getWallpaper = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getWallpaper",
      r"()Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWallpaper() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getWallpaper, jni.JniCallType.objectType, []).object);
  }

  static final _id_peekWallpaper = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"peekWallpaper",
      r"()Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject peekWallpaper() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_peekWallpaper, jni.JniCallType.objectType, []).object);
  }

  static final _id_getWallpaperDesiredMinimumWidth = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"getWallpaperDesiredMinimumWidth", r"()I");

  /// from: public abstract int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getWallpaperDesiredMinimumWidth,
        jni.JniCallType.intType, []).integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"getWallpaperDesiredMinimumHeight", r"()I");

  /// from: public abstract int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getWallpaperDesiredMinimumHeight,
        jni.JniCallType.intType, []).integer;
  }

  static final _id_setWallpaper = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setWallpaper", r"(Landroid/graphics/Bitmap;)V");

  /// from: public abstract void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(
    jni.JObject bitmap,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setWallpaper,
        jni.JniCallType.voidType, [bitmap.reference]).check();
  }

  static final _id_setWallpaper1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setWallpaper", r"(Ljava/io/InputStream;)V");

  /// from: public abstract void setWallpaper(java.io.InputStream inputStream)
  void setWallpaper1(
    jni.JObject inputStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setWallpaper1,
        jni.JniCallType.voidType, [inputStream.reference]).check();
  }

  static final _id_clearWallpaper = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearWallpaper", r"()V");

  /// from: public abstract void clearWallpaper()
  void clearWallpaper() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearWallpaper, jni.JniCallType.voidType, []).check();
  }

  static final _id_startActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivity", r"(Landroid/content/Intent;)V");

  /// from: public abstract void startActivity(android.content.Intent intent)
  void startActivity(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_startActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivity",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    Intent intent,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity1,
        jni.JniCallType.voidType, [intent.reference, bundle.reference]).check();
  }

  static final _id_startActivities = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivities", r"([Landroid/content/Intent;)V");

  /// from: public abstract void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<Intent> intents,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivities,
        jni.JniCallType.voidType, [intents.reference]).check();
  }

  static final _id_startActivities1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivities",
      r"([Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<Intent> intents,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivities1,
        jni.JniCallType.voidType,
        [intents.reference, bundle.reference]).check();
  }

  static final _id_startIntentSender = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V");

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).check();
  }

  static final _id_startIntentSender1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender1, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      bundle.reference
    ]).check();
  }

  static final _id_sendBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"sendBroadcast", r"(Landroid/content/Intent;)V");

  /// from: public abstract void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_sendBroadcast,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_sendBroadcast1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;)V");

  /// from: public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)
  void sendBroadcast1(
    Intent intent,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_sendBroadcast1,
        jni.JniCallType.voidType, [intent.reference, string.reference]).check();
  }

  static final _id_sendBroadcastWithMultiplePermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"sendBroadcastWithMultiplePermissions",
          r"(Landroid/content/Intent;[Ljava/lang/String;)V");

  /// from: public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)
  void sendBroadcastWithMultiplePermissions(
    Intent intent,
    jni.JArray<jni.JString> strings,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendBroadcastWithMultiplePermissions,
        jni.JniCallType.voidType,
        [intent.reference, strings.reference]).check();
  }

  static final _id_sendBroadcast2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendBroadcast2(
    Intent intent,
    jni.JString string,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendBroadcast2,
        jni.JniCallType.voidType,
        [intent.reference, string.reference, bundle.reference]).check();
  }

  static final _id_sendOrderedBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;)V");

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)
  void sendOrderedBroadcast(
    Intent intent,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendOrderedBroadcast,
        jni.JniCallType.voidType,
        [intent.reference, string.reference]).check();
  }

  static final _id_sendOrderedBroadcast1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendOrderedBroadcast1(
    Intent intent,
    jni.JString string,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendOrderedBroadcast1,
        jni.JniCallType.voidType,
        [intent.reference, string.reference, bundle.reference]).check();
  }

  static final _id_sendOrderedBroadcast2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcast2(
    Intent intent,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendOrderedBroadcast2, jni.JniCallType.voidType, [
      intent.reference,
      string.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string1.reference,
      bundle.reference
    ]).check();
  }

  static final _id_sendOrderedBroadcast3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)
  void sendOrderedBroadcast3(
    Intent intent,
    jni.JString string,
    Bundle bundle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    Bundle bundle1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendOrderedBroadcast3, jni.JniCallType.voidType, [
      intent.reference,
      string.reference,
      bundle.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string1.reference,
      bundle1.reference
    ]).check();
  }

  static final _id_sendBroadcastAsUser = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendBroadcastAsUser",
      r"(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendBroadcastAsUser,
        jni.JniCallType.voidType,
        [intent.reference, userHandle.reference]).check();
  }

  static final _id_sendBroadcastAsUser1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendBroadcastAsUser",
      r"(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V");

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)
  void sendBroadcastAsUser1(
    Intent intent,
    jni.JObject userHandle,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendBroadcastAsUser1,
        jni.JniCallType.voidType,
        [intent.reference, userHandle.reference, string.reference]).check();
  }

  static final _id_sendOrderedBroadcastAsUser = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcastAsUser",
      r"(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendOrderedBroadcastAsUser, jni.JniCallType.voidType, [
      intent.reference,
      userHandle.reference,
      string.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string1.reference,
      bundle.reference
    ]).check();
  }

  static final _id_sendOrderedBroadcast4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)
  void sendOrderedBroadcast4(
    Intent intent,
    jni.JString string,
    jni.JString string1,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string2,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendOrderedBroadcast4, jni.JniCallType.voidType, [
      intent.reference,
      string.reference,
      string1.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string2.reference,
      bundle.reference
    ]).check();
  }

  static final _id_sendStickyBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"sendStickyBroadcast", r"(Landroid/content/Intent;)V");

  /// from: public abstract void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendStickyBroadcast,
        jni.JniCallType.voidType,
        [intent.reference]).check();
  }

  static final _id_sendStickyBroadcast1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendStickyBroadcast",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)
  void sendStickyBroadcast1(
    Intent intent,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendStickyBroadcast1,
        jni.JniCallType.voidType,
        [intent.reference, bundle.reference]).check();
  }

  static final _id_sendStickyOrderedBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendStickyOrderedBroadcast",
      r"(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcast(
    Intent intent,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendStickyOrderedBroadcast, jni.JniCallType.voidType, [
      intent.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string.reference,
      bundle.reference
    ]).check();
  }

  static final _id_removeStickyBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"removeStickyBroadcast",
      r"(Landroid/content/Intent;)V");

  /// from: public abstract void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removeStickyBroadcast,
        jni.JniCallType.voidType,
        [intent.reference]).check();
  }

  static final _id_sendStickyBroadcastAsUser = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendStickyBroadcastAsUser",
      r"(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendStickyBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendStickyBroadcastAsUser,
        jni.JniCallType.voidType,
        [intent.reference, userHandle.reference]).check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"sendStickyOrderedBroadcastAsUser",
          r"(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_sendStickyOrderedBroadcastAsUser, jni.JniCallType.voidType, [
      intent.reference,
      userHandle.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string.reference,
      bundle.reference
    ]).check();
  }

  static final _id_removeStickyBroadcastAsUser = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"removeStickyBroadcastAsUser",
          r"(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void removeStickyBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removeStickyBroadcastAsUser,
        jni.JniCallType.voidType,
        [intent.reference, userHandle.reference]).check();
  }

  static final _id_registerReceiver = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerReceiver",
      r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerReceiver,
        jni.JniCallType.objectType,
        [broadcastReceiver.reference, intentFilter.reference]).object);
  }

  static final _id_registerReceiver1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerReceiver",
      r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver1(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    int i,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_registerReceiver1, jni.JniCallType.objectType, [
      broadcastReceiver.reference,
      intentFilter.reference,
      jni.JValueInt(i)
    ]).object);
  }

  static final _id_registerReceiver2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerReceiver",
      r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver2(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_registerReceiver2, jni.JniCallType.objectType, [
      broadcastReceiver.reference,
      intentFilter.reference,
      string.reference,
      handler.reference
    ]).object);
  }

  static final _id_registerReceiver3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerReceiver",
      r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver3(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
    int i,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_registerReceiver3, jni.JniCallType.objectType, [
      broadcastReceiver.reference,
      intentFilter.reference,
      string.reference,
      handler.reference,
      jni.JValueInt(i)
    ]).object);
  }

  static final _id_unregisterReceiver = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"unregisterReceiver",
      r"(Landroid/content/BroadcastReceiver;)V");

  /// from: public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)
  void unregisterReceiver(
    jni.JObject broadcastReceiver,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterReceiver,
        jni.JniCallType.voidType,
        [broadcastReceiver.reference]).check();
  }

  static final _id_startService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startService",
      r"(Landroid/content/Intent;)Landroid/content/ComponentName;");

  /// from: public abstract android.content.ComponentName startService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startService(
    Intent intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startService,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_startForegroundService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startForegroundService",
      r"(Landroid/content/Intent;)Landroid/content/ComponentName;");

  /// from: public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startForegroundService(
    Intent intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startForegroundService,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_stopService = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"stopService", r"(Landroid/content/Intent;)Z");

  /// from: public abstract boolean stopService(android.content.Intent intent)
  bool stopService(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_stopService,
        jni.JniCallType.booleanType, [intent.reference]).boolean;
  }

  static final _id_bindService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindService",
      r"(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z");

  /// from: public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)
  bool bindService(
    Intent intent,
    jni.JObject serviceConnection,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindService, jni.JniCallType.booleanType, [
      intent.reference,
      serviceConnection.reference,
      jni.JValueInt(i)
    ]).boolean;
  }

  static final _id_bindService1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindService",
      r"(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z");

  /// from: public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)
  bool bindService1(
    Intent intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindService1, jni.JniCallType.booleanType, [
      intent.reference,
      serviceConnection.reference,
      bindServiceFlags.reference
    ]).boolean;
  }

  static final _id_bindService2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindService",
      r"(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z");

  /// from: public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService2(
    Intent intent,
    int i,
    Executor executor,
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindService2, jni.JniCallType.booleanType, [
      intent.reference,
      jni.JValueInt(i),
      executor.reference,
      serviceConnection.reference
    ]).boolean;
  }

  static final _id_bindService3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindService",
      r"(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z");

  /// from: public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService3(
    Intent intent,
    Context_BindServiceFlags bindServiceFlags,
    Executor executor,
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindService3, jni.JniCallType.booleanType, [
      intent.reference,
      bindServiceFlags.reference,
      executor.reference,
      serviceConnection.reference
    ]).boolean;
  }

  static final _id_bindIsolatedService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindIsolatedService",
      r"(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z");

  /// from: public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService(
    Intent intent,
    int i,
    jni.JString string,
    Executor executor,
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindIsolatedService, jni.JniCallType.booleanType, [
      intent.reference,
      jni.JValueInt(i),
      string.reference,
      executor.reference,
      serviceConnection.reference
    ]).boolean;
  }

  static final _id_bindIsolatedService1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindIsolatedService",
      r"(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z");

  /// from: public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService1(
    Intent intent,
    Context_BindServiceFlags bindServiceFlags,
    jni.JString string,
    Executor executor,
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindIsolatedService1, jni.JniCallType.booleanType, [
      intent.reference,
      bindServiceFlags.reference,
      string.reference,
      executor.reference,
      serviceConnection.reference
    ]).boolean;
  }

  static final _id_bindServiceAsUser = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindServiceAsUser",
      r"(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z");

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)
  bool bindServiceAsUser(
    Intent intent,
    jni.JObject serviceConnection,
    int i,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindServiceAsUser, jni.JniCallType.booleanType, [
      intent.reference,
      serviceConnection.reference,
      jni.JValueInt(i),
      userHandle.reference
    ]).boolean;
  }

  static final _id_bindServiceAsUser1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindServiceAsUser",
      r"(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z");

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)
  bool bindServiceAsUser1(
    Intent intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindServiceAsUser1, jni.JniCallType.booleanType, [
      intent.reference,
      serviceConnection.reference,
      bindServiceFlags.reference,
      userHandle.reference
    ]).boolean;
  }

  static final _id_updateServiceGroup = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"updateServiceGroup",
      r"(Landroid/content/ServiceConnection;II)V");

  /// from: public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)
  void updateServiceGroup(
    jni.JObject serviceConnection,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_updateServiceGroup, jni.JniCallType.voidType, [
      serviceConnection.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1)
    ]).check();
  }

  static final _id_unbindService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"unbindService",
      r"(Landroid/content/ServiceConnection;)V");

  /// from: public abstract void unbindService(android.content.ServiceConnection serviceConnection)
  void unbindService(
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_unbindService,
        jni.JniCallType.voidType, [serviceConnection.reference]).check();
  }

  static final _id_startInstrumentation = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startInstrumentation",
      r"(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z");

  /// from: public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)
  bool startInstrumentation(
    jni.JObject componentName,
    jni.JString string,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startInstrumentation,
        jni.JniCallType.booleanType,
        [componentName.reference, string.reference, bundle.reference]).boolean;
  }

  static final _id_getSystemService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemService",
      r"(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public abstract java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemService,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getSystemService1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemService",
      r"(Ljava/lang/Class;)Ljava/lang/Object;");

  /// from: public final T getSystemService(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSystemService1<$T extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemService1,
        jni.JniCallType.objectType,
        [class0.reference]).object);
  }

  static final _id_getSystemServiceName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemServiceName",
      r"(Ljava/lang/Class;)Ljava/lang/String;");

  /// from: public abstract java.lang.String getSystemServiceName(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSystemServiceName(
    jni.JObject class0,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemServiceName,
        jni.JniCallType.objectType,
        [class0.reference]).object);
  }

  static final _id_checkPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkPermission", r"(Ljava/lang/String;II)I");

  /// from: public abstract int checkPermission(java.lang.String string, int i, int i1)
  int checkPermission(
    jni.JString string,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkPermission,
        jni.JniCallType.intType,
        [string.reference, jni.JValueInt(i), jni.JValueInt(i1)]).integer;
  }

  static final _id_checkCallingPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkCallingPermission", r"(Ljava/lang/String;)I");

  /// from: public abstract int checkCallingPermission(java.lang.String string)
  int checkCallingPermission(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkCallingPermission,
        jni.JniCallType.intType,
        [string.reference]).integer;
  }

  static final _id_checkCallingOrSelfPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"checkCallingOrSelfPermission",
          r"(Ljava/lang/String;)I");

  /// from: public abstract int checkCallingOrSelfPermission(java.lang.String string)
  int checkCallingOrSelfPermission(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkCallingOrSelfPermission,
        jni.JniCallType.intType,
        [string.reference]).integer;
  }

  static final _id_checkSelfPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkSelfPermission", r"(Ljava/lang/String;)I");

  /// from: public abstract int checkSelfPermission(java.lang.String string)
  int checkSelfPermission(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkSelfPermission,
        jni.JniCallType.intType,
        [string.reference]).integer;
  }

  static final _id_enforcePermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enforcePermission",
      r"(Ljava/lang/String;IILjava/lang/String;)V");

  /// from: public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)
  void enforcePermission(
    jni.JString string,
    int i,
    int i1,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_enforcePermission, jni.JniCallType.voidType, [
      string.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      string1.reference
    ]).check();
  }

  static final _id_enforceCallingPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enforceCallingPermission",
      r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enforceCallingPermission,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_enforceCallingOrSelfPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enforceCallingOrSelfPermission",
          r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingOrSelfPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enforceCallingOrSelfPermission,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_grantUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"grantUriPermission",
      r"(Ljava/lang/String;Landroid/net/Uri;I)V");

  /// from: public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void grantUriPermission(
    jni.JString string,
    Uri uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_grantUriPermission,
        jni.JniCallType.voidType,
        [string.reference, uri.reference, jni.JValueInt(i)]).check();
  }

  static final _id_revokeUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"revokeUriPermission", r"(Landroid/net/Uri;I)V");

  /// from: public abstract void revokeUriPermission(android.net.Uri uri, int i)
  void revokeUriPermission(
    Uri uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_revokeUriPermission,
        jni.JniCallType.voidType,
        [uri.reference, jni.JValueInt(i)]).check();
  }

  static final _id_revokeUriPermission1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"revokeUriPermission",
      r"(Ljava/lang/String;Landroid/net/Uri;I)V");

  /// from: public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void revokeUriPermission1(
    jni.JString string,
    Uri uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_revokeUriPermission1,
        jni.JniCallType.voidType,
        [string.reference, uri.reference, jni.JValueInt(i)]).check();
  }

  static final _id_checkUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkUriPermission", r"(Landroid/net/Uri;III)I");

  /// from: public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)
  int checkUriPermission(
    Uri uri,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_checkUriPermission, jni.JniCallType.intType, [
      uri.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).integer;
  }

  static final _id_checkUriPermissions = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkUriPermissions", r"(Ljava/util/List;III)[I");

  /// from: public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkUriPermissions(
    jni.JList<Uri> list,
    int i,
    int i1,
    int i2,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_checkUriPermissions, jni.JniCallType.objectType, [
      list.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).object);
  }

  static final _id_checkCallingUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkCallingUriPermission", r"(Landroid/net/Uri;I)I");

  /// from: public abstract int checkCallingUriPermission(android.net.Uri uri, int i)
  int checkCallingUriPermission(
    Uri uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkCallingUriPermission,
        jni.JniCallType.intType,
        [uri.reference, jni.JValueInt(i)]).integer;
  }

  static final _id_checkCallingUriPermissions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkCallingUriPermissions",
      r"(Ljava/util/List;I)[I");

  /// from: public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingUriPermissions(
    jni.JList<Uri> list,
    int i,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_checkCallingUriPermissions,
            jni.JniCallType.objectType,
            [list.reference, jni.JValueInt(i)]).object);
  }

  static final _id_checkCallingOrSelfUriPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"checkCallingOrSelfUriPermission",
          r"(Landroid/net/Uri;I)I");

  /// from: public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)
  int checkCallingOrSelfUriPermission(
    Uri uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkCallingOrSelfUriPermission,
        jni.JniCallType.intType,
        [uri.reference, jni.JValueInt(i)]).integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"checkCallingOrSelfUriPermissions",
          r"(Ljava/util/List;I)[I");

  /// from: public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingOrSelfUriPermissions(
    jni.JList<Uri> list,
    int i,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_checkCallingOrSelfUriPermissions,
            jni.JniCallType.objectType,
            [list.reference, jni.JValueInt(i)]).object);
  }

  static final _id_checkUriPermission1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkUriPermission",
      r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I");

  /// from: public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)
  int checkUriPermission1(
    Uri uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_checkUriPermission1, jni.JniCallType.intType, [
      uri.reference,
      string.reference,
      string1.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).integer;
  }

  static final _id_enforceUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enforceUriPermission",
      r"(Landroid/net/Uri;IIILjava/lang/String;)V");

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)
  void enforceUriPermission(
    Uri uri,
    int i,
    int i1,
    int i2,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_enforceUriPermission, jni.JniCallType.voidType, [
      uri.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      string.reference
    ]).check();
  }

  static final _id_enforceCallingUriPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enforceCallingUriPermission",
          r"(Landroid/net/Uri;ILjava/lang/String;)V");

  /// from: public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingUriPermission(
    Uri uri,
    int i,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enforceCallingUriPermission,
        jni.JniCallType.voidType,
        [uri.reference, jni.JValueInt(i), string.reference]).check();
  }

  static final _id_enforceCallingOrSelfUriPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enforceCallingOrSelfUriPermission",
          r"(Landroid/net/Uri;ILjava/lang/String;)V");

  /// from: public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingOrSelfUriPermission(
    Uri uri,
    int i,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enforceCallingOrSelfUriPermission,
        jni.JniCallType.voidType,
        [uri.reference, jni.JValueInt(i), string.reference]).check();
  }

  static final _id_enforceUriPermission1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enforceUriPermission",
      r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V");

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)
  void enforceUriPermission1(
    Uri uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
    jni.JString string2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_enforceUriPermission1, jni.JniCallType.voidType, [
      uri.reference,
      string.reference,
      string1.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      string2.reference
    ]).check();
  }

  static final _id_revokeSelfPermissionOnKill = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"revokeSelfPermissionOnKill",
      r"(Ljava/lang/String;)V");

  /// from: public void revokeSelfPermissionOnKill(java.lang.String string)
  void revokeSelfPermissionOnKill(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_revokeSelfPermissionOnKill,
        jni.JniCallType.voidType,
        [string.reference]).check();
  }

  static final _id_revokeSelfPermissionsOnKill = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"revokeSelfPermissionsOnKill",
          r"(Ljava/util/Collection;)V");

  /// from: public void revokeSelfPermissionsOnKill(java.util.Collection collection)
  void revokeSelfPermissionsOnKill(
    jni.JObject collection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_revokeSelfPermissionsOnKill,
        jni.JniCallType.voidType,
        [collection.reference]).check();
  }

  static final _id_createPackageContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createPackageContext",
      r"(Ljava/lang/String;I)Landroid/content/Context;");

  /// from: public abstract android.content.Context createPackageContext(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createPackageContext(
    jni.JString string,
    int i,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createPackageContext,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_createContextForSplit = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createContextForSplit",
      r"(Ljava/lang/String;)Landroid/content/Context;");

  /// from: public abstract android.content.Context createContextForSplit(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContextForSplit(
    jni.JString string,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createContextForSplit,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_createConfigurationContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createConfigurationContext",
      r"(Landroid/content/res/Configuration;)Landroid/content/Context;");

  /// from: public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  Context createConfigurationContext(
    jni.JObject configuration,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createConfigurationContext,
        jni.JniCallType.objectType,
        [configuration.reference]).object);
  }

  static final _id_createDisplayContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createDisplayContext",
      r"(Landroid/view/Display;)Landroid/content/Context;");

  /// from: public abstract android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDisplayContext(
    jni.JObject display,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createDisplayContext,
        jni.JniCallType.objectType,
        [display.reference]).object);
  }

  static final _id_createDeviceContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createDeviceContext",
      r"(I)Landroid/content/Context;");

  /// from: public android.content.Context createDeviceContext(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceContext(
    int i,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createDeviceContext,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_createWindowContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createWindowContext",
      r"(ILandroid/os/Bundle;)Landroid/content/Context;");

  /// from: public android.content.Context createWindowContext(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext(
    int i,
    Bundle bundle,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createWindowContext,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), bundle.reference]).object);
  }

  static final _id_createWindowContext1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createWindowContext",
      r"(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;");

  /// from: public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext1(
    jni.JObject display,
    int i,
    Bundle bundle,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createWindowContext1,
        jni.JniCallType.objectType,
        [display.reference, jni.JValueInt(i), bundle.reference]).object);
  }

  static final _id_createContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createContext",
      r"(Landroid/content/ContextParams;)Landroid/content/Context;");

  /// from: public android.content.Context createContext(android.content.ContextParams contextParams)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContext(
    jni.JObject contextParams,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createContext,
        jni.JniCallType.objectType,
        [contextParams.reference]).object);
  }

  static final _id_createAttributionContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createAttributionContext",
      r"(Ljava/lang/String;)Landroid/content/Context;");

  /// from: public android.content.Context createAttributionContext(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createAttributionContext(
    jni.JString string,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createAttributionContext,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_createDeviceProtectedStorageContext = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"createDeviceProtectedStorageContext",
          r"()Landroid/content/Context;");

  /// from: public abstract android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceProtectedStorageContext() {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createDeviceProtectedStorageContext,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getDisplay = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDisplay", r"()Landroid/view/Display;");

  /// from: public android.view.Display getDisplay()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDisplay() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDisplay, jni.JniCallType.objectType, []).object);
  }

  static final _id_getDeviceId =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getDeviceId", r"()I");

  /// from: public int getDeviceId()
  int getDeviceId() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDeviceId, jni.JniCallType.intType, []).integer;
  }

  static final _id_registerDeviceIdChangeListener = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"registerDeviceIdChangeListener",
          r"(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V");

  /// from: public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)
  void registerDeviceIdChangeListener(
    Executor executor,
    jni.JObject intConsumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerDeviceIdChangeListener,
        jni.JniCallType.voidType,
        [executor.reference, intConsumer.reference]).check();
  }

  static final _id_unregisterDeviceIdChangeListener = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterDeviceIdChangeListener",
          r"(Ljava/util/function/IntConsumer;)V");

  /// from: public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)
  void unregisterDeviceIdChangeListener(
    jni.JObject intConsumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterDeviceIdChangeListener,
        jni.JniCallType.voidType,
        [intConsumer.reference]).check();
  }

  static final _id_isRestricted = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isRestricted", r"()Z");

  /// from: public boolean isRestricted()
  bool isRestricted() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isRestricted, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isDeviceProtectedStorage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isDeviceProtectedStorage", r"()Z");

  /// from: public abstract boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isDeviceProtectedStorage, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isUiContext =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isUiContext", r"()Z");

  /// from: public boolean isUiContext()
  bool isUiContext() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isUiContext, jni.JniCallType.booleanType, []).boolean;
  }
}

final class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r"Landroid/content/Context;";

  @override
  Context fromRef(jni.JObjectPtr ref) => Context.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextType) && other is $ContextType;
  }
}

/// from: android.content.Intent$FilterComparison
class Intent_FilterComparison extends jni.JObject {
  @override
  late final jni.JObjType<Intent_FilterComparison> $type = type;

  Intent_FilterComparison.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/Intent$FilterComparison");

  /// The type which includes information such as the signature of this class.
  static const type = $Intent_FilterComparisonType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/Intent;)V");

  /// from: public void <init>(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent_FilterComparison(
    Intent intent,
  ) {
    return Intent_FilterComparison.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [intent.reference]).object);
  }

  static final _id_getIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getIntent", r"()Landroid/content/Intent;");

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getIntent() {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getIntent, jni.JniCallType.objectType, []).object);
  }

  static final _id_equals1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(
    jni.JObject object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_equals1,
        jni.JniCallType.booleanType, [object.reference]).boolean;
  }

  static final _id_hashCode1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hashCode", r"()I");

  /// from: public int hashCode()
  int hashCode1() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hashCode1, jni.JniCallType.intType, []).integer;
  }
}

final class $Intent_FilterComparisonType
    extends jni.JObjType<Intent_FilterComparison> {
  const $Intent_FilterComparisonType();

  @override
  String get signature => r"Landroid/content/Intent$FilterComparison;";

  @override
  Intent_FilterComparison fromRef(jni.JObjectPtr ref) =>
      Intent_FilterComparison.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Intent_FilterComparisonType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent_FilterComparisonType) &&
        other is $Intent_FilterComparisonType;
  }
}

/// from: android.content.Intent$ShortcutIconResource
class Intent_ShortcutIconResource extends jni.JObject {
  @override
  late final jni.JObjType<Intent_ShortcutIconResource> $type = type;

  Intent_ShortcutIconResource.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/Intent$ShortcutIconResource");

  /// The type which includes information such as the signature of this class.
  static const type = $Intent_ShortcutIconResourceType();
  static final _id_CREATOR = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getStaticField(_class.reference, _id_CREATOR, jni.JniCallType.objectType)
      .object);

  static final _id_packageName = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"packageName",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get packageName =>
      const jni.JStringType().fromRef(jni.Jni.accessors
          .getField(reference, _id_packageName, jni.JniCallType.objectType)
          .object);

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_packageName, value.reference);

  static final _id_resourceName = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"resourceName",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String resourceName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get resourceName =>
      const jni.JStringType().fromRef(jni.Jni.accessors
          .getField(reference, _id_resourceName, jni.JniCallType.objectType)
          .object);

  /// from: public java.lang.String resourceName
  /// The returned object must be released after use, by calling the [release] method.
  set resourceName(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_resourceName, value.reference);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent_ShortcutIconResource() {
    return Intent_ShortcutIconResource.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_fromContext = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"fromContext",
      r"(Landroid/content/Context;I)Landroid/content/Intent$ShortcutIconResource;");

  /// from: static public android.content.Intent$ShortcutIconResource fromContext(android.content.Context context, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent_ShortcutIconResource fromContext(
    Context context,
    int i,
  ) {
    return const $Intent_ShortcutIconResourceType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_fromContext,
            jni.JniCallType.objectType,
            [context.reference, jni.JValueInt(i)]).object);
  }

  static final _id_describeContents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"describeContents", r"()I");

  /// from: public int describeContents()
  int describeContents() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_describeContents, jni.JniCallType.intType, []).integer;
  }

  static final _id_writeToParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeToParcel", r"(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeToParcel,
        jni.JniCallType.voidType, [parcel.reference, jni.JValueInt(i)]).check();
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }
}

final class $Intent_ShortcutIconResourceType
    extends jni.JObjType<Intent_ShortcutIconResource> {
  const $Intent_ShortcutIconResourceType();

  @override
  String get signature => r"Landroid/content/Intent$ShortcutIconResource;";

  @override
  Intent_ShortcutIconResource fromRef(jni.JObjectPtr ref) =>
      Intent_ShortcutIconResource.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Intent_ShortcutIconResourceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent_ShortcutIconResourceType) &&
        other is $Intent_ShortcutIconResourceType;
  }
}

/// from: android.content.Intent
class Intent extends jni.JObject {
  @override
  late final jni.JObjType<Intent> $type = type;

  Intent.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/content/Intent");

  /// The type which includes information such as the signature of this class.
  static const type = $IntentType();

  /// from: static public final java.lang.String ACTION_AIRPLANE_MODE_CHANGED
  static const ACTION_AIRPLANE_MODE_CHANGED =
      r"""android.intent.action.AIRPLANE_MODE""";

  /// from: static public final java.lang.String ACTION_ALL_APPS
  static const ACTION_ALL_APPS = r"""android.intent.action.ALL_APPS""";

  /// from: static public final java.lang.String ACTION_ANSWER
  static const ACTION_ANSWER = r"""android.intent.action.ANSWER""";

  /// from: static public final java.lang.String ACTION_APPLICATION_LOCALE_CHANGED
  static const ACTION_APPLICATION_LOCALE_CHANGED =
      r"""android.intent.action.APPLICATION_LOCALE_CHANGED""";

  /// from: static public final java.lang.String ACTION_APPLICATION_PREFERENCES
  static const ACTION_APPLICATION_PREFERENCES =
      r"""android.intent.action.APPLICATION_PREFERENCES""";

  /// from: static public final java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED
  static const ACTION_APPLICATION_RESTRICTIONS_CHANGED =
      r"""android.intent.action.APPLICATION_RESTRICTIONS_CHANGED""";

  /// from: static public final java.lang.String ACTION_APP_ERROR
  static const ACTION_APP_ERROR = r"""android.intent.action.APP_ERROR""";

  /// from: static public final java.lang.String ACTION_ASSIST
  static const ACTION_ASSIST = r"""android.intent.action.ASSIST""";

  /// from: static public final java.lang.String ACTION_ATTACH_DATA
  static const ACTION_ATTACH_DATA = r"""android.intent.action.ATTACH_DATA""";

  /// from: static public final java.lang.String ACTION_AUTO_REVOKE_PERMISSIONS
  static const ACTION_AUTO_REVOKE_PERMISSIONS =
      r"""android.intent.action.AUTO_REVOKE_PERMISSIONS""";

  /// from: static public final java.lang.String ACTION_BATTERY_CHANGED
  static const ACTION_BATTERY_CHANGED =
      r"""android.intent.action.BATTERY_CHANGED""";

  /// from: static public final java.lang.String ACTION_BATTERY_LOW
  static const ACTION_BATTERY_LOW = r"""android.intent.action.BATTERY_LOW""";

  /// from: static public final java.lang.String ACTION_BATTERY_OKAY
  static const ACTION_BATTERY_OKAY = r"""android.intent.action.BATTERY_OKAY""";

  /// from: static public final java.lang.String ACTION_BOOT_COMPLETED
  static const ACTION_BOOT_COMPLETED =
      r"""android.intent.action.BOOT_COMPLETED""";

  /// from: static public final java.lang.String ACTION_BUG_REPORT
  static const ACTION_BUG_REPORT = r"""android.intent.action.BUG_REPORT""";

  /// from: static public final java.lang.String ACTION_CALL
  static const ACTION_CALL = r"""android.intent.action.CALL""";

  /// from: static public final java.lang.String ACTION_CALL_BUTTON
  static const ACTION_CALL_BUTTON = r"""android.intent.action.CALL_BUTTON""";

  /// from: static public final java.lang.String ACTION_CAMERA_BUTTON
  static const ACTION_CAMERA_BUTTON =
      r"""android.intent.action.CAMERA_BUTTON""";

  /// from: static public final java.lang.String ACTION_CARRIER_SETUP
  static const ACTION_CARRIER_SETUP =
      r"""android.intent.action.CARRIER_SETUP""";

  /// from: static public final java.lang.String ACTION_CHOOSER
  static const ACTION_CHOOSER = r"""android.intent.action.CHOOSER""";

  /// from: static public final java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS
  static const ACTION_CLOSE_SYSTEM_DIALOGS =
      r"""android.intent.action.CLOSE_SYSTEM_DIALOGS""";

  /// from: static public final java.lang.String ACTION_CONFIGURATION_CHANGED
  static const ACTION_CONFIGURATION_CHANGED =
      r"""android.intent.action.CONFIGURATION_CHANGED""";

  /// from: static public final java.lang.String ACTION_CREATE_DOCUMENT
  static const ACTION_CREATE_DOCUMENT =
      r"""android.intent.action.CREATE_DOCUMENT""";

  /// from: static public final java.lang.String ACTION_CREATE_NOTE
  static const ACTION_CREATE_NOTE = r"""android.intent.action.CREATE_NOTE""";

  /// from: static public final java.lang.String ACTION_CREATE_REMINDER
  static const ACTION_CREATE_REMINDER =
      r"""android.intent.action.CREATE_REMINDER""";

  /// from: static public final java.lang.String ACTION_CREATE_SHORTCUT
  static const ACTION_CREATE_SHORTCUT =
      r"""android.intent.action.CREATE_SHORTCUT""";

  /// from: static public final java.lang.String ACTION_DATE_CHANGED
  static const ACTION_DATE_CHANGED = r"""android.intent.action.DATE_CHANGED""";

  /// from: static public final java.lang.String ACTION_DEFAULT
  static const ACTION_DEFAULT = r"""android.intent.action.VIEW""";

  /// from: static public final java.lang.String ACTION_DEFINE
  static const ACTION_DEFINE = r"""android.intent.action.DEFINE""";

  /// from: static public final java.lang.String ACTION_DELETE
  static const ACTION_DELETE = r"""android.intent.action.DELETE""";

  /// from: static public final java.lang.String ACTION_DEVICE_STORAGE_LOW
  static const ACTION_DEVICE_STORAGE_LOW =
      r"""android.intent.action.DEVICE_STORAGE_LOW""";

  /// from: static public final java.lang.String ACTION_DEVICE_STORAGE_OK
  static const ACTION_DEVICE_STORAGE_OK =
      r"""android.intent.action.DEVICE_STORAGE_OK""";

  /// from: static public final java.lang.String ACTION_DIAL
  static const ACTION_DIAL = r"""android.intent.action.DIAL""";

  /// from: static public final java.lang.String ACTION_DOCK_EVENT
  static const ACTION_DOCK_EVENT = r"""android.intent.action.DOCK_EVENT""";

  /// from: static public final java.lang.String ACTION_DREAMING_STARTED
  static const ACTION_DREAMING_STARTED =
      r"""android.intent.action.DREAMING_STARTED""";

  /// from: static public final java.lang.String ACTION_DREAMING_STOPPED
  static const ACTION_DREAMING_STOPPED =
      r"""android.intent.action.DREAMING_STOPPED""";

  /// from: static public final java.lang.String ACTION_EDIT
  static const ACTION_EDIT = r"""android.intent.action.EDIT""";

  /// from: static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE
  static const ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =
      r"""android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE""";

  /// from: static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE
  static const ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =
      r"""android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE""";

  /// from: static public final java.lang.String ACTION_FACTORY_TEST
  static const ACTION_FACTORY_TEST = r"""android.intent.action.FACTORY_TEST""";

  /// from: static public final java.lang.String ACTION_GET_CONTENT
  static const ACTION_GET_CONTENT = r"""android.intent.action.GET_CONTENT""";

  /// from: static public final java.lang.String ACTION_GET_RESTRICTION_ENTRIES
  static const ACTION_GET_RESTRICTION_ENTRIES =
      r"""android.intent.action.GET_RESTRICTION_ENTRIES""";

  /// from: static public final java.lang.String ACTION_GTALK_SERVICE_CONNECTED
  static const ACTION_GTALK_SERVICE_CONNECTED =
      r"""android.intent.action.GTALK_CONNECTED""";

  /// from: static public final java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED
  static const ACTION_GTALK_SERVICE_DISCONNECTED =
      r"""android.intent.action.GTALK_DISCONNECTED""";

  /// from: static public final java.lang.String ACTION_HEADSET_PLUG
  static const ACTION_HEADSET_PLUG = r"""android.intent.action.HEADSET_PLUG""";

  /// from: static public final java.lang.String ACTION_INPUT_METHOD_CHANGED
  static const ACTION_INPUT_METHOD_CHANGED =
      r"""android.intent.action.INPUT_METHOD_CHANGED""";

  /// from: static public final java.lang.String ACTION_INSERT
  static const ACTION_INSERT = r"""android.intent.action.INSERT""";

  /// from: static public final java.lang.String ACTION_INSERT_OR_EDIT
  static const ACTION_INSERT_OR_EDIT =
      r"""android.intent.action.INSERT_OR_EDIT""";

  /// from: static public final java.lang.String ACTION_INSTALL_FAILURE
  static const ACTION_INSTALL_FAILURE =
      r"""android.intent.action.INSTALL_FAILURE""";

  /// from: static public final java.lang.String ACTION_INSTALL_PACKAGE
  static const ACTION_INSTALL_PACKAGE =
      r"""android.intent.action.INSTALL_PACKAGE""";

  /// from: static public final java.lang.String ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE
  static const ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE =
      r"""android.intent.action.LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE""";

  /// from: static public final java.lang.String ACTION_LOCALE_CHANGED
  static const ACTION_LOCALE_CHANGED =
      r"""android.intent.action.LOCALE_CHANGED""";

  /// from: static public final java.lang.String ACTION_LOCKED_BOOT_COMPLETED
  static const ACTION_LOCKED_BOOT_COMPLETED =
      r"""android.intent.action.LOCKED_BOOT_COMPLETED""";

  /// from: static public final java.lang.String ACTION_MAIN
  static const ACTION_MAIN = r"""android.intent.action.MAIN""";

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_ADDED
  static const ACTION_MANAGED_PROFILE_ADDED =
      r"""android.intent.action.MANAGED_PROFILE_ADDED""";

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE
  static const ACTION_MANAGED_PROFILE_AVAILABLE =
      r"""android.intent.action.MANAGED_PROFILE_AVAILABLE""";

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_REMOVED
  static const ACTION_MANAGED_PROFILE_REMOVED =
      r"""android.intent.action.MANAGED_PROFILE_REMOVED""";

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE
  static const ACTION_MANAGED_PROFILE_UNAVAILABLE =
      r"""android.intent.action.MANAGED_PROFILE_UNAVAILABLE""";

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED
  static const ACTION_MANAGED_PROFILE_UNLOCKED =
      r"""android.intent.action.MANAGED_PROFILE_UNLOCKED""";

  /// from: static public final java.lang.String ACTION_MANAGE_NETWORK_USAGE
  static const ACTION_MANAGE_NETWORK_USAGE =
      r"""android.intent.action.MANAGE_NETWORK_USAGE""";

  /// from: static public final java.lang.String ACTION_MANAGE_PACKAGE_STORAGE
  static const ACTION_MANAGE_PACKAGE_STORAGE =
      r"""android.intent.action.MANAGE_PACKAGE_STORAGE""";

  /// from: static public final java.lang.String ACTION_MANAGE_UNUSED_APPS
  static const ACTION_MANAGE_UNUSED_APPS =
      r"""android.intent.action.MANAGE_UNUSED_APPS""";

  /// from: static public final java.lang.String ACTION_MEDIA_BAD_REMOVAL
  static const ACTION_MEDIA_BAD_REMOVAL =
      r"""android.intent.action.MEDIA_BAD_REMOVAL""";

  /// from: static public final java.lang.String ACTION_MEDIA_BUTTON
  static const ACTION_MEDIA_BUTTON = r"""android.intent.action.MEDIA_BUTTON""";

  /// from: static public final java.lang.String ACTION_MEDIA_CHECKING
  static const ACTION_MEDIA_CHECKING =
      r"""android.intent.action.MEDIA_CHECKING""";

  /// from: static public final java.lang.String ACTION_MEDIA_EJECT
  static const ACTION_MEDIA_EJECT = r"""android.intent.action.MEDIA_EJECT""";

  /// from: static public final java.lang.String ACTION_MEDIA_MOUNTED
  static const ACTION_MEDIA_MOUNTED =
      r"""android.intent.action.MEDIA_MOUNTED""";

  /// from: static public final java.lang.String ACTION_MEDIA_NOFS
  static const ACTION_MEDIA_NOFS = r"""android.intent.action.MEDIA_NOFS""";

  /// from: static public final java.lang.String ACTION_MEDIA_REMOVED
  static const ACTION_MEDIA_REMOVED =
      r"""android.intent.action.MEDIA_REMOVED""";

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_FINISHED
  static const ACTION_MEDIA_SCANNER_FINISHED =
      r"""android.intent.action.MEDIA_SCANNER_FINISHED""";

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE
  static const ACTION_MEDIA_SCANNER_SCAN_FILE =
      r"""android.intent.action.MEDIA_SCANNER_SCAN_FILE""";

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_STARTED
  static const ACTION_MEDIA_SCANNER_STARTED =
      r"""android.intent.action.MEDIA_SCANNER_STARTED""";

  /// from: static public final java.lang.String ACTION_MEDIA_SHARED
  static const ACTION_MEDIA_SHARED = r"""android.intent.action.MEDIA_SHARED""";

  /// from: static public final java.lang.String ACTION_MEDIA_UNMOUNTABLE
  static const ACTION_MEDIA_UNMOUNTABLE =
      r"""android.intent.action.MEDIA_UNMOUNTABLE""";

  /// from: static public final java.lang.String ACTION_MEDIA_UNMOUNTED
  static const ACTION_MEDIA_UNMOUNTED =
      r"""android.intent.action.MEDIA_UNMOUNTED""";

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_REPLACED
  static const ACTION_MY_PACKAGE_REPLACED =
      r"""android.intent.action.MY_PACKAGE_REPLACED""";

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_SUSPENDED
  static const ACTION_MY_PACKAGE_SUSPENDED =
      r"""android.intent.action.MY_PACKAGE_SUSPENDED""";

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_UNSUSPENDED
  static const ACTION_MY_PACKAGE_UNSUSPENDED =
      r"""android.intent.action.MY_PACKAGE_UNSUSPENDED""";

  /// from: static public final java.lang.String ACTION_NEW_OUTGOING_CALL
  static const ACTION_NEW_OUTGOING_CALL =
      r"""android.intent.action.NEW_OUTGOING_CALL""";

  /// from: static public final java.lang.String ACTION_OPEN_DOCUMENT
  static const ACTION_OPEN_DOCUMENT =
      r"""android.intent.action.OPEN_DOCUMENT""";

  /// from: static public final java.lang.String ACTION_OPEN_DOCUMENT_TREE
  static const ACTION_OPEN_DOCUMENT_TREE =
      r"""android.intent.action.OPEN_DOCUMENT_TREE""";

  /// from: static public final java.lang.String ACTION_PACKAGES_SUSPENDED
  static const ACTION_PACKAGES_SUSPENDED =
      r"""android.intent.action.PACKAGES_SUSPENDED""";

  /// from: static public final java.lang.String ACTION_PACKAGES_UNSUSPENDED
  static const ACTION_PACKAGES_UNSUSPENDED =
      r"""android.intent.action.PACKAGES_UNSUSPENDED""";

  /// from: static public final java.lang.String ACTION_PACKAGE_ADDED
  static const ACTION_PACKAGE_ADDED =
      r"""android.intent.action.PACKAGE_ADDED""";

  /// from: static public final java.lang.String ACTION_PACKAGE_CHANGED
  static const ACTION_PACKAGE_CHANGED =
      r"""android.intent.action.PACKAGE_CHANGED""";

  /// from: static public final java.lang.String ACTION_PACKAGE_DATA_CLEARED
  static const ACTION_PACKAGE_DATA_CLEARED =
      r"""android.intent.action.PACKAGE_DATA_CLEARED""";

  /// from: static public final java.lang.String ACTION_PACKAGE_FIRST_LAUNCH
  static const ACTION_PACKAGE_FIRST_LAUNCH =
      r"""android.intent.action.PACKAGE_FIRST_LAUNCH""";

  /// from: static public final java.lang.String ACTION_PACKAGE_FULLY_REMOVED
  static const ACTION_PACKAGE_FULLY_REMOVED =
      r"""android.intent.action.PACKAGE_FULLY_REMOVED""";

  /// from: static public final java.lang.String ACTION_PACKAGE_INSTALL
  static const ACTION_PACKAGE_INSTALL =
      r"""android.intent.action.PACKAGE_INSTALL""";

  /// from: static public final java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION
  static const ACTION_PACKAGE_NEEDS_VERIFICATION =
      r"""android.intent.action.PACKAGE_NEEDS_VERIFICATION""";

  /// from: static public final java.lang.String ACTION_PACKAGE_REMOVED
  static const ACTION_PACKAGE_REMOVED =
      r"""android.intent.action.PACKAGE_REMOVED""";

  /// from: static public final java.lang.String ACTION_PACKAGE_REPLACED
  static const ACTION_PACKAGE_REPLACED =
      r"""android.intent.action.PACKAGE_REPLACED""";

  /// from: static public final java.lang.String ACTION_PACKAGE_RESTARTED
  static const ACTION_PACKAGE_RESTARTED =
      r"""android.intent.action.PACKAGE_RESTARTED""";

  /// from: static public final java.lang.String ACTION_PACKAGE_VERIFIED
  static const ACTION_PACKAGE_VERIFIED =
      r"""android.intent.action.PACKAGE_VERIFIED""";

  /// from: static public final java.lang.String ACTION_PASTE
  static const ACTION_PASTE = r"""android.intent.action.PASTE""";

  /// from: static public final java.lang.String ACTION_PICK
  static const ACTION_PICK = r"""android.intent.action.PICK""";

  /// from: static public final java.lang.String ACTION_PICK_ACTIVITY
  static const ACTION_PICK_ACTIVITY =
      r"""android.intent.action.PICK_ACTIVITY""";

  /// from: static public final java.lang.String ACTION_POWER_CONNECTED
  static const ACTION_POWER_CONNECTED =
      r"""android.intent.action.ACTION_POWER_CONNECTED""";

  /// from: static public final java.lang.String ACTION_POWER_DISCONNECTED
  static const ACTION_POWER_DISCONNECTED =
      r"""android.intent.action.ACTION_POWER_DISCONNECTED""";

  /// from: static public final java.lang.String ACTION_POWER_USAGE_SUMMARY
  static const ACTION_POWER_USAGE_SUMMARY =
      r"""android.intent.action.POWER_USAGE_SUMMARY""";

  /// from: static public final java.lang.String ACTION_PROCESS_TEXT
  static const ACTION_PROCESS_TEXT = r"""android.intent.action.PROCESS_TEXT""";

  /// from: static public final java.lang.String ACTION_PROFILE_ACCESSIBLE
  static const ACTION_PROFILE_ACCESSIBLE =
      r"""android.intent.action.PROFILE_ACCESSIBLE""";

  /// from: static public final java.lang.String ACTION_PROFILE_ADDED
  static const ACTION_PROFILE_ADDED =
      r"""android.intent.action.PROFILE_ADDED""";

  /// from: static public final java.lang.String ACTION_PROFILE_INACCESSIBLE
  static const ACTION_PROFILE_INACCESSIBLE =
      r"""android.intent.action.PROFILE_INACCESSIBLE""";

  /// from: static public final java.lang.String ACTION_PROFILE_REMOVED
  static const ACTION_PROFILE_REMOVED =
      r"""android.intent.action.PROFILE_REMOVED""";

  /// from: static public final java.lang.String ACTION_PROVIDER_CHANGED
  static const ACTION_PROVIDER_CHANGED =
      r"""android.intent.action.PROVIDER_CHANGED""";

  /// from: static public final java.lang.String ACTION_QUICK_CLOCK
  static const ACTION_QUICK_CLOCK = r"""android.intent.action.QUICK_CLOCK""";

  /// from: static public final java.lang.String ACTION_QUICK_VIEW
  static const ACTION_QUICK_VIEW = r"""android.intent.action.QUICK_VIEW""";

  /// from: static public final java.lang.String ACTION_REBOOT
  static const ACTION_REBOOT = r"""android.intent.action.REBOOT""";

  /// from: static public final java.lang.String ACTION_RUN
  static const ACTION_RUN = r"""android.intent.action.RUN""";

  /// from: static public final java.lang.String ACTION_SAFETY_CENTER
  static const ACTION_SAFETY_CENTER =
      r"""android.intent.action.SAFETY_CENTER""";

  /// from: static public final java.lang.String ACTION_SCREEN_OFF
  static const ACTION_SCREEN_OFF = r"""android.intent.action.SCREEN_OFF""";

  /// from: static public final java.lang.String ACTION_SCREEN_ON
  static const ACTION_SCREEN_ON = r"""android.intent.action.SCREEN_ON""";

  /// from: static public final java.lang.String ACTION_SEARCH
  static const ACTION_SEARCH = r"""android.intent.action.SEARCH""";

  /// from: static public final java.lang.String ACTION_SEARCH_LONG_PRESS
  static const ACTION_SEARCH_LONG_PRESS =
      r"""android.intent.action.SEARCH_LONG_PRESS""";

  /// from: static public final java.lang.String ACTION_SEND
  static const ACTION_SEND = r"""android.intent.action.SEND""";

  /// from: static public final java.lang.String ACTION_SENDTO
  static const ACTION_SENDTO = r"""android.intent.action.SENDTO""";

  /// from: static public final java.lang.String ACTION_SEND_MULTIPLE
  static const ACTION_SEND_MULTIPLE =
      r"""android.intent.action.SEND_MULTIPLE""";

  /// from: static public final java.lang.String ACTION_SET_WALLPAPER
  static const ACTION_SET_WALLPAPER =
      r"""android.intent.action.SET_WALLPAPER""";

  /// from: static public final java.lang.String ACTION_SHOW_APP_INFO
  static const ACTION_SHOW_APP_INFO =
      r"""android.intent.action.SHOW_APP_INFO""";

  /// from: static public final java.lang.String ACTION_SHOW_WORK_APPS
  static const ACTION_SHOW_WORK_APPS =
      r"""android.intent.action.SHOW_WORK_APPS""";

  /// from: static public final java.lang.String ACTION_SHUTDOWN
  static const ACTION_SHUTDOWN = r"""android.intent.action.ACTION_SHUTDOWN""";

  /// from: static public final java.lang.String ACTION_SYNC
  static const ACTION_SYNC = r"""android.intent.action.SYNC""";

  /// from: static public final java.lang.String ACTION_SYSTEM_TUTORIAL
  static const ACTION_SYSTEM_TUTORIAL =
      r"""android.intent.action.SYSTEM_TUTORIAL""";

  /// from: static public final java.lang.String ACTION_TIMEZONE_CHANGED
  static const ACTION_TIMEZONE_CHANGED =
      r"""android.intent.action.TIMEZONE_CHANGED""";

  /// from: static public final java.lang.String ACTION_TIME_CHANGED
  static const ACTION_TIME_CHANGED = r"""android.intent.action.TIME_SET""";

  /// from: static public final java.lang.String ACTION_TIME_TICK
  static const ACTION_TIME_TICK = r"""android.intent.action.TIME_TICK""";

  /// from: static public final java.lang.String ACTION_TRANSLATE
  static const ACTION_TRANSLATE = r"""android.intent.action.TRANSLATE""";

  /// from: static public final java.lang.String ACTION_UID_REMOVED
  static const ACTION_UID_REMOVED = r"""android.intent.action.UID_REMOVED""";

  /// from: static public final java.lang.String ACTION_UMS_CONNECTED
  static const ACTION_UMS_CONNECTED =
      r"""android.intent.action.UMS_CONNECTED""";

  /// from: static public final java.lang.String ACTION_UMS_DISCONNECTED
  static const ACTION_UMS_DISCONNECTED =
      r"""android.intent.action.UMS_DISCONNECTED""";

  /// from: static public final java.lang.String ACTION_UNINSTALL_PACKAGE
  static const ACTION_UNINSTALL_PACKAGE =
      r"""android.intent.action.UNINSTALL_PACKAGE""";

  /// from: static public final java.lang.String ACTION_USER_BACKGROUND
  static const ACTION_USER_BACKGROUND =
      r"""android.intent.action.USER_BACKGROUND""";

  /// from: static public final java.lang.String ACTION_USER_FOREGROUND
  static const ACTION_USER_FOREGROUND =
      r"""android.intent.action.USER_FOREGROUND""";

  /// from: static public final java.lang.String ACTION_USER_INITIALIZE
  static const ACTION_USER_INITIALIZE =
      r"""android.intent.action.USER_INITIALIZE""";

  /// from: static public final java.lang.String ACTION_USER_PRESENT
  static const ACTION_USER_PRESENT = r"""android.intent.action.USER_PRESENT""";

  /// from: static public final java.lang.String ACTION_USER_UNLOCKED
  static const ACTION_USER_UNLOCKED =
      r"""android.intent.action.USER_UNLOCKED""";

  /// from: static public final java.lang.String ACTION_VIEW
  static const ACTION_VIEW = r"""android.intent.action.VIEW""";

  /// from: static public final java.lang.String ACTION_VIEW_LOCUS
  static const ACTION_VIEW_LOCUS = r"""android.intent.action.VIEW_LOCUS""";

  /// from: static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE
  static const ACTION_VIEW_PERMISSION_USAGE =
      r"""android.intent.action.VIEW_PERMISSION_USAGE""";

  /// from: static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD
  static const ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =
      r"""android.intent.action.VIEW_PERMISSION_USAGE_FOR_PERIOD""";

  /// from: static public final java.lang.String ACTION_VOICE_COMMAND
  static const ACTION_VOICE_COMMAND =
      r"""android.intent.action.VOICE_COMMAND""";

  /// from: static public final java.lang.String ACTION_WALLPAPER_CHANGED
  static const ACTION_WALLPAPER_CHANGED =
      r"""android.intent.action.WALLPAPER_CHANGED""";

  /// from: static public final java.lang.String ACTION_WEB_SEARCH
  static const ACTION_WEB_SEARCH = r"""android.intent.action.WEB_SEARCH""";

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_BLOCKED_BY_ADMIN
  static const CAPTURE_CONTENT_FOR_NOTE_BLOCKED_BY_ADMIN = 4;

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_FAILED
  static const CAPTURE_CONTENT_FOR_NOTE_FAILED = 1;

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_SUCCESS
  static const CAPTURE_CONTENT_FOR_NOTE_SUCCESS = 0;

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_USER_CANCELED
  static const CAPTURE_CONTENT_FOR_NOTE_USER_CANCELED = 2;

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_WINDOW_MODE_UNSUPPORTED
  static const CAPTURE_CONTENT_FOR_NOTE_WINDOW_MODE_UNSUPPORTED = 3;

  /// from: static public final java.lang.String CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET
  static const CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =
      r"""android.intent.category.ACCESSIBILITY_SHORTCUT_TARGET""";

  /// from: static public final java.lang.String CATEGORY_ALTERNATIVE
  static const CATEGORY_ALTERNATIVE =
      r"""android.intent.category.ALTERNATIVE""";

  /// from: static public final java.lang.String CATEGORY_APP_BROWSER
  static const CATEGORY_APP_BROWSER =
      r"""android.intent.category.APP_BROWSER""";

  /// from: static public final java.lang.String CATEGORY_APP_CALCULATOR
  static const CATEGORY_APP_CALCULATOR =
      r"""android.intent.category.APP_CALCULATOR""";

  /// from: static public final java.lang.String CATEGORY_APP_CALENDAR
  static const CATEGORY_APP_CALENDAR =
      r"""android.intent.category.APP_CALENDAR""";

  /// from: static public final java.lang.String CATEGORY_APP_CONTACTS
  static const CATEGORY_APP_CONTACTS =
      r"""android.intent.category.APP_CONTACTS""";

  /// from: static public final java.lang.String CATEGORY_APP_EMAIL
  static const CATEGORY_APP_EMAIL = r"""android.intent.category.APP_EMAIL""";

  /// from: static public final java.lang.String CATEGORY_APP_FILES
  static const CATEGORY_APP_FILES = r"""android.intent.category.APP_FILES""";

  /// from: static public final java.lang.String CATEGORY_APP_FITNESS
  static const CATEGORY_APP_FITNESS =
      r"""android.intent.category.APP_FITNESS""";

  /// from: static public final java.lang.String CATEGORY_APP_GALLERY
  static const CATEGORY_APP_GALLERY =
      r"""android.intent.category.APP_GALLERY""";

  /// from: static public final java.lang.String CATEGORY_APP_MAPS
  static const CATEGORY_APP_MAPS = r"""android.intent.category.APP_MAPS""";

  /// from: static public final java.lang.String CATEGORY_APP_MARKET
  static const CATEGORY_APP_MARKET = r"""android.intent.category.APP_MARKET""";

  /// from: static public final java.lang.String CATEGORY_APP_MESSAGING
  static const CATEGORY_APP_MESSAGING =
      r"""android.intent.category.APP_MESSAGING""";

  /// from: static public final java.lang.String CATEGORY_APP_MUSIC
  static const CATEGORY_APP_MUSIC = r"""android.intent.category.APP_MUSIC""";

  /// from: static public final java.lang.String CATEGORY_APP_WEATHER
  static const CATEGORY_APP_WEATHER =
      r"""android.intent.category.APP_WEATHER""";

  /// from: static public final java.lang.String CATEGORY_BROWSABLE
  static const CATEGORY_BROWSABLE = r"""android.intent.category.BROWSABLE""";

  /// from: static public final java.lang.String CATEGORY_CAR_DOCK
  static const CATEGORY_CAR_DOCK = r"""android.intent.category.CAR_DOCK""";

  /// from: static public final java.lang.String CATEGORY_CAR_MODE
  static const CATEGORY_CAR_MODE = r"""android.intent.category.CAR_MODE""";

  /// from: static public final java.lang.String CATEGORY_DEFAULT
  static const CATEGORY_DEFAULT = r"""android.intent.category.DEFAULT""";

  /// from: static public final java.lang.String CATEGORY_DESK_DOCK
  static const CATEGORY_DESK_DOCK = r"""android.intent.category.DESK_DOCK""";

  /// from: static public final java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE
  static const CATEGORY_DEVELOPMENT_PREFERENCE =
      r"""android.intent.category.DEVELOPMENT_PREFERENCE""";

  /// from: static public final java.lang.String CATEGORY_EMBED
  static const CATEGORY_EMBED = r"""android.intent.category.EMBED""";

  /// from: static public final java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST
  static const CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =
      r"""android.intent.category.FRAMEWORK_INSTRUMENTATION_TEST""";

  /// from: static public final java.lang.String CATEGORY_HE_DESK_DOCK
  static const CATEGORY_HE_DESK_DOCK =
      r"""android.intent.category.HE_DESK_DOCK""";

  /// from: static public final java.lang.String CATEGORY_HOME
  static const CATEGORY_HOME = r"""android.intent.category.HOME""";

  /// from: static public final java.lang.String CATEGORY_INFO
  static const CATEGORY_INFO = r"""android.intent.category.INFO""";

  /// from: static public final java.lang.String CATEGORY_LAUNCHER
  static const CATEGORY_LAUNCHER = r"""android.intent.category.LAUNCHER""";

  /// from: static public final java.lang.String CATEGORY_LEANBACK_LAUNCHER
  static const CATEGORY_LEANBACK_LAUNCHER =
      r"""android.intent.category.LEANBACK_LAUNCHER""";

  /// from: static public final java.lang.String CATEGORY_LE_DESK_DOCK
  static const CATEGORY_LE_DESK_DOCK =
      r"""android.intent.category.LE_DESK_DOCK""";

  /// from: static public final java.lang.String CATEGORY_MONKEY
  static const CATEGORY_MONKEY = r"""android.intent.category.MONKEY""";

  /// from: static public final java.lang.String CATEGORY_OPENABLE
  static const CATEGORY_OPENABLE = r"""android.intent.category.OPENABLE""";

  /// from: static public final java.lang.String CATEGORY_PREFERENCE
  static const CATEGORY_PREFERENCE = r"""android.intent.category.PREFERENCE""";

  /// from: static public final java.lang.String CATEGORY_SAMPLE_CODE
  static const CATEGORY_SAMPLE_CODE =
      r"""android.intent.category.SAMPLE_CODE""";

  /// from: static public final java.lang.String CATEGORY_SECONDARY_HOME
  static const CATEGORY_SECONDARY_HOME =
      r"""android.intent.category.SECONDARY_HOME""";

  /// from: static public final java.lang.String CATEGORY_SELECTED_ALTERNATIVE
  static const CATEGORY_SELECTED_ALTERNATIVE =
      r"""android.intent.category.SELECTED_ALTERNATIVE""";

  /// from: static public final java.lang.String CATEGORY_TAB
  static const CATEGORY_TAB = r"""android.intent.category.TAB""";

  /// from: static public final java.lang.String CATEGORY_TEST
  static const CATEGORY_TEST = r"""android.intent.category.TEST""";

  /// from: static public final java.lang.String CATEGORY_TYPED_OPENABLE
  static const CATEGORY_TYPED_OPENABLE =
      r"""android.intent.category.TYPED_OPENABLE""";

  /// from: static public final java.lang.String CATEGORY_UNIT_TEST
  static const CATEGORY_UNIT_TEST = r"""android.intent.category.UNIT_TEST""";

  /// from: static public final java.lang.String CATEGORY_VOICE
  static const CATEGORY_VOICE = r"""android.intent.category.VOICE""";

  /// from: static public final java.lang.String CATEGORY_VR_HOME
  static const CATEGORY_VR_HOME = r"""android.intent.category.VR_HOME""";

  static final _id_CREATOR = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getStaticField(_class.reference, _id_CREATOR, jni.JniCallType.objectType)
      .object);

  /// from: static public final java.lang.String EXTRA_ALARM_COUNT
  static const EXTRA_ALARM_COUNT = r"""android.intent.extra.ALARM_COUNT""";

  /// from: static public final java.lang.String EXTRA_ALLOW_MULTIPLE
  static const EXTRA_ALLOW_MULTIPLE =
      r"""android.intent.extra.ALLOW_MULTIPLE""";

  /// from: static public final java.lang.String EXTRA_ALLOW_REPLACE
  static const EXTRA_ALLOW_REPLACE = r"""android.intent.extra.ALLOW_REPLACE""";

  /// from: static public final java.lang.String EXTRA_ALTERNATE_INTENTS
  static const EXTRA_ALTERNATE_INTENTS =
      r"""android.intent.extra.ALTERNATE_INTENTS""";

  /// from: static public final java.lang.String EXTRA_ASSIST_CONTEXT
  static const EXTRA_ASSIST_CONTEXT =
      r"""android.intent.extra.ASSIST_CONTEXT""";

  /// from: static public final java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID
  static const EXTRA_ASSIST_INPUT_DEVICE_ID =
      r"""android.intent.extra.ASSIST_INPUT_DEVICE_ID""";

  /// from: static public final java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD
  static const EXTRA_ASSIST_INPUT_HINT_KEYBOARD =
      r"""android.intent.extra.ASSIST_INPUT_HINT_KEYBOARD""";

  /// from: static public final java.lang.String EXTRA_ASSIST_PACKAGE
  static const EXTRA_ASSIST_PACKAGE =
      r"""android.intent.extra.ASSIST_PACKAGE""";

  /// from: static public final java.lang.String EXTRA_ASSIST_UID
  static const EXTRA_ASSIST_UID = r"""android.intent.extra.ASSIST_UID""";

  /// from: static public final java.lang.String EXTRA_ATTRIBUTION_TAGS
  static const EXTRA_ATTRIBUTION_TAGS =
      r"""android.intent.extra.ATTRIBUTION_TAGS""";

  /// from: static public final java.lang.String EXTRA_AUTO_LAUNCH_SINGLE_CHOICE
  static const EXTRA_AUTO_LAUNCH_SINGLE_CHOICE =
      r"""android.intent.extra.AUTO_LAUNCH_SINGLE_CHOICE""";

  /// from: static public final java.lang.String EXTRA_BCC
  static const EXTRA_BCC = r"""android.intent.extra.BCC""";

  /// from: static public final java.lang.String EXTRA_BUG_REPORT
  static const EXTRA_BUG_REPORT = r"""android.intent.extra.BUG_REPORT""";

  /// from: static public final java.lang.String EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE
  static const EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE =
      r"""android.intent.extra.CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE""";

  /// from: static public final java.lang.String EXTRA_CC
  static const EXTRA_CC = r"""android.intent.extra.CC""";

  /// from: static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME
  static const EXTRA_CHANGED_COMPONENT_NAME =
      r"""android.intent.extra.changed_component_name""";

  /// from: static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST
  static const EXTRA_CHANGED_COMPONENT_NAME_LIST =
      r"""android.intent.extra.changed_component_name_list""";

  /// from: static public final java.lang.String EXTRA_CHANGED_PACKAGE_LIST
  static const EXTRA_CHANGED_PACKAGE_LIST =
      r"""android.intent.extra.changed_package_list""";

  /// from: static public final java.lang.String EXTRA_CHANGED_UID_LIST
  static const EXTRA_CHANGED_UID_LIST =
      r"""android.intent.extra.changed_uid_list""";

  /// from: static public final java.lang.String EXTRA_CHOOSER_CUSTOM_ACTIONS
  static const EXTRA_CHOOSER_CUSTOM_ACTIONS =
      r"""android.intent.extra.CHOOSER_CUSTOM_ACTIONS""";

  /// from: static public final java.lang.String EXTRA_CHOOSER_MODIFY_SHARE_ACTION
  static const EXTRA_CHOOSER_MODIFY_SHARE_ACTION =
      r"""android.intent.extra.CHOOSER_MODIFY_SHARE_ACTION""";

  /// from: static public final java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER
  static const EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =
      r"""android.intent.extra.CHOOSER_REFINEMENT_INTENT_SENDER""";

  /// from: static public final java.lang.String EXTRA_CHOOSER_TARGETS
  static const EXTRA_CHOOSER_TARGETS =
      r"""android.intent.extra.CHOOSER_TARGETS""";

  /// from: static public final java.lang.String EXTRA_CHOSEN_COMPONENT
  static const EXTRA_CHOSEN_COMPONENT =
      r"""android.intent.extra.CHOSEN_COMPONENT""";

  /// from: static public final java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER
  static const EXTRA_CHOSEN_COMPONENT_INTENT_SENDER =
      r"""android.intent.extra.CHOSEN_COMPONENT_INTENT_SENDER""";

  /// from: static public final java.lang.String EXTRA_COMPONENT_NAME
  static const EXTRA_COMPONENT_NAME =
      r"""android.intent.extra.COMPONENT_NAME""";

  /// from: static public final java.lang.String EXTRA_CONTENT_ANNOTATIONS
  static const EXTRA_CONTENT_ANNOTATIONS =
      r"""android.intent.extra.CONTENT_ANNOTATIONS""";

  /// from: static public final java.lang.String EXTRA_CONTENT_QUERY
  static const EXTRA_CONTENT_QUERY = r"""android.intent.extra.CONTENT_QUERY""";

  /// from: static public final java.lang.String EXTRA_DATA_REMOVED
  static const EXTRA_DATA_REMOVED = r"""android.intent.extra.DATA_REMOVED""";

  /// from: static public final java.lang.String EXTRA_DOCK_STATE
  static const EXTRA_DOCK_STATE = r"""android.intent.extra.DOCK_STATE""";

  /// from: static public final int EXTRA_DOCK_STATE_CAR
  static const EXTRA_DOCK_STATE_CAR = 2;

  /// from: static public final int EXTRA_DOCK_STATE_DESK
  static const EXTRA_DOCK_STATE_DESK = 1;

  /// from: static public final int EXTRA_DOCK_STATE_HE_DESK
  static const EXTRA_DOCK_STATE_HE_DESK = 4;

  /// from: static public final int EXTRA_DOCK_STATE_LE_DESK
  static const EXTRA_DOCK_STATE_LE_DESK = 3;

  /// from: static public final int EXTRA_DOCK_STATE_UNDOCKED
  static const EXTRA_DOCK_STATE_UNDOCKED = 0;

  /// from: static public final java.lang.String EXTRA_DONT_KILL_APP
  static const EXTRA_DONT_KILL_APP = r"""android.intent.extra.DONT_KILL_APP""";

  /// from: static public final java.lang.String EXTRA_DURATION_MILLIS
  static const EXTRA_DURATION_MILLIS =
      r"""android.intent.extra.DURATION_MILLIS""";

  /// from: static public final java.lang.String EXTRA_EMAIL
  static const EXTRA_EMAIL = r"""android.intent.extra.EMAIL""";

  /// from: static public final java.lang.String EXTRA_END_TIME
  static const EXTRA_END_TIME = r"""android.intent.extra.END_TIME""";

  /// from: static public final java.lang.String EXTRA_EXCLUDE_COMPONENTS
  static const EXTRA_EXCLUDE_COMPONENTS =
      r"""android.intent.extra.EXCLUDE_COMPONENTS""";

  /// from: static public final java.lang.String EXTRA_FROM_STORAGE
  static const EXTRA_FROM_STORAGE = r"""android.intent.extra.FROM_STORAGE""";

  /// from: static public final java.lang.String EXTRA_HTML_TEXT
  static const EXTRA_HTML_TEXT = r"""android.intent.extra.HTML_TEXT""";

  /// from: static public final java.lang.String EXTRA_INDEX
  static const EXTRA_INDEX = r"""android.intent.extra.INDEX""";

  /// from: static public final java.lang.String EXTRA_INITIAL_INTENTS
  static const EXTRA_INITIAL_INTENTS =
      r"""android.intent.extra.INITIAL_INTENTS""";

  /// from: static public final java.lang.String EXTRA_INSTALLER_PACKAGE_NAME
  static const EXTRA_INSTALLER_PACKAGE_NAME =
      r"""android.intent.extra.INSTALLER_PACKAGE_NAME""";

  /// from: static public final java.lang.String EXTRA_INTENT
  static const EXTRA_INTENT = r"""android.intent.extra.INTENT""";

  /// from: static public final java.lang.String EXTRA_KEY_EVENT
  static const EXTRA_KEY_EVENT = r"""android.intent.extra.KEY_EVENT""";

  /// from: static public final java.lang.String EXTRA_LOCALE_LIST
  static const EXTRA_LOCALE_LIST = r"""android.intent.extra.LOCALE_LIST""";

  /// from: static public final java.lang.String EXTRA_LOCAL_ONLY
  static const EXTRA_LOCAL_ONLY = r"""android.intent.extra.LOCAL_ONLY""";

  /// from: static public final java.lang.String EXTRA_LOCUS_ID
  static const EXTRA_LOCUS_ID = r"""android.intent.extra.LOCUS_ID""";

  /// from: static public final java.lang.String EXTRA_MIME_TYPES
  static const EXTRA_MIME_TYPES = r"""android.intent.extra.MIME_TYPES""";

  /// from: static public final java.lang.String EXTRA_NOT_UNKNOWN_SOURCE
  static const EXTRA_NOT_UNKNOWN_SOURCE =
      r"""android.intent.extra.NOT_UNKNOWN_SOURCE""";

  /// from: static public final java.lang.String EXTRA_ORIGINATING_URI
  static const EXTRA_ORIGINATING_URI =
      r"""android.intent.extra.ORIGINATING_URI""";

  /// from: static public final java.lang.String EXTRA_PACKAGES
  static const EXTRA_PACKAGES = r"""android.intent.extra.PACKAGES""";

  /// from: static public final java.lang.String EXTRA_PACKAGE_NAME
  static const EXTRA_PACKAGE_NAME = r"""android.intent.extra.PACKAGE_NAME""";

  /// from: static public final java.lang.String EXTRA_PERMISSION_GROUP_NAME
  static const EXTRA_PERMISSION_GROUP_NAME =
      r"""android.intent.extra.PERMISSION_GROUP_NAME""";

  /// from: static public final java.lang.String EXTRA_PHONE_NUMBER
  static const EXTRA_PHONE_NUMBER = r"""android.intent.extra.PHONE_NUMBER""";

  /// from: static public final java.lang.String EXTRA_PROCESS_TEXT
  static const EXTRA_PROCESS_TEXT = r"""android.intent.extra.PROCESS_TEXT""";

  /// from: static public final java.lang.String EXTRA_PROCESS_TEXT_READONLY
  static const EXTRA_PROCESS_TEXT_READONLY =
      r"""android.intent.extra.PROCESS_TEXT_READONLY""";

  /// from: static public final java.lang.String EXTRA_QUICK_VIEW_FEATURES
  static const EXTRA_QUICK_VIEW_FEATURES =
      r"""android.intent.extra.QUICK_VIEW_FEATURES""";

  /// from: static public final java.lang.String EXTRA_QUIET_MODE
  static const EXTRA_QUIET_MODE = r"""android.intent.extra.QUIET_MODE""";

  /// from: static public final java.lang.String EXTRA_REFERRER
  static const EXTRA_REFERRER = r"""android.intent.extra.REFERRER""";

  /// from: static public final java.lang.String EXTRA_REFERRER_NAME
  static const EXTRA_REFERRER_NAME = r"""android.intent.extra.REFERRER_NAME""";

  /// from: static public final java.lang.String EXTRA_REMOTE_INTENT_TOKEN
  static const EXTRA_REMOTE_INTENT_TOKEN =
      r"""android.intent.extra.remote_intent_token""";

  /// from: static public final java.lang.String EXTRA_REPLACEMENT_EXTRAS
  static const EXTRA_REPLACEMENT_EXTRAS =
      r"""android.intent.extra.REPLACEMENT_EXTRAS""";

  /// from: static public final java.lang.String EXTRA_REPLACING
  static const EXTRA_REPLACING = r"""android.intent.extra.REPLACING""";

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_BUNDLE
  static const EXTRA_RESTRICTIONS_BUNDLE =
      r"""android.intent.extra.restrictions_bundle""";

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_INTENT
  static const EXTRA_RESTRICTIONS_INTENT =
      r"""android.intent.extra.restrictions_intent""";

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_LIST
  static const EXTRA_RESTRICTIONS_LIST =
      r"""android.intent.extra.restrictions_list""";

  /// from: static public final java.lang.String EXTRA_RESULT_RECEIVER
  static const EXTRA_RESULT_RECEIVER =
      r"""android.intent.extra.RESULT_RECEIVER""";

  /// from: static public final java.lang.String EXTRA_RETURN_RESULT
  static const EXTRA_RETURN_RESULT = r"""android.intent.extra.RETURN_RESULT""";

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ICON
  static const EXTRA_SHORTCUT_ICON = r"""android.intent.extra.shortcut.ICON""";

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE
  static const EXTRA_SHORTCUT_ICON_RESOURCE =
      r"""android.intent.extra.shortcut.ICON_RESOURCE""";

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ID
  static const EXTRA_SHORTCUT_ID = r"""android.intent.extra.shortcut.ID""";

  /// from: static public final java.lang.String EXTRA_SHORTCUT_INTENT
  static const EXTRA_SHORTCUT_INTENT =
      r"""android.intent.extra.shortcut.INTENT""";

  /// from: static public final java.lang.String EXTRA_SHORTCUT_NAME
  static const EXTRA_SHORTCUT_NAME = r"""android.intent.extra.shortcut.NAME""";

  /// from: static public final java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY
  static const EXTRA_SHUTDOWN_USERSPACE_ONLY =
      r"""android.intent.extra.SHUTDOWN_USERSPACE_ONLY""";

  /// from: static public final java.lang.String EXTRA_SPLIT_NAME
  static const EXTRA_SPLIT_NAME = r"""android.intent.extra.SPLIT_NAME""";

  /// from: static public final java.lang.String EXTRA_START_TIME
  static const EXTRA_START_TIME = r"""android.intent.extra.START_TIME""";

  /// from: static public final java.lang.String EXTRA_STREAM
  static const EXTRA_STREAM = r"""android.intent.extra.STREAM""";

  /// from: static public final java.lang.String EXTRA_SUBJECT
  static const EXTRA_SUBJECT = r"""android.intent.extra.SUBJECT""";

  /// from: static public final java.lang.String EXTRA_SUSPENDED_PACKAGE_EXTRAS
  static const EXTRA_SUSPENDED_PACKAGE_EXTRAS =
      r"""android.intent.extra.SUSPENDED_PACKAGE_EXTRAS""";

  /// from: static public final java.lang.String EXTRA_TEMPLATE
  static const EXTRA_TEMPLATE = r"""android.intent.extra.TEMPLATE""";

  /// from: static public final java.lang.String EXTRA_TEXT
  static const EXTRA_TEXT = r"""android.intent.extra.TEXT""";

  /// from: static public final java.lang.String EXTRA_TIME
  static const EXTRA_TIME = r"""android.intent.extra.TIME""";

  /// from: static public final java.lang.String EXTRA_TIMEZONE
  static const EXTRA_TIMEZONE = r"""time-zone""";

  /// from: static public final java.lang.String EXTRA_TITLE
  static const EXTRA_TITLE = r"""android.intent.extra.TITLE""";

  /// from: static public final java.lang.String EXTRA_UID
  static const EXTRA_UID = r"""android.intent.extra.UID""";

  /// from: static public final java.lang.String EXTRA_USER
  static const EXTRA_USER = r"""android.intent.extra.USER""";

  /// from: static public final java.lang.String EXTRA_USER_INITIATED
  static const EXTRA_USER_INITIATED =
      r"""android.intent.extra.USER_INITIATED""";

  /// from: static public final java.lang.String EXTRA_USE_STYLUS_MODE
  static const EXTRA_USE_STYLUS_MODE =
      r"""android.intent.extra.USE_STYLUS_MODE""";

  /// from: static public final int FILL_IN_ACTION
  static const FILL_IN_ACTION = 1;

  /// from: static public final int FILL_IN_CATEGORIES
  static const FILL_IN_CATEGORIES = 4;

  /// from: static public final int FILL_IN_CLIP_DATA
  static const FILL_IN_CLIP_DATA = 128;

  /// from: static public final int FILL_IN_COMPONENT
  static const FILL_IN_COMPONENT = 8;

  /// from: static public final int FILL_IN_DATA
  static const FILL_IN_DATA = 2;

  /// from: static public final int FILL_IN_IDENTIFIER
  static const FILL_IN_IDENTIFIER = 256;

  /// from: static public final int FILL_IN_PACKAGE
  static const FILL_IN_PACKAGE = 16;

  /// from: static public final int FILL_IN_SELECTOR
  static const FILL_IN_SELECTOR = 64;

  /// from: static public final int FILL_IN_SOURCE_BOUNDS
  static const FILL_IN_SOURCE_BOUNDS = 32;

  /// from: static public final int FLAG_ACTIVITY_BROUGHT_TO_FRONT
  static const FLAG_ACTIVITY_BROUGHT_TO_FRONT = 4194304;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_TASK
  static const FLAG_ACTIVITY_CLEAR_TASK = 32768;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_TOP
  static const FLAG_ACTIVITY_CLEAR_TOP = 67108864;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET
  static const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 524288;

  /// from: static public final int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
  static const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 8388608;

  /// from: static public final int FLAG_ACTIVITY_FORWARD_RESULT
  static const FLAG_ACTIVITY_FORWARD_RESULT = 33554432;

  /// from: static public final int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY
  static const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 1048576;

  /// from: static public final int FLAG_ACTIVITY_LAUNCH_ADJACENT
  static const FLAG_ACTIVITY_LAUNCH_ADJACENT = 4096;

  /// from: static public final int FLAG_ACTIVITY_MATCH_EXTERNAL
  static const FLAG_ACTIVITY_MATCH_EXTERNAL = 2048;

  /// from: static public final int FLAG_ACTIVITY_MULTIPLE_TASK
  static const FLAG_ACTIVITY_MULTIPLE_TASK = 134217728;

  /// from: static public final int FLAG_ACTIVITY_NEW_DOCUMENT
  static const FLAG_ACTIVITY_NEW_DOCUMENT = 524288;

  /// from: static public final int FLAG_ACTIVITY_NEW_TASK
  static const FLAG_ACTIVITY_NEW_TASK = 268435456;

  /// from: static public final int FLAG_ACTIVITY_NO_ANIMATION
  static const FLAG_ACTIVITY_NO_ANIMATION = 65536;

  /// from: static public final int FLAG_ACTIVITY_NO_HISTORY
  static const FLAG_ACTIVITY_NO_HISTORY = 1073741824;

  /// from: static public final int FLAG_ACTIVITY_NO_USER_ACTION
  static const FLAG_ACTIVITY_NO_USER_ACTION = 262144;

  /// from: static public final int FLAG_ACTIVITY_PREVIOUS_IS_TOP
  static const FLAG_ACTIVITY_PREVIOUS_IS_TOP = 16777216;

  /// from: static public final int FLAG_ACTIVITY_REORDER_TO_FRONT
  static const FLAG_ACTIVITY_REORDER_TO_FRONT = 131072;

  /// from: static public final int FLAG_ACTIVITY_REQUIRE_DEFAULT
  static const FLAG_ACTIVITY_REQUIRE_DEFAULT = 512;

  /// from: static public final int FLAG_ACTIVITY_REQUIRE_NON_BROWSER
  static const FLAG_ACTIVITY_REQUIRE_NON_BROWSER = 1024;

  /// from: static public final int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED
  static const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 2097152;

  /// from: static public final int FLAG_ACTIVITY_RETAIN_IN_RECENTS
  static const FLAG_ACTIVITY_RETAIN_IN_RECENTS = 8192;

  /// from: static public final int FLAG_ACTIVITY_SINGLE_TOP
  static const FLAG_ACTIVITY_SINGLE_TOP = 536870912;

  /// from: static public final int FLAG_ACTIVITY_TASK_ON_HOME
  static const FLAG_ACTIVITY_TASK_ON_HOME = 16384;

  /// from: static public final int FLAG_DEBUG_LOG_RESOLUTION
  static const FLAG_DEBUG_LOG_RESOLUTION = 8;

  /// from: static public final int FLAG_DIRECT_BOOT_AUTO
  static const FLAG_DIRECT_BOOT_AUTO = 256;

  /// from: static public final int FLAG_EXCLUDE_STOPPED_PACKAGES
  static const FLAG_EXCLUDE_STOPPED_PACKAGES = 16;

  /// from: static public final int FLAG_FROM_BACKGROUND
  static const FLAG_FROM_BACKGROUND = 4;

  /// from: static public final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION
  static const FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 64;

  /// from: static public final int FLAG_GRANT_PREFIX_URI_PERMISSION
  static const FLAG_GRANT_PREFIX_URI_PERMISSION = 128;

  /// from: static public final int FLAG_GRANT_READ_URI_PERMISSION
  static const FLAG_GRANT_READ_URI_PERMISSION = 1;

  /// from: static public final int FLAG_GRANT_WRITE_URI_PERMISSION
  static const FLAG_GRANT_WRITE_URI_PERMISSION = 2;

  /// from: static public final int FLAG_INCLUDE_STOPPED_PACKAGES
  static const FLAG_INCLUDE_STOPPED_PACKAGES = 32;

  /// from: static public final int FLAG_RECEIVER_FOREGROUND
  static const FLAG_RECEIVER_FOREGROUND = 268435456;

  /// from: static public final int FLAG_RECEIVER_NO_ABORT
  static const FLAG_RECEIVER_NO_ABORT = 134217728;

  /// from: static public final int FLAG_RECEIVER_REGISTERED_ONLY
  static const FLAG_RECEIVER_REGISTERED_ONLY = 1073741824;

  /// from: static public final int FLAG_RECEIVER_REPLACE_PENDING
  static const FLAG_RECEIVER_REPLACE_PENDING = 536870912;

  /// from: static public final int FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS = 2097152;

  /// from: static public final java.lang.String METADATA_DOCK_HOME
  static const METADATA_DOCK_HOME = r"""android.dock_home""";

  /// from: static public final int URI_ALLOW_UNSAFE
  static const URI_ALLOW_UNSAFE = 4;

  /// from: static public final int URI_ANDROID_APP_SCHEME
  static const URI_ANDROID_APP_SCHEME = 2;

  /// from: static public final int URI_INTENT_SCHEME
  static const URI_INTENT_SCHEME = 1;

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent() {
    return Intent.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/Intent;)V");

  /// from: public void <init>(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new1(
    Intent intent,
  ) {
    return Intent.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [intent.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new2(
    jni.JString string,
  ) {
    return Intent.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [string.reference]).object);
  }

  static final _id_new3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/String;Landroid/net/Uri;)V");

  /// from: public void <init>(java.lang.String string, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new3(
    jni.JString string,
    Uri uri,
  ) {
    return Intent.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new3, [string.reference, uri.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Landroid/content/Context;Ljava/lang/Class;)V");

  /// from: public void <init>(android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new4(
    Context context,
    jni.JObject class0,
  ) {
    return Intent.fromRef(jni.Jni.accessors.newObjectWithArgs(_class.reference,
        _id_new4, [context.reference, class0.reference]).object);
  }

  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Landroid/net/Uri;Landroid/content/Context;Ljava/lang/Class;)V");

  /// from: public void <init>(java.lang.String string, android.net.Uri uri, android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new5(
    jni.JString string,
    Uri uri,
    Context context,
    jni.JObject class0,
  ) {
    return Intent.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new5, [
      string.reference,
      uri.reference,
      context.reference,
      class0.reference
    ]).object);
  }

  static final _id_createChooser = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createChooser",
      r"(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;");

  /// from: static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent createChooser(
    Intent intent,
    jni.JObject charSequence,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createChooser,
            jni.JniCallType.objectType,
            [intent.reference, charSequence.reference]).object);
  }

  static final _id_createChooser1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createChooser",
      r"(Landroid/content/Intent;Ljava/lang/CharSequence;Landroid/content/IntentSender;)Landroid/content/Intent;");

  /// from: static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence, android.content.IntentSender intentSender)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent createChooser1(
    Intent intent,
    jni.JObject charSequence,
    jni.JObject intentSender,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_createChooser1, jni.JniCallType.objectType, [
      intent.reference,
      charSequence.reference,
      intentSender.reference
    ]).object);
  }

  static final _id_clone = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clone", r"()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject clone() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clone, jni.JniCallType.objectType, []).object);
  }

  static final _id_cloneFilter = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"cloneFilter", r"()Landroid/content/Intent;");

  /// from: public android.content.Intent cloneFilter()
  /// The returned object must be released after use, by calling the [release] method.
  Intent cloneFilter() {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_cloneFilter, jni.JniCallType.objectType, []).object);
  }

  static final _id_makeMainActivity = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"makeMainActivity",
      r"(Landroid/content/ComponentName;)Landroid/content/Intent;");

  /// from: static public android.content.Intent makeMainActivity(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeMainActivity(
    jni.JObject componentName,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_makeMainActivity,
            jni.JniCallType.objectType, [componentName.reference]).object);
  }

  static final _id_makeMainSelectorActivity = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"makeMainSelectorActivity",
          r"(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;");

  /// from: static public android.content.Intent makeMainSelectorActivity(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeMainSelectorActivity(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_makeMainSelectorActivity,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_makeRestartActivityTask = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"makeRestartActivityTask",
          r"(Landroid/content/ComponentName;)Landroid/content/Intent;");

  /// from: static public android.content.Intent makeRestartActivityTask(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeRestartActivityTask(
    jni.JObject componentName,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_makeRestartActivityTask,
            jni.JniCallType.objectType, [componentName.reference]).object);
  }

  static final _id_getIntent = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getIntent",
      r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: static public android.content.Intent getIntent(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent getIntent(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getIntent,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_parseUri = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"parseUri",
      r"(Ljava/lang/String;I)Landroid/content/Intent;");

  /// from: static public android.content.Intent parseUri(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent parseUri(
    jni.JString string,
    int i,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_parseUri,
            jni.JniCallType.objectType,
            [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getIntentOld = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getIntentOld",
      r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: static public android.content.Intent getIntentOld(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent getIntentOld(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getIntentOld,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getAction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getAction", r"()Ljava/lang/String;");

  /// from: public java.lang.String getAction()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAction() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getAction, jni.JniCallType.objectType, []).object);
  }

  static final _id_getData = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getData", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri getData()
  /// The returned object must be released after use, by calling the [release] method.
  Uri getData() {
    return const $UriType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getData, jni.JniCallType.objectType, []).object);
  }

  static final _id_getDataString = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDataString", r"()Ljava/lang/String;");

  /// from: public java.lang.String getDataString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDataString() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDataString, jni.JniCallType.objectType, []).object);
  }

  static final _id_getScheme = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getScheme", r"()Ljava/lang/String;");

  /// from: public java.lang.String getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getScheme() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getScheme, jni.JniCallType.objectType, []).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_resolveType = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveType",
      r"(Landroid/content/Context;)Ljava/lang/String;");

  /// from: public java.lang.String resolveType(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveType(
    Context context,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_resolveType,
        jni.JniCallType.objectType,
        [context.reference]).object);
  }

  static final _id_resolveType1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveType",
      r"(Landroid/content/ContentResolver;)Ljava/lang/String;");

  /// from: public java.lang.String resolveType(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveType1(
    jni.JObject contentResolver,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_resolveType1,
        jni.JniCallType.objectType,
        [contentResolver.reference]).object);
  }

  static final _id_resolveTypeIfNeeded = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveTypeIfNeeded",
      r"(Landroid/content/ContentResolver;)Ljava/lang/String;");

  /// from: public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveTypeIfNeeded(
    jni.JObject contentResolver,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_resolveTypeIfNeeded,
        jni.JniCallType.objectType,
        [contentResolver.reference]).object);
  }

  static final _id_getIdentifier = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getIdentifier", r"()Ljava/lang/String;");

  /// from: public java.lang.String getIdentifier()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getIdentifier() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getIdentifier, jni.JniCallType.objectType, []).object);
  }

  static final _id_hasCategory = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"hasCategory", r"(Ljava/lang/String;)Z");

  /// from: public boolean hasCategory(java.lang.String string)
  bool hasCategory(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_hasCategory,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_getCategories = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCategories", r"()Ljava/util/Set;");

  /// from: public java.util.Set getCategories()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getCategories() {
    return const jni.JSetType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getCategories,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getSelector = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSelector", r"()Landroid/content/Intent;");

  /// from: public android.content.Intent getSelector()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getSelector() {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getSelector, jni.JniCallType.objectType, []).object);
  }

  static final _id_getClipData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getClipData", r"()Landroid/content/ClipData;");

  /// from: public android.content.ClipData getClipData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClipData() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getClipData, jni.JniCallType.objectType, []).object);
  }

  static final _id_setExtrasClassLoader = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setExtrasClassLoader", r"(Ljava/lang/ClassLoader;)V");

  /// from: public void setExtrasClassLoader(java.lang.ClassLoader classLoader)
  void setExtrasClassLoader(
    jni.JObject classLoader,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setExtrasClassLoader,
        jni.JniCallType.voidType,
        [classLoader.reference]).check();
  }

  static final _id_hasExtra = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasExtra", r"(Ljava/lang/String;)Z");

  /// from: public boolean hasExtra(java.lang.String string)
  bool hasExtra(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_hasExtra,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_hasFileDescriptors = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasFileDescriptors", r"()Z");

  /// from: public boolean hasFileDescriptors()
  bool hasFileDescriptors() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_hasFileDescriptors, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getBooleanExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBooleanExtra", r"(Ljava/lang/String;Z)Z");

  /// from: public boolean getBooleanExtra(java.lang.String string, boolean z)
  bool getBooleanExtra(
    jni.JString string,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getBooleanExtra,
        jni.JniCallType.booleanType, [string.reference, z ? 1 : 0]).boolean;
  }

  static final _id_getByteExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getByteExtra", r"(Ljava/lang/String;B)B");

  /// from: public byte getByteExtra(java.lang.String string, byte b)
  int getByteExtra(
    jni.JString string,
    int b,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getByteExtra,
        jni.JniCallType.byteType, [string.reference, jni.JValueByte(b)]).byte;
  }

  static final _id_getShortExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getShortExtra", r"(Ljava/lang/String;S)S");

  /// from: public short getShortExtra(java.lang.String string, short s)
  int getShortExtra(
    jni.JString string,
    int s,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getShortExtra,
        jni.JniCallType.shortType,
        [string.reference, jni.JValueShort(s)]).short;
  }

  static final _id_getCharExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCharExtra", r"(Ljava/lang/String;C)C");

  /// from: public char getCharExtra(java.lang.String string, char c)
  int getCharExtra(
    jni.JString string,
    int c,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getCharExtra,
        jni.JniCallType.charType, [string.reference, jni.JValueChar(c)]).char;
  }

  static final _id_getIntExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getIntExtra", r"(Ljava/lang/String;I)I");

  /// from: public int getIntExtra(java.lang.String string, int i)
  int getIntExtra(
    jni.JString string,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getIntExtra,
        jni.JniCallType.intType, [string.reference, jni.JValueInt(i)]).integer;
  }

  static final _id_getLongExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLongExtra", r"(Ljava/lang/String;J)J");

  /// from: public long getLongExtra(java.lang.String string, long j)
  int getLongExtra(
    jni.JString string,
    int j,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getLongExtra,
        jni.JniCallType.longType, [string.reference, j]).long;
  }

  static final _id_getFloatExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getFloatExtra", r"(Ljava/lang/String;F)F");

  /// from: public float getFloatExtra(java.lang.String string, float f)
  double getFloatExtra(
    jni.JString string,
    double f,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getFloatExtra,
        jni.JniCallType.floatType,
        [string.reference, jni.JValueFloat(f)]).float;
  }

  static final _id_getDoubleExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDoubleExtra", r"(Ljava/lang/String;D)D");

  /// from: public double getDoubleExtra(java.lang.String string, double d)
  double getDoubleExtra(
    jni.JString string,
    double d,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getDoubleExtra,
        jni.JniCallType.doubleType, [string.reference, d]).doubleFloat;
  }

  static final _id_getStringExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getStringExtra",
      r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getStringExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getStringExtra(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getStringExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getCharSequenceExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCharSequenceExtra",
      r"(Ljava/lang/String;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getCharSequenceExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceExtra(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCharSequenceExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getParcelableExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelableExtra",
      r"(Ljava/lang/String;)Landroid/os/Parcelable;");

  /// from: public T getParcelableExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelableExtra<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelableExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getParcelableExtra1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelableExtra",
      r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");

  /// from: public T getParcelableExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelableExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelableExtra1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getParcelableArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelableArrayExtra",
      r"(Ljava/lang/String;)[Landroid/os/Parcelable;");

  /// from: public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getParcelableArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getParcelableArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getParcelableArrayExtra1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelableArrayExtra",
      r"(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;");

  /// from: public java.lang.Object[] getParcelableArrayExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<$T> getParcelableArrayExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return jni.JArrayType(T).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelableArrayExtra1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getParcelableArrayListExtra = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getParcelableArrayListExtra",
          r"(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayListExtra<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelableArrayListExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getParcelableArrayListExtra1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getParcelableArrayListExtra",
          r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayListExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelableArrayListExtra1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getSerializableExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSerializableExtra",
      r"(Ljava/lang/String;)Ljava/io/Serializable;");

  /// from: public java.io.Serializable getSerializableExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSerializableExtra(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSerializableExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getSerializableExtra1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSerializableExtra",
      r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/Serializable;");

  /// from: public T getSerializableExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSerializableExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSerializableExtra1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getIntegerArrayListExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getIntegerArrayListExtra",
      r"(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getIntegerArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIntegerArrayListExtra(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getIntegerArrayListExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getStringArrayListExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getStringArrayListExtra",
      r"(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getStringArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStringArrayListExtra(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getStringArrayListExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getCharSequenceArrayListExtra = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCharSequenceArrayListExtra",
          r"(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceArrayListExtra(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCharSequenceArrayListExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getBooleanArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBooleanArrayExtra", r"(Ljava/lang/String;)[Z");

  /// from: public boolean[] getBooleanArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jboolean> getBooleanArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jbooleanType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getBooleanArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getByteArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getByteArrayExtra", r"(Ljava/lang/String;)[B");

  /// from: public byte[] getByteArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getByteArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getByteArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getShortArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getShortArrayExtra", r"(Ljava/lang/String;)[S");

  /// from: public short[] getShortArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jshort> getShortArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jshortType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getShortArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getCharArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCharArrayExtra", r"(Ljava/lang/String;)[C");

  /// from: public char[] getCharArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jchar> getCharArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jcharType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getCharArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getIntArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getIntArrayExtra", r"(Ljava/lang/String;)[I");

  /// from: public int[] getIntArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getIntArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getIntArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getLongArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLongArrayExtra", r"(Ljava/lang/String;)[J");

  /// from: public long[] getLongArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jlong> getLongArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jlongType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getLongArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getFloatArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getFloatArrayExtra", r"(Ljava/lang/String;)[F");

  /// from: public float[] getFloatArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> getFloatArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jfloatType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getFloatArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getDoubleArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDoubleArrayExtra", r"(Ljava/lang/String;)[D");

  /// from: public double[] getDoubleArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jdouble> getDoubleArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jdoubleType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getDoubleArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getStringArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getStringArrayExtra",
      r"(Ljava/lang/String;)[Ljava/lang/String;");

  /// from: public java.lang.String[] getStringArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getStringArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getStringArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getCharSequenceArrayExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCharSequenceArrayExtra",
      r"(Ljava/lang/String;)[Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getCharSequenceArrayExtra(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getCharSequenceArrayExtra,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getBundleExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getBundleExtra",
      r"(Ljava/lang/String;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle getBundleExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Bundle getBundleExtra(
    jni.JString string,
  ) {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBundleExtra,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getExtras = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getExtras", r"()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be released after use, by calling the [release] method.
  Bundle getExtras() {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getExtras, jni.JniCallType.objectType, []).object);
  }

  static final _id_getFlags =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getFlags", r"()I");

  /// from: public int getFlags()
  int getFlags() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getFlags, jni.JniCallType.intType, []).integer;
  }

  static final _id_getPackage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getPackage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getPackage, jni.JniCallType.objectType, []).object);
  }

  static final _id_getComponent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getComponent", r"()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getComponent, jni.JniCallType.objectType, []).object);
  }

  static final _id_getSourceBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSourceBounds", r"()Landroid/graphics/Rect;");

  /// from: public android.graphics.Rect getSourceBounds()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSourceBounds() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getSourceBounds, jni.JniCallType.objectType, []).object);
  }

  static final _id_resolveActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveActivity",
      r"(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName resolveActivity(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivity(
    PackageManager packageManager,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_resolveActivity,
        jni.JniCallType.objectType,
        [packageManager.reference]).object);
  }

  static final _id_resolveActivityInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveActivityInfo",
      r"(Landroid/content/pm/PackageManager;I)Landroid/content/pm/ActivityInfo;");

  /// from: public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager packageManager, int i)
  /// The returned object must be released after use, by calling the [release] method.
  ActivityInfo resolveActivityInfo(
    PackageManager packageManager,
    int i,
  ) {
    return const $ActivityInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_resolveActivityInfo,
            jni.JniCallType.objectType,
            [packageManager.reference, jni.JValueInt(i)]).object);
  }

  static final _id_setAction = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"setAction", r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setAction(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setAction(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setAction,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_setData = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"setData", r"(Landroid/net/Uri;)Landroid/content/Intent;");

  /// from: public android.content.Intent setData(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setData(
    Uri uri,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setData,
        jni.JniCallType.objectType,
        [uri.reference]).object);
  }

  static final _id_setDataAndNormalize = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setDataAndNormalize",
      r"(Landroid/net/Uri;)Landroid/content/Intent;");

  /// from: public android.content.Intent setDataAndNormalize(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndNormalize(
    Uri uri,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setDataAndNormalize,
        jni.JniCallType.objectType,
        [uri.reference]).object);
  }

  static final _id_setType = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"setType", r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setType(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setType(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setType,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_setTypeAndNormalize = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setTypeAndNormalize",
      r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setTypeAndNormalize(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setTypeAndNormalize(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setTypeAndNormalize,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_setDataAndType = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setDataAndType",
      r"(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setDataAndType(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndType(
    Uri uri,
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setDataAndType,
        jni.JniCallType.objectType,
        [uri.reference, string.reference]).object);
  }

  static final _id_setDataAndTypeAndNormalize = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setDataAndTypeAndNormalize",
      r"(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setDataAndTypeAndNormalize(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndTypeAndNormalize(
    Uri uri,
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setDataAndTypeAndNormalize,
        jni.JniCallType.objectType,
        [uri.reference, string.reference]).object);
  }

  static final _id_setIdentifier = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setIdentifier",
      r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setIdentifier(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setIdentifier(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setIdentifier,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_addCategory = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addCategory",
      r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent addCategory(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent addCategory(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addCategory,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_removeCategory = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"removeCategory", r"(Ljava/lang/String;)V");

  /// from: public void removeCategory(java.lang.String string)
  void removeCategory(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_removeCategory,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_setSelector = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setSelector", r"(Landroid/content/Intent;)V");

  /// from: public void setSelector(android.content.Intent intent)
  void setSelector(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setSelector,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_setClipData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setClipData", r"(Landroid/content/ClipData;)V");

  /// from: public void setClipData(android.content.ClipData clipData)
  void setClipData(
    jni.JObject clipData,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setClipData,
        jni.JniCallType.voidType, [clipData.reference]).check();
  }

  static final _id_putExtra = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtra", r"(Ljava/lang/String;Z)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra(
    jni.JString string,
    bool z,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra,
        jni.JniCallType.objectType,
        [string.reference, z ? 1 : 0]).object);
  }

  static final _id_putExtra1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtra", r"(Ljava/lang/String;B)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, byte b)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra1(
    jni.JString string,
    int b,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra1,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueByte(b)]).object);
  }

  static final _id_putExtra2 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtra", r"(Ljava/lang/String;C)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, char c)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra2(
    jni.JString string,
    int c,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra2,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueChar(c)]).object);
  }

  static final _id_putExtra3 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtra", r"(Ljava/lang/String;S)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, short s)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra3(
    jni.JString string,
    int s,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra3,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueShort(s)]).object);
  }

  static final _id_putExtra4 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtra", r"(Ljava/lang/String;I)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra4(
    jni.JString string,
    int i,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra4,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_putExtra5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtra", r"(Ljava/lang/String;J)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra5(
    jni.JString string,
    int j,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra5,
        jni.JniCallType.objectType,
        [string.reference, j]).object);
  }

  static final _id_putExtra6 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtra", r"(Ljava/lang/String;F)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, float f)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra6(
    jni.JString string,
    double f,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra6,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueFloat(f)]).object);
  }

  static final _id_putExtra7 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtra", r"(Ljava/lang/String;D)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, double d)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra7(
    jni.JString string,
    double d,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra7,
        jni.JniCallType.objectType,
        [string.reference, d]).object);
  }

  static final _id_putExtra8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra8(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra8,
        jni.JniCallType.objectType,
        [string.reference, string1.reference]).object);
  }

  static final _id_putExtra9 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra9(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra9,
        jni.JniCallType.objectType,
        [string.reference, charSequence.reference]).object);
  }

  static final _id_putExtra10 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable parcelable)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra10(
    jni.JString string,
    jni.JObject parcelable,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra10,
        jni.JniCallType.objectType,
        [string.reference, parcelable.reference]).object);
  }

  static final _id_putExtra11 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable[] parcelables)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra11(
    jni.JString string,
    jni.JArray<jni.JObject> parcelables,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra11,
        jni.JniCallType.objectType,
        [string.reference, parcelables.reference]).object);
  }

  static final _id_putParcelableArrayListExtra = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putParcelableArrayListExtra",
          r"(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;");

  /// from: public android.content.Intent putParcelableArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putParcelableArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putParcelableArrayListExtra,
        jni.JniCallType.objectType,
        [string.reference, arrayList.reference]).object);
  }

  static final _id_putIntegerArrayListExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putIntegerArrayListExtra",
      r"(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;");

  /// from: public android.content.Intent putIntegerArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putIntegerArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putIntegerArrayListExtra,
        jni.JniCallType.objectType,
        [string.reference, arrayList.reference]).object);
  }

  static final _id_putStringArrayListExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putStringArrayListExtra",
      r"(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;");

  /// from: public android.content.Intent putStringArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putStringArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putStringArrayListExtra,
        jni.JniCallType.objectType,
        [string.reference, arrayList.reference]).object);
  }

  static final _id_putCharSequenceArrayListExtra = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putCharSequenceArrayListExtra",
          r"(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;");

  /// from: public android.content.Intent putCharSequenceArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putCharSequenceArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putCharSequenceArrayListExtra,
        jni.JniCallType.objectType,
        [string.reference, arrayList.reference]).object);
  }

  static final _id_putExtra12 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;Ljava/io/Serializable;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, java.io.Serializable serializable)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra12(
    jni.JString string,
    jni.JObject serializable,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra12,
        jni.JniCallType.objectType,
        [string.reference, serializable.reference]).object);
  }

  static final _id_putExtra13 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[Z)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, boolean[] zs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra13(
    jni.JString string,
    jni.JArray<jni.jboolean> zs,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra13,
        jni.JniCallType.objectType,
        [string.reference, zs.reference]).object);
  }

  static final _id_putExtra14 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[B)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra14(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra14,
        jni.JniCallType.objectType,
        [string.reference, bs.reference]).object);
  }

  static final _id_putExtra15 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[S)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, short[] ss)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra15(
    jni.JString string,
    jni.JArray<jni.jshort> ss,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra15,
        jni.JniCallType.objectType,
        [string.reference, ss.reference]).object);
  }

  static final _id_putExtra16 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[C)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, char[] cs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra16(
    jni.JString string,
    jni.JArray<jni.jchar> cs,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra16,
        jni.JniCallType.objectType,
        [string.reference, cs.reference]).object);
  }

  static final _id_putExtra17 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[I)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra17(
    jni.JString string,
    jni.JArray<jni.jint> is0,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra17,
        jni.JniCallType.objectType,
        [string.reference, is0.reference]).object);
  }

  static final _id_putExtra18 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[J)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, long[] js)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra18(
    jni.JString string,
    jni.JArray<jni.jlong> js,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra18,
        jni.JniCallType.objectType,
        [string.reference, js.reference]).object);
  }

  static final _id_putExtra19 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[F)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, float[] fs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra19(
    jni.JString string,
    jni.JArray<jni.jfloat> fs,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra19,
        jni.JniCallType.objectType,
        [string.reference, fs.reference]).object);
  }

  static final _id_putExtra20 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[D)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, double[] ds)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra20(
    jni.JString string,
    jni.JArray<jni.jdouble> ds,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra20,
        jni.JniCallType.objectType,
        [string.reference, ds.reference]).object);
  }

  static final _id_putExtra21 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra21(
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra21,
        jni.JniCallType.objectType,
        [string.reference, strings.reference]).object);
  }

  static final _id_putExtra22 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;[Ljava/lang/CharSequence;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence[] charSequences)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra22(
    jni.JString string,
    jni.JArray<jni.JObject> charSequences,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra22,
        jni.JniCallType.objectType,
        [string.reference, charSequences.reference]).object);
  }

  static final _id_putExtra23 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtra",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra23(
    jni.JString string,
    Bundle bundle,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtra23,
        jni.JniCallType.objectType,
        [string.reference, bundle.reference]).object);
  }

  static final _id_putExtras = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putExtras", r"(Landroid/content/Intent;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtras(
    Intent intent,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtras,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_putExtras1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putExtras",
      r"(Landroid/os/Bundle;)Landroid/content/Intent;");

  /// from: public android.content.Intent putExtras(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtras1(
    Bundle bundle,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putExtras1,
        jni.JniCallType.objectType,
        [bundle.reference]).object);
  }

  static final _id_replaceExtras = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"replaceExtras",
      r"(Landroid/content/Intent;)Landroid/content/Intent;");

  /// from: public android.content.Intent replaceExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  Intent replaceExtras(
    Intent intent,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_replaceExtras,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_replaceExtras1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"replaceExtras",
      r"(Landroid/os/Bundle;)Landroid/content/Intent;");

  /// from: public android.content.Intent replaceExtras(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent replaceExtras1(
    Bundle bundle,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_replaceExtras1,
        jni.JniCallType.objectType,
        [bundle.reference]).object);
  }

  static final _id_removeExtra = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"removeExtra", r"(Ljava/lang/String;)V");

  /// from: public void removeExtra(java.lang.String string)
  void removeExtra(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_removeExtra,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_setFlags = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setFlags", r"(I)Landroid/content/Intent;");

  /// from: public android.content.Intent setFlags(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setFlags(
    int i,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFlags,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_addFlags = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"addFlags", r"(I)Landroid/content/Intent;");

  /// from: public android.content.Intent addFlags(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent addFlags(
    int i,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addFlags,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_removeFlags = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"removeFlags", r"(I)V");

  /// from: public void removeFlags(int i)
  void removeFlags(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_removeFlags,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setPackage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setPackage",
      r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setPackage(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setPackage,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_setComponent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setComponent",
      r"(Landroid/content/ComponentName;)Landroid/content/Intent;");

  /// from: public android.content.Intent setComponent(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setComponent(
    jni.JObject componentName,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setComponent,
        jni.JniCallType.objectType,
        [componentName.reference]).object);
  }

  static final _id_setClassName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setClassName",
      r"(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setClassName(android.content.Context context, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClassName(
    Context context,
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setClassName,
        jni.JniCallType.objectType,
        [context.reference, string.reference]).object);
  }

  static final _id_setClassName1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setClassName",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public android.content.Intent setClassName(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClassName1(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setClassName1,
        jni.JniCallType.objectType,
        [string.reference, string1.reference]).object);
  }

  static final _id_setClass = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setClass",
      r"(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;");

  /// from: public android.content.Intent setClass(android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClass(
    Context context,
    jni.JObject class0,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setClass,
        jni.JniCallType.objectType,
        [context.reference, class0.reference]).object);
  }

  static final _id_setSourceBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setSourceBounds", r"(Landroid/graphics/Rect;)V");

  /// from: public void setSourceBounds(android.graphics.Rect rect)
  void setSourceBounds(
    jni.JObject rect,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setSourceBounds,
        jni.JniCallType.voidType, [rect.reference]).check();
  }

  static final _id_fillIn = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"fillIn", r"(Landroid/content/Intent;I)I");

  /// from: public int fillIn(android.content.Intent intent, int i)
  int fillIn(
    Intent intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_fillIn,
        jni.JniCallType.intType, [intent.reference, jni.JValueInt(i)]).integer;
  }

  static final _id_filterEquals = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"filterEquals", r"(Landroid/content/Intent;)Z");

  /// from: public boolean filterEquals(android.content.Intent intent)
  bool filterEquals(
    Intent intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_filterEquals,
        jni.JniCallType.booleanType, [intent.reference]).boolean;
  }

  static final _id_filterHashCode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"filterHashCode", r"()I");

  /// from: public int filterHashCode()
  int filterHashCode() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_filterHashCode, jni.JniCallType.intType, []).integer;
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }

  static final _id_toURI = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toURI", r"()Ljava/lang/String;");

  /// from: public java.lang.String toURI()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toURI() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toURI, jni.JniCallType.objectType, []).object);
  }

  static final _id_toUri = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toUri", r"(I)Ljava/lang/String;");

  /// from: public java.lang.String toUri(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toUri(
    int i,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_toUri,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_describeContents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"describeContents", r"()I");

  /// from: public int describeContents()
  int describeContents() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_describeContents, jni.JniCallType.intType, []).integer;
  }

  static final _id_writeToParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeToParcel", r"(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeToParcel,
        jni.JniCallType.voidType, [parcel.reference, jni.JValueInt(i)]).check();
  }

  static final _id_readFromParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"readFromParcel", r"(Landroid/os/Parcel;)V");

  /// from: public void readFromParcel(android.os.Parcel parcel)
  void readFromParcel(
    jni.JObject parcel,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_readFromParcel,
        jni.JniCallType.voidType, [parcel.reference]).check();
  }

  static final _id_parseIntent = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"parseIntent",
      r"(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Landroid/content/Intent;");

  /// from: static public android.content.Intent parseIntent(android.content.res.Resources resources, org.xmlpull.v1.XmlPullParser xmlPullParser, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent parseIntent(
    jni.JObject resources,
    jni.JObject xmlPullParser,
    jni.JObject attributeSet,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_parseIntent, jni.JniCallType.objectType, [
      resources.reference,
      xmlPullParser.reference,
      attributeSet.reference
    ]).object);
  }

  static final _id_normalizeMimeType = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"normalizeMimeType",
      r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String normalizeMimeType(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString normalizeMimeType(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_normalizeMimeType,
            jni.JniCallType.objectType, [string.reference]).object);
  }
}

final class $IntentType extends jni.JObjType<Intent> {
  const $IntentType();

  @override
  String get signature => r"Landroid/content/Intent;";

  @override
  Intent fromRef(jni.JObjectPtr ref) => Intent.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentType) && other is $IntentType;
  }
}

/// from: android.content.pm.PackageManager$ApplicationInfoFlags
class PackageManager_ApplicationInfoFlags extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_ApplicationInfoFlags> $type = type;

  PackageManager_ApplicationInfoFlags.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"android/content/pm/PackageManager$ApplicationInfoFlags");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ApplicationInfoFlagsType();
  static final _id_of = jni.Jni.accessors.getStaticMethodIDOf(_class.reference,
      r"of", r"(J)Landroid/content/pm/PackageManager$ApplicationInfoFlags;");

  /// from: static public android.content.pm.PackageManager$ApplicationInfoFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ApplicationInfoFlags of(
    int j,
  ) {
    return const $PackageManager_ApplicationInfoFlagsType().fromRef(
        jni.Jni.accessors.callStaticMethodWithArgs(
            _class.reference, _id_of, jni.JniCallType.objectType, [j]).object);
  }

  static final _id_getValue =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getValue", r"()J");

  /// from: public long getValue()
  int getValue() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getValue, jni.JniCallType.longType, []).long;
  }
}

final class $PackageManager_ApplicationInfoFlagsType
    extends jni.JObjType<PackageManager_ApplicationInfoFlags> {
  const $PackageManager_ApplicationInfoFlagsType();

  @override
  String get signature =>
      r"Landroid/content/pm/PackageManager$ApplicationInfoFlags;";

  @override
  PackageManager_ApplicationInfoFlags fromRef(jni.JObjectPtr ref) =>
      PackageManager_ApplicationInfoFlags.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_ApplicationInfoFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ApplicationInfoFlagsType) &&
        other is $PackageManager_ApplicationInfoFlagsType;
  }
}

/// from: android.content.pm.PackageManager$ComponentEnabledSetting
class PackageManager_ComponentEnabledSetting extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_ComponentEnabledSetting> $type = type;

  PackageManager_ComponentEnabledSetting.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"android/content/pm/PackageManager$ComponentEnabledSetting");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ComponentEnabledSettingType();
  static final _id_CREATOR = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getStaticField(_class.reference, _id_CREATOR, jni.JniCallType.objectType)
      .object);

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/ComponentName;II)V");

  /// from: public void <init>(android.content.ComponentName componentName, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_ComponentEnabledSetting(
    jni.JObject componentName,
    int i,
    int i1,
  ) {
    return PackageManager_ComponentEnabledSetting.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, [
      componentName.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1)
    ]).object);
  }

  static final _id_getComponentName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getComponentName",
      r"()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponentName() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getComponentName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getEnabledState = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getEnabledState", r"()I");

  /// from: public int getEnabledState()
  int getEnabledState() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getEnabledState, jni.JniCallType.intType, []).integer;
  }

  static final _id_getEnabledFlags = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getEnabledFlags", r"()I");

  /// from: public int getEnabledFlags()
  int getEnabledFlags() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getEnabledFlags, jni.JniCallType.intType, []).integer;
  }

  static final _id_writeToParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeToParcel", r"(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeToParcel,
        jni.JniCallType.voidType, [parcel.reference, jni.JValueInt(i)]).check();
  }

  static final _id_describeContents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"describeContents", r"()I");

  /// from: public int describeContents()
  int describeContents() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_describeContents, jni.JniCallType.intType, []).integer;
  }
}

final class $PackageManager_ComponentEnabledSettingType
    extends jni.JObjType<PackageManager_ComponentEnabledSetting> {
  const $PackageManager_ComponentEnabledSettingType();

  @override
  String get signature =>
      r"Landroid/content/pm/PackageManager$ComponentEnabledSetting;";

  @override
  PackageManager_ComponentEnabledSetting fromRef(jni.JObjectPtr ref) =>
      PackageManager_ComponentEnabledSetting.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_ComponentEnabledSettingType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ComponentEnabledSettingType) &&
        other is $PackageManager_ComponentEnabledSettingType;
  }
}

/// from: android.content.pm.PackageManager$ComponentInfoFlags
class PackageManager_ComponentInfoFlags extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_ComponentInfoFlags> $type = type;

  PackageManager_ComponentInfoFlags.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"android/content/pm/PackageManager$ComponentInfoFlags");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ComponentInfoFlagsType();
  static final _id_of = jni.Jni.accessors.getStaticMethodIDOf(_class.reference,
      r"of", r"(J)Landroid/content/pm/PackageManager$ComponentInfoFlags;");

  /// from: static public android.content.pm.PackageManager$ComponentInfoFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ComponentInfoFlags of(
    int j,
  ) {
    return const $PackageManager_ComponentInfoFlagsType().fromRef(
        jni.Jni.accessors.callStaticMethodWithArgs(
            _class.reference, _id_of, jni.JniCallType.objectType, [j]).object);
  }

  static final _id_getValue =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getValue", r"()J");

  /// from: public long getValue()
  int getValue() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getValue, jni.JniCallType.longType, []).long;
  }
}

final class $PackageManager_ComponentInfoFlagsType
    extends jni.JObjType<PackageManager_ComponentInfoFlags> {
  const $PackageManager_ComponentInfoFlagsType();

  @override
  String get signature =>
      r"Landroid/content/pm/PackageManager$ComponentInfoFlags;";

  @override
  PackageManager_ComponentInfoFlags fromRef(jni.JObjectPtr ref) =>
      PackageManager_ComponentInfoFlags.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_ComponentInfoFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ComponentInfoFlagsType) &&
        other is $PackageManager_ComponentInfoFlagsType;
  }
}

/// from: android.content.pm.PackageManager$NameNotFoundException
class PackageManager_NameNotFoundException extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_NameNotFoundException> $type = type;

  PackageManager_NameNotFoundException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"android/content/pm/PackageManager$NameNotFoundException");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_NameNotFoundExceptionType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_NameNotFoundException() {
    return PackageManager_NameNotFoundException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_NameNotFoundException.new1(
    jni.JString string,
  ) {
    return PackageManager_NameNotFoundException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }
}

final class $PackageManager_NameNotFoundExceptionType
    extends jni.JObjType<PackageManager_NameNotFoundException> {
  const $PackageManager_NameNotFoundExceptionType();

  @override
  String get signature =>
      r"Landroid/content/pm/PackageManager$NameNotFoundException;";

  @override
  PackageManager_NameNotFoundException fromRef(jni.JObjectPtr ref) =>
      PackageManager_NameNotFoundException.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_NameNotFoundExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_NameNotFoundExceptionType) &&
        other is $PackageManager_NameNotFoundExceptionType;
  }
}

/// from: android.content.pm.PackageManager$OnChecksumsReadyListener
class PackageManager_OnChecksumsReadyListener extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_OnChecksumsReadyListener> $type = type;

  PackageManager_OnChecksumsReadyListener.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"android/content/pm/PackageManager$OnChecksumsReadyListener");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_OnChecksumsReadyListenerType();
  static final _id_onChecksumsReady = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onChecksumsReady", r"(Ljava/util/List;)V");

  /// from: public abstract void onChecksumsReady(java.util.List list)
  void onChecksumsReady(
    jni.JList<jni.JObject> list,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onChecksumsReady,
        jni.JniCallType.voidType, [list.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $PackageManager_OnChecksumsReadyListenerImpl> _$impls =
      {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onChecksumsReady(Ljava/util/List;)V") {
        _$impls[$p]!.onChecksumsReady(
          $a[0].castTo(const jni.JListType(jni.JObjectType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory PackageManager_OnChecksumsReadyListener.implement(
    $PackageManager_OnChecksumsReadyListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = PackageManager_OnChecksumsReadyListener.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"android.content.pm.PackageManager$OnChecksumsReadyListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $PackageManager_OnChecksumsReadyListenerImpl {
  factory $PackageManager_OnChecksumsReadyListenerImpl({
    required void Function(jni.JList<jni.JObject> list) onChecksumsReady,
  }) = _$PackageManager_OnChecksumsReadyListenerImpl;

  void onChecksumsReady(jni.JList<jni.JObject> list);
}

class _$PackageManager_OnChecksumsReadyListenerImpl
    implements $PackageManager_OnChecksumsReadyListenerImpl {
  _$PackageManager_OnChecksumsReadyListenerImpl({
    required void Function(jni.JList<jni.JObject> list) onChecksumsReady,
  }) : _onChecksumsReady = onChecksumsReady;

  final void Function(jni.JList<jni.JObject> list) _onChecksumsReady;

  void onChecksumsReady(jni.JList<jni.JObject> list) {
    return _onChecksumsReady(list);
  }
}

final class $PackageManager_OnChecksumsReadyListenerType
    extends jni.JObjType<PackageManager_OnChecksumsReadyListener> {
  const $PackageManager_OnChecksumsReadyListenerType();

  @override
  String get signature =>
      r"Landroid/content/pm/PackageManager$OnChecksumsReadyListener;";

  @override
  PackageManager_OnChecksumsReadyListener fromRef(jni.JObjectPtr ref) =>
      PackageManager_OnChecksumsReadyListener.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_OnChecksumsReadyListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PackageManager_OnChecksumsReadyListenerType) &&
        other is $PackageManager_OnChecksumsReadyListenerType;
  }
}

/// from: android.content.pm.PackageManager$PackageInfoFlags
class PackageManager_PackageInfoFlags extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_PackageInfoFlags> $type = type;

  PackageManager_PackageInfoFlags.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/pm/PackageManager$PackageInfoFlags");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_PackageInfoFlagsType();
  static final _id_of = jni.Jni.accessors.getStaticMethodIDOf(_class.reference,
      r"of", r"(J)Landroid/content/pm/PackageManager$PackageInfoFlags;");

  /// from: static public android.content.pm.PackageManager$PackageInfoFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_PackageInfoFlags of(
    int j,
  ) {
    return const $PackageManager_PackageInfoFlagsType().fromRef(
        jni.Jni.accessors.callStaticMethodWithArgs(
            _class.reference, _id_of, jni.JniCallType.objectType, [j]).object);
  }

  static final _id_getValue =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getValue", r"()J");

  /// from: public long getValue()
  int getValue() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getValue, jni.JniCallType.longType, []).long;
  }
}

final class $PackageManager_PackageInfoFlagsType
    extends jni.JObjType<PackageManager_PackageInfoFlags> {
  const $PackageManager_PackageInfoFlagsType();

  @override
  String get signature =>
      r"Landroid/content/pm/PackageManager$PackageInfoFlags;";

  @override
  PackageManager_PackageInfoFlags fromRef(jni.JObjectPtr ref) =>
      PackageManager_PackageInfoFlags.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_PackageInfoFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_PackageInfoFlagsType) &&
        other is $PackageManager_PackageInfoFlagsType;
  }
}

/// from: android.content.pm.PackageManager$Property
class PackageManager_Property extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_Property> $type = type;

  PackageManager_Property.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/pm/PackageManager$Property");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_PropertyType();
  static final _id_CREATOR = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getStaticField(_class.reference, _id_CREATOR, jni.JniCallType.objectType)
      .object);

  static final _id_getName = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getName", r"()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getName, jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageName", r"()Ljava/lang/String;");

  /// from: public java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getPackageName, jni.JniCallType.objectType, []).object);
  }

  static final _id_getClassName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getClassName", r"()Ljava/lang/String;");

  /// from: public java.lang.String getClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getClassName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getClassName, jni.JniCallType.objectType, []).object);
  }

  static final _id_getBoolean =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getBoolean", r"()Z");

  /// from: public boolean getBoolean()
  bool getBoolean() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBoolean, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isBoolean =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isBoolean", r"()Z");

  /// from: public boolean isBoolean()
  bool isBoolean() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isBoolean, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getFloat =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getFloat", r"()F");

  /// from: public float getFloat()
  double getFloat() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getFloat, jni.JniCallType.floatType, []).float;
  }

  static final _id_isFloat =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isFloat", r"()Z");

  /// from: public boolean isFloat()
  bool isFloat() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isFloat, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getInteger =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getInteger", r"()I");

  /// from: public int getInteger()
  int getInteger() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getInteger, jni.JniCallType.intType, []).integer;
  }

  static final _id_isInteger =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isInteger", r"()Z");

  /// from: public boolean isInteger()
  bool isInteger() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isInteger, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getResourceId = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getResourceId", r"()I");

  /// from: public int getResourceId()
  int getResourceId() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getResourceId, jni.JniCallType.intType, []).integer;
  }

  static final _id_isResourceId = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isResourceId", r"()Z");

  /// from: public boolean isResourceId()
  bool isResourceId() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isResourceId, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getString = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getString", r"()Ljava/lang/String;");

  /// from: public java.lang.String getString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getString, jni.JniCallType.objectType, []).object);
  }

  static final _id_isString =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isString", r"()Z");

  /// from: public boolean isString()
  bool isString() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isString, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_describeContents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"describeContents", r"()I");

  /// from: public int describeContents()
  int describeContents() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_describeContents, jni.JniCallType.intType, []).integer;
  }

  static final _id_writeToParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeToParcel", r"(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeToParcel,
        jni.JniCallType.voidType, [parcel.reference, jni.JValueInt(i)]).check();
  }
}

final class $PackageManager_PropertyType
    extends jni.JObjType<PackageManager_Property> {
  const $PackageManager_PropertyType();

  @override
  String get signature => r"Landroid/content/pm/PackageManager$Property;";

  @override
  PackageManager_Property fromRef(jni.JObjectPtr ref) =>
      PackageManager_Property.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_PropertyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_PropertyType) &&
        other is $PackageManager_PropertyType;
  }
}

/// from: android.content.pm.PackageManager$ResolveInfoFlags
class PackageManager_ResolveInfoFlags extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_ResolveInfoFlags> $type = type;

  PackageManager_ResolveInfoFlags.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/pm/PackageManager$ResolveInfoFlags");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ResolveInfoFlagsType();
  static final _id_of = jni.Jni.accessors.getStaticMethodIDOf(_class.reference,
      r"of", r"(J)Landroid/content/pm/PackageManager$ResolveInfoFlags;");

  /// from: static public android.content.pm.PackageManager$ResolveInfoFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ResolveInfoFlags of(
    int j,
  ) {
    return const $PackageManager_ResolveInfoFlagsType().fromRef(
        jni.Jni.accessors.callStaticMethodWithArgs(
            _class.reference, _id_of, jni.JniCallType.objectType, [j]).object);
  }

  static final _id_getValue =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getValue", r"()J");

  /// from: public long getValue()
  int getValue() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getValue, jni.JniCallType.longType, []).long;
  }
}

final class $PackageManager_ResolveInfoFlagsType
    extends jni.JObjType<PackageManager_ResolveInfoFlags> {
  const $PackageManager_ResolveInfoFlagsType();

  @override
  String get signature =>
      r"Landroid/content/pm/PackageManager$ResolveInfoFlags;";

  @override
  PackageManager_ResolveInfoFlags fromRef(jni.JObjectPtr ref) =>
      PackageManager_ResolveInfoFlags.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_ResolveInfoFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ResolveInfoFlagsType) &&
        other is $PackageManager_ResolveInfoFlagsType;
  }
}

/// from: android.content.pm.PackageManager
class PackageManager extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager> $type = type;

  PackageManager.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/pm/PackageManager");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManagerType();

  /// from: static public final int CERT_INPUT_RAW_X509
  static const CERT_INPUT_RAW_X509 = 0;

  /// from: static public final int CERT_INPUT_SHA256
  static const CERT_INPUT_SHA256 = 1;

  /// from: static public final int COMPONENT_ENABLED_STATE_DEFAULT
  static const COMPONENT_ENABLED_STATE_DEFAULT = 0;

  /// from: static public final int COMPONENT_ENABLED_STATE_DISABLED
  static const COMPONENT_ENABLED_STATE_DISABLED = 2;

  /// from: static public final int COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
  static const COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED = 4;

  /// from: static public final int COMPONENT_ENABLED_STATE_DISABLED_USER
  static const COMPONENT_ENABLED_STATE_DISABLED_USER = 3;

  /// from: static public final int COMPONENT_ENABLED_STATE_ENABLED
  static const COMPONENT_ENABLED_STATE_ENABLED = 1;

  /// from: static public final int DONT_KILL_APP
  static const DONT_KILL_APP = 1;

  /// from: static public final java.lang.String EXTRA_VERIFICATION_ID
  static const EXTRA_VERIFICATION_ID =
      r"""android.content.pm.extra.VERIFICATION_ID""";

  /// from: static public final java.lang.String EXTRA_VERIFICATION_RESULT
  static const EXTRA_VERIFICATION_RESULT =
      r"""android.content.pm.extra.VERIFICATION_RESULT""";

  /// from: static public final java.lang.String FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS
  static const FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS =
      r"""android.software.activities_on_secondary_displays""";

  /// from: static public final java.lang.String FEATURE_APP_WIDGETS
  static const FEATURE_APP_WIDGETS = r"""android.software.app_widgets""";

  /// from: static public final java.lang.String FEATURE_AUDIO_LOW_LATENCY
  static const FEATURE_AUDIO_LOW_LATENCY =
      r"""android.hardware.audio.low_latency""";

  /// from: static public final java.lang.String FEATURE_AUDIO_OUTPUT
  static const FEATURE_AUDIO_OUTPUT = r"""android.hardware.audio.output""";

  /// from: static public final java.lang.String FEATURE_AUDIO_PRO
  static const FEATURE_AUDIO_PRO = r"""android.hardware.audio.pro""";

  /// from: static public final java.lang.String FEATURE_AUTOFILL
  static const FEATURE_AUTOFILL = r"""android.software.autofill""";

  /// from: static public final java.lang.String FEATURE_AUTOMOTIVE
  static const FEATURE_AUTOMOTIVE = r"""android.hardware.type.automotive""";

  /// from: static public final java.lang.String FEATURE_BACKUP
  static const FEATURE_BACKUP = r"""android.software.backup""";

  /// from: static public final java.lang.String FEATURE_BLUETOOTH
  static const FEATURE_BLUETOOTH = r"""android.hardware.bluetooth""";

  /// from: static public final java.lang.String FEATURE_BLUETOOTH_LE
  static const FEATURE_BLUETOOTH_LE = r"""android.hardware.bluetooth_le""";

  /// from: static public final java.lang.String FEATURE_CAMERA
  static const FEATURE_CAMERA = r"""android.hardware.camera""";

  /// from: static public final java.lang.String FEATURE_CAMERA_ANY
  static const FEATURE_CAMERA_ANY = r"""android.hardware.camera.any""";

  /// from: static public final java.lang.String FEATURE_CAMERA_AR
  static const FEATURE_CAMERA_AR = r"""android.hardware.camera.ar""";

  /// from: static public final java.lang.String FEATURE_CAMERA_AUTOFOCUS
  static const FEATURE_CAMERA_AUTOFOCUS =
      r"""android.hardware.camera.autofocus""";

  /// from: static public final java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING
  static const FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING =
      r"""android.hardware.camera.capability.manual_post_processing""";

  /// from: static public final java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR
  static const FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR =
      r"""android.hardware.camera.capability.manual_sensor""";

  /// from: static public final java.lang.String FEATURE_CAMERA_CAPABILITY_RAW
  static const FEATURE_CAMERA_CAPABILITY_RAW =
      r"""android.hardware.camera.capability.raw""";

  /// from: static public final java.lang.String FEATURE_CAMERA_CONCURRENT
  static const FEATURE_CAMERA_CONCURRENT =
      r"""android.hardware.camera.concurrent""";

  /// from: static public final java.lang.String FEATURE_CAMERA_EXTERNAL
  static const FEATURE_CAMERA_EXTERNAL =
      r"""android.hardware.camera.external""";

  /// from: static public final java.lang.String FEATURE_CAMERA_FLASH
  static const FEATURE_CAMERA_FLASH = r"""android.hardware.camera.flash""";

  /// from: static public final java.lang.String FEATURE_CAMERA_FRONT
  static const FEATURE_CAMERA_FRONT = r"""android.hardware.camera.front""";

  /// from: static public final java.lang.String FEATURE_CAMERA_LEVEL_FULL
  static const FEATURE_CAMERA_LEVEL_FULL =
      r"""android.hardware.camera.level.full""";

  /// from: static public final java.lang.String FEATURE_CANT_SAVE_STATE
  static const FEATURE_CANT_SAVE_STATE =
      r"""android.software.cant_save_state""";

  /// from: static public final java.lang.String FEATURE_COMPANION_DEVICE_SETUP
  static const FEATURE_COMPANION_DEVICE_SETUP =
      r"""android.software.companion_device_setup""";

  /// from: static public final java.lang.String FEATURE_CONNECTION_SERVICE
  static const FEATURE_CONNECTION_SERVICE =
      r"""android.software.connectionservice""";

  /// from: static public final java.lang.String FEATURE_CONSUMER_IR
  static const FEATURE_CONSUMER_IR = r"""android.hardware.consumerir""";

  /// from: static public final java.lang.String FEATURE_CONTROLS
  static const FEATURE_CONTROLS = r"""android.software.controls""";

  /// from: static public final java.lang.String FEATURE_CREDENTIALS
  static const FEATURE_CREDENTIALS = r"""android.software.credentials""";

  /// from: static public final java.lang.String FEATURE_DEVICE_ADMIN
  static const FEATURE_DEVICE_ADMIN = r"""android.software.device_admin""";

  /// from: static public final java.lang.String FEATURE_DEVICE_LOCK
  static const FEATURE_DEVICE_LOCK = r"""android.software.device_lock""";

  /// from: static public final java.lang.String FEATURE_EMBEDDED
  static const FEATURE_EMBEDDED = r"""android.hardware.type.embedded""";

  /// from: static public final java.lang.String FEATURE_ETHERNET
  static const FEATURE_ETHERNET = r"""android.hardware.ethernet""";

  /// from: static public final java.lang.String FEATURE_EXPANDED_PICTURE_IN_PICTURE
  static const FEATURE_EXPANDED_PICTURE_IN_PICTURE =
      r"""android.software.expanded_picture_in_picture""";

  /// from: static public final java.lang.String FEATURE_FACE
  static const FEATURE_FACE = r"""android.hardware.biometrics.face""";

  /// from: static public final java.lang.String FEATURE_FAKETOUCH
  static const FEATURE_FAKETOUCH = r"""android.hardware.faketouch""";

  /// from: static public final java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT
  static const FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT =
      r"""android.hardware.faketouch.multitouch.distinct""";

  /// from: static public final java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND
  static const FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND =
      r"""android.hardware.faketouch.multitouch.jazzhand""";

  /// from: static public final java.lang.String FEATURE_FINGERPRINT
  static const FEATURE_FINGERPRINT = r"""android.hardware.fingerprint""";

  /// from: static public final java.lang.String FEATURE_FREEFORM_WINDOW_MANAGEMENT
  static const FEATURE_FREEFORM_WINDOW_MANAGEMENT =
      r"""android.software.freeform_window_management""";

  /// from: static public final java.lang.String FEATURE_GAMEPAD
  static const FEATURE_GAMEPAD = r"""android.hardware.gamepad""";

  /// from: static public final java.lang.String FEATURE_HARDWARE_KEYSTORE
  static const FEATURE_HARDWARE_KEYSTORE =
      r"""android.hardware.hardware_keystore""";

  /// from: static public final java.lang.String FEATURE_HIFI_SENSORS
  static const FEATURE_HIFI_SENSORS =
      r"""android.hardware.sensor.hifi_sensors""";

  /// from: static public final java.lang.String FEATURE_HOME_SCREEN
  static const FEATURE_HOME_SCREEN = r"""android.software.home_screen""";

  /// from: static public final java.lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE
  static const FEATURE_IDENTITY_CREDENTIAL_HARDWARE =
      r"""android.hardware.identity_credential""";

  /// from: static public final java.lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS
  static const FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS =
      r"""android.hardware.identity_credential_direct_access""";

  /// from: static public final java.lang.String FEATURE_INPUT_METHODS
  static const FEATURE_INPUT_METHODS = r"""android.software.input_methods""";

  /// from: static public final java.lang.String FEATURE_IPSEC_TUNNELS
  static const FEATURE_IPSEC_TUNNELS = r"""android.software.ipsec_tunnels""";

  /// from: static public final java.lang.String FEATURE_IPSEC_TUNNEL_MIGRATION
  static const FEATURE_IPSEC_TUNNEL_MIGRATION =
      r"""android.software.ipsec_tunnel_migration""";

  /// from: static public final java.lang.String FEATURE_IRIS
  static const FEATURE_IRIS = r"""android.hardware.biometrics.iris""";

  /// from: static public final java.lang.String FEATURE_KEYSTORE_APP_ATTEST_KEY
  static const FEATURE_KEYSTORE_APP_ATTEST_KEY =
      r"""android.hardware.keystore.app_attest_key""";

  /// from: static public final java.lang.String FEATURE_KEYSTORE_LIMITED_USE_KEY
  static const FEATURE_KEYSTORE_LIMITED_USE_KEY =
      r"""android.hardware.keystore.limited_use_key""";

  /// from: static public final java.lang.String FEATURE_KEYSTORE_SINGLE_USE_KEY
  static const FEATURE_KEYSTORE_SINGLE_USE_KEY =
      r"""android.hardware.keystore.single_use_key""";

  /// from: static public final java.lang.String FEATURE_LEANBACK
  static const FEATURE_LEANBACK = r"""android.software.leanback""";

  /// from: static public final java.lang.String FEATURE_LEANBACK_ONLY
  static const FEATURE_LEANBACK_ONLY = r"""android.software.leanback_only""";

  /// from: static public final java.lang.String FEATURE_LIVE_TV
  static const FEATURE_LIVE_TV = r"""android.software.live_tv""";

  /// from: static public final java.lang.String FEATURE_LIVE_WALLPAPER
  static const FEATURE_LIVE_WALLPAPER = r"""android.software.live_wallpaper""";

  /// from: static public final java.lang.String FEATURE_LOCATION
  static const FEATURE_LOCATION = r"""android.hardware.location""";

  /// from: static public final java.lang.String FEATURE_LOCATION_GPS
  static const FEATURE_LOCATION_GPS = r"""android.hardware.location.gps""";

  /// from: static public final java.lang.String FEATURE_LOCATION_NETWORK
  static const FEATURE_LOCATION_NETWORK =
      r"""android.hardware.location.network""";

  /// from: static public final java.lang.String FEATURE_MANAGED_USERS
  static const FEATURE_MANAGED_USERS = r"""android.software.managed_users""";

  /// from: static public final java.lang.String FEATURE_MICROPHONE
  static const FEATURE_MICROPHONE = r"""android.hardware.microphone""";

  /// from: static public final java.lang.String FEATURE_MIDI
  static const FEATURE_MIDI = r"""android.software.midi""";

  /// from: static public final java.lang.String FEATURE_NFC
  static const FEATURE_NFC = r"""android.hardware.nfc""";

  /// from: static public final java.lang.String FEATURE_NFC_BEAM
  static const FEATURE_NFC_BEAM = r"""android.sofware.nfc.beam""";

  /// from: static public final java.lang.String FEATURE_NFC_HOST_CARD_EMULATION
  static const FEATURE_NFC_HOST_CARD_EMULATION =
      r"""android.hardware.nfc.hce""";

  /// from: static public final java.lang.String FEATURE_NFC_HOST_CARD_EMULATION_NFCF
  static const FEATURE_NFC_HOST_CARD_EMULATION_NFCF =
      r"""android.hardware.nfc.hcef""";

  /// from: static public final java.lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE
  static const FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE =
      r"""android.hardware.nfc.ese""";

  /// from: static public final java.lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC
  static const FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC =
      r"""android.hardware.nfc.uicc""";

  /// from: static public final java.lang.String FEATURE_OPENGLES_DEQP_LEVEL
  static const FEATURE_OPENGLES_DEQP_LEVEL =
      r"""android.software.opengles.deqp.level""";

  /// from: static public final java.lang.String FEATURE_OPENGLES_EXTENSION_PACK
  static const FEATURE_OPENGLES_EXTENSION_PACK =
      r"""android.hardware.opengles.aep""";

  /// from: static public final java.lang.String FEATURE_PC
  static const FEATURE_PC = r"""android.hardware.type.pc""";

  /// from: static public final java.lang.String FEATURE_PICTURE_IN_PICTURE
  static const FEATURE_PICTURE_IN_PICTURE =
      r"""android.software.picture_in_picture""";

  /// from: static public final java.lang.String FEATURE_PRINTING
  static const FEATURE_PRINTING = r"""android.software.print""";

  /// from: static public final java.lang.String FEATURE_RAM_LOW
  static const FEATURE_RAM_LOW = r"""android.hardware.ram.low""";

  /// from: static public final java.lang.String FEATURE_RAM_NORMAL
  static const FEATURE_RAM_NORMAL = r"""android.hardware.ram.normal""";

  /// from: static public final java.lang.String FEATURE_SCREEN_LANDSCAPE
  static const FEATURE_SCREEN_LANDSCAPE =
      r"""android.hardware.screen.landscape""";

  /// from: static public final java.lang.String FEATURE_SCREEN_PORTRAIT
  static const FEATURE_SCREEN_PORTRAIT =
      r"""android.hardware.screen.portrait""";

  /// from: static public final java.lang.String FEATURE_SECURELY_REMOVES_USERS
  static const FEATURE_SECURELY_REMOVES_USERS =
      r"""android.software.securely_removes_users""";

  /// from: static public final java.lang.String FEATURE_SECURE_LOCK_SCREEN
  static const FEATURE_SECURE_LOCK_SCREEN =
      r"""android.software.secure_lock_screen""";

  /// from: static public final java.lang.String FEATURE_SECURITY_MODEL_COMPATIBLE
  static const FEATURE_SECURITY_MODEL_COMPATIBLE =
      r"""android.hardware.security.model.compatible""";

  /// from: static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER
  static const FEATURE_SENSOR_ACCELEROMETER =
      r"""android.hardware.sensor.accelerometer""";

  /// from: static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES
  static const FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES =
      r"""android.hardware.sensor.accelerometer_limited_axes""";

  /// from: static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED
  static const FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED =
      r"""android.hardware.sensor.accelerometer_limited_axes_uncalibrated""";

  /// from: static public final java.lang.String FEATURE_SENSOR_AMBIENT_TEMPERATURE
  static const FEATURE_SENSOR_AMBIENT_TEMPERATURE =
      r"""android.hardware.sensor.ambient_temperature""";

  /// from: static public final java.lang.String FEATURE_SENSOR_BAROMETER
  static const FEATURE_SENSOR_BAROMETER =
      r"""android.hardware.sensor.barometer""";

  /// from: static public final java.lang.String FEATURE_SENSOR_COMPASS
  static const FEATURE_SENSOR_COMPASS = r"""android.hardware.sensor.compass""";

  /// from: static public final java.lang.String FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER
  static const FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER =
      r"""android.hardware.sensor.dynamic.head_tracker""";

  /// from: static public final java.lang.String FEATURE_SENSOR_GYROSCOPE
  static const FEATURE_SENSOR_GYROSCOPE =
      r"""android.hardware.sensor.gyroscope""";

  /// from: static public final java.lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES
  static const FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES =
      r"""android.hardware.sensor.gyroscope_limited_axes""";

  /// from: static public final java.lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED
  static const FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED =
      r"""android.hardware.sensor.gyroscope_limited_axes_uncalibrated""";

  /// from: static public final java.lang.String FEATURE_SENSOR_HEADING
  static const FEATURE_SENSOR_HEADING = r"""android.hardware.sensor.heading""";

  /// from: static public final java.lang.String FEATURE_SENSOR_HEART_RATE
  static const FEATURE_SENSOR_HEART_RATE =
      r"""android.hardware.sensor.heartrate""";

  /// from: static public final java.lang.String FEATURE_SENSOR_HEART_RATE_ECG
  static const FEATURE_SENSOR_HEART_RATE_ECG =
      r"""android.hardware.sensor.heartrate.ecg""";

  /// from: static public final java.lang.String FEATURE_SENSOR_HINGE_ANGLE
  static const FEATURE_SENSOR_HINGE_ANGLE =
      r"""android.hardware.sensor.hinge_angle""";

  /// from: static public final java.lang.String FEATURE_SENSOR_LIGHT
  static const FEATURE_SENSOR_LIGHT = r"""android.hardware.sensor.light""";

  /// from: static public final java.lang.String FEATURE_SENSOR_PROXIMITY
  static const FEATURE_SENSOR_PROXIMITY =
      r"""android.hardware.sensor.proximity""";

  /// from: static public final java.lang.String FEATURE_SENSOR_RELATIVE_HUMIDITY
  static const FEATURE_SENSOR_RELATIVE_HUMIDITY =
      r"""android.hardware.sensor.relative_humidity""";

  /// from: static public final java.lang.String FEATURE_SENSOR_STEP_COUNTER
  static const FEATURE_SENSOR_STEP_COUNTER =
      r"""android.hardware.sensor.stepcounter""";

  /// from: static public final java.lang.String FEATURE_SENSOR_STEP_DETECTOR
  static const FEATURE_SENSOR_STEP_DETECTOR =
      r"""android.hardware.sensor.stepdetector""";

  /// from: static public final java.lang.String FEATURE_SE_OMAPI_ESE
  static const FEATURE_SE_OMAPI_ESE = r"""android.hardware.se.omapi.ese""";

  /// from: static public final java.lang.String FEATURE_SE_OMAPI_SD
  static const FEATURE_SE_OMAPI_SD = r"""android.hardware.se.omapi.sd""";

  /// from: static public final java.lang.String FEATURE_SE_OMAPI_UICC
  static const FEATURE_SE_OMAPI_UICC = r"""android.hardware.se.omapi.uicc""";

  /// from: static public final java.lang.String FEATURE_SIP
  static const FEATURE_SIP = r"""android.software.sip""";

  /// from: static public final java.lang.String FEATURE_SIP_VOIP
  static const FEATURE_SIP_VOIP = r"""android.software.sip.voip""";

  /// from: static public final java.lang.String FEATURE_STRONGBOX_KEYSTORE
  static const FEATURE_STRONGBOX_KEYSTORE =
      r"""android.hardware.strongbox_keystore""";

  /// from: static public final java.lang.String FEATURE_TELECOM
  static const FEATURE_TELECOM = r"""android.software.telecom""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY
  static const FEATURE_TELEPHONY = r"""android.hardware.telephony""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_CALLING
  static const FEATURE_TELEPHONY_CALLING =
      r"""android.hardware.telephony.calling""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_CDMA
  static const FEATURE_TELEPHONY_CDMA = r"""android.hardware.telephony.cdma""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_DATA
  static const FEATURE_TELEPHONY_DATA = r"""android.hardware.telephony.data""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_EUICC
  static const FEATURE_TELEPHONY_EUICC =
      r"""android.hardware.telephony.euicc""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_EUICC_MEP
  static const FEATURE_TELEPHONY_EUICC_MEP =
      r"""android.hardware.telephony.euicc.mep""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_GSM
  static const FEATURE_TELEPHONY_GSM = r"""android.hardware.telephony.gsm""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_IMS
  static const FEATURE_TELEPHONY_IMS = r"""android.hardware.telephony.ims""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_MBMS
  static const FEATURE_TELEPHONY_MBMS = r"""android.hardware.telephony.mbms""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_MESSAGING
  static const FEATURE_TELEPHONY_MESSAGING =
      r"""android.hardware.telephony.messaging""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_RADIO_ACCESS
  static const FEATURE_TELEPHONY_RADIO_ACCESS =
      r"""android.hardware.telephony.radio.access""";

  /// from: static public final java.lang.String FEATURE_TELEPHONY_SUBSCRIPTION
  static const FEATURE_TELEPHONY_SUBSCRIPTION =
      r"""android.hardware.telephony.subscription""";

  /// from: static public final java.lang.String FEATURE_TELEVISION
  static const FEATURE_TELEVISION = r"""android.hardware.type.television""";

  /// from: static public final java.lang.String FEATURE_TOUCHSCREEN
  static const FEATURE_TOUCHSCREEN = r"""android.hardware.touchscreen""";

  /// from: static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH
  static const FEATURE_TOUCHSCREEN_MULTITOUCH =
      r"""android.hardware.touchscreen.multitouch""";

  /// from: static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT
  static const FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT =
      r"""android.hardware.touchscreen.multitouch.distinct""";

  /// from: static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND
  static const FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND =
      r"""android.hardware.touchscreen.multitouch.jazzhand""";

  /// from: static public final java.lang.String FEATURE_USB_ACCESSORY
  static const FEATURE_USB_ACCESSORY = r"""android.hardware.usb.accessory""";

  /// from: static public final java.lang.String FEATURE_USB_HOST
  static const FEATURE_USB_HOST = r"""android.hardware.usb.host""";

  /// from: static public final java.lang.String FEATURE_UWB
  static const FEATURE_UWB = r"""android.hardware.uwb""";

  /// from: static public final java.lang.String FEATURE_VERIFIED_BOOT
  static const FEATURE_VERIFIED_BOOT = r"""android.software.verified_boot""";

  /// from: static public final java.lang.String FEATURE_VR_HEADTRACKING
  static const FEATURE_VR_HEADTRACKING =
      r"""android.hardware.vr.headtracking""";

  /// from: static public final java.lang.String FEATURE_VR_MODE
  static const FEATURE_VR_MODE = r"""android.software.vr.mode""";

  /// from: static public final java.lang.String FEATURE_VR_MODE_HIGH_PERFORMANCE
  static const FEATURE_VR_MODE_HIGH_PERFORMANCE =
      r"""android.hardware.vr.high_performance""";

  /// from: static public final java.lang.String FEATURE_VULKAN_DEQP_LEVEL
  static const FEATURE_VULKAN_DEQP_LEVEL =
      r"""android.software.vulkan.deqp.level""";

  /// from: static public final java.lang.String FEATURE_VULKAN_HARDWARE_COMPUTE
  static const FEATURE_VULKAN_HARDWARE_COMPUTE =
      r"""android.hardware.vulkan.compute""";

  /// from: static public final java.lang.String FEATURE_VULKAN_HARDWARE_LEVEL
  static const FEATURE_VULKAN_HARDWARE_LEVEL =
      r"""android.hardware.vulkan.level""";

  /// from: static public final java.lang.String FEATURE_VULKAN_HARDWARE_VERSION
  static const FEATURE_VULKAN_HARDWARE_VERSION =
      r"""android.hardware.vulkan.version""";

  /// from: static public final java.lang.String FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS
  static const FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS =
      r"""android.software.wallet_location_based_suggestions""";

  /// from: static public final java.lang.String FEATURE_WATCH
  static const FEATURE_WATCH = r"""android.hardware.type.watch""";

  /// from: static public final java.lang.String FEATURE_WEBVIEW
  static const FEATURE_WEBVIEW = r"""android.software.webview""";

  /// from: static public final java.lang.String FEATURE_WIFI
  static const FEATURE_WIFI = r"""android.hardware.wifi""";

  /// from: static public final java.lang.String FEATURE_WIFI_AWARE
  static const FEATURE_WIFI_AWARE = r"""android.hardware.wifi.aware""";

  /// from: static public final java.lang.String FEATURE_WIFI_DIRECT
  static const FEATURE_WIFI_DIRECT = r"""android.hardware.wifi.direct""";

  /// from: static public final java.lang.String FEATURE_WIFI_PASSPOINT
  static const FEATURE_WIFI_PASSPOINT = r"""android.hardware.wifi.passpoint""";

  /// from: static public final java.lang.String FEATURE_WIFI_RTT
  static const FEATURE_WIFI_RTT = r"""android.hardware.wifi.rtt""";

  /// from: static public final java.lang.String FEATURE_WINDOW_MAGNIFICATION
  static const FEATURE_WINDOW_MAGNIFICATION =
      r"""android.software.window_magnification""";

  /// from: static public final int FLAG_PERMISSION_WHITELIST_INSTALLER
  static const FLAG_PERMISSION_WHITELIST_INSTALLER = 2;

  /// from: static public final int FLAG_PERMISSION_WHITELIST_SYSTEM
  static const FLAG_PERMISSION_WHITELIST_SYSTEM = 1;

  /// from: static public final int FLAG_PERMISSION_WHITELIST_UPGRADE
  static const FLAG_PERMISSION_WHITELIST_UPGRADE = 4;

  /// from: static public final int GET_ACTIVITIES
  static const GET_ACTIVITIES = 1;

  /// from: static public final int GET_ATTRIBUTIONS
  static const GET_ATTRIBUTIONS = -2147483648;

  /// from: static public final long GET_ATTRIBUTIONS_LONG
  static const GET_ATTRIBUTIONS_LONG = 2147483648;

  /// from: static public final int GET_CONFIGURATIONS
  static const GET_CONFIGURATIONS = 16384;

  /// from: static public final int GET_DISABLED_COMPONENTS
  static const GET_DISABLED_COMPONENTS = 512;

  /// from: static public final int GET_DISABLED_UNTIL_USED_COMPONENTS
  static const GET_DISABLED_UNTIL_USED_COMPONENTS = 32768;

  /// from: static public final int GET_GIDS
  static const GET_GIDS = 256;

  /// from: static public final int GET_INSTRUMENTATION
  static const GET_INSTRUMENTATION = 16;

  /// from: static public final int GET_INTENT_FILTERS
  static const GET_INTENT_FILTERS = 32;

  /// from: static public final int GET_META_DATA
  static const GET_META_DATA = 128;

  /// from: static public final int GET_PERMISSIONS
  static const GET_PERMISSIONS = 4096;

  /// from: static public final int GET_PROVIDERS
  static const GET_PROVIDERS = 8;

  /// from: static public final int GET_RECEIVERS
  static const GET_RECEIVERS = 2;

  /// from: static public final int GET_RESOLVED_FILTER
  static const GET_RESOLVED_FILTER = 64;

  /// from: static public final int GET_SERVICES
  static const GET_SERVICES = 4;

  /// from: static public final int GET_SHARED_LIBRARY_FILES
  static const GET_SHARED_LIBRARY_FILES = 1024;

  /// from: static public final int GET_SIGNATURES
  static const GET_SIGNATURES = 64;

  /// from: static public final int GET_SIGNING_CERTIFICATES
  static const GET_SIGNING_CERTIFICATES = 134217728;

  /// from: static public final int GET_UNINSTALLED_PACKAGES
  static const GET_UNINSTALLED_PACKAGES = 8192;

  /// from: static public final int GET_URI_PERMISSION_PATTERNS
  static const GET_URI_PERMISSION_PATTERNS = 2048;

  /// from: static public final int INSTALL_REASON_DEVICE_RESTORE
  static const INSTALL_REASON_DEVICE_RESTORE = 2;

  /// from: static public final int INSTALL_REASON_DEVICE_SETUP
  static const INSTALL_REASON_DEVICE_SETUP = 3;

  /// from: static public final int INSTALL_REASON_POLICY
  static const INSTALL_REASON_POLICY = 1;

  /// from: static public final int INSTALL_REASON_UNKNOWN
  static const INSTALL_REASON_UNKNOWN = 0;

  /// from: static public final int INSTALL_REASON_USER
  static const INSTALL_REASON_USER = 4;

  /// from: static public final int INSTALL_SCENARIO_BULK
  static const INSTALL_SCENARIO_BULK = 2;

  /// from: static public final int INSTALL_SCENARIO_BULK_SECONDARY
  static const INSTALL_SCENARIO_BULK_SECONDARY = 3;

  /// from: static public final int INSTALL_SCENARIO_DEFAULT
  static const INSTALL_SCENARIO_DEFAULT = 0;

  /// from: static public final int INSTALL_SCENARIO_FAST
  static const INSTALL_SCENARIO_FAST = 1;

  /// from: static public final int MATCH_ALL
  static const MATCH_ALL = 131072;

  /// from: static public final int MATCH_APEX
  static const MATCH_APEX = 1073741824;

  /// from: static public final int MATCH_DEFAULT_ONLY
  static const MATCH_DEFAULT_ONLY = 65536;

  /// from: static public final int MATCH_DIRECT_BOOT_AUTO
  static const MATCH_DIRECT_BOOT_AUTO = 268435456;

  /// from: static public final int MATCH_DIRECT_BOOT_AWARE
  static const MATCH_DIRECT_BOOT_AWARE = 524288;

  /// from: static public final int MATCH_DIRECT_BOOT_UNAWARE
  static const MATCH_DIRECT_BOOT_UNAWARE = 262144;

  /// from: static public final int MATCH_DISABLED_COMPONENTS
  static const MATCH_DISABLED_COMPONENTS = 512;

  /// from: static public final int MATCH_DISABLED_UNTIL_USED_COMPONENTS
  static const MATCH_DISABLED_UNTIL_USED_COMPONENTS = 32768;

  /// from: static public final int MATCH_SYSTEM_ONLY
  static const MATCH_SYSTEM_ONLY = 1048576;

  /// from: static public final int MATCH_UNINSTALLED_PACKAGES
  static const MATCH_UNINSTALLED_PACKAGES = 8192;

  /// from: static public final long MAXIMUM_VERIFICATION_TIMEOUT
  static const MAXIMUM_VERIFICATION_TIMEOUT = 3600000;

  /// from: static public final int PERMISSION_DENIED
  static const PERMISSION_DENIED = -1;

  /// from: static public final int PERMISSION_GRANTED
  static const PERMISSION_GRANTED = 0;

  /// from: static public final java.lang.String PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT
  static const PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT =
      r"""android.camera.PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT""";

  /// from: static public final java.lang.String PROPERTY_MEDIA_CAPABILITIES
  static const PROPERTY_MEDIA_CAPABILITIES =
      r"""android.media.PROPERTY_MEDIA_CAPABILITIES""";

  /// from: static public final java.lang.String PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES
  static const PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES =
      r"""android.net.PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES""";

  /// from: static public final java.lang.String PROPERTY_SPECIAL_USE_FGS_SUBTYPE
  static const PROPERTY_SPECIAL_USE_FGS_SUBTYPE =
      r"""android.app.PROPERTY_SPECIAL_USE_FGS_SUBTYPE""";

  /// from: static public final int SIGNATURE_FIRST_NOT_SIGNED
  static const SIGNATURE_FIRST_NOT_SIGNED = -1;

  /// from: static public final int SIGNATURE_MATCH
  static const SIGNATURE_MATCH = 0;

  /// from: static public final int SIGNATURE_NEITHER_SIGNED
  static const SIGNATURE_NEITHER_SIGNED = 1;

  /// from: static public final int SIGNATURE_NO_MATCH
  static const SIGNATURE_NO_MATCH = -3;

  /// from: static public final int SIGNATURE_SECOND_NOT_SIGNED
  static const SIGNATURE_SECOND_NOT_SIGNED = -2;

  /// from: static public final int SIGNATURE_UNKNOWN_PACKAGE
  static const SIGNATURE_UNKNOWN_PACKAGE = -4;

  /// from: static public final int SYNCHRONOUS
  static const SYNCHRONOUS = 2;

  static final _id_TRUST_ALL = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"TRUST_ALL",
    r"Ljava/util/List;",
  );

  /// from: static public final java.util.List TRUST_ALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<jni.JObject> get TRUST_ALL =>
      const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_TRUST_ALL, jni.JniCallType.objectType)
          .object);

  static final _id_TRUST_NONE = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"TRUST_NONE",
    r"Ljava/util/List;",
  );

  /// from: static public final java.util.List TRUST_NONE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<jni.JObject> get TRUST_NONE =>
      const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_TRUST_NONE, jni.JniCallType.objectType)
          .object);

  /// from: static public final int VERIFICATION_ALLOW
  static const VERIFICATION_ALLOW = 1;

  /// from: static public final int VERIFICATION_REJECT
  static const VERIFICATION_REJECT = -1;

  /// from: static public final int VERSION_CODE_HIGHEST
  static const VERSION_CODE_HIGHEST = -1;

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager() {
    return PackageManager.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getPackageInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageInfo",
      r"(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;");

  /// from: public abstract android.content.pm.PackageInfo getPackageInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageInfo(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageInfo,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getPackageInfo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageInfo",
      r"(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;");

  /// from: public android.content.pm.PackageInfo getPackageInfo(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageInfo1(
    jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageInfo1,
        jni.JniCallType.objectType,
        [string.reference, packageInfoFlags.reference]).object);
  }

  static final _id_getPackageInfo2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageInfo",
      r"(Landroid/content/pm/VersionedPackage;I)Landroid/content/pm/PackageInfo;");

  /// from: public abstract android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage versionedPackage, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageInfo2(
    jni.JObject versionedPackage,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageInfo2,
        jni.JniCallType.objectType,
        [versionedPackage.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getPackageInfo3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageInfo",
      r"(Landroid/content/pm/VersionedPackage;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;");

  /// from: public android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage versionedPackage, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageInfo3(
    jni.JObject versionedPackage,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageInfo3,
        jni.JniCallType.objectType,
        [versionedPackage.reference, packageInfoFlags.reference]).object);
  }

  static final _id_currentToCanonicalPackageNames = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"currentToCanonicalPackageNames",
          r"([Ljava/lang/String;)[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] currentToCanonicalPackageNames(java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> currentToCanonicalPackageNames(
    jni.JArray<jni.JString> strings,
  ) {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_currentToCanonicalPackageNames,
            jni.JniCallType.objectType, [strings.reference]).object);
  }

  static final _id_canonicalToCurrentPackageNames = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"canonicalToCurrentPackageNames",
          r"([Ljava/lang/String;)[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> canonicalToCurrentPackageNames(
    jni.JArray<jni.JString> strings,
  ) {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_canonicalToCurrentPackageNames,
            jni.JniCallType.objectType, [strings.reference]).object);
  }

  static final _id_getLaunchIntentForPackage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getLaunchIntentForPackage",
      r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent getLaunchIntentForPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent getLaunchIntentForPackage(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLaunchIntentForPackage,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getLeanbackLaunchIntentForPackage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLeanbackLaunchIntentForPackage",
          r"(Ljava/lang/String;)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent getLeanbackLaunchIntentForPackage(
    jni.JString string,
  ) {
    return const $IntentType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLeanbackLaunchIntentForPackage,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getLaunchIntentSenderForPackage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLaunchIntentSenderForPackage",
          r"(Ljava/lang/String;)Landroid/content/IntentSender;");

  /// from: public android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLaunchIntentSenderForPackage(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLaunchIntentSenderForPackage,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getPackageGids = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageGids", r"(Ljava/lang/String;)[I");

  /// from: public abstract int[] getPackageGids(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getPackageGids(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getPackageGids,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getPackageGids1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageGids", r"(Ljava/lang/String;I)[I");

  /// from: public abstract int[] getPackageGids(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getPackageGids1(
    jni.JString string,
    int i,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getPackageGids1,
            jni.JniCallType.objectType,
            [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getPackageGids2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageGids",
      r"(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)[I");

  /// from: public int[] getPackageGids(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getPackageGids2(
    jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getPackageGids2,
            jni.JniCallType.objectType,
            [string.reference, packageInfoFlags.reference]).object);
  }

  static final _id_getPackageUid = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageUid", r"(Ljava/lang/String;I)I");

  /// from: public abstract int getPackageUid(java.lang.String string, int i)
  int getPackageUid(
    jni.JString string,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getPackageUid,
        jni.JniCallType.intType, [string.reference, jni.JValueInt(i)]).integer;
  }

  static final _id_getPackageUid1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageUid",
      r"(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)I");

  /// from: public int getPackageUid(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  int getPackageUid1(
    jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageUid1,
        jni.JniCallType.intType,
        [string.reference, packageInfoFlags.reference]).integer;
  }

  static final _id_getPermissionInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPermissionInfo",
      r"(Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;");

  /// from: public abstract android.content.pm.PermissionInfo getPermissionInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPermissionInfo(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPermissionInfo,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_queryPermissionsByGroup = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryPermissionsByGroup",
      r"(Ljava/lang/String;I)Ljava/util/List;");

  /// from: public abstract java.util.List queryPermissionsByGroup(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryPermissionsByGroup(
    jni.JString string,
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryPermissionsByGroup,
            jni.JniCallType.objectType,
            [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getPermissionGroupInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPermissionGroupInfo",
      r"(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;");

  /// from: public abstract android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPermissionGroupInfo(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPermissionGroupInfo,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getAllPermissionGroups = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getAllPermissionGroups", r"(I)Ljava/util/List;");

  /// from: public abstract java.util.List getAllPermissionGroups(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getAllPermissionGroups(
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getAllPermissionGroups,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_getPlatformPermissionsForGroup = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPlatformPermissionsForGroup",
      r"(Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V");

  /// from: public void getPlatformPermissionsForGroup(java.lang.String string, java.util.concurrent.Executor executor, java.util.function.Consumer consumer)
  void getPlatformPermissionsForGroup(
    jni.JString string,
    Executor executor,
    jni.JObject consumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPlatformPermissionsForGroup,
        jni.JniCallType.voidType,
        [string.reference, executor.reference, consumer.reference]).check();
  }

  static final _id_getGroupOfPlatformPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getGroupOfPlatformPermission",
      r"(Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V");

  /// from: public void getGroupOfPlatformPermission(java.lang.String string, java.util.concurrent.Executor executor, java.util.function.Consumer consumer)
  void getGroupOfPlatformPermission(
    jni.JString string,
    Executor executor,
    jni.JObject consumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getGroupOfPlatformPermission,
        jni.JniCallType.voidType,
        [string.reference, executor.reference, consumer.reference]).check();
  }

  static final _id_getApplicationInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationInfo",
      r"(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;");

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationInfo(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationInfo,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getApplicationInfo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationInfo",
      r"(Ljava/lang/String;Landroid/content/pm/PackageManager$ApplicationInfoFlags;)Landroid/content/pm/ApplicationInfo;");

  /// from: public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String string, android.content.pm.PackageManager$ApplicationInfoFlags applicationInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationInfo1(
    jni.JString string,
    PackageManager_ApplicationInfoFlags applicationInfoFlags,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationInfo1,
        jni.JniCallType.objectType,
        [string.reference, applicationInfoFlags.reference]).object);
  }

  static final _id_getTargetSdkVersion = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getTargetSdkVersion", r"(Ljava/lang/String;)I");

  /// from: public int getTargetSdkVersion(java.lang.String string)
  int getTargetSdkVersion(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getTargetSdkVersion,
        jni.JniCallType.intType,
        [string.reference]).integer;
  }

  static final _id_getActivityInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getActivityInfo",
      r"(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;");

  /// from: public abstract android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  ActivityInfo getActivityInfo(
    jni.JObject componentName,
    int i,
  ) {
    return const $ActivityInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getActivityInfo,
            jni.JniCallType.objectType,
            [componentName.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getActivityInfo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getActivityInfo",
      r"(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ActivityInfo;");

  /// from: public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  ActivityInfo getActivityInfo1(
    jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return const $ActivityInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getActivityInfo1,
            jni.JniCallType.objectType,
            [componentName.reference, componentInfoFlags.reference]).object);
  }

  static final _id_getReceiverInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getReceiverInfo",
      r"(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;");

  /// from: public abstract android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  ActivityInfo getReceiverInfo(
    jni.JObject componentName,
    int i,
  ) {
    return const $ActivityInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getReceiverInfo,
            jni.JniCallType.objectType,
            [componentName.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getReceiverInfo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getReceiverInfo",
      r"(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ActivityInfo;");

  /// from: public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  ActivityInfo getReceiverInfo1(
    jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return const $ActivityInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getReceiverInfo1,
            jni.JniCallType.objectType,
            [componentName.reference, componentInfoFlags.reference]).object);
  }

  static final _id_getServiceInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getServiceInfo",
      r"(Landroid/content/ComponentName;I)Landroid/content/pm/ServiceInfo;");

  /// from: public abstract android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getServiceInfo(
    jni.JObject componentName,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getServiceInfo,
        jni.JniCallType.objectType,
        [componentName.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getServiceInfo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getServiceInfo",
      r"(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ServiceInfo;");

  /// from: public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getServiceInfo1(
    jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getServiceInfo1,
        jni.JniCallType.objectType,
        [componentName.reference, componentInfoFlags.reference]).object);
  }

  static final _id_getProviderInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getProviderInfo",
      r"(Landroid/content/ComponentName;I)Landroid/content/pm/ProviderInfo;");

  /// from: public abstract android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getProviderInfo(
    jni.JObject componentName,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getProviderInfo,
        jni.JniCallType.objectType,
        [componentName.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getProviderInfo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getProviderInfo",
      r"(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ProviderInfo;");

  /// from: public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getProviderInfo1(
    jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getProviderInfo1,
        jni.JniCallType.objectType,
        [componentName.reference, componentInfoFlags.reference]).object);
  }

  static final _id_getModuleInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getModuleInfo",
      r"(Ljava/lang/String;I)Landroid/content/pm/ModuleInfo;");

  /// from: public android.content.pm.ModuleInfo getModuleInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getModuleInfo(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getModuleInfo,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getInstalledModules = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getInstalledModules", r"(I)Ljava/util/List;");

  /// from: public java.util.List getInstalledModules(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getInstalledModules(
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getInstalledModules,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_getInstalledPackages = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getInstalledPackages", r"(I)Ljava/util/List;");

  /// from: public abstract java.util.List getInstalledPackages(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getInstalledPackages(
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getInstalledPackages,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_getInstalledPackages1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getInstalledPackages",
      r"(Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List getInstalledPackages(android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getInstalledPackages1(
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getInstalledPackages1,
            jni.JniCallType.objectType, [packageInfoFlags.reference]).object);
  }

  static final _id_getPackagesHoldingPermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getPackagesHoldingPermissions",
          r"([Ljava/lang/String;I)Ljava/util/List;");

  /// from: public abstract java.util.List getPackagesHoldingPermissions(java.lang.Object[] strings, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getPackagesHoldingPermissions(
    jni.JArray<jni.JString> strings,
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getPackagesHoldingPermissions,
            jni.JniCallType.objectType,
            [strings.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getPackagesHoldingPermissions1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackagesHoldingPermissions",
      r"([Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List getPackagesHoldingPermissions(java.lang.Object[] strings, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getPackagesHoldingPermissions1(
    jni.JArray<jni.JString> strings,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getPackagesHoldingPermissions1,
            jni.JniCallType.objectType,
            [strings.reference, packageInfoFlags.reference]).object);
  }

  static final _id_checkPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkPermission",
      r"(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: public abstract int checkPermission(java.lang.String string, java.lang.String string1)
  int checkPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_checkPermission,
        jni.JniCallType.intType, [string.reference, string1.reference]).integer;
  }

  static final _id_isPermissionRevokedByPolicy = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isPermissionRevokedByPolicy",
          r"(Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: public abstract boolean isPermissionRevokedByPolicy(java.lang.String string, java.lang.String string1)
  bool isPermissionRevokedByPolicy(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isPermissionRevokedByPolicy,
        jni.JniCallType.booleanType,
        [string.reference, string1.reference]).boolean;
  }

  static final _id_addPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addPermission",
      r"(Landroid/content/pm/PermissionInfo;)Z");

  /// from: public abstract boolean addPermission(android.content.pm.PermissionInfo permissionInfo)
  bool addPermission(
    jni.JObject permissionInfo,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_addPermission,
        jni.JniCallType.booleanType, [permissionInfo.reference]).boolean;
  }

  static final _id_addPermissionAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addPermissionAsync",
      r"(Landroid/content/pm/PermissionInfo;)Z");

  /// from: public abstract boolean addPermissionAsync(android.content.pm.PermissionInfo permissionInfo)
  bool addPermissionAsync(
    jni.JObject permissionInfo,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addPermissionAsync,
        jni.JniCallType.booleanType,
        [permissionInfo.reference]).boolean;
  }

  static final _id_removePermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"removePermission", r"(Ljava/lang/String;)V");

  /// from: public abstract void removePermission(java.lang.String string)
  void removePermission(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_removePermission,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_getWhitelistedRestrictedPermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getWhitelistedRestrictedPermissions",
          r"(Ljava/lang/String;I)Ljava/util/Set;");

  /// from: public java.util.Set getWhitelistedRestrictedPermissions(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getWhitelistedRestrictedPermissions(
    jni.JString string,
    int i,
  ) {
    return const jni.JSetType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getWhitelistedRestrictedPermissions,
            jni.JniCallType.objectType,
            [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_addWhitelistedRestrictedPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"addWhitelistedRestrictedPermission",
          r"(Ljava/lang/String;Ljava/lang/String;I)Z");

  /// from: public boolean addWhitelistedRestrictedPermission(java.lang.String string, java.lang.String string1, int i)
  bool addWhitelistedRestrictedPermission(
    jni.JString string,
    jni.JString string1,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addWhitelistedRestrictedPermission,
        jni.JniCallType.booleanType,
        [string.reference, string1.reference, jni.JValueInt(i)]).boolean;
  }

  static final _id_removeWhitelistedRestrictedPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"removeWhitelistedRestrictedPermission",
          r"(Ljava/lang/String;Ljava/lang/String;I)Z");

  /// from: public boolean removeWhitelistedRestrictedPermission(java.lang.String string, java.lang.String string1, int i)
  bool removeWhitelistedRestrictedPermission(
    jni.JString string,
    jni.JString string1,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removeWhitelistedRestrictedPermission,
        jni.JniCallType.booleanType,
        [string.reference, string1.reference, jni.JValueInt(i)]).boolean;
  }

  static final _id_setAutoRevokeWhitelisted = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setAutoRevokeWhitelisted", r"(Ljava/lang/String;Z)Z");

  /// from: public boolean setAutoRevokeWhitelisted(java.lang.String string, boolean z)
  bool setAutoRevokeWhitelisted(
    jni.JString string,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setAutoRevokeWhitelisted,
        jni.JniCallType.booleanType,
        [string.reference, z ? 1 : 0]).boolean;
  }

  static final _id_isAutoRevokeWhitelisted = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"isAutoRevokeWhitelisted", r"(Ljava/lang/String;)Z");

  /// from: public boolean isAutoRevokeWhitelisted(java.lang.String string)
  bool isAutoRevokeWhitelisted(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isAutoRevokeWhitelisted,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_getBackgroundPermissionOptionLabel = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBackgroundPermissionOptionLabel",
          r"()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getBackgroundPermissionOptionLabel()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBackgroundPermissionOptionLabel() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBackgroundPermissionOptionLabel,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_checkSignatures = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkSignatures",
      r"(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: public abstract int checkSignatures(java.lang.String string, java.lang.String string1)
  int checkSignatures(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_checkSignatures,
        jni.JniCallType.intType, [string.reference, string1.reference]).integer;
  }

  static final _id_checkSignatures1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"checkSignatures", r"(II)I");

  /// from: public abstract int checkSignatures(int i, int i1)
  int checkSignatures1(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_checkSignatures1,
        jni.JniCallType.intType, [jni.JValueInt(i), jni.JValueInt(i1)]).integer;
  }

  static final _id_getPackagesForUid = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackagesForUid", r"(I)[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] getPackagesForUid(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getPackagesForUid(
    int i,
  ) {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getPackagesForUid,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_getNameForUid = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getNameForUid", r"(I)Ljava/lang/String;");

  /// from: public abstract java.lang.String getNameForUid(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getNameForUid(
    int i,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getNameForUid,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getInstalledApplications = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getInstalledApplications", r"(I)Ljava/util/List;");

  /// from: public abstract java.util.List getInstalledApplications(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getInstalledApplications(
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getInstalledApplications,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_getInstalledApplications1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getInstalledApplications",
      r"(Landroid/content/pm/PackageManager$ApplicationInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List getInstalledApplications(android.content.pm.PackageManager$ApplicationInfoFlags applicationInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getInstalledApplications1(
    PackageManager_ApplicationInfoFlags applicationInfoFlags,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getInstalledApplications1,
            jni.JniCallType.objectType,
            [applicationInfoFlags.reference]).object);
  }

  static final _id_isInstantApp = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isInstantApp", r"()Z");

  /// from: public abstract boolean isInstantApp()
  bool isInstantApp() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isInstantApp, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isInstantApp1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"isInstantApp", r"(Ljava/lang/String;)Z");

  /// from: public abstract boolean isInstantApp(java.lang.String string)
  bool isInstantApp1(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_isInstantApp1,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_getInstantAppCookieMaxBytes = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getInstantAppCookieMaxBytes", r"()I");

  /// from: public abstract int getInstantAppCookieMaxBytes()
  int getInstantAppCookieMaxBytes() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getInstantAppCookieMaxBytes, jni.JniCallType.intType, []).integer;
  }

  static final _id_getInstantAppCookie = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getInstantAppCookie", r"()[B");

  /// from: public abstract byte[] getInstantAppCookie()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getInstantAppCookie() {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getInstantAppCookie,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_clearInstantAppCookie = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearInstantAppCookie", r"()V");

  /// from: public abstract void clearInstantAppCookie()
  void clearInstantAppCookie() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_clearInstantAppCookie, jni.JniCallType.voidType, []).check();
  }

  static final _id_updateInstantAppCookie = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"updateInstantAppCookie", r"([B)V");

  /// from: public abstract void updateInstantAppCookie(byte[] bs)
  void updateInstantAppCookie(
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_updateInstantAppCookie,
        jni.JniCallType.voidType,
        [bs.reference]).check();
  }

  static final _id_getSystemSharedLibraryNames = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getSystemSharedLibraryNames",
          r"()[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] getSystemSharedLibraryNames()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getSystemSharedLibraryNames() {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getSystemSharedLibraryNames,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getSharedLibraries = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSharedLibraries", r"(I)Ljava/util/List;");

  /// from: public abstract java.util.List getSharedLibraries(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getSharedLibraries(
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getSharedLibraries,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_getSharedLibraries1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSharedLibraries",
      r"(Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List getSharedLibraries(android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getSharedLibraries1(
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getSharedLibraries1,
            jni.JniCallType.objectType, [packageInfoFlags.reference]).object);
  }

  static final _id_getChangedPackages = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getChangedPackages",
      r"(I)Landroid/content/pm/ChangedPackages;");

  /// from: public abstract android.content.pm.ChangedPackages getChangedPackages(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getChangedPackages(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getChangedPackages,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getSystemAvailableFeatures = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemAvailableFeatures",
      r"()[Landroid/content/pm/FeatureInfo;");

  /// from: public abstract android.content.pm.FeatureInfo[] getSystemAvailableFeatures()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getSystemAvailableFeatures() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getSystemAvailableFeatures,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_hasSystemFeature = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"hasSystemFeature", r"(Ljava/lang/String;)Z");

  /// from: public abstract boolean hasSystemFeature(java.lang.String string)
  bool hasSystemFeature(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_hasSystemFeature,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_hasSystemFeature1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"hasSystemFeature", r"(Ljava/lang/String;I)Z");

  /// from: public abstract boolean hasSystemFeature(java.lang.String string, int i)
  bool hasSystemFeature1(
    jni.JString string,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_hasSystemFeature1,
        jni.JniCallType.booleanType,
        [string.reference, jni.JValueInt(i)]).boolean;
  }

  static final _id_resolveActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveActivity",
      r"(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;");

  /// from: public abstract android.content.pm.ResolveInfo resolveActivity(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  ResolveInfo resolveActivity(
    Intent intent,
    int i,
  ) {
    return const $ResolveInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_resolveActivity,
            jni.JniCallType.objectType,
            [intent.reference, jni.JValueInt(i)]).object);
  }

  static final _id_resolveActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveActivity",
      r"(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Landroid/content/pm/ResolveInfo;");

  /// from: public android.content.pm.ResolveInfo resolveActivity(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  ResolveInfo resolveActivity1(
    Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return const $ResolveInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_resolveActivity1,
            jni.JniCallType.objectType,
            [intent.reference, resolveInfoFlags.reference]).object);
  }

  static final _id_queryIntentActivities = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryIntentActivities",
      r"(Landroid/content/Intent;I)Ljava/util/List;");

  /// from: public abstract java.util.List queryIntentActivities(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryIntentActivities(
    Intent intent,
    int i,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryIntentActivities,
            jni.JniCallType.objectType,
            [intent.reference, jni.JValueInt(i)]).object);
  }

  static final _id_queryIntentActivities1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryIntentActivities",
      r"(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List queryIntentActivities(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryIntentActivities1(
    Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryIntentActivities1,
            jni.JniCallType.objectType,
            [intent.reference, resolveInfoFlags.reference]).object);
  }

  static final _id_queryIntentActivityOptions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryIntentActivityOptions",
      r"(Landroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I)Ljava/util/List;");

  /// from: public abstract java.util.List queryIntentActivityOptions(android.content.ComponentName componentName, java.lang.Object[] intents, android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryIntentActivityOptions(
    jni.JObject componentName,
    jni.JArray<Intent> intents,
    Intent intent,
    int i,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_queryIntentActivityOptions,
            jni.JniCallType.objectType, [
      componentName.reference,
      intents.reference,
      intent.reference,
      jni.JValueInt(i)
    ]).object);
  }

  static final _id_queryIntentActivityOptions1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryIntentActivityOptions",
      r"(Landroid/content/ComponentName;Ljava/util/List;Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List queryIntentActivityOptions(android.content.ComponentName componentName, java.util.List list, android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryIntentActivityOptions1(
    jni.JObject componentName,
    jni.JList<Intent> list,
    Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_queryIntentActivityOptions1,
            jni.JniCallType.objectType, [
      componentName.reference,
      list.reference,
      intent.reference,
      resolveInfoFlags.reference
    ]).object);
  }

  static final _id_queryBroadcastReceivers = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryBroadcastReceivers",
      r"(Landroid/content/Intent;I)Ljava/util/List;");

  /// from: public abstract java.util.List queryBroadcastReceivers(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryBroadcastReceivers(
    Intent intent,
    int i,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryBroadcastReceivers,
            jni.JniCallType.objectType,
            [intent.reference, jni.JValueInt(i)]).object);
  }

  static final _id_queryBroadcastReceivers1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryBroadcastReceivers",
      r"(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List queryBroadcastReceivers(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryBroadcastReceivers1(
    Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryBroadcastReceivers1,
            jni.JniCallType.objectType,
            [intent.reference, resolveInfoFlags.reference]).object);
  }

  static final _id_resolveService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveService",
      r"(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;");

  /// from: public abstract android.content.pm.ResolveInfo resolveService(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  ResolveInfo resolveService(
    Intent intent,
    int i,
  ) {
    return const $ResolveInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_resolveService,
            jni.JniCallType.objectType,
            [intent.reference, jni.JValueInt(i)]).object);
  }

  static final _id_resolveService1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveService",
      r"(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Landroid/content/pm/ResolveInfo;");

  /// from: public android.content.pm.ResolveInfo resolveService(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  ResolveInfo resolveService1(
    Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return const $ResolveInfoType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_resolveService1,
            jni.JniCallType.objectType,
            [intent.reference, resolveInfoFlags.reference]).object);
  }

  static final _id_queryIntentServices = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryIntentServices",
      r"(Landroid/content/Intent;I)Ljava/util/List;");

  /// from: public abstract java.util.List queryIntentServices(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryIntentServices(
    Intent intent,
    int i,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryIntentServices,
            jni.JniCallType.objectType,
            [intent.reference, jni.JValueInt(i)]).object);
  }

  static final _id_queryIntentServices1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryIntentServices",
      r"(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List queryIntentServices(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryIntentServices1(
    Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryIntentServices1,
            jni.JniCallType.objectType,
            [intent.reference, resolveInfoFlags.reference]).object);
  }

  static final _id_queryIntentContentProviders = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"queryIntentContentProviders",
          r"(Landroid/content/Intent;I)Ljava/util/List;");

  /// from: public abstract java.util.List queryIntentContentProviders(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryIntentContentProviders(
    Intent intent,
    int i,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryIntentContentProviders,
            jni.JniCallType.objectType,
            [intent.reference, jni.JValueInt(i)]).object);
  }

  static final _id_queryIntentContentProviders1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryIntentContentProviders",
      r"(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List queryIntentContentProviders(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ResolveInfo> queryIntentContentProviders1(
    Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return const jni.JListType($ResolveInfoType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryIntentContentProviders1,
            jni.JniCallType.objectType,
            [intent.reference, resolveInfoFlags.reference]).object);
  }

  static final _id_resolveContentProvider = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveContentProvider",
      r"(Ljava/lang/String;I)Landroid/content/pm/ProviderInfo;");

  /// from: public abstract android.content.pm.ProviderInfo resolveContentProvider(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveContentProvider(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_resolveContentProvider,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_resolveContentProvider1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveContentProvider",
      r"(Ljava/lang/String;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ProviderInfo;");

  /// from: public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String string, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveContentProvider1(
    jni.JString string,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_resolveContentProvider1,
        jni.JniCallType.objectType,
        [string.reference, componentInfoFlags.reference]).object);
  }

  static final _id_queryContentProviders = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryContentProviders",
      r"(Ljava/lang/String;II)Ljava/util/List;");

  /// from: public abstract java.util.List queryContentProviders(java.lang.String string, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryContentProviders(
    jni.JString string,
    int i,
    int i1,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryContentProviders,
            jni.JniCallType.objectType,
            [string.reference, jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_queryContentProviders1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryContentProviders",
      r"(Ljava/lang/String;ILandroid/content/pm/PackageManager$ComponentInfoFlags;)Ljava/util/List;");

  /// from: public java.util.List queryContentProviders(java.lang.String string, int i, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryContentProviders1(
    jni.JString string,
    int i,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_queryContentProviders1, jni.JniCallType.objectType, [
      string.reference,
      jni.JValueInt(i),
      componentInfoFlags.reference
    ]).object);
  }

  static final _id_getInstrumentationInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getInstrumentationInfo",
      r"(Landroid/content/ComponentName;I)Landroid/content/pm/InstrumentationInfo;");

  /// from: public abstract android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getInstrumentationInfo(
    jni.JObject componentName,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getInstrumentationInfo,
        jni.JniCallType.objectType,
        [componentName.reference, jni.JValueInt(i)]).object);
  }

  static final _id_queryInstrumentation = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryInstrumentation",
      r"(Ljava/lang/String;I)Ljava/util/List;");

  /// from: public abstract java.util.List queryInstrumentation(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryInstrumentation(
    jni.JString string,
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_queryInstrumentation,
            jni.JniCallType.objectType,
            [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getDrawable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDrawable",
      r"(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getDrawable(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    jni.JString string,
    int i,
    jni.JObject applicationInfo,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDrawable, jni.JniCallType.objectType, [
      string.reference,
      jni.JValueInt(i),
      applicationInfo.reference
    ]).object);
  }

  static final _id_getActivityIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getActivityIcon",
      r"(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityIcon(
    jni.JObject componentName,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getActivityIcon,
        jni.JniCallType.objectType,
        [componentName.reference]).object);
  }

  static final _id_getActivityIcon1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getActivityIcon",
      r"(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getActivityIcon(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityIcon1(
    Intent intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getActivityIcon1,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_getActivityBanner = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getActivityBanner",
      r"(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityBanner(
    jni.JObject componentName,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getActivityBanner,
        jni.JniCallType.objectType,
        [componentName.reference]).object);
  }

  static final _id_getActivityBanner1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getActivityBanner",
      r"(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getActivityBanner(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityBanner1(
    Intent intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getActivityBanner1,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_getDefaultActivityIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDefaultActivityIcon",
      r"()Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getDefaultActivityIcon()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDefaultActivityIcon() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getDefaultActivityIcon,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getApplicationIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationIcon",
      r"(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationIcon(
    jni.JObject applicationInfo,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationIcon,
        jni.JniCallType.objectType,
        [applicationInfo.reference]).object);
  }

  static final _id_getApplicationIcon1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationIcon",
      r"(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getApplicationIcon(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationIcon1(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationIcon1,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getApplicationBanner = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationBanner",
      r"(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationBanner(
    jni.JObject applicationInfo,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationBanner,
        jni.JniCallType.objectType,
        [applicationInfo.reference]).object);
  }

  static final _id_getApplicationBanner1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationBanner",
      r"(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getApplicationBanner(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationBanner1(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationBanner1,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getActivityLogo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getActivityLogo",
      r"(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityLogo(
    jni.JObject componentName,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getActivityLogo,
        jni.JniCallType.objectType,
        [componentName.reference]).object);
  }

  static final _id_getActivityLogo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getActivityLogo",
      r"(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getActivityLogo(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityLogo1(
    Intent intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getActivityLogo1,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_getApplicationLogo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationLogo",
      r"(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationLogo(
    jni.JObject applicationInfo,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationLogo,
        jni.JniCallType.objectType,
        [applicationInfo.reference]).object);
  }

  static final _id_getApplicationLogo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationLogo",
      r"(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getApplicationLogo(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationLogo1(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationLogo1,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getUserBadgedIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getUserBadgedIcon",
      r"(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable drawable, android.os.UserHandle userHandle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserBadgedIcon(
    jni.JObject drawable,
    jni.JObject userHandle,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getUserBadgedIcon,
        jni.JniCallType.objectType,
        [drawable.reference, userHandle.reference]).object);
  }

  static final _id_getUserBadgedDrawableForDensity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getUserBadgedDrawableForDensity",
          r"(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;Landroid/graphics/Rect;I)Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable drawable, android.os.UserHandle userHandle, android.graphics.Rect rect, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserBadgedDrawableForDensity(
    jni.JObject drawable,
    jni.JObject userHandle,
    jni.JObject rect,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getUserBadgedDrawableForDensity,
        jni.JniCallType.objectType, [
      drawable.reference,
      userHandle.reference,
      rect.reference,
      jni.JValueInt(i)
    ]).object);
  }

  static final _id_getUserBadgedLabel = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getUserBadgedLabel",
      r"(Ljava/lang/CharSequence;Landroid/os/UserHandle;)Ljava/lang/CharSequence;");

  /// from: public abstract java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence charSequence, android.os.UserHandle userHandle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserBadgedLabel(
    jni.JObject charSequence,
    jni.JObject userHandle,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getUserBadgedLabel,
        jni.JniCallType.objectType,
        [charSequence.reference, userHandle.reference]).object);
  }

  static final _id_getText = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getText",
      r"(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;");

  /// from: public abstract java.lang.CharSequence getText(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    jni.JString string,
    int i,
    jni.JObject applicationInfo,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getText, jni.JniCallType.objectType, [
      string.reference,
      jni.JValueInt(i),
      applicationInfo.reference
    ]).object);
  }

  static final _id_getXml = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getXml",
      r"(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/content/res/XmlResourceParser;");

  /// from: public abstract android.content.res.XmlResourceParser getXml(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getXml(
    jni.JString string,
    int i,
    jni.JObject applicationInfo,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getXml, jni.JniCallType.objectType, [
      string.reference,
      jni.JValueInt(i),
      applicationInfo.reference
    ]).object);
  }

  static final _id_getApplicationLabel = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationLabel",
      r"(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;");

  /// from: public abstract java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationLabel(
    jni.JObject applicationInfo,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationLabel,
        jni.JniCallType.objectType,
        [applicationInfo.reference]).object);
  }

  static final _id_getResourcesForActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getResourcesForActivity",
      r"(Landroid/content/ComponentName;)Landroid/content/res/Resources;");

  /// from: public abstract android.content.res.Resources getResourcesForActivity(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResourcesForActivity(
    jni.JObject componentName,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getResourcesForActivity,
        jni.JniCallType.objectType,
        [componentName.reference]).object);
  }

  static final _id_getResourcesForApplication = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getResourcesForApplication",
      r"(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/Resources;");

  /// from: public abstract android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResourcesForApplication(
    jni.JObject applicationInfo,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getResourcesForApplication,
        jni.JniCallType.objectType,
        [applicationInfo.reference]).object);
  }

  static final _id_getResourcesForApplication1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getResourcesForApplication",
      r"(Landroid/content/pm/ApplicationInfo;Landroid/content/res/Configuration;)Landroid/content/res/Resources;");

  /// from: public android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo applicationInfo, android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResourcesForApplication1(
    jni.JObject applicationInfo,
    jni.JObject configuration,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getResourcesForApplication1,
        jni.JniCallType.objectType,
        [applicationInfo.reference, configuration.reference]).object);
  }

  static final _id_getResourcesForApplication2 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getResourcesForApplication",
          r"(Ljava/lang/String;)Landroid/content/res/Resources;");

  /// from: public abstract android.content.res.Resources getResourcesForApplication(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResourcesForApplication2(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getResourcesForApplication2,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getPackageArchiveInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageArchiveInfo",
      r"(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;");

  /// from: public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageArchiveInfo(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageArchiveInfo,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_getPackageArchiveInfo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageArchiveInfo",
      r"(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;");

  /// from: public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageArchiveInfo1(
    jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageArchiveInfo1,
        jni.JniCallType.objectType,
        [string.reference, packageInfoFlags.reference]).object);
  }

  static final _id_verifyPendingInstall = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"verifyPendingInstall", r"(II)V");

  /// from: public abstract void verifyPendingInstall(int i, int i1)
  void verifyPendingInstall(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_verifyPendingInstall,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_extendVerificationTimeout = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"extendVerificationTimeout", r"(IIJ)V");

  /// from: public abstract void extendVerificationTimeout(int i, int i1, long j)
  void extendVerificationTimeout(
    int i,
    int i1,
    int j,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_extendVerificationTimeout,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), j]).check();
  }

  static final _id_setInstallerPackageName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setInstallerPackageName",
      r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public abstract void setInstallerPackageName(java.lang.String string, java.lang.String string1)
  void setInstallerPackageName(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setInstallerPackageName,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_getInstallerPackageName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getInstallerPackageName",
      r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public abstract java.lang.String getInstallerPackageName(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getInstallerPackageName(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getInstallerPackageName,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getInstallSourceInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getInstallSourceInfo",
      r"(Ljava/lang/String;)Landroid/content/pm/InstallSourceInfo;");

  /// from: public android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getInstallSourceInfo(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getInstallSourceInfo,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_addPackageToPreferred = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"addPackageToPreferred", r"(Ljava/lang/String;)V");

  /// from: public abstract void addPackageToPreferred(java.lang.String string)
  void addPackageToPreferred(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addPackageToPreferred,
        jni.JniCallType.voidType,
        [string.reference]).check();
  }

  static final _id_removePackageFromPreferred = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"removePackageFromPreferred",
      r"(Ljava/lang/String;)V");

  /// from: public abstract void removePackageFromPreferred(java.lang.String string)
  void removePackageFromPreferred(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removePackageFromPreferred,
        jni.JniCallType.voidType,
        [string.reference]).check();
  }

  static final _id_getPreferredPackages = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPreferredPackages", r"(I)Ljava/util/List;");

  /// from: public abstract java.util.List getPreferredPackages(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getPreferredPackages(
    int i,
  ) {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getPreferredPackages,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_addPreferredActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addPreferredActivity",
      r"(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;)V");

  /// from: public abstract void addPreferredActivity(android.content.IntentFilter intentFilter, int i, android.content.ComponentName[] componentNames, android.content.ComponentName componentName)
  void addPreferredActivity(
    jni.JObject intentFilter,
    int i,
    jni.JArray<jni.JObject> componentNames,
    jni.JObject componentName,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_addPreferredActivity, jni.JniCallType.voidType, [
      intentFilter.reference,
      jni.JValueInt(i),
      componentNames.reference,
      componentName.reference
    ]).check();
  }

  static final _id_clearPackagePreferredActivities = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearPackagePreferredActivities",
          r"(Ljava/lang/String;)V");

  /// from: public abstract void clearPackagePreferredActivities(java.lang.String string)
  void clearPackagePreferredActivities(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_clearPackagePreferredActivities,
        jni.JniCallType.voidType,
        [string.reference]).check();
  }

  static final _id_getPreferredActivities = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPreferredActivities",
      r"(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I");

  /// from: public abstract int getPreferredActivities(java.util.List list, java.util.List list1, java.lang.String string)
  int getPreferredActivities(
    jni.JList<jni.JObject> list,
    jni.JList<jni.JObject> list1,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPreferredActivities,
        jni.JniCallType.intType,
        [list.reference, list1.reference, string.reference]).integer;
  }

  static final _id_setComponentEnabledSetting = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setComponentEnabledSetting",
      r"(Landroid/content/ComponentName;II)V");

  /// from: public abstract void setComponentEnabledSetting(android.content.ComponentName componentName, int i, int i1)
  void setComponentEnabledSetting(
    jni.JObject componentName,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setComponentEnabledSetting,
        jni.JniCallType.voidType,
        [componentName.reference, jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_setComponentEnabledSettings = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setComponentEnabledSettings",
          r"(Ljava/util/List;)V");

  /// from: public void setComponentEnabledSettings(java.util.List list)
  void setComponentEnabledSettings(
    jni.JList<PackageManager_ComponentEnabledSetting> list,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setComponentEnabledSettings,
        jni.JniCallType.voidType,
        [list.reference]).check();
  }

  static final _id_getComponentEnabledSetting = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getComponentEnabledSetting",
      r"(Landroid/content/ComponentName;)I");

  /// from: public abstract int getComponentEnabledSetting(android.content.ComponentName componentName)
  int getComponentEnabledSetting(
    jni.JObject componentName,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getComponentEnabledSetting,
        jni.JniCallType.intType,
        [componentName.reference]).integer;
  }

  static final _id_getSyntheticAppDetailsActivityEnabled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getSyntheticAppDetailsActivityEnabled",
          r"(Ljava/lang/String;)Z");

  /// from: public boolean getSyntheticAppDetailsActivityEnabled(java.lang.String string)
  bool getSyntheticAppDetailsActivityEnabled(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSyntheticAppDetailsActivityEnabled,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_setApplicationEnabledSetting = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setApplicationEnabledSetting",
          r"(Ljava/lang/String;II)V");

  /// from: public abstract void setApplicationEnabledSetting(java.lang.String string, int i, int i1)
  void setApplicationEnabledSetting(
    jni.JString string,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setApplicationEnabledSetting,
        jni.JniCallType.voidType,
        [string.reference, jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_getApplicationEnabledSetting = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getApplicationEnabledSetting",
          r"(Ljava/lang/String;)I");

  /// from: public abstract int getApplicationEnabledSetting(java.lang.String string)
  int getApplicationEnabledSetting(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationEnabledSetting,
        jni.JniCallType.intType,
        [string.reference]).integer;
  }

  static final _id_isSafeMode =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isSafeMode", r"()Z");

  /// from: public abstract boolean isSafeMode()
  bool isSafeMode() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isSafeMode, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isPackageSuspended = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"isPackageSuspended", r"(Ljava/lang/String;)Z");

  /// from: public boolean isPackageSuspended(java.lang.String string)
  bool isPackageSuspended(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isPackageSuspended,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_isPackageSuspended1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isPackageSuspended", r"()Z");

  /// from: public boolean isPackageSuspended()
  bool isPackageSuspended1() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isPackageSuspended1, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getSuspendedPackageAppExtras = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getSuspendedPackageAppExtras",
          r"()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getSuspendedPackageAppExtras()
  /// The returned object must be released after use, by calling the [release] method.
  Bundle getSuspendedPackageAppExtras() {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSuspendedPackageAppExtras,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setApplicationCategoryHint = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setApplicationCategoryHint",
      r"(Ljava/lang/String;I)V");

  /// from: public abstract void setApplicationCategoryHint(java.lang.String string, int i)
  void setApplicationCategoryHint(
    jni.JString string,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setApplicationCategoryHint,
        jni.JniCallType.voidType,
        [string.reference, jni.JValueInt(i)]).check();
  }

  static final _id_isDeviceUpgrading = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isDeviceUpgrading", r"()Z");

  /// from: public boolean isDeviceUpgrading()
  bool isDeviceUpgrading() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isDeviceUpgrading, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getPackageInstaller = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageInstaller",
      r"()Landroid/content/pm/PackageInstaller;");

  /// from: public abstract android.content.pm.PackageInstaller getPackageInstaller()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageInstaller() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageInstaller,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_canRequestPackageInstalls = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"canRequestPackageInstalls", r"()Z");

  /// from: public abstract boolean canRequestPackageInstalls()
  bool canRequestPackageInstalls() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_canRequestPackageInstalls, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_hasSigningCertificate = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"hasSigningCertificate", r"(Ljava/lang/String;[BI)Z");

  /// from: public boolean hasSigningCertificate(java.lang.String string, byte[] bs, int i)
  bool hasSigningCertificate(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_hasSigningCertificate,
        jni.JniCallType.booleanType,
        [string.reference, bs.reference, jni.JValueInt(i)]).boolean;
  }

  static final _id_hasSigningCertificate1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasSigningCertificate", r"(I[BI)Z");

  /// from: public boolean hasSigningCertificate(int i, byte[] bs, int i1)
  bool hasSigningCertificate1(
    int i,
    jni.JArray<jni.jbyte> bs,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_hasSigningCertificate1,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), bs.reference, jni.JValueInt(i1)]).boolean;
  }

  static final _id_requestChecksums = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"requestChecksums",
      r"(Ljava/lang/String;ZILjava/util/List;Landroid/content/pm/PackageManager$OnChecksumsReadyListener;)V");

  /// from: public void requestChecksums(java.lang.String string, boolean z, int i, java.util.List list, android.content.pm.PackageManager$OnChecksumsReadyListener onChecksumsReadyListener)
  void requestChecksums(
    jni.JString string,
    bool z,
    int i,
    jni.JList<jni.JObject> list,
    PackageManager_OnChecksumsReadyListener onChecksumsReadyListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_requestChecksums, jni.JniCallType.voidType, [
      string.reference,
      z ? 1 : 0,
      jni.JValueInt(i),
      list.reference,
      onChecksumsReadyListener.reference
    ]).check();
  }

  static final _id_isAutoRevokeWhitelisted1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isAutoRevokeWhitelisted", r"()Z");

  /// from: public boolean isAutoRevokeWhitelisted()
  bool isAutoRevokeWhitelisted1() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isAutoRevokeWhitelisted1, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isDefaultApplicationIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"isDefaultApplicationIcon",
      r"(Landroid/graphics/drawable/Drawable;)Z");

  /// from: public boolean isDefaultApplicationIcon(android.graphics.drawable.Drawable drawable)
  bool isDefaultApplicationIcon(
    jni.JObject drawable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isDefaultApplicationIcon,
        jni.JniCallType.booleanType,
        [drawable.reference]).boolean;
  }

  static final _id_setMimeGroup = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setMimeGroup",
      r"(Ljava/lang/String;Ljava/util/Set;)V");

  /// from: public void setMimeGroup(java.lang.String string, java.util.Set set)
  void setMimeGroup(
    jni.JString string,
    jni.JSet<jni.JString> set0,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setMimeGroup,
        jni.JniCallType.voidType, [string.reference, set0.reference]).check();
  }

  static final _id_getMimeGroup = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getMimeGroup",
      r"(Ljava/lang/String;)Ljava/util/Set;");

  /// from: public java.util.Set getMimeGroup(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getMimeGroup(
    jni.JString string,
  ) {
    return const jni.JSetType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getMimeGroup,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getProperty = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getProperty",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroid/content/pm/PackageManager$Property;");

  /// from: public android.content.pm.PackageManager$Property getProperty(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  PackageManager_Property getProperty(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $PackageManager_PropertyType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getProperty,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_getProperty1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getProperty",
      r"(Ljava/lang/String;Landroid/content/ComponentName;)Landroid/content/pm/PackageManager$Property;");

  /// from: public android.content.pm.PackageManager$Property getProperty(java.lang.String string, android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  PackageManager_Property getProperty1(
    jni.JString string,
    jni.JObject componentName,
  ) {
    return const $PackageManager_PropertyType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getProperty1,
            jni.JniCallType.objectType,
            [string.reference, componentName.reference]).object);
  }

  static final _id_queryApplicationProperty = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryApplicationProperty",
      r"(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List queryApplicationProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryApplicationProperty(
    jni.JString string,
  ) {
    return const jni.JListType($PackageManager_PropertyType()).fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_queryApplicationProperty,
            jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_queryActivityProperty = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryActivityProperty",
      r"(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List queryActivityProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryActivityProperty(
    jni.JString string,
  ) {
    return const jni.JListType($PackageManager_PropertyType()).fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_queryActivityProperty,
            jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_queryProviderProperty = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryProviderProperty",
      r"(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List queryProviderProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryProviderProperty(
    jni.JString string,
  ) {
    return const jni.JListType($PackageManager_PropertyType()).fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_queryProviderProperty,
            jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_queryReceiverProperty = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryReceiverProperty",
      r"(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List queryReceiverProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryReceiverProperty(
    jni.JString string,
  ) {
    return const jni.JListType($PackageManager_PropertyType()).fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_queryReceiverProperty,
            jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_queryServiceProperty = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"queryServiceProperty",
      r"(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List queryServiceProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryServiceProperty(
    jni.JString string,
  ) {
    return const jni.JListType($PackageManager_PropertyType()).fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_queryServiceProperty,
            jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_canPackageQuery = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"canPackageQuery",
      r"(Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: public boolean canPackageQuery(java.lang.String string, java.lang.String string1)
  bool canPackageQuery(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_canPackageQuery,
        jni.JniCallType.booleanType,
        [string.reference, string1.reference]).boolean;
  }

  static final _id_canPackageQuery1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"canPackageQuery",
      r"(Ljava/lang/String;[Ljava/lang/String;)[Z");

  /// from: public boolean[] canPackageQuery(java.lang.String string, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jboolean> canPackageQuery1(
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return const jni.JArrayType(jni.jbooleanType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_canPackageQuery1,
            jni.JniCallType.objectType,
            [string.reference, strings.reference]).object);
  }

  static final _id_relinquishUpdateOwnership = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"relinquishUpdateOwnership", r"(Ljava/lang/String;)V");

  /// from: public void relinquishUpdateOwnership(java.lang.String string)
  void relinquishUpdateOwnership(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_relinquishUpdateOwnership,
        jni.JniCallType.voidType,
        [string.reference]).check();
  }
}

final class $PackageManagerType extends jni.JObjType<PackageManager> {
  const $PackageManagerType();

  @override
  String get signature => r"Landroid/content/pm/PackageManager;";

  @override
  PackageManager fromRef(jni.JObjectPtr ref) => PackageManager.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManagerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManagerType) &&
        other is $PackageManagerType;
  }
}

/// from: android.content.pm.ResolveInfo$DisplayNameComparator
class ResolveInfo_DisplayNameComparator extends jni.JObject {
  @override
  late final jni.JObjType<ResolveInfo_DisplayNameComparator> $type = type;

  ResolveInfo_DisplayNameComparator.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"android/content/pm/ResolveInfo$DisplayNameComparator");

  /// The type which includes information such as the signature of this class.
  static const type = $ResolveInfo_DisplayNameComparatorType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/pm/PackageManager;)V");

  /// from: public void <init>(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  factory ResolveInfo_DisplayNameComparator(
    PackageManager packageManager,
  ) {
    return ResolveInfo_DisplayNameComparator.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new0, [packageManager.reference]).object);
  }

  static final _id_compare = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"compare",
      r"(Landroid/content/pm/ResolveInfo;Landroid/content/pm/ResolveInfo;)I");

  /// from: public final int compare(android.content.pm.ResolveInfo resolveInfo, android.content.pm.ResolveInfo resolveInfo1)
  int compare(
    ResolveInfo resolveInfo,
    ResolveInfo resolveInfo1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_compare,
        jni.JniCallType.intType,
        [resolveInfo.reference, resolveInfo1.reference]).integer;
  }

  static final _id_compare1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"compare", r"(Ljava/lang/Object;Ljava/lang/Object;)I");

  /// from: public int compare(java.lang.Object object, java.lang.Object object1)
  int compare1(
    jni.JObject object,
    jni.JObject object1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_compare1,
        jni.JniCallType.intType, [object.reference, object1.reference]).integer;
  }
}

final class $ResolveInfo_DisplayNameComparatorType
    extends jni.JObjType<ResolveInfo_DisplayNameComparator> {
  const $ResolveInfo_DisplayNameComparatorType();

  @override
  String get signature =>
      r"Landroid/content/pm/ResolveInfo$DisplayNameComparator;";

  @override
  ResolveInfo_DisplayNameComparator fromRef(jni.JObjectPtr ref) =>
      ResolveInfo_DisplayNameComparator.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResolveInfo_DisplayNameComparatorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolveInfo_DisplayNameComparatorType) &&
        other is $ResolveInfo_DisplayNameComparatorType;
  }
}

/// from: android.content.pm.ResolveInfo
class ResolveInfo extends jni.JObject {
  @override
  late final jni.JObjType<ResolveInfo> $type = type;

  ResolveInfo.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/content/pm/ResolveInfo");

  /// The type which includes information such as the signature of this class.
  static const type = $ResolveInfoType();
  static final _id_CREATOR = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getStaticField(_class.reference, _id_CREATOR, jni.JniCallType.objectType)
      .object);

  static final _id_activityInfo = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"activityInfo",
    r"Landroid/content/pm/ActivityInfo;",
  );

  /// from: public android.content.pm.ActivityInfo activityInfo
  /// The returned object must be released after use, by calling the [release] method.
  ActivityInfo get activityInfo =>
      const $ActivityInfoType().fromRef(jni.Jni.accessors
          .getField(reference, _id_activityInfo, jni.JniCallType.objectType)
          .object);

  /// from: public android.content.pm.ActivityInfo activityInfo
  /// The returned object must be released after use, by calling the [release] method.
  set activityInfo(ActivityInfo value) =>
      jni.Jni.env.SetObjectField(reference, _id_activityInfo, value.reference);

  static final _id_filter = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"filter",
    r"Landroid/content/IntentFilter;",
  );

  /// from: public android.content.IntentFilter filter
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get filter => const jni.JObjectType().fromRef(jni.Jni.accessors
      .getField(reference, _id_filter, jni.JniCallType.objectType)
      .object);

  /// from: public android.content.IntentFilter filter
  /// The returned object must be released after use, by calling the [release] method.
  set filter(jni.JObject value) =>
      jni.Jni.env.SetObjectField(reference, _id_filter, value.reference);

  static final _id_icon = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"icon",
    r"I",
  );

  /// from: public int icon
  int get icon => jni.Jni.accessors
      .getField(reference, _id_icon, jni.JniCallType.intType)
      .integer;

  /// from: public int icon
  set icon(int value) => jni.Jni.env.SetIntField(reference, _id_icon, value);

  static final _id_isDefault = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"isDefault",
    r"Z",
  );

  /// from: public boolean isDefault
  bool get isDefault => jni.Jni.accessors
      .getField(reference, _id_isDefault, jni.JniCallType.booleanType)
      .boolean;

  /// from: public boolean isDefault
  set isDefault(bool value) =>
      jni.Jni.env.SetBooleanField(reference, _id_isDefault, value ? 1 : 0);

  static final _id_isInstantAppAvailable = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"isInstantAppAvailable",
    r"Z",
  );

  /// from: public boolean isInstantAppAvailable
  bool get isInstantAppAvailable => jni.Jni.accessors
      .getField(
          reference, _id_isInstantAppAvailable, jni.JniCallType.booleanType)
      .boolean;

  /// from: public boolean isInstantAppAvailable
  set isInstantAppAvailable(bool value) => jni.Jni.env
      .SetBooleanField(reference, _id_isInstantAppAvailable, value ? 1 : 0);

  static final _id_labelRes = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"labelRes",
    r"I",
  );

  /// from: public int labelRes
  int get labelRes => jni.Jni.accessors
      .getField(reference, _id_labelRes, jni.JniCallType.intType)
      .integer;

  /// from: public int labelRes
  set labelRes(int value) =>
      jni.Jni.env.SetIntField(reference, _id_labelRes, value);

  static final _id_match = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"match",
    r"I",
  );

  /// from: public int match
  int get match => jni.Jni.accessors
      .getField(reference, _id_match, jni.JniCallType.intType)
      .integer;

  /// from: public int match
  set match(int value) => jni.Jni.env.SetIntField(reference, _id_match, value);

  static final _id_nonLocalizedLabel = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"nonLocalizedLabel",
    r"Ljava/lang/CharSequence;",
  );

  /// from: public java.lang.CharSequence nonLocalizedLabel
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get nonLocalizedLabel => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getField(reference, _id_nonLocalizedLabel, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.CharSequence nonLocalizedLabel
  /// The returned object must be released after use, by calling the [release] method.
  set nonLocalizedLabel(jni.JObject value) => jni.Jni.env
      .SetObjectField(reference, _id_nonLocalizedLabel, value.reference);

  static final _id_preferredOrder = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"preferredOrder",
    r"I",
  );

  /// from: public int preferredOrder
  int get preferredOrder => jni.Jni.accessors
      .getField(reference, _id_preferredOrder, jni.JniCallType.intType)
      .integer;

  /// from: public int preferredOrder
  set preferredOrder(int value) =>
      jni.Jni.env.SetIntField(reference, _id_preferredOrder, value);

  static final _id_priority = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"priority",
    r"I",
  );

  /// from: public int priority
  int get priority => jni.Jni.accessors
      .getField(reference, _id_priority, jni.JniCallType.intType)
      .integer;

  /// from: public int priority
  set priority(int value) =>
      jni.Jni.env.SetIntField(reference, _id_priority, value);

  static final _id_providerInfo = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"providerInfo",
    r"Landroid/content/pm/ProviderInfo;",
  );

  /// from: public android.content.pm.ProviderInfo providerInfo
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get providerInfo =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getField(reference, _id_providerInfo, jni.JniCallType.objectType)
          .object);

  /// from: public android.content.pm.ProviderInfo providerInfo
  /// The returned object must be released after use, by calling the [release] method.
  set providerInfo(jni.JObject value) =>
      jni.Jni.env.SetObjectField(reference, _id_providerInfo, value.reference);

  static final _id_resolvePackageName = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"resolvePackageName",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String resolvePackageName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get resolvePackageName => const jni.JStringType().fromRef(jni
      .Jni.accessors
      .getField(reference, _id_resolvePackageName, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String resolvePackageName
  /// The returned object must be released after use, by calling the [release] method.
  set resolvePackageName(jni.JString value) => jni.Jni.env
      .SetObjectField(reference, _id_resolvePackageName, value.reference);

  static final _id_serviceInfo = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"serviceInfo",
    r"Landroid/content/pm/ServiceInfo;",
  );

  /// from: public android.content.pm.ServiceInfo serviceInfo
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get serviceInfo =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getField(reference, _id_serviceInfo, jni.JniCallType.objectType)
          .object);

  /// from: public android.content.pm.ServiceInfo serviceInfo
  /// The returned object must be released after use, by calling the [release] method.
  set serviceInfo(jni.JObject value) =>
      jni.Jni.env.SetObjectField(reference, _id_serviceInfo, value.reference);

  static final _id_specificIndex = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"specificIndex",
    r"I",
  );

  /// from: public int specificIndex
  int get specificIndex => jni.Jni.accessors
      .getField(reference, _id_specificIndex, jni.JniCallType.intType)
      .integer;

  /// from: public int specificIndex
  set specificIndex(int value) =>
      jni.Jni.env.SetIntField(reference, _id_specificIndex, value);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ResolveInfo() {
    return ResolveInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/pm/ResolveInfo;)V");

  /// from: public void <init>(android.content.pm.ResolveInfo resolveInfo)
  /// The returned object must be released after use, by calling the [release] method.
  factory ResolveInfo.new1(
    ResolveInfo resolveInfo,
  ) {
    return ResolveInfo.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [resolveInfo.reference]).object);
  }

  static final _id_loadLabel = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadLabel",
      r"(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadLabel(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadLabel(
    PackageManager packageManager,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadLabel,
        jni.JniCallType.objectType,
        [packageManager.reference]).object);
  }

  static final _id_loadIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadIcon",
      r"(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadIcon(
    PackageManager packageManager,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadIcon,
        jni.JniCallType.objectType,
        [packageManager.reference]).object);
  }

  static final _id_getIconResource = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getIconResource", r"()I");

  /// from: public final int getIconResource()
  int getIconResource() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getIconResource, jni.JniCallType.intType, []).integer;
  }

  static final _id_dump = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"dump", r"(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: public void dump(android.util.Printer printer, java.lang.String string)
  void dump(
    jni.JObject printer,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dump,
        jni.JniCallType.voidType,
        [printer.reference, string.reference]).check();
  }

  static final _id_isCrossProfileIntentForwarderActivity = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"isCrossProfileIntentForwarderActivity", r"()Z");

  /// from: public boolean isCrossProfileIntentForwarderActivity()
  bool isCrossProfileIntentForwarderActivity() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isCrossProfileIntentForwarderActivity,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }

  static final _id_describeContents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"describeContents", r"()I");

  /// from: public int describeContents()
  int describeContents() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_describeContents, jni.JniCallType.intType, []).integer;
  }

  static final _id_writeToParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeToParcel", r"(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeToParcel,
        jni.JniCallType.voidType, [parcel.reference, jni.JValueInt(i)]).check();
  }
}

final class $ResolveInfoType extends jni.JObjType<ResolveInfo> {
  const $ResolveInfoType();

  @override
  String get signature => r"Landroid/content/pm/ResolveInfo;";

  @override
  ResolveInfo fromRef(jni.JObjectPtr ref) => ResolveInfo.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResolveInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolveInfoType) && other is $ResolveInfoType;
  }
}

/// from: android.content.pm.ActivityInfo$WindowLayout
class ActivityInfo_WindowLayout extends jni.JObject {
  @override
  late final jni.JObjType<ActivityInfo_WindowLayout> $type = type;

  ActivityInfo_WindowLayout.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/pm/ActivityInfo$WindowLayout");

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityInfo_WindowLayoutType();
  static final _id_gravity = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"gravity",
    r"I",
  );

  /// from: public final int gravity
  int get gravity => jni.Jni.accessors
      .getField(reference, _id_gravity, jni.JniCallType.intType)
      .integer;

  static final _id_height = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"height",
    r"I",
  );

  /// from: public final int height
  int get height => jni.Jni.accessors
      .getField(reference, _id_height, jni.JniCallType.intType)
      .integer;

  static final _id_heightFraction = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"heightFraction",
    r"F",
  );

  /// from: public final float heightFraction
  double get heightFraction => jni.Jni.accessors
      .getField(reference, _id_heightFraction, jni.JniCallType.floatType)
      .float;

  static final _id_minHeight = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"minHeight",
    r"I",
  );

  /// from: public final int minHeight
  int get minHeight => jni.Jni.accessors
      .getField(reference, _id_minHeight, jni.JniCallType.intType)
      .integer;

  static final _id_minWidth = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"minWidth",
    r"I",
  );

  /// from: public final int minWidth
  int get minWidth => jni.Jni.accessors
      .getField(reference, _id_minWidth, jni.JniCallType.intType)
      .integer;

  static final _id_width = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"width",
    r"I",
  );

  /// from: public final int width
  int get width => jni.Jni.accessors
      .getField(reference, _id_width, jni.JniCallType.intType)
      .integer;

  static final _id_widthFraction = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"widthFraction",
    r"F",
  );

  /// from: public final float widthFraction
  double get widthFraction => jni.Jni.accessors
      .getField(reference, _id_widthFraction, jni.JniCallType.floatType)
      .float;

  static final _id_new0 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(IFIFIII)V");

  /// from: public void <init>(int i, float f, int i1, float f1, int i2, int i3, int i4)
  /// The returned object must be released after use, by calling the [release] method.
  factory ActivityInfo_WindowLayout(
    int i,
    double f,
    int i1,
    double f1,
    int i2,
    int i3,
    int i4,
  ) {
    return ActivityInfo_WindowLayout.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0, [
      jni.JValueInt(i),
      jni.JValueFloat(f),
      jni.JValueInt(i1),
      jni.JValueFloat(f1),
      jni.JValueInt(i2),
      jni.JValueInt(i3),
      jni.JValueInt(i4)
    ]).object);
  }
}

final class $ActivityInfo_WindowLayoutType
    extends jni.JObjType<ActivityInfo_WindowLayout> {
  const $ActivityInfo_WindowLayoutType();

  @override
  String get signature => r"Landroid/content/pm/ActivityInfo$WindowLayout;";

  @override
  ActivityInfo_WindowLayout fromRef(jni.JObjectPtr ref) =>
      ActivityInfo_WindowLayout.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ActivityInfo_WindowLayoutType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityInfo_WindowLayoutType) &&
        other is $ActivityInfo_WindowLayoutType;
  }
}

/// from: android.content.pm.ActivityInfo
class ActivityInfo extends jni.JObject {
  @override
  late final jni.JObjType<ActivityInfo> $type = type;

  ActivityInfo.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/content/pm/ActivityInfo");

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityInfoType();

  /// from: static public final int COLOR_MODE_DEFAULT
  static const COLOR_MODE_DEFAULT = 0;

  /// from: static public final int COLOR_MODE_HDR
  static const COLOR_MODE_HDR = 2;

  /// from: static public final int COLOR_MODE_WIDE_COLOR_GAMUT
  static const COLOR_MODE_WIDE_COLOR_GAMUT = 1;

  /// from: static public final int CONFIG_COLOR_MODE
  static const CONFIG_COLOR_MODE = 16384;

  /// from: static public final int CONFIG_DENSITY
  static const CONFIG_DENSITY = 4096;

  /// from: static public final int CONFIG_FONT_SCALE
  static const CONFIG_FONT_SCALE = 1073741824;

  /// from: static public final int CONFIG_FONT_WEIGHT_ADJUSTMENT
  static const CONFIG_FONT_WEIGHT_ADJUSTMENT = 268435456;

  /// from: static public final int CONFIG_GRAMMATICAL_GENDER
  static const CONFIG_GRAMMATICAL_GENDER = 32768;

  /// from: static public final int CONFIG_KEYBOARD
  static const CONFIG_KEYBOARD = 16;

  /// from: static public final int CONFIG_KEYBOARD_HIDDEN
  static const CONFIG_KEYBOARD_HIDDEN = 32;

  /// from: static public final int CONFIG_LAYOUT_DIRECTION
  static const CONFIG_LAYOUT_DIRECTION = 8192;

  /// from: static public final int CONFIG_LOCALE
  static const CONFIG_LOCALE = 4;

  /// from: static public final int CONFIG_MCC
  static const CONFIG_MCC = 1;

  /// from: static public final int CONFIG_MNC
  static const CONFIG_MNC = 2;

  /// from: static public final int CONFIG_NAVIGATION
  static const CONFIG_NAVIGATION = 64;

  /// from: static public final int CONFIG_ORIENTATION
  static const CONFIG_ORIENTATION = 128;

  /// from: static public final int CONFIG_SCREEN_LAYOUT
  static const CONFIG_SCREEN_LAYOUT = 256;

  /// from: static public final int CONFIG_SCREEN_SIZE
  static const CONFIG_SCREEN_SIZE = 1024;

  /// from: static public final int CONFIG_SMALLEST_SCREEN_SIZE
  static const CONFIG_SMALLEST_SCREEN_SIZE = 2048;

  /// from: static public final int CONFIG_TOUCHSCREEN
  static const CONFIG_TOUCHSCREEN = 8;

  /// from: static public final int CONFIG_UI_MODE
  static const CONFIG_UI_MODE = 512;

  static final _id_CREATOR = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getStaticField(_class.reference, _id_CREATOR, jni.JniCallType.objectType)
      .object);

  /// from: static public final int DOCUMENT_LAUNCH_ALWAYS
  static const DOCUMENT_LAUNCH_ALWAYS = 2;

  /// from: static public final int DOCUMENT_LAUNCH_INTO_EXISTING
  static const DOCUMENT_LAUNCH_INTO_EXISTING = 1;

  /// from: static public final int DOCUMENT_LAUNCH_NEVER
  static const DOCUMENT_LAUNCH_NEVER = 3;

  /// from: static public final int DOCUMENT_LAUNCH_NONE
  static const DOCUMENT_LAUNCH_NONE = 0;

  /// from: static public final int FLAG_ALLOW_TASK_REPARENTING
  static const FLAG_ALLOW_TASK_REPARENTING = 64;

  /// from: static public final int FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDING
  static const FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDING = 268435456;

  /// from: static public final int FLAG_ALWAYS_RETAIN_TASK_STATE
  static const FLAG_ALWAYS_RETAIN_TASK_STATE = 8;

  /// from: static public final int FLAG_AUTO_REMOVE_FROM_RECENTS
  static const FLAG_AUTO_REMOVE_FROM_RECENTS = 8192;

  /// from: static public final int FLAG_CLEAR_TASK_ON_LAUNCH
  static const FLAG_CLEAR_TASK_ON_LAUNCH = 4;

  /// from: static public final int FLAG_ENABLE_VR_MODE
  static const FLAG_ENABLE_VR_MODE = 32768;

  /// from: static public final int FLAG_EXCLUDE_FROM_RECENTS
  static const FLAG_EXCLUDE_FROM_RECENTS = 32;

  /// from: static public final int FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS
  static const FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS = 256;

  /// from: static public final int FLAG_FINISH_ON_TASK_LAUNCH
  static const FLAG_FINISH_ON_TASK_LAUNCH = 2;

  /// from: static public final int FLAG_HARDWARE_ACCELERATED
  static const FLAG_HARDWARE_ACCELERATED = 512;

  /// from: static public final int FLAG_IMMERSIVE
  static const FLAG_IMMERSIVE = 2048;

  /// from: static public final int FLAG_MULTIPROCESS
  static const FLAG_MULTIPROCESS = 1;

  /// from: static public final int FLAG_NO_HISTORY
  static const FLAG_NO_HISTORY = 128;

  /// from: static public final int FLAG_PREFER_MINIMAL_POST_PROCESSING
  static const FLAG_PREFER_MINIMAL_POST_PROCESSING = 33554432;

  /// from: static public final int FLAG_RELINQUISH_TASK_IDENTITY
  static const FLAG_RELINQUISH_TASK_IDENTITY = 4096;

  /// from: static public final int FLAG_RESUME_WHILE_PAUSING
  static const FLAG_RESUME_WHILE_PAUSING = 16384;

  /// from: static public final int FLAG_SINGLE_USER
  static const FLAG_SINGLE_USER = 1073741824;

  /// from: static public final int FLAG_STATE_NOT_NEEDED
  static const FLAG_STATE_NOT_NEEDED = 16;

  /// from: static public final int LAUNCH_MULTIPLE
  static const LAUNCH_MULTIPLE = 0;

  /// from: static public final int LAUNCH_SINGLE_INSTANCE
  static const LAUNCH_SINGLE_INSTANCE = 3;

  /// from: static public final int LAUNCH_SINGLE_INSTANCE_PER_TASK
  static const LAUNCH_SINGLE_INSTANCE_PER_TASK = 4;

  /// from: static public final int LAUNCH_SINGLE_TASK
  static const LAUNCH_SINGLE_TASK = 2;

  /// from: static public final int LAUNCH_SINGLE_TOP
  static const LAUNCH_SINGLE_TOP = 1;

  /// from: static public final int PERSIST_ACROSS_REBOOTS
  static const PERSIST_ACROSS_REBOOTS = 2;

  /// from: static public final int PERSIST_NEVER
  static const PERSIST_NEVER = 1;

  /// from: static public final int PERSIST_ROOT_ONLY
  static const PERSIST_ROOT_ONLY = 0;

  /// from: static public final int SCREEN_ORIENTATION_BEHIND
  static const SCREEN_ORIENTATION_BEHIND = 3;

  /// from: static public final int SCREEN_ORIENTATION_FULL_SENSOR
  static const SCREEN_ORIENTATION_FULL_SENSOR = 10;

  /// from: static public final int SCREEN_ORIENTATION_FULL_USER
  static const SCREEN_ORIENTATION_FULL_USER = 13;

  /// from: static public final int SCREEN_ORIENTATION_LANDSCAPE
  static const SCREEN_ORIENTATION_LANDSCAPE = 0;

  /// from: static public final int SCREEN_ORIENTATION_LOCKED
  static const SCREEN_ORIENTATION_LOCKED = 14;

  /// from: static public final int SCREEN_ORIENTATION_NOSENSOR
  static const SCREEN_ORIENTATION_NOSENSOR = 5;

  /// from: static public final int SCREEN_ORIENTATION_PORTRAIT
  static const SCREEN_ORIENTATION_PORTRAIT = 1;

  /// from: static public final int SCREEN_ORIENTATION_REVERSE_LANDSCAPE
  static const SCREEN_ORIENTATION_REVERSE_LANDSCAPE = 8;

  /// from: static public final int SCREEN_ORIENTATION_REVERSE_PORTRAIT
  static const SCREEN_ORIENTATION_REVERSE_PORTRAIT = 9;

  /// from: static public final int SCREEN_ORIENTATION_SENSOR
  static const SCREEN_ORIENTATION_SENSOR = 4;

  /// from: static public final int SCREEN_ORIENTATION_SENSOR_LANDSCAPE
  static const SCREEN_ORIENTATION_SENSOR_LANDSCAPE = 6;

  /// from: static public final int SCREEN_ORIENTATION_SENSOR_PORTRAIT
  static const SCREEN_ORIENTATION_SENSOR_PORTRAIT = 7;

  /// from: static public final int SCREEN_ORIENTATION_UNSPECIFIED
  static const SCREEN_ORIENTATION_UNSPECIFIED = -1;

  /// from: static public final int SCREEN_ORIENTATION_USER
  static const SCREEN_ORIENTATION_USER = 2;

  /// from: static public final int SCREEN_ORIENTATION_USER_LANDSCAPE
  static const SCREEN_ORIENTATION_USER_LANDSCAPE = 11;

  /// from: static public final int SCREEN_ORIENTATION_USER_PORTRAIT
  static const SCREEN_ORIENTATION_USER_PORTRAIT = 12;

  /// from: static public final int UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW
  static const UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW = 1;

  static final _id_colorMode = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"colorMode",
    r"I",
  );

  /// from: public int colorMode
  int get colorMode => jni.Jni.accessors
      .getField(reference, _id_colorMode, jni.JniCallType.intType)
      .integer;

  /// from: public int colorMode
  set colorMode(int value) =>
      jni.Jni.env.SetIntField(reference, _id_colorMode, value);

  static final _id_configChanges = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"configChanges",
    r"I",
  );

  /// from: public int configChanges
  int get configChanges => jni.Jni.accessors
      .getField(reference, _id_configChanges, jni.JniCallType.intType)
      .integer;

  /// from: public int configChanges
  set configChanges(int value) =>
      jni.Jni.env.SetIntField(reference, _id_configChanges, value);

  static final _id_documentLaunchMode = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"documentLaunchMode",
    r"I",
  );

  /// from: public int documentLaunchMode
  int get documentLaunchMode => jni.Jni.accessors
      .getField(reference, _id_documentLaunchMode, jni.JniCallType.intType)
      .integer;

  /// from: public int documentLaunchMode
  set documentLaunchMode(int value) =>
      jni.Jni.env.SetIntField(reference, _id_documentLaunchMode, value);

  static final _id_flags = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"flags",
    r"I",
  );

  /// from: public int flags
  int get flags => jni.Jni.accessors
      .getField(reference, _id_flags, jni.JniCallType.intType)
      .integer;

  /// from: public int flags
  set flags(int value) => jni.Jni.env.SetIntField(reference, _id_flags, value);

  static final _id_launchMode = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"launchMode",
    r"I",
  );

  /// from: public int launchMode
  int get launchMode => jni.Jni.accessors
      .getField(reference, _id_launchMode, jni.JniCallType.intType)
      .integer;

  /// from: public int launchMode
  set launchMode(int value) =>
      jni.Jni.env.SetIntField(reference, _id_launchMode, value);

  static final _id_maxRecents = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"maxRecents",
    r"I",
  );

  /// from: public int maxRecents
  int get maxRecents => jni.Jni.accessors
      .getField(reference, _id_maxRecents, jni.JniCallType.intType)
      .integer;

  /// from: public int maxRecents
  set maxRecents(int value) =>
      jni.Jni.env.SetIntField(reference, _id_maxRecents, value);

  static final _id_parentActivityName = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"parentActivityName",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String parentActivityName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get parentActivityName => const jni.JStringType().fromRef(jni
      .Jni.accessors
      .getField(reference, _id_parentActivityName, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String parentActivityName
  /// The returned object must be released after use, by calling the [release] method.
  set parentActivityName(jni.JString value) => jni.Jni.env
      .SetObjectField(reference, _id_parentActivityName, value.reference);

  static final _id_permission = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"permission",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String permission
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get permission =>
      const jni.JStringType().fromRef(jni.Jni.accessors
          .getField(reference, _id_permission, jni.JniCallType.objectType)
          .object);

  /// from: public java.lang.String permission
  /// The returned object must be released after use, by calling the [release] method.
  set permission(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_permission, value.reference);

  static final _id_persistableMode = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"persistableMode",
    r"I",
  );

  /// from: public int persistableMode
  int get persistableMode => jni.Jni.accessors
      .getField(reference, _id_persistableMode, jni.JniCallType.intType)
      .integer;

  /// from: public int persistableMode
  set persistableMode(int value) =>
      jni.Jni.env.SetIntField(reference, _id_persistableMode, value);

  static final _id_requiredDisplayCategory = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"requiredDisplayCategory",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String requiredDisplayCategory
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get requiredDisplayCategory => const jni.JStringType().fromRef(jni
      .Jni.accessors
      .getField(
          reference, _id_requiredDisplayCategory, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String requiredDisplayCategory
  /// The returned object must be released after use, by calling the [release] method.
  set requiredDisplayCategory(jni.JString value) => jni.Jni.env
      .SetObjectField(reference, _id_requiredDisplayCategory, value.reference);

  static final _id_screenOrientation = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"screenOrientation",
    r"I",
  );

  /// from: public int screenOrientation
  int get screenOrientation => jni.Jni.accessors
      .getField(reference, _id_screenOrientation, jni.JniCallType.intType)
      .integer;

  /// from: public int screenOrientation
  set screenOrientation(int value) =>
      jni.Jni.env.SetIntField(reference, _id_screenOrientation, value);

  static final _id_softInputMode = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"softInputMode",
    r"I",
  );

  /// from: public int softInputMode
  int get softInputMode => jni.Jni.accessors
      .getField(reference, _id_softInputMode, jni.JniCallType.intType)
      .integer;

  /// from: public int softInputMode
  set softInputMode(int value) =>
      jni.Jni.env.SetIntField(reference, _id_softInputMode, value);

  static final _id_targetActivity = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"targetActivity",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String targetActivity
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get targetActivity =>
      const jni.JStringType().fromRef(jni.Jni.accessors
          .getField(reference, _id_targetActivity, jni.JniCallType.objectType)
          .object);

  /// from: public java.lang.String targetActivity
  /// The returned object must be released after use, by calling the [release] method.
  set targetActivity(jni.JString value) => jni.Jni.env
      .SetObjectField(reference, _id_targetActivity, value.reference);

  static final _id_taskAffinity = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"taskAffinity",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String taskAffinity
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get taskAffinity =>
      const jni.JStringType().fromRef(jni.Jni.accessors
          .getField(reference, _id_taskAffinity, jni.JniCallType.objectType)
          .object);

  /// from: public java.lang.String taskAffinity
  /// The returned object must be released after use, by calling the [release] method.
  set taskAffinity(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_taskAffinity, value.reference);

  static final _id_theme = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"theme",
    r"I",
  );

  /// from: public int theme
  int get theme => jni.Jni.accessors
      .getField(reference, _id_theme, jni.JniCallType.intType)
      .integer;

  /// from: public int theme
  set theme(int value) => jni.Jni.env.SetIntField(reference, _id_theme, value);

  static final _id_uiOptions = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"uiOptions",
    r"I",
  );

  /// from: public int uiOptions
  int get uiOptions => jni.Jni.accessors
      .getField(reference, _id_uiOptions, jni.JniCallType.intType)
      .integer;

  /// from: public int uiOptions
  set uiOptions(int value) =>
      jni.Jni.env.SetIntField(reference, _id_uiOptions, value);

  static final _id_windowLayout = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"windowLayout",
    r"Landroid/content/pm/ActivityInfo$WindowLayout;",
  );

  /// from: public android.content.pm.ActivityInfo$WindowLayout windowLayout
  /// The returned object must be released after use, by calling the [release] method.
  ActivityInfo_WindowLayout get windowLayout =>
      const $ActivityInfo_WindowLayoutType().fromRef(jni.Jni.accessors
          .getField(reference, _id_windowLayout, jni.JniCallType.objectType)
          .object);

  /// from: public android.content.pm.ActivityInfo$WindowLayout windowLayout
  /// The returned object must be released after use, by calling the [release] method.
  set windowLayout(ActivityInfo_WindowLayout value) =>
      jni.Jni.env.SetObjectField(reference, _id_windowLayout, value.reference);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ActivityInfo() {
    return ActivityInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/pm/ActivityInfo;)V");

  /// from: public void <init>(android.content.pm.ActivityInfo activityInfo)
  /// The returned object must be released after use, by calling the [release] method.
  factory ActivityInfo.new1(
    ActivityInfo activityInfo,
  ) {
    return ActivityInfo.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [activityInfo.reference]).object);
  }

  static final _id_getThemeResource = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getThemeResource", r"()I");

  /// from: public final int getThemeResource()
  int getThemeResource() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getThemeResource, jni.JniCallType.intType, []).integer;
  }

  static final _id_getKnownActivityEmbeddingCerts = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getKnownActivityEmbeddingCerts",
          r"()Ljava/util/Set;");

  /// from: public java.util.Set getKnownActivityEmbeddingCerts()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getKnownActivityEmbeddingCerts() {
    return const jni.JSetType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getKnownActivityEmbeddingCerts,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_dump = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"dump", r"(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: public void dump(android.util.Printer printer, java.lang.String string)
  void dump(
    jni.JObject printer,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dump,
        jni.JniCallType.voidType,
        [printer.reference, string.reference]).check();
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }

  static final _id_describeContents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"describeContents", r"()I");

  /// from: public int describeContents()
  int describeContents() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_describeContents, jni.JniCallType.intType, []).integer;
  }

  static final _id_writeToParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeToParcel", r"(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeToParcel,
        jni.JniCallType.voidType, [parcel.reference, jni.JValueInt(i)]).check();
  }
}

final class $ActivityInfoType extends jni.JObjType<ActivityInfo> {
  const $ActivityInfoType();

  @override
  String get signature => r"Landroid/content/pm/ActivityInfo;";

  @override
  ActivityInfo fromRef(jni.JObjectPtr ref) => ActivityInfo.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ActivityInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityInfoType) &&
        other is $ActivityInfoType;
  }
}

/// from: android.content.pm.PackageItemInfo$DisplayNameComparator
class PackageItemInfo_DisplayNameComparator extends jni.JObject {
  @override
  late final jni.JObjType<PackageItemInfo_DisplayNameComparator> $type = type;

  PackageItemInfo_DisplayNameComparator.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"android/content/pm/PackageItemInfo$DisplayNameComparator");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageItemInfo_DisplayNameComparatorType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/pm/PackageManager;)V");

  /// from: public void <init>(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageItemInfo_DisplayNameComparator(
    PackageManager packageManager,
  ) {
    return PackageItemInfo_DisplayNameComparator.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new0, [packageManager.reference]).object);
  }

  static final _id_compare = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"compare",
      r"(Landroid/content/pm/PackageItemInfo;Landroid/content/pm/PackageItemInfo;)I");

  /// from: public final int compare(android.content.pm.PackageItemInfo packageItemInfo, android.content.pm.PackageItemInfo packageItemInfo1)
  int compare(
    PackageItemInfo packageItemInfo,
    PackageItemInfo packageItemInfo1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_compare,
        jni.JniCallType.intType,
        [packageItemInfo.reference, packageItemInfo1.reference]).integer;
  }

  static final _id_compare1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"compare", r"(Ljava/lang/Object;Ljava/lang/Object;)I");

  /// from: public int compare(java.lang.Object object, java.lang.Object object1)
  int compare1(
    jni.JObject object,
    jni.JObject object1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_compare1,
        jni.JniCallType.intType, [object.reference, object1.reference]).integer;
  }
}

final class $PackageItemInfo_DisplayNameComparatorType
    extends jni.JObjType<PackageItemInfo_DisplayNameComparator> {
  const $PackageItemInfo_DisplayNameComparatorType();

  @override
  String get signature =>
      r"Landroid/content/pm/PackageItemInfo$DisplayNameComparator;";

  @override
  PackageItemInfo_DisplayNameComparator fromRef(jni.JObjectPtr ref) =>
      PackageItemInfo_DisplayNameComparator.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageItemInfo_DisplayNameComparatorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageItemInfo_DisplayNameComparatorType) &&
        other is $PackageItemInfo_DisplayNameComparatorType;
  }
}

/// from: android.content.pm.PackageItemInfo
class PackageItemInfo extends jni.JObject {
  @override
  late final jni.JObjType<PackageItemInfo> $type = type;

  PackageItemInfo.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/pm/PackageItemInfo");

  /// The type which includes information such as the signature of this class.
  static const type = $PackageItemInfoType();
  static final _id_banner = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"banner",
    r"I",
  );

  /// from: public int banner
  int get banner => jni.Jni.accessors
      .getField(reference, _id_banner, jni.JniCallType.intType)
      .integer;

  /// from: public int banner
  set banner(int value) =>
      jni.Jni.env.SetIntField(reference, _id_banner, value);

  static final _id_icon = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"icon",
    r"I",
  );

  /// from: public int icon
  int get icon => jni.Jni.accessors
      .getField(reference, _id_icon, jni.JniCallType.intType)
      .integer;

  /// from: public int icon
  set icon(int value) => jni.Jni.env.SetIntField(reference, _id_icon, value);

  static final _id_labelRes = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"labelRes",
    r"I",
  );

  /// from: public int labelRes
  int get labelRes => jni.Jni.accessors
      .getField(reference, _id_labelRes, jni.JniCallType.intType)
      .integer;

  /// from: public int labelRes
  set labelRes(int value) =>
      jni.Jni.env.SetIntField(reference, _id_labelRes, value);

  static final _id_logo = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"logo",
    r"I",
  );

  /// from: public int logo
  int get logo => jni.Jni.accessors
      .getField(reference, _id_logo, jni.JniCallType.intType)
      .integer;

  /// from: public int logo
  set logo(int value) => jni.Jni.env.SetIntField(reference, _id_logo, value);

  static final _id_metaData = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"metaData",
    r"Landroid/os/Bundle;",
  );

  /// from: public android.os.Bundle metaData
  /// The returned object must be released after use, by calling the [release] method.
  Bundle get metaData => const $BundleType().fromRef(jni.Jni.accessors
      .getField(reference, _id_metaData, jni.JniCallType.objectType)
      .object);

  /// from: public android.os.Bundle metaData
  /// The returned object must be released after use, by calling the [release] method.
  set metaData(Bundle value) =>
      jni.Jni.env.SetObjectField(reference, _id_metaData, value.reference);

  static final _id_name = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"name",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String name
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get name => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_name, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String name
  /// The returned object must be released after use, by calling the [release] method.
  set name(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_name, value.reference);

  static final _id_nonLocalizedLabel = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"nonLocalizedLabel",
    r"Ljava/lang/CharSequence;",
  );

  /// from: public java.lang.CharSequence nonLocalizedLabel
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get nonLocalizedLabel => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getField(reference, _id_nonLocalizedLabel, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.CharSequence nonLocalizedLabel
  /// The returned object must be released after use, by calling the [release] method.
  set nonLocalizedLabel(jni.JObject value) => jni.Jni.env
      .SetObjectField(reference, _id_nonLocalizedLabel, value.reference);

  static final _id_packageName = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"packageName",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get packageName =>
      const jni.JStringType().fromRef(jni.Jni.accessors
          .getField(reference, _id_packageName, jni.JniCallType.objectType)
          .object);

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_packageName, value.reference);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageItemInfo() {
    return PackageItemInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/pm/PackageItemInfo;)V");

  /// from: public void <init>(android.content.pm.PackageItemInfo packageItemInfo)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageItemInfo.new1(
    PackageItemInfo packageItemInfo,
  ) {
    return PackageItemInfo.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [packageItemInfo.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Landroid/os/Parcel;)V");

  /// from: protected void <init>(android.os.Parcel parcel)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageItemInfo.new2(
    jni.JObject parcel,
  ) {
    return PackageItemInfo.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [parcel.reference]).object);
  }

  static final _id_loadLabel = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadLabel",
      r"(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadLabel(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadLabel(
    PackageManager packageManager,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadLabel,
        jni.JniCallType.objectType,
        [packageManager.reference]).object);
  }

  static final _id_loadIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadIcon",
      r"(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadIcon(
    PackageManager packageManager,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadIcon,
        jni.JniCallType.objectType,
        [packageManager.reference]).object);
  }

  static final _id_loadUnbadgedIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadUnbadgedIcon",
      r"(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadUnbadgedIcon(
    PackageManager packageManager,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadUnbadgedIcon,
        jni.JniCallType.objectType,
        [packageManager.reference]).object);
  }

  static final _id_loadBanner = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadBanner",
      r"(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadBanner(
    PackageManager packageManager,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadBanner,
        jni.JniCallType.objectType,
        [packageManager.reference]).object);
  }

  static final _id_loadLogo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadLogo",
      r"(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadLogo(
    PackageManager packageManager,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadLogo,
        jni.JniCallType.objectType,
        [packageManager.reference]).object);
  }

  static final _id_loadXmlMetaData = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadXmlMetaData",
      r"(Landroid/content/pm/PackageManager;Ljava/lang/String;)Landroid/content/res/XmlResourceParser;");

  /// from: public android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager packageManager, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadXmlMetaData(
    PackageManager packageManager,
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadXmlMetaData,
        jni.JniCallType.objectType,
        [packageManager.reference, string.reference]).object);
  }

  static final _id_dumpFront = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"dumpFront", r"(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: protected void dumpFront(android.util.Printer printer, java.lang.String string)
  void dumpFront(
    jni.JObject printer,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dumpFront,
        jni.JniCallType.voidType,
        [printer.reference, string.reference]).check();
  }

  static final _id_dumpBack = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"dumpBack", r"(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: protected void dumpBack(android.util.Printer printer, java.lang.String string)
  void dumpBack(
    jni.JObject printer,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dumpBack,
        jni.JniCallType.voidType,
        [printer.reference, string.reference]).check();
  }

  static final _id_writeToParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeToParcel", r"(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeToParcel,
        jni.JniCallType.voidType, [parcel.reference, jni.JValueInt(i)]).check();
  }
}

final class $PackageItemInfoType extends jni.JObjType<PackageItemInfo> {
  const $PackageItemInfoType();

  @override
  String get signature => r"Landroid/content/pm/PackageItemInfo;";

  @override
  PackageItemInfo fromRef(jni.JObjectPtr ref) => PackageItemInfo.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageItemInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageItemInfoType) &&
        other is $PackageItemInfoType;
  }
}

/// from: dev.celest.celest_auth.CelestAuth
class CelestAuth extends jni.JObject {
  @override
  late final jni.JObjType<CelestAuth> $type = type;

  CelestAuth.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"dev/celest/celest_auth/CelestAuth");

  /// The type which includes information such as the signature of this class.
  static const type = $CelestAuthType();
  static final _id_new0 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Landroid/app/Activity;)V");

  /// from: public void <init>(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  factory CelestAuth(
    Activity activity,
  ) {
    return CelestAuth.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [activity.reference]).object);
  }

  static final _id_isSupported = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"isSupported",
      r"(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public final java.lang.Object isSupported(kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JBoolean> isSupported() async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(reference, _id_isSupported,
        jni.JniCallType.objectType, [$c.reference]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JBooleanType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const jni.JBooleanType().fromRef($o);
  }

  static final _id_register = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"register",
      r"(Ljava/lang/String;Landroidx/credentials/CredentialManagerCallback;)Landroid/os/CancellationSignal;");

  /// from: public final android.os.CancellationSignal register(java.lang.String string, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  /// The returned object must be released after use, by calling the [release] method.
  CancellationSignal register(
    jni.JString string,
    CredentialManagerCallback<CreateCredentialResponse,
            CreateCredentialException>
        credentialManagerCallback,
  ) {
    return const $CancellationSignalType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_register, jni.JniCallType.objectType,
            [string.reference, credentialManagerCallback.reference]).object);
  }

  static final _id_authenticate = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"authenticate",
      r"(Ljava/lang/String;Landroidx/credentials/CredentialManagerCallback;)Landroid/os/CancellationSignal;");

  /// from: public final android.os.CancellationSignal authenticate(java.lang.String string, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  /// The returned object must be released after use, by calling the [release] method.
  CancellationSignal authenticate(
    jni.JString string,
    CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
        credentialManagerCallback,
  ) {
    return const $CancellationSignalType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_authenticate,
            jni.JniCallType.objectType,
            [string.reference, credentialManagerCallback.reference]).object);
  }
}

final class $CelestAuthType extends jni.JObjType<CelestAuth> {
  const $CelestAuthType();

  @override
  String get signature => r"Ldev/celest/celest_auth/CelestAuth;";

  @override
  CelestAuth fromRef(jni.JObjectPtr ref) => CelestAuth.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CelestAuthType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CelestAuthType) && other is $CelestAuthType;
  }
}

/// from: androidx.credentials.CreateCredentialRequest$Companion
class CreateCredentialRequest_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialRequest_Companion> $type = type;

  CreateCredentialRequest_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreateCredentialRequest$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialRequest_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/Bundle;ZLjava/lang/String;)Landroidx/credentials/CreateCredentialRequest;");

  /// from: public final androidx.credentials.CreateCredentialRequest createFrom(java.lang.String string, android.os.Bundle bundle, android.os.Bundle bundle1, boolean z, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialRequest createFrom(
    jni.JString string,
    Bundle bundle,
    Bundle bundle1,
    bool z,
    jni.JString string1,
  ) {
    return const $CreateCredentialRequestType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_createFrom, jni.JniCallType.objectType, [
      string.reference,
      bundle.reference,
      bundle1.reference,
      z ? 1 : 0,
      string1.reference
    ]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialRequest_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialRequest_CompanionType
    extends jni.JObjType<CreateCredentialRequest_Companion> {
  const $CreateCredentialRequest_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreateCredentialRequest$Companion;";

  @override
  CreateCredentialRequest_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialRequest_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialRequest_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialRequest_CompanionType) &&
        other is $CreateCredentialRequest_CompanionType;
  }
}

/// from: androidx.credentials.CreateCredentialRequest$DisplayInfo$Companion
class CreateCredentialRequest_DisplayInfo_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialRequest_DisplayInfo_Companion> $type =
      type;

  CreateCredentialRequest_DisplayInfo_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreateCredentialRequest$DisplayInfo$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialRequest_DisplayInfo_CompanionType();
  static final _id_parseFromCredentialDataBundle = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"parseFromCredentialDataBundle",
      r"(Landroid/os/Bundle;)Landroidx/credentials/CreateCredentialRequest$DisplayInfo;");

  /// from: public final androidx.credentials.CreateCredentialRequest$DisplayInfo parseFromCredentialDataBundle(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialRequest_DisplayInfo parseFromCredentialDataBundle(
    Bundle bundle,
  ) {
    return const $CreateCredentialRequest_DisplayInfoType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_parseFromCredentialDataBundle,
            jni.JniCallType.objectType,
            [bundle.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialRequest_DisplayInfo_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialRequest_DisplayInfo_CompanionType
    extends jni.JObjType<CreateCredentialRequest_DisplayInfo_Companion> {
  const $CreateCredentialRequest_DisplayInfo_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreateCredentialRequest$DisplayInfo$Companion;";

  @override
  CreateCredentialRequest_DisplayInfo_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialRequest_DisplayInfo_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialRequest_DisplayInfo_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialRequest_DisplayInfo_CompanionType) &&
        other is $CreateCredentialRequest_DisplayInfo_CompanionType;
  }
}

/// from: androidx.credentials.CreateCredentialRequest$DisplayInfo
class CreateCredentialRequest_DisplayInfo extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialRequest_DisplayInfo> $type = type;

  CreateCredentialRequest_DisplayInfo.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreateCredentialRequest$DisplayInfo");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialRequest_DisplayInfoType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreateCredentialRequest$DisplayInfo$Companion;",
  );

  /// from: static public final androidx.credentials.CreateCredentialRequest$DisplayInfo$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialRequest_DisplayInfo_Companion get Companion =>
      const $CreateCredentialRequest_DisplayInfo_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_REQUEST_DISPLAY_INFO
  static const BUNDLE_KEY_REQUEST_DISPLAY_INFO =
      r"""androidx.credentials.BUNDLE_KEY_REQUEST_DISPLAY_INFO""";

  /// from: static public final java.lang.String BUNDLE_KEY_USER_ID
  static const BUNDLE_KEY_USER_ID =
      r"""androidx.credentials.BUNDLE_KEY_USER_ID""";

  /// from: static public final java.lang.String BUNDLE_KEY_USER_DISPLAY_NAME
  static const BUNDLE_KEY_USER_DISPLAY_NAME =
      r"""androidx.credentials.BUNDLE_KEY_USER_DISPLAY_NAME""";

  /// from: static public final java.lang.String BUNDLE_KEY_CREDENTIAL_TYPE_ICON
  static const BUNDLE_KEY_CREDENTIAL_TYPE_ICON =
      r"""androidx.credentials.BUNDLE_KEY_CREDENTIAL_TYPE_ICON""";

  /// from: static public final java.lang.String BUNDLE_KEY_DEFAULT_PROVIDER
  static const BUNDLE_KEY_DEFAULT_PROVIDER =
      r"""androidx.credentials.BUNDLE_KEY_DEFAULT_PROVIDER""";

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/graphics/drawable/Icon;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1, android.graphics.drawable.Icon icon, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo(
    jni.JObject charSequence,
    jni.JObject charSequence1,
    jni.JObject icon,
    jni.JString string,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0, [
      charSequence.reference,
      charSequence1.reference,
      icon.reference,
      string.reference
    ]).object);
  }

  static final _id_getUserId = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getUserId", r"()Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getUserId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserId() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getUserId, jni.JniCallType.objectType, []).object);
  }

  static final _id_getUserDisplayName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getUserDisplayName", r"()Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getUserDisplayName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserDisplayName() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getUserDisplayName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCredentialTypeIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredentialTypeIcon",
      r"()Landroid/graphics/drawable/Icon;");

  /// from: public final android.graphics.drawable.Icon getCredentialTypeIcon()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCredentialTypeIcon() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCredentialTypeIcon,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPreferDefaultProvider = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPreferDefaultProvider", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getPreferDefaultProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPreferDefaultProvider() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPreferDefaultProvider,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo.new1(
    jni.JObject charSequence,
    jni.JObject charSequence1,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new1,
            [charSequence.reference, charSequence1.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo.new2(
    jni.JObject charSequence,
    jni.JObject charSequence1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new2, [
      charSequence.reference,
      charSequence1.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo.new3(
    jni.JObject charSequence,
    jni.JObject charSequence1,
    jni.JString string,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new3, [
      charSequence.reference,
      charSequence1.reference,
      string.reference
    ]).object);
  }

  static final _id_toBundle = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toBundle", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle toBundle()
  /// The returned object must be released after use, by calling the [release] method.
  Bundle toBundle() {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toBundle, jni.JniCallType.objectType, []).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo.new4(
    jni.JObject charSequence,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new4, [charSequence.reference]).object);
  }

  static final _id_parseFromCredentialDataBundle = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"parseFromCredentialDataBundle",
          r"(Landroid/os/Bundle;)Landroidx/credentials/CreateCredentialRequest$DisplayInfo;");

  /// from: static public final androidx.credentials.CreateCredentialRequest$DisplayInfo parseFromCredentialDataBundle(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialRequest_DisplayInfo parseFromCredentialDataBundle(
    Bundle bundle,
  ) {
    return const $CreateCredentialRequest_DisplayInfoType().fromRef(
        jni.Jni.accessors.callStaticMethodWithArgs(
            _class.reference,
            _id_parseFromCredentialDataBundle,
            jni.JniCallType.objectType,
            [bundle.reference]).object);
  }
}

final class $CreateCredentialRequest_DisplayInfoType
    extends jni.JObjType<CreateCredentialRequest_DisplayInfo> {
  const $CreateCredentialRequest_DisplayInfoType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreateCredentialRequest$DisplayInfo;";

  @override
  CreateCredentialRequest_DisplayInfo fromRef(jni.JObjectPtr ref) =>
      CreateCredentialRequest_DisplayInfo.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialRequest_DisplayInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialRequest_DisplayInfoType) &&
        other is $CreateCredentialRequest_DisplayInfoType;
  }
}

/// from: androidx.credentials.CreateCredentialRequest
class CreateCredentialRequest extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialRequest> $type = type;

  CreateCredentialRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CreateCredentialRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialRequestType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreateCredentialRequest$Companion;",
  );

  /// from: static public final androidx.credentials.CreateCredentialRequest$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialRequest_Companion get Companion =>
      const $CreateCredentialRequest_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS
  static const BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS =
      r"""androidx.credentials.BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS""";

  /// from: static public final java.lang.String BUNDLE_KEY_IS_AUTO_SELECT_ALLOWED
  static const BUNDLE_KEY_IS_AUTO_SELECT_ALLOWED =
      r"""androidx.credentials.BUNDLE_KEY_IS_AUTO_SELECT_ALLOWED""";

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/Bundle;ZZLandroidx/credentials/CreateCredentialRequest$DisplayInfo;Ljava/lang/String;Z)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle, android.os.Bundle bundle1, boolean z, boolean z1, androidx.credentials.CreateCredentialRequest$DisplayInfo displayInfo, java.lang.String string1, boolean z2)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest(
    jni.JString string,
    Bundle bundle,
    Bundle bundle1,
    bool z,
    bool z1,
    CreateCredentialRequest_DisplayInfo displayInfo,
    jni.JString string1,
    bool z2,
  ) {
    return CreateCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0, [
      string.reference,
      bundle.reference,
      bundle1.reference,
      z ? 1 : 0,
      z1 ? 1 : 0,
      displayInfo.reference,
      string1.reference,
      z2 ? 1 : 0
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getCredentialData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCredentialData", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getCredentialData()
  /// The returned object must be released after use, by calling the [release] method.
  Bundle getCredentialData() {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCredentialData,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCandidateQueryData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCandidateQueryData", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getCandidateQueryData()
  /// The returned object must be released after use, by calling the [release] method.
  Bundle getCandidateQueryData() {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCandidateQueryData,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_isSystemProviderRequired = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isSystemProviderRequired", r"()Z");

  /// from: public final boolean isSystemProviderRequired()
  bool isSystemProviderRequired() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isSystemProviderRequired, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isAutoSelectAllowed = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isAutoSelectAllowed", r"()Z");

  /// from: public final boolean isAutoSelectAllowed()
  bool isAutoSelectAllowed() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isAutoSelectAllowed, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getDisplayInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDisplayInfo",
      r"()Landroidx/credentials/CreateCredentialRequest$DisplayInfo;");

  /// from: public final androidx.credentials.CreateCredentialRequest$DisplayInfo getDisplayInfo()
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialRequest_DisplayInfo getDisplayInfo() {
    return const $CreateCredentialRequest_DisplayInfoType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(reference, _id_getDisplayInfo,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getOrigin = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getOrigin", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getOrigin()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOrigin() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getOrigin, jni.JniCallType.objectType, []).object);
  }

  static final _id_preferImmediatelyAvailableCredentials = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"preferImmediatelyAvailableCredentials", r"()Z");

  /// from: public final boolean preferImmediatelyAvailableCredentials()
  bool preferImmediatelyAvailableCredentials() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_preferImmediatelyAvailableCredentials,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/Bundle;ZLjava/lang/String;)Landroidx/credentials/CreateCredentialRequest;");

  /// from: static public final androidx.credentials.CreateCredentialRequest createFrom(java.lang.String string, android.os.Bundle bundle, android.os.Bundle bundle1, boolean z, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialRequest createFrom(
    jni.JString string,
    Bundle bundle,
    Bundle bundle1,
    bool z,
    jni.JString string1,
  ) {
    return const $CreateCredentialRequestType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_createFrom, jni.JniCallType.objectType, [
      string.reference,
      bundle.reference,
      bundle1.reference,
      z ? 1 : 0,
      string1.reference
    ]).object);
  }
}

final class $CreateCredentialRequestType
    extends jni.JObjType<CreateCredentialRequest> {
  const $CreateCredentialRequestType();

  @override
  String get signature => r"Landroidx/credentials/CreateCredentialRequest;";

  @override
  CreateCredentialRequest fromRef(jni.JObjectPtr ref) =>
      CreateCredentialRequest.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialRequestType) &&
        other is $CreateCredentialRequestType;
  }
}

/// from: androidx.credentials.CreateCredentialResponse$Companion
class CreateCredentialResponse_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialResponse_Companion> $type = type;

  CreateCredentialResponse_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreateCredentialResponse$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialResponse_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/CreateCredentialResponse;");

  /// from: public final androidx.credentials.CreateCredentialResponse createFrom(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialResponse createFrom(
    jni.JString string,
    Bundle bundle,
  ) {
    return const $CreateCredentialResponseType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, bundle.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialResponse_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialResponse_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialResponse_CompanionType
    extends jni.JObjType<CreateCredentialResponse_Companion> {
  const $CreateCredentialResponse_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreateCredentialResponse$Companion;";

  @override
  CreateCredentialResponse_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialResponse_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialResponse_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialResponse_CompanionType) &&
        other is $CreateCredentialResponse_CompanionType;
  }
}

/// from: androidx.credentials.CreateCredentialResponse
class CreateCredentialResponse extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialResponse> $type = type;

  CreateCredentialResponse.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CreateCredentialResponse");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialResponseType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreateCredentialResponse$Companion;",
  );

  /// from: static public final androidx.credentials.CreateCredentialResponse$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialResponse_Companion get Companion =>
      const $CreateCredentialResponse_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialResponse(
    jni.JString string,
    Bundle bundle,
  ) {
    return CreateCredentialResponse.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [string.reference, bundle.reference]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getData = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getData", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getData()
  /// The returned object must be released after use, by calling the [release] method.
  Bundle getData() {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getData, jni.JniCallType.objectType, []).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/CreateCredentialResponse;");

  /// from: static public final androidx.credentials.CreateCredentialResponse createFrom(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialResponse createFrom(
    jni.JString string,
    Bundle bundle,
  ) {
    return const $CreateCredentialResponseType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, bundle.reference]).object);
  }
}

final class $CreateCredentialResponseType
    extends jni.JObjType<CreateCredentialResponse> {
  const $CreateCredentialResponseType();

  @override
  String get signature => r"Landroidx/credentials/CreateCredentialResponse;";

  @override
  CreateCredentialResponse fromRef(jni.JObjectPtr ref) =>
      CreateCredentialResponse.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialResponseType) &&
        other is $CreateCredentialResponseType;
  }
}

/// from: androidx.credentials.CreatePublicKeyCredentialRequest$Companion
class CreatePublicKeyCredentialRequest_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialRequest_Companion> $type =
      type;

  CreatePublicKeyCredentialRequest_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreatePublicKeyCredentialRequest$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialRequest_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialRequest_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreatePublicKeyCredentialRequest_CompanionType
    extends jni.JObjType<CreatePublicKeyCredentialRequest_Companion> {
  const $CreatePublicKeyCredentialRequest_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreatePublicKeyCredentialRequest$Companion;";

  @override
  CreatePublicKeyCredentialRequest_Companion fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialRequest_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreatePublicKeyCredentialRequest_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreatePublicKeyCredentialRequest_CompanionType) &&
        other is $CreatePublicKeyCredentialRequest_CompanionType;
  }
}

/// from: androidx.credentials.CreatePublicKeyCredentialRequest
class CreatePublicKeyCredentialRequest extends CreateCredentialRequest {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialRequest> $type = type;

  CreatePublicKeyCredentialRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreatePublicKeyCredentialRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialRequestType();
  static final _id_Companion1 = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreatePublicKeyCredentialRequest$Companion;",
  );

  /// from: static public final androidx.credentials.CreatePublicKeyCredentialRequest$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreatePublicKeyCredentialRequest_Companion get Companion1 =>
      const $CreatePublicKeyCredentialRequest_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion1, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_CLIENT_DATA_HASH
  static const BUNDLE_KEY_CLIENT_DATA_HASH =
      r"""androidx.credentials.BUNDLE_KEY_CLIENT_DATA_HASH""";

  /// from: static public final java.lang.String BUNDLE_KEY_REQUEST_JSON
  static const BUNDLE_KEY_REQUEST_JSON =
      r"""androidx.credentials.BUNDLE_KEY_REQUEST_JSON""";

  /// from: static public final java.lang.String BUNDLE_VALUE_SUBTYPE_CREATE_PUBLIC_KEY_CREDENTIAL_REQUEST
  static const BUNDLE_VALUE_SUBTYPE_CREATE_PUBLIC_KEY_CREDENTIAL_REQUEST =
      r"""androidx.credentials.BUNDLE_VALUE_SUBTYPE_CREATE_PUBLIC_KEY_CREDENTIAL_REQUEST""";

  static final _id_getRequestJson = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getRequestJson", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getRequestJson()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRequestJson() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getRequestJson, jni.JniCallType.objectType, []).object);
  }

  static final _id_getClientDataHash = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getClientDataHash", r"()[B");

  /// from: public final byte[] getClientDataHash()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getClientDataHash() {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getClientDataHash,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;[BZLjava/lang/String;Z)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, java.lang.String string1, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new1(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    jni.JString string1,
    bool z1,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new1, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      string1.reference,
      z1 ? 1 : 0
    ]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BZLjava/lang/String;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, java.lang.String string1, boolean z1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new2(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    jni.JString string1,
    bool z1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new2, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      string1.reference,
      z1 ? 1 : 0,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BZLjava/lang/String;Ljava/lang/String;Z)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, java.lang.String string1, java.lang.String string2, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new3(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    jni.JString string1,
    jni.JString string2,
    bool z1,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new3, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      string1.reference,
      string2.reference,
      z1 ? 1 : 0
    ]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;[BZLjava/lang/String;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new4(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    jni.JString string1,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new4, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      string1.reference
    ]).object);
  }

  static final _id_new5 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;[BZ)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new5(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new5,
            [string.reference, bs.reference, z ? 1 : 0]).object);
  }

  static final _id_new6 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;[B)V");

  /// from: public void <init>(java.lang.String string, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new6(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new6,
            [string.reference, bs.reference]).object);
  }

  static final _id_new7 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new7(
    jni.JString string,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [string.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BZZLandroidx/credentials/CreateCredentialRequest$DisplayInfo;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/Bundle;Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, boolean z1, androidx.credentials.CreateCredentialRequest$DisplayInfo displayInfo, java.lang.String string1, android.os.Bundle bundle, android.os.Bundle bundle1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new8(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    bool z1,
    CreateCredentialRequest_DisplayInfo displayInfo,
    jni.JString string1,
    Bundle bundle,
    Bundle bundle1,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new8, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      z1 ? 1 : 0,
      displayInfo.reference,
      string1.reference,
      bundle.reference,
      bundle1.reference,
      defaultConstructorMarker.reference
    ]).object);
  }
}

final class $CreatePublicKeyCredentialRequestType
    extends jni.JObjType<CreatePublicKeyCredentialRequest> {
  const $CreatePublicKeyCredentialRequestType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreatePublicKeyCredentialRequest;";

  @override
  CreatePublicKeyCredentialRequest fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialRequest.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialRequestType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($CreatePublicKeyCredentialRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreatePublicKeyCredentialRequestType) &&
        other is $CreatePublicKeyCredentialRequestType;
  }
}

/// from: androidx.credentials.CreatePublicKeyCredentialResponse$Companion
class CreatePublicKeyCredentialResponse_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialResponse_Companion> $type =
      type;

  CreatePublicKeyCredentialResponse_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreatePublicKeyCredentialResponse$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialResponse_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialResponse_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialResponse_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreatePublicKeyCredentialResponse_CompanionType
    extends jni.JObjType<CreatePublicKeyCredentialResponse_Companion> {
  const $CreatePublicKeyCredentialResponse_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreatePublicKeyCredentialResponse$Companion;";

  @override
  CreatePublicKeyCredentialResponse_Companion fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialResponse_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreatePublicKeyCredentialResponse_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreatePublicKeyCredentialResponse_CompanionType) &&
        other is $CreatePublicKeyCredentialResponse_CompanionType;
  }
}

/// from: androidx.credentials.CreatePublicKeyCredentialResponse
class CreatePublicKeyCredentialResponse extends CreateCredentialResponse {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialResponse> $type = type;

  CreatePublicKeyCredentialResponse.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreatePublicKeyCredentialResponse");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialResponseType();
  static final _id_Companion1 = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreatePublicKeyCredentialResponse$Companion;",
  );

  /// from: static public final androidx.credentials.CreatePublicKeyCredentialResponse$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreatePublicKeyCredentialResponse_Companion get Companion1 =>
      const $CreatePublicKeyCredentialResponse_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion1, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_REGISTRATION_RESPONSE_JSON
  static const BUNDLE_KEY_REGISTRATION_RESPONSE_JSON =
      r"""androidx.credentials.BUNDLE_KEY_REGISTRATION_RESPONSE_JSON""";

  static final _id_getRegistrationResponseJson = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getRegistrationResponseJson",
          r"()Ljava/lang/String;");

  /// from: public final java.lang.String getRegistrationResponseJson()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRegistrationResponseJson() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getRegistrationResponseJson,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialResponse.new1(
    jni.JString string,
  ) {
    return CreatePublicKeyCredentialResponse.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Landroid/os/Bundle;Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialResponse.new2(
    jni.JString string,
    Bundle bundle,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialResponse.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new2, [
      string.reference,
      bundle.reference,
      defaultConstructorMarker.reference
    ]).object);
  }
}

final class $CreatePublicKeyCredentialResponseType
    extends jni.JObjType<CreatePublicKeyCredentialResponse> {
  const $CreatePublicKeyCredentialResponseType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreatePublicKeyCredentialResponse;";

  @override
  CreatePublicKeyCredentialResponse fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialResponse.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialResponseType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($CreatePublicKeyCredentialResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreatePublicKeyCredentialResponseType) &&
        other is $CreatePublicKeyCredentialResponseType;
  }
}

/// from: androidx.credentials.Credential$Companion
class Credential_Companion extends jni.JObject {
  @override
  late final jni.JObjType<Credential_Companion> $type = type;

  Credential_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/Credential$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $Credential_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/Credential;");

  /// from: public final androidx.credentials.Credential createFrom(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Credential createFrom(
    jni.JString string,
    Bundle bundle,
  ) {
    return const $CredentialType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createFrom,
        jni.JniCallType.objectType,
        [string.reference, bundle.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory Credential_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return Credential_Companion.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [defaultConstructorMarker.reference]).object);
  }
}

final class $Credential_CompanionType
    extends jni.JObjType<Credential_Companion> {
  const $Credential_CompanionType();

  @override
  String get signature => r"Landroidx/credentials/Credential$Companion;";

  @override
  Credential_Companion fromRef(jni.JObjectPtr ref) =>
      Credential_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Credential_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Credential_CompanionType) &&
        other is $Credential_CompanionType;
  }
}

/// from: androidx.credentials.Credential
class Credential extends jni.JObject {
  @override
  late final jni.JObjType<Credential> $type = type;

  Credential.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"androidx/credentials/Credential");

  /// The type which includes information such as the signature of this class.
  static const type = $CredentialType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/Credential$Companion;",
  );

  /// from: static public final androidx.credentials.Credential$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static Credential_Companion get Companion =>
      const $Credential_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  factory Credential(
    jni.JString string,
    Bundle bundle,
  ) {
    return Credential.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [string.reference, bundle.reference]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getData = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getData", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getData()
  /// The returned object must be released after use, by calling the [release] method.
  Bundle getData() {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getData, jni.JniCallType.objectType, []).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/Credential;");

  /// from: static public final androidx.credentials.Credential createFrom(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  static Credential createFrom(
    jni.JString string,
    Bundle bundle,
  ) {
    return const $CredentialType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, bundle.reference]).object);
  }
}

final class $CredentialType extends jni.JObjType<Credential> {
  const $CredentialType();

  @override
  String get signature => r"Landroidx/credentials/Credential;";

  @override
  Credential fromRef(jni.JObjectPtr ref) => Credential.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CredentialType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialType) && other is $CredentialType;
  }
}

/// from: androidx.credentials.CredentialManager$Companion
class CredentialManager_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CredentialManager_Companion> $type = type;

  CredentialManager_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CredentialManager$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CredentialManager_CompanionType();
  static final _id_create = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"create",
      r"(Landroid/content/Context;)Landroidx/credentials/CredentialManager;");

  /// from: public final androidx.credentials.CredentialManager create(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  CredentialManager create(
    Context context,
  ) {
    return const $CredentialManagerType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_create, jni.JniCallType.objectType,
            [context.reference]).object);
  }
}

final class $CredentialManager_CompanionType
    extends jni.JObjType<CredentialManager_Companion> {
  const $CredentialManager_CompanionType();

  @override
  String get signature => r"Landroidx/credentials/CredentialManager$Companion;";

  @override
  CredentialManager_Companion fromRef(jni.JObjectPtr ref) =>
      CredentialManager_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CredentialManager_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialManager_CompanionType) &&
        other is $CredentialManager_CompanionType;
  }
}

/// from: androidx.credentials.CredentialManager
class CredentialManager extends jni.JObject {
  @override
  late final jni.JObjType<CredentialManager> $type = type;

  CredentialManager.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CredentialManager");

  /// The type which includes information such as the signature of this class.
  static const type = $CredentialManagerType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CredentialManager$Companion;",
  );

  /// from: static public final androidx.credentials.CredentialManager$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CredentialManager_Companion get Companion =>
      const $CredentialManager_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  static final _id_getCredential = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredential",
      r"(Landroid/content/Context;Landroidx/credentials/GetCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object getCredential(android.content.Context context, androidx.credentials.GetCredentialRequest getCredentialRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<GetCredentialResponse> getCredential(
    Context context,
    GetCredentialRequest getCredentialRequest,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredential, jni.JniCallType.objectType, [
      context.reference,
      getCredentialRequest.reference,
      $c.reference
    ]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const $GetCredentialResponseType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const $GetCredentialResponseType().fromRef($o);
  }

  static final _id_getCredential1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredential",
      r"(Landroid/content/Context;Landroidx/credentials/PrepareGetCredentialResponse$PendingGetCredentialHandle;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object getCredential(android.content.Context context, androidx.credentials.PrepareGetCredentialResponse$PendingGetCredentialHandle pendingGetCredentialHandle, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<GetCredentialResponse> getCredential1(
    Context context,
    jni.JObject pendingGetCredentialHandle,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredential1, jni.JniCallType.objectType, [
      context.reference,
      pendingGetCredentialHandle.reference,
      $c.reference
    ]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const $GetCredentialResponseType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const $GetCredentialResponseType().fromRef($o);
  }

  static final _id_prepareGetCredential = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"prepareGetCredential",
      r"(Landroidx/credentials/GetCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object prepareGetCredential(androidx.credentials.GetCredentialRequest getCredentialRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> prepareGetCredential(
    GetCredentialRequest getCredentialRequest,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_prepareGetCredential,
        jni.JniCallType.objectType,
        [getCredentialRequest.reference, $c.reference]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _id_createCredential = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createCredential",
      r"(Landroid/content/Context;Landroidx/credentials/CreateCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object createCredential(android.content.Context context, androidx.credentials.CreateCredentialRequest createCredentialRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<CreateCredentialResponse> createCredential(
    Context context,
    CreateCredentialRequest createCredentialRequest,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference, _id_createCredential, jni.JniCallType.objectType, [
      context.reference,
      createCredentialRequest.reference,
      $c.reference
    ]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const $CreateCredentialResponseType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const $CreateCredentialResponseType().fromRef($o);
  }

  static final _id_clearCredentialState = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"clearCredentialState",
      r"(Landroidx/credentials/ClearCredentialStateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object clearCredentialState(androidx.credentials.ClearCredentialStateRequest clearCredentialStateRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> clearCredentialState(
    jni.JObject clearCredentialStateRequest,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_clearCredentialState,
        jni.JniCallType.objectType,
        [clearCredentialStateRequest.reference, $c.reference]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _id_getCredentialAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredentialAsync",
      r"(Landroid/content/Context;Landroidx/credentials/GetCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void getCredentialAsync(android.content.Context context, androidx.credentials.GetCredentialRequest getCredentialRequest, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void getCredentialAsync(
    Context context,
    GetCredentialRequest getCredentialRequest,
    CancellationSignal cancellationSignal,
    Executor executor,
    CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredentialAsync, jni.JniCallType.voidType, [
      context.reference,
      getCredentialRequest.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_getCredentialAsync1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredentialAsync",
      r"(Landroid/content/Context;Landroidx/credentials/PrepareGetCredentialResponse$PendingGetCredentialHandle;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void getCredentialAsync(android.content.Context context, androidx.credentials.PrepareGetCredentialResponse$PendingGetCredentialHandle pendingGetCredentialHandle, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void getCredentialAsync1(
    Context context,
    jni.JObject pendingGetCredentialHandle,
    CancellationSignal cancellationSignal,
    Executor executor,
    CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredentialAsync1, jni.JniCallType.voidType, [
      context.reference,
      pendingGetCredentialHandle.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_prepareGetCredentialAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"prepareGetCredentialAsync",
      r"(Landroidx/credentials/GetCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void prepareGetCredentialAsync(androidx.credentials.GetCredentialRequest getCredentialRequest, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void prepareGetCredentialAsync(
    GetCredentialRequest getCredentialRequest,
    CancellationSignal cancellationSignal,
    Executor executor,
    CredentialManagerCallback<jni.JObject, GetCredentialException>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_prepareGetCredentialAsync, jni.JniCallType.voidType, [
      getCredentialRequest.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_createCredentialAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createCredentialAsync",
      r"(Landroid/content/Context;Landroidx/credentials/CreateCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void createCredentialAsync(android.content.Context context, androidx.credentials.CreateCredentialRequest createCredentialRequest, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void createCredentialAsync(
    Context context,
    CreateCredentialRequest createCredentialRequest,
    CancellationSignal cancellationSignal,
    Executor executor,
    CredentialManagerCallback<CreateCredentialResponse,
            CreateCredentialException>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_createCredentialAsync, jni.JniCallType.voidType, [
      context.reference,
      createCredentialRequest.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_clearCredentialStateAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"clearCredentialStateAsync",
      r"(Landroidx/credentials/ClearCredentialStateRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void clearCredentialStateAsync(androidx.credentials.ClearCredentialStateRequest clearCredentialStateRequest, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void clearCredentialStateAsync(
    jni.JObject clearCredentialStateRequest,
    CancellationSignal cancellationSignal,
    Executor executor,
    CredentialManagerCallback<jni.JObject, jni.JObject>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearCredentialStateAsync, jni.JniCallType.voidType, [
      clearCredentialStateRequest.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_createSettingsPendingIntent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"createSettingsPendingIntent",
          r"()Landroid/app/PendingIntent;");

  /// from: public abstract android.app.PendingIntent createSettingsPendingIntent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createSettingsPendingIntent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createSettingsPendingIntent,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_create = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"create",
      r"(Landroid/content/Context;)Landroidx/credentials/CredentialManager;");

  /// from: static public androidx.credentials.CredentialManager create(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static CredentialManager create(
    Context context,
  ) {
    return const $CredentialManagerType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_create,
            jni.JniCallType.objectType, [context.reference]).object);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CredentialManagerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r"getCredential(Landroid/content/Context;Landroidx/credentials/GetCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.getCredential(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1]
              .castTo(const $GetCredentialRequestType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"getCredential(Landroid/content/Context;Landroidx/credentials/PrepareGetCredentialResponse$PendingGetCredentialHandle;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.getCredential1(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"prepareGetCredential(Landroidx/credentials/GetCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.prepareGetCredential(
          $a[0]
              .castTo(const $GetCredentialRequestType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"createCredential(Landroid/content/Context;Landroidx/credentials/CreateCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.createCredential(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const $CreateCredentialRequestType(),
              releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"clearCredentialState(Landroidx/credentials/ClearCredentialStateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.clearCredentialState(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"getCredentialAsync(Landroid/content/Context;Landroidx/credentials/GetCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.getCredentialAsync(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1]
              .castTo(const $GetCredentialRequestType(), releaseOriginal: true),
          $a[2].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[3].castTo(const $ExecutorType(), releaseOriginal: true),
          $a[4].castTo(
              const $CredentialManagerCallbackType(
                  $GetCredentialResponseType(), $GetCredentialExceptionType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"getCredentialAsync(Landroid/content/Context;Landroidx/credentials/PrepareGetCredentialResponse$PendingGetCredentialHandle;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.getCredentialAsync1(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[2].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[3].castTo(const $ExecutorType(), releaseOriginal: true),
          $a[4].castTo(
              const $CredentialManagerCallbackType(
                  $GetCredentialResponseType(), $GetCredentialExceptionType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"prepareGetCredentialAsync(Landroidx/credentials/GetCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.prepareGetCredentialAsync(
          $a[0]
              .castTo(const $GetCredentialRequestType(), releaseOriginal: true),
          $a[1].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[2].castTo(const $ExecutorType(), releaseOriginal: true),
          $a[3].castTo(
              const $CredentialManagerCallbackType(
                  jni.JObjectType(), $GetCredentialExceptionType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"createCredentialAsync(Landroid/content/Context;Landroidx/credentials/CreateCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.createCredentialAsync(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const $CreateCredentialRequestType(),
              releaseOriginal: true),
          $a[2].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[3].castTo(const $ExecutorType(), releaseOriginal: true),
          $a[4].castTo(
              const $CredentialManagerCallbackType(
                  $CreateCredentialResponseType(),
                  $CreateCredentialExceptionType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"clearCredentialStateAsync(Landroidx/credentials/ClearCredentialStateRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.clearCredentialStateAsync(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[2].castTo(const $ExecutorType(), releaseOriginal: true),
          $a[3].castTo(
              const $CredentialManagerCallbackType(
                  jni.JObjectType(), jni.JObjectType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"createSettingsPendingIntent()Landroid/app/PendingIntent;") {
        final $r = _$impls[$p]!.createSettingsPendingIntent();
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"create(Landroid/content/Context;)Landroidx/credentials/CredentialManager;") {
        final $r = _$impls[$p]!.create(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CredentialManager.implement(
    $CredentialManagerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CredentialManager.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.credentials.CredentialManager",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CredentialManagerImpl {
  factory $CredentialManagerImpl({
    required jni.JObject Function(Context context,
            GetCredentialRequest getCredentialRequest, jni.JObject $c)
        getCredential,
    required jni.JObject Function(Context context,
            jni.JObject pendingGetCredentialHandle, jni.JObject $c)
        getCredential1,
    required jni.JObject Function(
            GetCredentialRequest getCredentialRequest, jni.JObject $c)
        prepareGetCredential,
    required jni.JObject Function(Context context,
            CreateCredentialRequest createCredentialRequest, jni.JObject $c)
        createCredential,
    required jni.JObject Function(
            jni.JObject clearCredentialStateRequest, jni.JObject $c)
        clearCredentialState,
    required void Function(
            Context context,
            GetCredentialRequest getCredentialRequest,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<GetCredentialResponse,
                    GetCredentialException>
                credentialManagerCallback)
        getCredentialAsync,
    required void Function(
            Context context,
            jni.JObject pendingGetCredentialHandle,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<GetCredentialResponse,
                    GetCredentialException>
                credentialManagerCallback)
        getCredentialAsync1,
    required void Function(
            GetCredentialRequest getCredentialRequest,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<jni.JObject, GetCredentialException>
                credentialManagerCallback)
        prepareGetCredentialAsync,
    required void Function(
            Context context,
            CreateCredentialRequest createCredentialRequest,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<CreateCredentialResponse,
                    CreateCredentialException>
                credentialManagerCallback)
        createCredentialAsync,
    required void Function(
            jni.JObject clearCredentialStateRequest,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<jni.JObject, jni.JObject>
                credentialManagerCallback)
        clearCredentialStateAsync,
    required jni.JObject Function() createSettingsPendingIntent,
    required CredentialManager Function(Context context) create,
  }) = _$CredentialManagerImpl;

  jni.JObject getCredential(Context context,
      GetCredentialRequest getCredentialRequest, jni.JObject $c);
  jni.JObject getCredential1(
      Context context, jni.JObject pendingGetCredentialHandle, jni.JObject $c);
  jni.JObject prepareGetCredential(
      GetCredentialRequest getCredentialRequest, jni.JObject $c);
  jni.JObject createCredential(Context context,
      CreateCredentialRequest createCredentialRequest, jni.JObject $c);
  jni.JObject clearCredentialState(
      jni.JObject clearCredentialStateRequest, jni.JObject $c);
  void getCredentialAsync(
      Context context,
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback);
  void getCredentialAsync1(
      Context context,
      jni.JObject pendingGetCredentialHandle,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback);
  void prepareGetCredentialAsync(
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<jni.JObject, GetCredentialException>
          credentialManagerCallback);
  void createCredentialAsync(
      Context context,
      CreateCredentialRequest createCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<CreateCredentialResponse,
              CreateCredentialException>
          credentialManagerCallback);
  void clearCredentialStateAsync(
      jni.JObject clearCredentialStateRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<jni.JObject, jni.JObject>
          credentialManagerCallback);
  jni.JObject createSettingsPendingIntent();
  CredentialManager create(Context context);
}

class _$CredentialManagerImpl implements $CredentialManagerImpl {
  _$CredentialManagerImpl({
    required jni.JObject Function(Context context,
            GetCredentialRequest getCredentialRequest, jni.JObject $c)
        getCredential,
    required jni.JObject Function(Context context,
            jni.JObject pendingGetCredentialHandle, jni.JObject $c)
        getCredential1,
    required jni.JObject Function(
            GetCredentialRequest getCredentialRequest, jni.JObject $c)
        prepareGetCredential,
    required jni.JObject Function(Context context,
            CreateCredentialRequest createCredentialRequest, jni.JObject $c)
        createCredential,
    required jni.JObject Function(
            jni.JObject clearCredentialStateRequest, jni.JObject $c)
        clearCredentialState,
    required void Function(
            Context context,
            GetCredentialRequest getCredentialRequest,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<GetCredentialResponse,
                    GetCredentialException>
                credentialManagerCallback)
        getCredentialAsync,
    required void Function(
            Context context,
            jni.JObject pendingGetCredentialHandle,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<GetCredentialResponse,
                    GetCredentialException>
                credentialManagerCallback)
        getCredentialAsync1,
    required void Function(
            GetCredentialRequest getCredentialRequest,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<jni.JObject, GetCredentialException>
                credentialManagerCallback)
        prepareGetCredentialAsync,
    required void Function(
            Context context,
            CreateCredentialRequest createCredentialRequest,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<CreateCredentialResponse,
                    CreateCredentialException>
                credentialManagerCallback)
        createCredentialAsync,
    required void Function(
            jni.JObject clearCredentialStateRequest,
            CancellationSignal cancellationSignal,
            Executor executor,
            CredentialManagerCallback<jni.JObject, jni.JObject>
                credentialManagerCallback)
        clearCredentialStateAsync,
    required jni.JObject Function() createSettingsPendingIntent,
    required CredentialManager Function(Context context) create,
  })  : _getCredential = getCredential,
        _getCredential1 = getCredential1,
        _prepareGetCredential = prepareGetCredential,
        _createCredential = createCredential,
        _clearCredentialState = clearCredentialState,
        _getCredentialAsync = getCredentialAsync,
        _getCredentialAsync1 = getCredentialAsync1,
        _prepareGetCredentialAsync = prepareGetCredentialAsync,
        _createCredentialAsync = createCredentialAsync,
        _clearCredentialStateAsync = clearCredentialStateAsync,
        _createSettingsPendingIntent = createSettingsPendingIntent,
        _create = create;

  final jni.JObject Function(Context context,
      GetCredentialRequest getCredentialRequest, jni.JObject $c) _getCredential;
  final jni.JObject Function(Context context,
      jni.JObject pendingGetCredentialHandle, jni.JObject $c) _getCredential1;
  final jni.JObject Function(
          GetCredentialRequest getCredentialRequest, jni.JObject $c)
      _prepareGetCredential;
  final jni.JObject Function(
      Context context,
      CreateCredentialRequest createCredentialRequest,
      jni.JObject $c) _createCredential;
  final jni.JObject Function(
          jni.JObject clearCredentialStateRequest, jni.JObject $c)
      _clearCredentialState;
  final void Function(
      Context context,
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback) _getCredentialAsync;
  final void Function(
      Context context,
      jni.JObject pendingGetCredentialHandle,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback) _getCredentialAsync1;
  final void Function(
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<jni.JObject, GetCredentialException>
          credentialManagerCallback) _prepareGetCredentialAsync;
  final void Function(
      Context context,
      CreateCredentialRequest createCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<CreateCredentialResponse,
              CreateCredentialException>
          credentialManagerCallback) _createCredentialAsync;
  final void Function(
      jni.JObject clearCredentialStateRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<jni.JObject, jni.JObject>
          credentialManagerCallback) _clearCredentialStateAsync;
  final jni.JObject Function() _createSettingsPendingIntent;
  final CredentialManager Function(Context context) _create;

  jni.JObject getCredential(Context context,
      GetCredentialRequest getCredentialRequest, jni.JObject $c) {
    return _getCredential(context, getCredentialRequest, $c);
  }

  jni.JObject getCredential1(
      Context context, jni.JObject pendingGetCredentialHandle, jni.JObject $c) {
    return _getCredential1(context, pendingGetCredentialHandle, $c);
  }

  jni.JObject prepareGetCredential(
      GetCredentialRequest getCredentialRequest, jni.JObject $c) {
    return _prepareGetCredential(getCredentialRequest, $c);
  }

  jni.JObject createCredential(Context context,
      CreateCredentialRequest createCredentialRequest, jni.JObject $c) {
    return _createCredential(context, createCredentialRequest, $c);
  }

  jni.JObject clearCredentialState(
      jni.JObject clearCredentialStateRequest, jni.JObject $c) {
    return _clearCredentialState(clearCredentialStateRequest, $c);
  }

  void getCredentialAsync(
      Context context,
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback) {
    return _getCredentialAsync(context, getCredentialRequest,
        cancellationSignal, executor, credentialManagerCallback);
  }

  void getCredentialAsync1(
      Context context,
      jni.JObject pendingGetCredentialHandle,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback) {
    return _getCredentialAsync1(context, pendingGetCredentialHandle,
        cancellationSignal, executor, credentialManagerCallback);
  }

  void prepareGetCredentialAsync(
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<jni.JObject, GetCredentialException>
          credentialManagerCallback) {
    return _prepareGetCredentialAsync(getCredentialRequest, cancellationSignal,
        executor, credentialManagerCallback);
  }

  void createCredentialAsync(
      Context context,
      CreateCredentialRequest createCredentialRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<CreateCredentialResponse,
              CreateCredentialException>
          credentialManagerCallback) {
    return _createCredentialAsync(context, createCredentialRequest,
        cancellationSignal, executor, credentialManagerCallback);
  }

  void clearCredentialStateAsync(
      jni.JObject clearCredentialStateRequest,
      CancellationSignal cancellationSignal,
      Executor executor,
      CredentialManagerCallback<jni.JObject, jni.JObject>
          credentialManagerCallback) {
    return _clearCredentialStateAsync(clearCredentialStateRequest,
        cancellationSignal, executor, credentialManagerCallback);
  }

  jni.JObject createSettingsPendingIntent() {
    return _createSettingsPendingIntent();
  }

  CredentialManager create(Context context) {
    return _create(context);
  }
}

final class $CredentialManagerType extends jni.JObjType<CredentialManager> {
  const $CredentialManagerType();

  @override
  String get signature => r"Landroidx/credentials/CredentialManager;";

  @override
  CredentialManager fromRef(jni.JObjectPtr ref) =>
      CredentialManager.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CredentialManagerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialManagerType) &&
        other is $CredentialManagerType;
  }
}

/// from: androidx.credentials.CredentialManagerCallback
class CredentialManagerCallback<$R extends jni.JObject, $E extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType<CredentialManagerCallback<$R, $E>> $type = type(R, E);

  final jni.JObjType<$R> R;
  final jni.JObjType<$E> E;

  CredentialManagerCallback.fromRef(
    this.R,
    this.E,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CredentialManagerCallback");

  /// The type which includes information such as the signature of this class.
  static $CredentialManagerCallbackType<$R, $E>
      type<$R extends jni.JObject, $E extends jni.JObject>(
    jni.JObjType<$R> R,
    jni.JObjType<$E> E,
  ) {
    return $CredentialManagerCallbackType(
      R,
      E,
    );
  }

  static final _id_onResult = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onResult", r"(Ljava/lang/Object;)V");

  /// from: public abstract void onResult(R object)
  void onResult(
    $R object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onResult,
        jni.JniCallType.voidType, [object.reference]).check();
  }

  static final _id_onError = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onError", r"(Ljava/lang/Object;)V");

  /// from: public abstract void onError(E object)
  void onError(
    $E object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onError,
        jni.JniCallType.voidType, [object.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CredentialManagerCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onResult(Ljava/lang/Object;)V") {
        _$impls[$p]!.onResult(
          $a[0].castTo(_$impls[$p]!.R, releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"onError(Ljava/lang/Object;)V") {
        _$impls[$p]!.onError(
          $a[0].castTo(_$impls[$p]!.E, releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CredentialManagerCallback.implement(
    $CredentialManagerCallbackImpl<$R, $E> $impl,
  ) {
    final $p = ReceivePort();
    final $x = CredentialManagerCallback.fromRef(
      $impl.R,
      $impl.E,
      ProtectedJniExtensions.newPortProxy(
        r"androidx.credentials.CredentialManagerCallback",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CredentialManagerCallbackImpl<$R extends jni.JObject,
    $E extends jni.JObject> {
  factory $CredentialManagerCallbackImpl({
    required jni.JObjType<$R> R,
    required jni.JObjType<$E> E,
    required void Function($R object) onResult,
    required void Function($E object) onError,
  }) = _$CredentialManagerCallbackImpl;

  jni.JObjType<$R> get R;
  jni.JObjType<$E> get E;

  void onResult($R object);
  void onError($E object);
}

class _$CredentialManagerCallbackImpl<$R extends jni.JObject,
    $E extends jni.JObject> implements $CredentialManagerCallbackImpl<$R, $E> {
  _$CredentialManagerCallbackImpl({
    required this.R,
    required this.E,
    required void Function($R object) onResult,
    required void Function($E object) onError,
  })  : _onResult = onResult,
        _onError = onError;

  @override
  final jni.JObjType<$R> R;

  @override
  final jni.JObjType<$E> E;

  final void Function($R object) _onResult;
  final void Function($E object) _onError;

  void onResult($R object) {
    return _onResult(object);
  }

  void onError($E object) {
    return _onError(object);
  }
}

final class $CredentialManagerCallbackType<$R extends jni.JObject,
        $E extends jni.JObject>
    extends jni.JObjType<CredentialManagerCallback<$R, $E>> {
  final jni.JObjType<$R> R;
  final jni.JObjType<$E> E;

  const $CredentialManagerCallbackType(
    this.R,
    this.E,
  );

  @override
  String get signature => r"Landroidx/credentials/CredentialManagerCallback;";

  @override
  CredentialManagerCallback<$R, $E> fromRef(jni.JObjectPtr ref) =>
      CredentialManagerCallback.fromRef(R, E, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($CredentialManagerCallbackType, R, E);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialManagerCallbackType<$R, $E>) &&
        other is $CredentialManagerCallbackType<$R, $E> &&
        R == other.R &&
        E == other.E;
  }
}

/// from: androidx.credentials.GetCredentialRequest$Builder
class GetCredentialRequest_Builder extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialRequest_Builder> $type = type;

  GetCredentialRequest_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/GetCredentialRequest$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialRequest_BuilderType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest_Builder() {
    return GetCredentialRequest_Builder.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_addCredentialOption = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addCredentialOption",
      r"(Landroidx/credentials/CredentialOption;)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder addCredentialOption(androidx.credentials.CredentialOption credentialOption)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder addCredentialOption(
    jni.JObject credentialOption,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addCredentialOption,
            jni.JniCallType.objectType, [credentialOption.reference]).object);
  }

  static final _id_setCredentialOptions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setCredentialOptions",
      r"(Ljava/util/List;)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setCredentialOptions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setCredentialOptions(
    jni.JList<jni.JObject> list,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setCredentialOptions,
            jni.JniCallType.objectType, [list.reference]).object);
  }

  static final _id_setOrigin = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setOrigin",
      r"(Ljava/lang/String;)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setOrigin(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setOrigin(
    jni.JString string,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setOrigin,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_setPreferImmediatelyAvailableCredentials = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference,
          r"setPreferImmediatelyAvailableCredentials",
          r"(Z)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setPreferImmediatelyAvailableCredentials(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setPreferImmediatelyAvailableCredentials(
    bool z,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setPreferImmediatelyAvailableCredentials,
            jni.JniCallType.objectType,
            [z ? 1 : 0]).object);
  }

  static final _id_setPreferUiBrandingComponentName = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setPreferUiBrandingComponentName",
          r"(Landroid/content/ComponentName;)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setPreferUiBrandingComponentName(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setPreferUiBrandingComponentName(
    jni.JObject componentName,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setPreferUiBrandingComponentName,
            jni.JniCallType.objectType, [componentName.reference]).object);
  }

  static final _id_setPreferIdentityDocUi = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setPreferIdentityDocUi",
      r"(Z)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setPreferIdentityDocUi(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setPreferIdentityDocUi(
    bool z,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setPreferIdentityDocUi,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_build = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"build", r"()Landroidx/credentials/GetCredentialRequest;");

  /// from: public final androidx.credentials.GetCredentialRequest build()
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest build() {
    return const $GetCredentialRequestType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_build, jni.JniCallType.objectType, []).object);
  }
}

final class $GetCredentialRequest_BuilderType
    extends jni.JObjType<GetCredentialRequest_Builder> {
  const $GetCredentialRequest_BuilderType();

  @override
  String get signature =>
      r"Landroidx/credentials/GetCredentialRequest$Builder;";

  @override
  GetCredentialRequest_Builder fromRef(jni.JObjectPtr ref) =>
      GetCredentialRequest_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetCredentialRequest_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialRequest_BuilderType) &&
        other is $GetCredentialRequest_BuilderType;
  }
}

/// from: androidx.credentials.GetCredentialRequest$Companion
class GetCredentialRequest_Companion extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialRequest_Companion> $type = type;

  GetCredentialRequest_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/GetCredentialRequest$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialRequest_CompanionType();
  static final _id_toRequestDataBundle = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toRequestDataBundle",
      r"(Landroidx/credentials/GetCredentialRequest;)Landroid/os/Bundle;");

  /// from: public final android.os.Bundle toRequestDataBundle(androidx.credentials.GetCredentialRequest getCredentialRequest)
  /// The returned object must be released after use, by calling the [release] method.
  Bundle toRequestDataBundle(
    GetCredentialRequest getCredentialRequest,
  ) {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_toRequestDataBundle,
        jni.JniCallType.objectType,
        [getCredentialRequest.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/util/List;Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/GetCredentialRequest;");

  /// from: public final androidx.credentials.GetCredentialRequest createFrom(java.util.List list, java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest createFrom(
    jni.JList<jni.JObject> list,
    jni.JString string,
    Bundle bundle,
  ) {
    return const $GetCredentialRequestType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [list.reference, string.reference, bundle.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialRequest_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $GetCredentialRequest_CompanionType
    extends jni.JObjType<GetCredentialRequest_Companion> {
  const $GetCredentialRequest_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/GetCredentialRequest$Companion;";

  @override
  GetCredentialRequest_Companion fromRef(jni.JObjectPtr ref) =>
      GetCredentialRequest_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetCredentialRequest_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialRequest_CompanionType) &&
        other is $GetCredentialRequest_CompanionType;
  }
}

/// from: androidx.credentials.GetCredentialRequest
class GetCredentialRequest extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialRequest> $type = type;

  GetCredentialRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/GetCredentialRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialRequestType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/GetCredentialRequest$Companion;",
  );

  /// from: static public final androidx.credentials.GetCredentialRequest$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static GetCredentialRequest_Companion get Companion =>
      const $GetCredentialRequest_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS
  static const BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS =
      r"""androidx.credentials.BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS""";

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/util/List;Ljava/lang/String;ZLandroid/content/ComponentName;Z)V");

  /// from: public void <init>(java.util.List list, java.lang.String string, boolean z, android.content.ComponentName componentName, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest(
    jni.JList<jni.JObject> list,
    jni.JString string,
    bool z,
    jni.JObject componentName,
    bool z1,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [
      list.reference,
      string.reference,
      z ? 1 : 0,
      componentName.reference,
      z1 ? 1 : 0
    ]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/util/List;Ljava/lang/String;ZLandroid/content/ComponentName;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.util.List list, java.lang.String string, boolean z, android.content.ComponentName componentName, boolean z1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new1(
    jni.JList<jni.JObject> list,
    jni.JString string,
    bool z,
    jni.JObject componentName,
    bool z1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new1, [
      list.reference,
      string.reference,
      z ? 1 : 0,
      componentName.reference,
      z1 ? 1 : 0,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getCredentialOptions = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCredentialOptions", r"()Ljava/util/List;");

  /// from: public final java.util.List getCredentialOptions()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getCredentialOptions() {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getCredentialOptions,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getOrigin = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getOrigin", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getOrigin()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOrigin() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getOrigin, jni.JniCallType.objectType, []).object);
  }

  static final _id_getPreferIdentityDocUi = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getPreferIdentityDocUi", r"()Z");

  /// from: public final boolean getPreferIdentityDocUi()
  bool getPreferIdentityDocUi() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getPreferIdentityDocUi, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getPreferUiBrandingComponentName = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getPreferUiBrandingComponentName",
          r"()Landroid/content/ComponentName;");

  /// from: public final android.content.ComponentName getPreferUiBrandingComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferUiBrandingComponentName() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPreferUiBrandingComponentName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_preferImmediatelyAvailableCredentials = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"preferImmediatelyAvailableCredentials", r"()Z");

  /// from: public final boolean preferImmediatelyAvailableCredentials()
  bool preferImmediatelyAvailableCredentials() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_preferImmediatelyAvailableCredentials,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/util/List;Ljava/lang/String;ZLandroid/content/ComponentName;)V");

  /// from: public void <init>(java.util.List list, java.lang.String string, boolean z, android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new2(
    jni.JList<jni.JObject> list,
    jni.JString string,
    bool z,
    jni.JObject componentName,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [
      list.reference,
      string.reference,
      z ? 1 : 0,
      componentName.reference
    ]).object);
  }

  static final _id_new3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/util/List;Ljava/lang/String;Z)V");

  /// from: public void <init>(java.util.List list, java.lang.String string, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new3(
    jni.JList<jni.JObject> list,
    jni.JString string,
    bool z,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new3,
        [list.reference, string.reference, z ? 1 : 0]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/util/List;Ljava/lang/String;)V");

  /// from: public void <init>(java.util.List list, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new4(
    jni.JList<jni.JObject> list,
    jni.JString string,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new4, [list.reference, string.reference]).object);
  }

  static final _id_new5 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/util/List;)V");

  /// from: public void <init>(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new5(
    jni.JList<jni.JObject> list,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new5, [list.reference]).object);
  }

  static final _id_toRequestDataBundle = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"toRequestDataBundle",
      r"(Landroidx/credentials/GetCredentialRequest;)Landroid/os/Bundle;");

  /// from: static public final android.os.Bundle toRequestDataBundle(androidx.credentials.GetCredentialRequest getCredentialRequest)
  /// The returned object must be released after use, by calling the [release] method.
  static Bundle toRequestDataBundle(
    GetCredentialRequest getCredentialRequest,
  ) {
    return const $BundleType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_toRequestDataBundle,
            jni.JniCallType.objectType,
            [getCredentialRequest.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/util/List;Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/GetCredentialRequest;");

  /// from: static public final androidx.credentials.GetCredentialRequest createFrom(java.util.List list, java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  static GetCredentialRequest createFrom(
    jni.JList<jni.JObject> list,
    jni.JString string,
    Bundle bundle,
  ) {
    return const $GetCredentialRequestType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [list.reference, string.reference, bundle.reference]).object);
  }
}

final class $GetCredentialRequestType
    extends jni.JObjType<GetCredentialRequest> {
  const $GetCredentialRequestType();

  @override
  String get signature => r"Landroidx/credentials/GetCredentialRequest;";

  @override
  GetCredentialRequest fromRef(jni.JObjectPtr ref) =>
      GetCredentialRequest.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetCredentialRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialRequestType) &&
        other is $GetCredentialRequestType;
  }
}

/// from: androidx.credentials.GetCredentialResponse
class GetCredentialResponse extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialResponse> $type = type;

  GetCredentialResponse.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/GetCredentialResponse");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialResponseType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroidx/credentials/Credential;)V");

  /// from: public void <init>(androidx.credentials.Credential credential)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialResponse(
    Credential credential,
  ) {
    return GetCredentialResponse.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [credential.reference]).object);
  }

  static final _id_getCredential = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredential",
      r"()Landroidx/credentials/Credential;");

  /// from: public final androidx.credentials.Credential getCredential()
  /// The returned object must be released after use, by calling the [release] method.
  Credential getCredential() {
    return const $CredentialType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredential, jni.JniCallType.objectType, []).object);
  }
}

final class $GetCredentialResponseType
    extends jni.JObjType<GetCredentialResponse> {
  const $GetCredentialResponseType();

  @override
  String get signature => r"Landroidx/credentials/GetCredentialResponse;";

  @override
  GetCredentialResponse fromRef(jni.JObjectPtr ref) =>
      GetCredentialResponse.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetCredentialResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialResponseType) &&
        other is $GetCredentialResponseType;
  }
}

/// from: androidx.credentials.GetPublicKeyCredentialOption$Companion
class GetPublicKeyCredentialOption_Companion extends jni.JObject {
  @override
  late final jni.JObjType<GetPublicKeyCredentialOption_Companion> $type = type;

  GetPublicKeyCredentialOption_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/GetPublicKeyCredentialOption$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $GetPublicKeyCredentialOption_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialOption_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $GetPublicKeyCredentialOption_CompanionType
    extends jni.JObjType<GetPublicKeyCredentialOption_Companion> {
  const $GetPublicKeyCredentialOption_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/GetPublicKeyCredentialOption$Companion;";

  @override
  GetPublicKeyCredentialOption_Companion fromRef(jni.JObjectPtr ref) =>
      GetPublicKeyCredentialOption_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetPublicKeyCredentialOption_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetPublicKeyCredentialOption_CompanionType) &&
        other is $GetPublicKeyCredentialOption_CompanionType;
  }
}

/// from: androidx.credentials.GetPublicKeyCredentialOption
class GetPublicKeyCredentialOption extends jni.JObject {
  @override
  late final jni.JObjType<GetPublicKeyCredentialOption> $type = type;

  GetPublicKeyCredentialOption.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/GetPublicKeyCredentialOption");

  /// The type which includes information such as the signature of this class.
  static const type = $GetPublicKeyCredentialOptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/GetPublicKeyCredentialOption$Companion;",
  );

  /// from: static public final androidx.credentials.GetPublicKeyCredentialOption$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static GetPublicKeyCredentialOption_Companion get Companion =>
      const $GetPublicKeyCredentialOption_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_CLIENT_DATA_HASH
  static const BUNDLE_KEY_CLIENT_DATA_HASH =
      r"""androidx.credentials.BUNDLE_KEY_CLIENT_DATA_HASH""";

  /// from: static public final java.lang.String BUNDLE_KEY_REQUEST_JSON
  static const BUNDLE_KEY_REQUEST_JSON =
      r"""androidx.credentials.BUNDLE_KEY_REQUEST_JSON""";

  /// from: static public final java.lang.String BUNDLE_VALUE_SUBTYPE_GET_PUBLIC_KEY_CREDENTIAL_OPTION
  static const BUNDLE_VALUE_SUBTYPE_GET_PUBLIC_KEY_CREDENTIAL_OPTION =
      r"""androidx.credentials.BUNDLE_VALUE_SUBTYPE_GET_PUBLIC_KEY_CREDENTIAL_OPTION""";

  static final _id_getRequestJson = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getRequestJson", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getRequestJson()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRequestJson() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getRequestJson, jni.JniCallType.objectType, []).object);
  }

  static final _id_getClientDataHash = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getClientDataHash", r"()[B");

  /// from: public final byte[] getClientDataHash()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getClientDataHash() {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getClientDataHash,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/String;[BLjava/util/Set;)V");

  /// from: public void <init>(java.lang.String string, java.lang.Object[] bs, java.util.Set set)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    jni.JSet<jni.JObject> set0,
  ) {
    return GetPublicKeyCredentialOption.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [string.reference, bs.reference, set0.reference]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BLjava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, java.util.Set set, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption.new1(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    jni.JSet<jni.JObject> set0,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialOption.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new1, [
      string.reference,
      bs.reference,
      set0.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new2 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;[B)V");

  /// from: public void <init>(java.lang.String string, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption.new2(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return GetPublicKeyCredentialOption.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new2,
            [string.reference, bs.reference]).object);
  }

  static final _id_new3 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption.new3(
    jni.JString string,
  ) {
    return GetPublicKeyCredentialOption.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new3, [string.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BLjava/util/Set;Landroid/os/Bundle;Landroid/os/Bundle;Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, java.util.Set set, android.os.Bundle bundle, android.os.Bundle bundle1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption.new4(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    jni.JSet<jni.JObject> set0,
    Bundle bundle,
    Bundle bundle1,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialOption.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new4, [
      string.reference,
      bs.reference,
      set0.reference,
      bundle.reference,
      bundle1.reference,
      defaultConstructorMarker.reference
    ]).object);
  }
}

final class $GetPublicKeyCredentialOptionType
    extends jni.JObjType<GetPublicKeyCredentialOption> {
  const $GetPublicKeyCredentialOptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/GetPublicKeyCredentialOption;";

  @override
  GetPublicKeyCredentialOption fromRef(jni.JObjectPtr ref) =>
      GetPublicKeyCredentialOption.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetPublicKeyCredentialOptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetPublicKeyCredentialOptionType) &&
        other is $GetPublicKeyCredentialOptionType;
  }
}

/// from: androidx.credentials.PublicKeyCredential$Companion
class PublicKeyCredential_Companion extends jni.JObject {
  @override
  late final jni.JObjType<PublicKeyCredential_Companion> $type = type;

  PublicKeyCredential_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/PublicKeyCredential$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $PublicKeyCredential_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory PublicKeyCredential_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return PublicKeyCredential_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $PublicKeyCredential_CompanionType
    extends jni.JObjType<PublicKeyCredential_Companion> {
  const $PublicKeyCredential_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/PublicKeyCredential$Companion;";

  @override
  PublicKeyCredential_Companion fromRef(jni.JObjectPtr ref) =>
      PublicKeyCredential_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PublicKeyCredential_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PublicKeyCredential_CompanionType) &&
        other is $PublicKeyCredential_CompanionType;
  }
}

/// from: androidx.credentials.PublicKeyCredential
class PublicKeyCredential extends Credential {
  @override
  late final jni.JObjType<PublicKeyCredential> $type = type;

  PublicKeyCredential.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/PublicKeyCredential");

  /// The type which includes information such as the signature of this class.
  static const type = $PublicKeyCredentialType();
  static final _id_Companion1 = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/PublicKeyCredential$Companion;",
  );

  /// from: static public final androidx.credentials.PublicKeyCredential$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static PublicKeyCredential_Companion get Companion1 =>
      const $PublicKeyCredential_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion1, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_PUBLIC_KEY_CREDENTIAL
  static const TYPE_PUBLIC_KEY_CREDENTIAL =
      r"""androidx.credentials.TYPE_PUBLIC_KEY_CREDENTIAL""";

  /// from: static public final java.lang.String BUNDLE_KEY_SUBTYPE
  static const BUNDLE_KEY_SUBTYPE =
      r"""androidx.credentials.BUNDLE_KEY_SUBTYPE""";

  /// from: static public final java.lang.String BUNDLE_KEY_AUTHENTICATION_RESPONSE_JSON
  static const BUNDLE_KEY_AUTHENTICATION_RESPONSE_JSON =
      r"""androidx.credentials.BUNDLE_KEY_AUTHENTICATION_RESPONSE_JSON""";

  static final _id_getAuthenticationResponseJson = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getAuthenticationResponseJson",
          r"()Ljava/lang/String;");

  /// from: public final java.lang.String getAuthenticationResponseJson()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAuthenticationResponseJson() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getAuthenticationResponseJson,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory PublicKeyCredential.new1(
    jni.JString string,
  ) {
    return PublicKeyCredential.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Landroid/os/Bundle;Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory PublicKeyCredential.new2(
    jni.JString string,
    Bundle bundle,
    jni.JObject defaultConstructorMarker,
  ) {
    return PublicKeyCredential.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [
      string.reference,
      bundle.reference,
      defaultConstructorMarker.reference
    ]).object);
  }
}

final class $PublicKeyCredentialType extends jni.JObjType<PublicKeyCredential> {
  const $PublicKeyCredentialType();

  @override
  String get signature => r"Landroidx/credentials/PublicKeyCredential;";

  @override
  PublicKeyCredential fromRef(jni.JObjectPtr ref) =>
      PublicKeyCredential.fromRef(ref);

  @override
  jni.JObjType get superType => const $CredentialType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PublicKeyCredentialType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PublicKeyCredentialType) &&
        other is $PublicKeyCredentialType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialCancellationException$Companion
class CreateCredentialCancellationException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialCancellationException_Companion>
      $type = type;

  CreateCredentialCancellationException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialCancellationException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialCancellationException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCancellationException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialCancellationException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialCancellationException_CompanionType
    extends jni.JObjType<CreateCredentialCancellationException_Companion> {
  const $CreateCredentialCancellationException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialCancellationException$Companion;";

  @override
  CreateCredentialCancellationException_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialCancellationException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialCancellationException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialCancellationException_CompanionType) &&
        other is $CreateCredentialCancellationException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialCancellationException
class CreateCredentialCancellationException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialCancellationException> $type = type;

  CreateCredentialCancellationException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialCancellationException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialCancellationExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/CreateCredentialCancellationException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.CreateCredentialCancellationException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialCancellationException_Companion get Companion =>
      const $CreateCredentialCancellationException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_CREATE_CREDENTIAL_CANCELLATION_EXCEPTION
  static const TYPE_CREATE_CREDENTIAL_CANCELLATION_EXCEPTION =
      r"""android.credentials.CreateCredentialException.TYPE_USER_CANCELED""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCancellationException.new7(
    jni.JObject charSequence,
  ) {
    return CreateCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCancellationException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCancellationException.new9() {
    return CreateCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $CreateCredentialCancellationExceptionType
    extends jni.JObjType<CreateCredentialCancellationException> {
  const $CreateCredentialCancellationExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialCancellationException;";

  @override
  CreateCredentialCancellationException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialCancellationException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreateCredentialCancellationExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialCancellationExceptionType) &&
        other is $CreateCredentialCancellationExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialException
class CreateCredentialException extends Exception {
  @override
  late final jni.JObjType<CreateCredentialException> $type = type;

  CreateCredentialException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialExceptionType();
  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialException.new5(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return CreateCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new5,
            [string.reference, charSequence.reference]).object);
  }

  static final _id_new6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialException.new6(
    jni.JString string,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new6, [
      string.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getErrorMessage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getErrorMessage", r"()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getErrorMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getErrorMessage() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getErrorMessage, jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialException.new1(
    jni.JString string,
  ) {
    return CreateCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }
}

final class $CreateCredentialExceptionType
    extends jni.JObjType<CreateCredentialException> {
  const $CreateCredentialExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialException;";

  @override
  CreateCredentialException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialException.fromRef(ref);

  @override
  jni.JObjType get superType => const $ExceptionType();

  @override
  final superCount = 3;

  @override
  int get hashCode => ($CreateCredentialExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialExceptionType) &&
        other is $CreateCredentialExceptionType;
  }
}

/// from: androidx.credentials.exceptions.GetCredentialCancellationException$Companion
class GetCredentialCancellationException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialCancellationException_Companion> $type =
      type;

  GetCredentialCancellationException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/GetCredentialCancellationException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialCancellationException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialCancellationException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialCancellationException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $GetCredentialCancellationException_CompanionType
    extends jni.JObjType<GetCredentialCancellationException_Companion> {
  const $GetCredentialCancellationException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/GetCredentialCancellationException$Companion;";

  @override
  GetCredentialCancellationException_Companion fromRef(jni.JObjectPtr ref) =>
      GetCredentialCancellationException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($GetCredentialCancellationException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($GetCredentialCancellationException_CompanionType) &&
        other is $GetCredentialCancellationException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.GetCredentialCancellationException
class GetCredentialCancellationException extends GetCredentialException {
  @override
  late final jni.JObjType<GetCredentialCancellationException> $type = type;

  GetCredentialCancellationException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/GetCredentialCancellationException");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialCancellationExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/GetCredentialCancellationException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.GetCredentialCancellationException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static GetCredentialCancellationException_Companion get Companion =>
      const $GetCredentialCancellationException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_GET_CREDENTIAL_CANCELLATION_EXCEPTION
  static const TYPE_GET_CREDENTIAL_CANCELLATION_EXCEPTION =
      r"""android.credentials.GetCredentialException.TYPE_USER_CANCELED""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialCancellationException.new7(
    jni.JObject charSequence,
  ) {
    return GetCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialCancellationException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialCancellationException.new9() {
    return GetCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $GetCredentialCancellationExceptionType
    extends jni.JObjType<GetCredentialCancellationException> {
  const $GetCredentialCancellationExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/GetCredentialCancellationException;";

  @override
  GetCredentialCancellationException fromRef(jni.JObjectPtr ref) =>
      GetCredentialCancellationException.fromRef(ref);

  @override
  jni.JObjType get superType => const $GetCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($GetCredentialCancellationExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialCancellationExceptionType) &&
        other is $GetCredentialCancellationExceptionType;
  }
}

/// from: androidx.credentials.exceptions.GetCredentialException
class GetCredentialException extends Exception {
  @override
  late final jni.JObjType<GetCredentialException> $type = type;

  GetCredentialException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/GetCredentialException");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialExceptionType();
  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialException.new5(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return GetCredentialException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new5,
        [string.reference, charSequence.reference]).object);
  }

  static final _id_new6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialException.new6(
    jni.JString string,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new6, [
      string.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getErrorMessage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getErrorMessage", r"()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getErrorMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getErrorMessage() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getErrorMessage, jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialException.new1(
    jni.JString string,
  ) {
    return GetCredentialException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [string.reference]).object);
  }
}

final class $GetCredentialExceptionType
    extends jni.JObjType<GetCredentialException> {
  const $GetCredentialExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/GetCredentialException;";

  @override
  GetCredentialException fromRef(jni.JObjectPtr ref) =>
      GetCredentialException.fromRef(ref);

  @override
  jni.JObjType get superType => const $ExceptionType();

  @override
  final superCount = 3;

  @override
  int get hashCode => ($GetCredentialExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialExceptionType) &&
        other is $GetCredentialExceptionType;
  }
}

/// from: androidx.credentials.exceptions.NoCredentialException$Companion
class NoCredentialException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<NoCredentialException_Companion> $type = type;

  NoCredentialException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/NoCredentialException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $NoCredentialException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory NoCredentialException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return NoCredentialException_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $NoCredentialException_CompanionType
    extends jni.JObjType<NoCredentialException_Companion> {
  const $NoCredentialException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/NoCredentialException$Companion;";

  @override
  NoCredentialException_Companion fromRef(jni.JObjectPtr ref) =>
      NoCredentialException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($NoCredentialException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($NoCredentialException_CompanionType) &&
        other is $NoCredentialException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.NoCredentialException
class NoCredentialException extends GetCredentialException {
  @override
  late final jni.JObjType<NoCredentialException> $type = type;

  NoCredentialException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/NoCredentialException");

  /// The type which includes information such as the signature of this class.
  static const type = $NoCredentialExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/NoCredentialException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.NoCredentialException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static NoCredentialException_Companion get Companion =>
      const $NoCredentialException_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_FRAMEWORK_TYPE_NO_CREDENTIAL
  static const TYPE_FRAMEWORK_TYPE_NO_CREDENTIAL =
      r"""android.credentials.GetCredentialException.TYPE_NO_CREDENTIAL""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory NoCredentialException.new7(
    jni.JObject charSequence,
  ) {
    return NoCredentialException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory NoCredentialException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return NoCredentialException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory NoCredentialException.new9() {
    return NoCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $NoCredentialExceptionType
    extends jni.JObjType<NoCredentialException> {
  const $NoCredentialExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/NoCredentialException;";

  @override
  NoCredentialException fromRef(jni.JObjectPtr ref) =>
      NoCredentialException.fromRef(ref);

  @override
  jni.JObjType get superType => const $GetCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($NoCredentialExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($NoCredentialExceptionType) &&
        other is $NoCredentialExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialInterruptedException$Companion
class CreateCredentialInterruptedException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialInterruptedException_Companion>
      $type = type;

  CreateCredentialInterruptedException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialInterruptedException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialInterruptedException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialInterruptedException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialInterruptedException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialInterruptedException_CompanionType
    extends jni.JObjType<CreateCredentialInterruptedException_Companion> {
  const $CreateCredentialInterruptedException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialInterruptedException$Companion;";

  @override
  CreateCredentialInterruptedException_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialInterruptedException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialInterruptedException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialInterruptedException_CompanionType) &&
        other is $CreateCredentialInterruptedException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialInterruptedException
class CreateCredentialInterruptedException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialInterruptedException> $type = type;

  CreateCredentialInterruptedException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialInterruptedException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialInterruptedExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/CreateCredentialInterruptedException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.CreateCredentialInterruptedException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialInterruptedException_Companion get Companion =>
      const $CreateCredentialInterruptedException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_CREATE_CREDENTIAL_INTERRUPTED_EXCEPTION
  static const TYPE_CREATE_CREDENTIAL_INTERRUPTED_EXCEPTION =
      r"""android.credentials.CreateCredentialException.TYPE_INTERRUPTED""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialInterruptedException.new7(
    jni.JObject charSequence,
  ) {
    return CreateCredentialInterruptedException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialInterruptedException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialInterruptedException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialInterruptedException.new9() {
    return CreateCredentialInterruptedException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $CreateCredentialInterruptedExceptionType
    extends jni.JObjType<CreateCredentialInterruptedException> {
  const $CreateCredentialInterruptedExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialInterruptedException;";

  @override
  CreateCredentialInterruptedException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialInterruptedException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreateCredentialInterruptedExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialInterruptedExceptionType) &&
        other is $CreateCredentialInterruptedExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialProviderConfigurationException$Companion
class CreateCredentialProviderConfigurationException_Companion
    extends jni.JObject {
  @override
  late final jni
      .JObjType<CreateCredentialProviderConfigurationException_Companion>
      $type = type;

  CreateCredentialProviderConfigurationException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialProviderConfigurationException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type =
      $CreateCredentialProviderConfigurationException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialProviderConfigurationException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialProviderConfigurationException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialProviderConfigurationException_CompanionType
    extends jni
    .JObjType<CreateCredentialProviderConfigurationException_Companion> {
  const $CreateCredentialProviderConfigurationException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialProviderConfigurationException$Companion;";

  @override
  CreateCredentialProviderConfigurationException_Companion fromRef(
          jni.JObjectPtr ref) =>
      CreateCredentialProviderConfigurationException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialProviderConfigurationException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialProviderConfigurationException_CompanionType) &&
        other is $CreateCredentialProviderConfigurationException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialProviderConfigurationException
class CreateCredentialProviderConfigurationException
    extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialProviderConfigurationException>
      $type = type;

  CreateCredentialProviderConfigurationException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialProviderConfigurationException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialProviderConfigurationExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/CreateCredentialProviderConfigurationException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.CreateCredentialProviderConfigurationException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialProviderConfigurationException_Companion
      get Companion =>
          const $CreateCredentialProviderConfigurationException_CompanionType()
              .fromRef(jni.Jni.accessors
                  .getStaticField(_class.reference, _id_Companion,
                      jni.JniCallType.objectType)
                  .object);

  /// from: static public final java.lang.String TYPE_CREATE_CREDENTIAL_PROVIDER_CONFIGURATION_EXCEPTION
  static const TYPE_CREATE_CREDENTIAL_PROVIDER_CONFIGURATION_EXCEPTION =
      r"""androidx.credentials.TYPE_CREATE_CREDENTIAL_PROVIDER_CONFIGURATION_EXCEPTION""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialProviderConfigurationException.new7(
    jni.JObject charSequence,
  ) {
    return CreateCredentialProviderConfigurationException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialProviderConfigurationException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialProviderConfigurationException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialProviderConfigurationException.new9() {
    return CreateCredentialProviderConfigurationException.fromRef(jni
        .Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $CreateCredentialProviderConfigurationExceptionType
    extends jni.JObjType<CreateCredentialProviderConfigurationException> {
  const $CreateCredentialProviderConfigurationExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialProviderConfigurationException;";

  @override
  CreateCredentialProviderConfigurationException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialProviderConfigurationException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode =>
      ($CreateCredentialProviderConfigurationExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialProviderConfigurationExceptionType) &&
        other is $CreateCredentialProviderConfigurationExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialUnknownException$Companion
class CreateCredentialUnknownException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialUnknownException_Companion> $type =
      type;

  CreateCredentialUnknownException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialUnknownException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialUnknownException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialUnknownException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialUnknownException_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialUnknownException_CompanionType
    extends jni.JObjType<CreateCredentialUnknownException_Companion> {
  const $CreateCredentialUnknownException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialUnknownException$Companion;";

  @override
  CreateCredentialUnknownException_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialUnknownException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialUnknownException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialUnknownException_CompanionType) &&
        other is $CreateCredentialUnknownException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialUnknownException
class CreateCredentialUnknownException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialUnknownException> $type = type;

  CreateCredentialUnknownException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialUnknownException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialUnknownExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/CreateCredentialUnknownException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.CreateCredentialUnknownException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialUnknownException_Companion get Companion =>
      const $CreateCredentialUnknownException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_CREATE_CREDENTIAL_UNKNOWN_EXCEPTION
  static const TYPE_CREATE_CREDENTIAL_UNKNOWN_EXCEPTION =
      r"""android.credentials.CreateCredentialException.TYPE_UNKNOWN""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialUnknownException.new7(
    jni.JObject charSequence,
  ) {
    return CreateCredentialUnknownException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialUnknownException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialUnknownException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialUnknownException.new9() {
    return CreateCredentialUnknownException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $CreateCredentialUnknownExceptionType
    extends jni.JObjType<CreateCredentialUnknownException> {
  const $CreateCredentialUnknownExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialUnknownException;";

  @override
  CreateCredentialUnknownException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialUnknownException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreateCredentialUnknownExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialUnknownExceptionType) &&
        other is $CreateCredentialUnknownExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialCustomException
class CreateCredentialCustomException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialCustomException> $type = type;

  CreateCredentialCustomException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialCustomException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialCustomExceptionType();
  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCustomException.new5(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return CreateCredentialCustomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new5,
            [string.reference, charSequence.reference]).object);
  }

  static final _id_new6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCustomException.new6(
    jni.JString string,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialCustomException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new6, [
      string.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCustomException.new1(
    jni.JString string,
  ) {
    return CreateCredentialCustomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }
}

final class $CreateCredentialCustomExceptionType
    extends jni.JObjType<CreateCredentialCustomException> {
  const $CreateCredentialCustomExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialCustomException;";

  @override
  CreateCredentialCustomException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialCustomException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreateCredentialCustomExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialCustomExceptionType) &&
        other is $CreateCredentialCustomExceptionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialDomException$Companion
class CreatePublicKeyCredentialDomException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialDomException_Companion>
      $type = type;

  CreatePublicKeyCredentialDomException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialDomException_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/CreateCredentialException;");

  /// from: public final androidx.credentials.exceptions.CreateCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $CreateCredentialExceptionType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialDomException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialDomException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreatePublicKeyCredentialDomException_CompanionType
    extends jni.JObjType<CreatePublicKeyCredentialDomException_Companion> {
  const $CreatePublicKeyCredentialDomException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException$Companion;";

  @override
  CreatePublicKeyCredentialDomException_Companion fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialDomException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreatePublicKeyCredentialDomException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreatePublicKeyCredentialDomException_CompanionType) &&
        other is $CreatePublicKeyCredentialDomException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialDomException
class CreatePublicKeyCredentialDomException
    extends CreatePublicKeyCredentialException {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialDomException> $type = type;

  CreatePublicKeyCredentialDomException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialDomExceptionType();
  static final _id_Companion1 = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialDomException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreatePublicKeyCredentialDomException_Companion get Companion1 =>
      const $CreatePublicKeyCredentialDomException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion1, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_CREATE_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION
  static const TYPE_CREATE_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION =
      r"""androidx.credentials.TYPE_CREATE_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Landroidx/credentials/exceptions/domerrors/DomError;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialDomException.new7(
    jni.JObject domError,
    jni.JObject charSequence,
  ) {
    return CreatePublicKeyCredentialDomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new7,
            [domError.reference, charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Landroidx/credentials/exceptions/domerrors/DomError;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialDomException.new8(
    jni.JObject domError,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialDomException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new8, [
      domError.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getDomError = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDomError",
      r"()Landroidx/credentials/exceptions/domerrors/DomError;");

  /// from: public final androidx.credentials.exceptions.domerrors.DomError getDomError()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDomError() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDomError, jni.JniCallType.objectType, []).object);
  }

  static final _id_new9 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Landroidx/credentials/exceptions/domerrors/DomError;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialDomException.new9(
    jni.JObject domError,
  ) {
    return CreatePublicKeyCredentialDomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new9, [domError.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/CreateCredentialException;");

  /// from: static public final androidx.credentials.exceptions.CreateCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $CreateCredentialExceptionType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }
}

final class $CreatePublicKeyCredentialDomExceptionType
    extends jni.JObjType<CreatePublicKeyCredentialDomException> {
  const $CreatePublicKeyCredentialDomExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException;";

  @override
  CreatePublicKeyCredentialDomException fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialDomException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreatePublicKeyCredentialExceptionType();

  @override
  final superCount = 5;

  @override
  int get hashCode => ($CreatePublicKeyCredentialDomExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreatePublicKeyCredentialDomExceptionType) &&
        other is $CreatePublicKeyCredentialDomExceptionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialException$Companion
class CreatePublicKeyCredentialException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialException_Companion> $type =
      type;

  CreatePublicKeyCredentialException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialException_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/CreateCredentialException;");

  /// from: public final androidx.credentials.exceptions.CreateCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $CreateCredentialExceptionType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreatePublicKeyCredentialException_CompanionType
    extends jni.JObjType<CreatePublicKeyCredentialException_Companion> {
  const $CreatePublicKeyCredentialException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException$Companion;";

  @override
  CreatePublicKeyCredentialException_Companion fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreatePublicKeyCredentialException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreatePublicKeyCredentialException_CompanionType) &&
        other is $CreatePublicKeyCredentialException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialException
class CreatePublicKeyCredentialException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialException> $type = type;

  CreatePublicKeyCredentialException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreatePublicKeyCredentialException_Companion get Companion =>
      const $CreatePublicKeyCredentialException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialException.new5(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return CreatePublicKeyCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new5,
            [string.reference, charSequence.reference]).object);
  }

  static final _id_new6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialException.new6(
    jni.JString string,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new6, [
      string.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialException.new1(
    jni.JString string,
  ) {
    return CreatePublicKeyCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/CreateCredentialException;");

  /// from: static public final androidx.credentials.exceptions.CreateCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $CreateCredentialExceptionType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }
}

final class $CreatePublicKeyCredentialExceptionType
    extends jni.JObjType<CreatePublicKeyCredentialException> {
  const $CreatePublicKeyCredentialExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException;";

  @override
  CreatePublicKeyCredentialException fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreatePublicKeyCredentialExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreatePublicKeyCredentialExceptionType) &&
        other is $CreatePublicKeyCredentialExceptionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.GetPublicKeyCredentialDomException$Companion
class GetPublicKeyCredentialDomException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<GetPublicKeyCredentialDomException_Companion> $type =
      type;

  GetPublicKeyCredentialDomException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $GetPublicKeyCredentialDomException_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/GetCredentialException;");

  /// from: public final androidx.credentials.exceptions.GetCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $GetCredentialExceptionType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialDomException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialDomException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $GetPublicKeyCredentialDomException_CompanionType
    extends jni.JObjType<GetPublicKeyCredentialDomException_Companion> {
  const $GetPublicKeyCredentialDomException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException$Companion;";

  @override
  GetPublicKeyCredentialDomException_Companion fromRef(jni.JObjectPtr ref) =>
      GetPublicKeyCredentialDomException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($GetPublicKeyCredentialDomException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($GetPublicKeyCredentialDomException_CompanionType) &&
        other is $GetPublicKeyCredentialDomException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.GetPublicKeyCredentialDomException
class GetPublicKeyCredentialDomException extends jni.JObject {
  @override
  late final jni.JObjType<GetPublicKeyCredentialDomException> $type = type;

  GetPublicKeyCredentialDomException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException");

  /// The type which includes information such as the signature of this class.
  static const type = $GetPublicKeyCredentialDomExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.publickeycredential.GetPublicKeyCredentialDomException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static GetPublicKeyCredentialDomException_Companion get Companion =>
      const $GetPublicKeyCredentialDomException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_GET_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION
  static const TYPE_GET_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION =
      r"""androidx.credentials.TYPE_GET_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION""";

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Landroidx/credentials/exceptions/domerrors/DomError;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialDomException(
    jni.JObject domError,
    jni.JObject charSequence,
  ) {
    return GetPublicKeyCredentialDomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [domError.reference, charSequence.reference]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Landroidx/credentials/exceptions/domerrors/DomError;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialDomException.new1(
    jni.JObject domError,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialDomException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new1, [
      domError.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getDomError = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDomError",
      r"()Landroidx/credentials/exceptions/domerrors/DomError;");

  /// from: public final androidx.credentials.exceptions.domerrors.DomError getDomError()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDomError() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDomError, jni.JniCallType.objectType, []).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Landroidx/credentials/exceptions/domerrors/DomError;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialDomException.new2(
    jni.JObject domError,
  ) {
    return GetPublicKeyCredentialDomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new2, [domError.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/GetCredentialException;");

  /// from: static public final androidx.credentials.exceptions.GetCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static GetCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $GetCredentialExceptionType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }
}

final class $GetPublicKeyCredentialDomExceptionType
    extends jni.JObjType<GetPublicKeyCredentialDomException> {
  const $GetPublicKeyCredentialDomExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException;";

  @override
  GetPublicKeyCredentialDomException fromRef(jni.JObjectPtr ref) =>
      GetPublicKeyCredentialDomException.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetPublicKeyCredentialDomExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetPublicKeyCredentialDomExceptionType) &&
        other is $GetPublicKeyCredentialDomExceptionType;
  }
}

/// from: android.os.CancellationSignal$OnCancelListener
class CancellationSignal_OnCancelListener extends jni.JObject {
  @override
  late final jni.JObjType<CancellationSignal_OnCancelListener> $type = type;

  CancellationSignal_OnCancelListener.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/os/CancellationSignal$OnCancelListener");

  /// The type which includes information such as the signature of this class.
  static const type = $CancellationSignal_OnCancelListenerType();
  static final _id_onCancel =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onCancel", r"()V");

  /// from: public abstract void onCancel()
  void onCancel() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onCancel, jni.JniCallType.voidType, []).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CancellationSignal_OnCancelListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onCancel()V") {
        _$impls[$p]!.onCancel();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CancellationSignal_OnCancelListener.implement(
    $CancellationSignal_OnCancelListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CancellationSignal_OnCancelListener.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"android.os.CancellationSignal$OnCancelListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CancellationSignal_OnCancelListenerImpl {
  factory $CancellationSignal_OnCancelListenerImpl({
    required void Function() onCancel,
  }) = _$CancellationSignal_OnCancelListenerImpl;

  void onCancel();
}

class _$CancellationSignal_OnCancelListenerImpl
    implements $CancellationSignal_OnCancelListenerImpl {
  _$CancellationSignal_OnCancelListenerImpl({
    required void Function() onCancel,
  }) : _onCancel = onCancel;

  final void Function() _onCancel;

  void onCancel() {
    return _onCancel();
  }
}

final class $CancellationSignal_OnCancelListenerType
    extends jni.JObjType<CancellationSignal_OnCancelListener> {
  const $CancellationSignal_OnCancelListenerType();

  @override
  String get signature => r"Landroid/os/CancellationSignal$OnCancelListener;";

  @override
  CancellationSignal_OnCancelListener fromRef(jni.JObjectPtr ref) =>
      CancellationSignal_OnCancelListener.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CancellationSignal_OnCancelListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CancellationSignal_OnCancelListenerType) &&
        other is $CancellationSignal_OnCancelListenerType;
  }
}

/// from: android.os.CancellationSignal
class CancellationSignal extends jni.JObject {
  @override
  late final jni.JObjType<CancellationSignal> $type = type;

  CancellationSignal.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/os/CancellationSignal");

  /// The type which includes information such as the signature of this class.
  static const type = $CancellationSignalType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CancellationSignal() {
    return CancellationSignal.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_isCanceled =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isCanceled", r"()Z");

  /// from: public boolean isCanceled()
  bool isCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isCanceled, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_throwIfCanceled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"throwIfCanceled", r"()V");

  /// from: public void throwIfCanceled()
  void throwIfCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_throwIfCanceled, jni.JniCallType.voidType, []).check();
  }

  static final _id_cancel =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"cancel", r"()V");

  /// from: public void cancel()
  void cancel() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_cancel, jni.JniCallType.voidType, []).check();
  }

  static final _id_setOnCancelListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setOnCancelListener",
      r"(Landroid/os/CancellationSignal$OnCancelListener;)V");

  /// from: public void setOnCancelListener(android.os.CancellationSignal$OnCancelListener onCancelListener)
  void setOnCancelListener(
    CancellationSignal_OnCancelListener onCancelListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setOnCancelListener,
        jni.JniCallType.voidType,
        [onCancelListener.reference]).check();
  }
}

final class $CancellationSignalType extends jni.JObjType<CancellationSignal> {
  const $CancellationSignalType();

  @override
  String get signature => r"Landroid/os/CancellationSignal;";

  @override
  CancellationSignal fromRef(jni.JObjectPtr ref) =>
      CancellationSignal.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CancellationSignalType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CancellationSignalType) &&
        other is $CancellationSignalType;
  }
}

/// from: android.os.Bundle
class Bundle extends BaseBundle {
  @override
  late final jni.JObjType<Bundle> $type = type;

  Bundle.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/os/Bundle");

  /// The type which includes information such as the signature of this class.
  static const type = $BundleType();
  static final _id_CREATOR = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR => const jni.JObjectType().fromRef(jni
      .Jni.accessors
      .getStaticField(_class.reference, _id_CREATOR, jni.JniCallType.objectType)
      .object);

  static final _id_EMPTY = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"EMPTY",
    r"Landroid/os/Bundle;",
  );

  /// from: static public final android.os.Bundle EMPTY
  /// The returned object must be released after use, by calling the [release] method.
  static Bundle get EMPTY => const $BundleType().fromRef(jni.Jni.accessors
      .getStaticField(_class.reference, _id_EMPTY, jni.JniCallType.objectType)
      .object);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Bundle() {
    return Bundle.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/ClassLoader;)V");

  /// from: public void <init>(java.lang.ClassLoader classLoader)
  /// The returned object must be released after use, by calling the [release] method.
  factory Bundle.new1(
    jni.JObject classLoader,
  ) {
    return Bundle.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [classLoader.reference]).object);
  }

  static final _id_new2 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(I)V");

  /// from: public void <init>(int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory Bundle.new2(
    int i,
  ) {
    return Bundle.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [jni.JValueInt(i)]).object);
  }

  static final _id_new3 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Landroid/os/Bundle;)V");

  /// from: public void <init>(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  factory Bundle.new3(
    Bundle bundle,
  ) {
    return Bundle.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new3, [bundle.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/os/PersistableBundle;)V");

  /// from: public void <init>(android.os.PersistableBundle persistableBundle)
  /// The returned object must be released after use, by calling the [release] method.
  factory Bundle.new4(
    jni.JObject persistableBundle,
  ) {
    return Bundle.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new4, [persistableBundle.reference]).object);
  }

  static final _id_setClassLoader = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setClassLoader", r"(Ljava/lang/ClassLoader;)V");

  /// from: public void setClassLoader(java.lang.ClassLoader classLoader)
  void setClassLoader(
    jni.JObject classLoader,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setClassLoader,
        jni.JniCallType.voidType, [classLoader.reference]).check();
  }

  static final _id_getClassLoader = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getClassLoader", r"()Ljava/lang/ClassLoader;");

  /// from: public java.lang.ClassLoader getClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClassLoader() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getClassLoader, jni.JniCallType.objectType, []).object);
  }

  static final _id_clone = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clone", r"()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject clone() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clone, jni.JniCallType.objectType, []).object);
  }

  static final _id_deepCopy = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"deepCopy", r"()Landroid/os/Bundle;");

  /// from: public android.os.Bundle deepCopy()
  /// The returned object must be released after use, by calling the [release] method.
  Bundle deepCopy() {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_deepCopy, jni.JniCallType.objectType, []).object);
  }

  static final _id_clear =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"clear", r"()V");

  /// from: public void clear()
  void clear() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clear, jni.JniCallType.voidType, []).check();
  }

  static final _id_remove = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"remove", r"(Ljava/lang/String;)V");

  /// from: public void remove(java.lang.String string)
  void remove(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_remove,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_putAll1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putAll", r"(Landroid/os/Bundle;)V");

  /// from: public void putAll(android.os.Bundle bundle)
  void putAll1(
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putAll1,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_hasFileDescriptors = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasFileDescriptors", r"()Z");

  /// from: public boolean hasFileDescriptors()
  bool hasFileDescriptors() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_hasFileDescriptors, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_putByte = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putByte", r"(Ljava/lang/String;B)V");

  /// from: public void putByte(java.lang.String string, byte b)
  void putByte(
    jni.JString string,
    int b,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putByte,
        jni.JniCallType.voidType,
        [string.reference, jni.JValueByte(b)]).check();
  }

  static final _id_putChar = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putChar", r"(Ljava/lang/String;C)V");

  /// from: public void putChar(java.lang.String string, char c)
  void putChar(
    jni.JString string,
    int c,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putChar,
        jni.JniCallType.voidType,
        [string.reference, jni.JValueChar(c)]).check();
  }

  static final _id_putShort = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putShort", r"(Ljava/lang/String;S)V");

  /// from: public void putShort(java.lang.String string, short s)
  void putShort(
    jni.JString string,
    int s,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putShort,
        jni.JniCallType.voidType,
        [string.reference, jni.JValueShort(s)]).check();
  }

  static final _id_putFloat = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putFloat", r"(Ljava/lang/String;F)V");

  /// from: public void putFloat(java.lang.String string, float f)
  void putFloat(
    jni.JString string,
    double f,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putFloat,
        jni.JniCallType.voidType,
        [string.reference, jni.JValueFloat(f)]).check();
  }

  static final _id_putCharSequence = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putCharSequence",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void putCharSequence(java.lang.String string, java.lang.CharSequence charSequence)
  void putCharSequence(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putCharSequence,
        jni.JniCallType.voidType,
        [string.reference, charSequence.reference]).check();
  }

  static final _id_putParcelable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putParcelable",
      r"(Ljava/lang/String;Landroid/os/Parcelable;)V");

  /// from: public void putParcelable(java.lang.String string, android.os.Parcelable parcelable)
  void putParcelable(
    jni.JString string,
    jni.JObject parcelable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putParcelable,
        jni.JniCallType.voidType,
        [string.reference, parcelable.reference]).check();
  }

  static final _id_putSize = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putSize", r"(Ljava/lang/String;Landroid/util/Size;)V");

  /// from: public void putSize(java.lang.String string, android.util.Size size)
  void putSize(
    jni.JString string,
    jni.JObject size,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putSize,
        jni.JniCallType.voidType, [string.reference, size.reference]).check();
  }

  static final _id_putSizeF = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putSizeF", r"(Ljava/lang/String;Landroid/util/SizeF;)V");

  /// from: public void putSizeF(java.lang.String string, android.util.SizeF sizeF)
  void putSizeF(
    jni.JString string,
    jni.JObject sizeF,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putSizeF,
        jni.JniCallType.voidType, [string.reference, sizeF.reference]).check();
  }

  static final _id_putParcelableArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putParcelableArray",
      r"(Ljava/lang/String;[Landroid/os/Parcelable;)V");

  /// from: public void putParcelableArray(java.lang.String string, android.os.Parcelable[] parcelables)
  void putParcelableArray(
    jni.JString string,
    jni.JArray<jni.JObject> parcelables,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putParcelableArray,
        jni.JniCallType.voidType,
        [string.reference, parcelables.reference]).check();
  }

  static final _id_putParcelableArrayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putParcelableArrayList",
      r"(Ljava/lang/String;Ljava/util/ArrayList;)V");

  /// from: public void putParcelableArrayList(java.lang.String string, java.util.ArrayList arrayList)
  void putParcelableArrayList(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putParcelableArrayList,
        jni.JniCallType.voidType,
        [string.reference, arrayList.reference]).check();
  }

  static final _id_putSparseParcelableArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putSparseParcelableArray",
      r"(Ljava/lang/String;Landroid/util/SparseArray;)V");

  /// from: public void putSparseParcelableArray(java.lang.String string, android.util.SparseArray sparseArray)
  void putSparseParcelableArray(
    jni.JString string,
    jni.JObject sparseArray,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putSparseParcelableArray,
        jni.JniCallType.voidType,
        [string.reference, sparseArray.reference]).check();
  }

  static final _id_putIntegerArrayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putIntegerArrayList",
      r"(Ljava/lang/String;Ljava/util/ArrayList;)V");

  /// from: public void putIntegerArrayList(java.lang.String string, java.util.ArrayList arrayList)
  void putIntegerArrayList(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putIntegerArrayList,
        jni.JniCallType.voidType,
        [string.reference, arrayList.reference]).check();
  }

  static final _id_putStringArrayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putStringArrayList",
      r"(Ljava/lang/String;Ljava/util/ArrayList;)V");

  /// from: public void putStringArrayList(java.lang.String string, java.util.ArrayList arrayList)
  void putStringArrayList(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putStringArrayList,
        jni.JniCallType.voidType,
        [string.reference, arrayList.reference]).check();
  }

  static final _id_putCharSequenceArrayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putCharSequenceArrayList",
      r"(Ljava/lang/String;Ljava/util/ArrayList;)V");

  /// from: public void putCharSequenceArrayList(java.lang.String string, java.util.ArrayList arrayList)
  void putCharSequenceArrayList(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putCharSequenceArrayList,
        jni.JniCallType.voidType,
        [string.reference, arrayList.reference]).check();
  }

  static final _id_putSerializable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putSerializable",
      r"(Ljava/lang/String;Ljava/io/Serializable;)V");

  /// from: public void putSerializable(java.lang.String string, java.io.Serializable serializable)
  void putSerializable(
    jni.JString string,
    jni.JObject serializable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putSerializable,
        jni.JniCallType.voidType,
        [string.reference, serializable.reference]).check();
  }

  static final _id_putByteArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putByteArray", r"(Ljava/lang/String;[B)V");

  /// from: public void putByteArray(java.lang.String string, byte[] bs)
  void putByteArray(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putByteArray,
        jni.JniCallType.voidType, [string.reference, bs.reference]).check();
  }

  static final _id_putShortArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putShortArray", r"(Ljava/lang/String;[S)V");

  /// from: public void putShortArray(java.lang.String string, short[] ss)
  void putShortArray(
    jni.JString string,
    jni.JArray<jni.jshort> ss,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putShortArray,
        jni.JniCallType.voidType, [string.reference, ss.reference]).check();
  }

  static final _id_putCharArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putCharArray", r"(Ljava/lang/String;[C)V");

  /// from: public void putCharArray(java.lang.String string, char[] cs)
  void putCharArray(
    jni.JString string,
    jni.JArray<jni.jchar> cs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putCharArray,
        jni.JniCallType.voidType, [string.reference, cs.reference]).check();
  }

  static final _id_putFloatArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putFloatArray", r"(Ljava/lang/String;[F)V");

  /// from: public void putFloatArray(java.lang.String string, float[] fs)
  void putFloatArray(
    jni.JString string,
    jni.JArray<jni.jfloat> fs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putFloatArray,
        jni.JniCallType.voidType, [string.reference, fs.reference]).check();
  }

  static final _id_putCharSequenceArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putCharSequenceArray",
      r"(Ljava/lang/String;[Ljava/lang/CharSequence;)V");

  /// from: public void putCharSequenceArray(java.lang.String string, java.lang.CharSequence[] charSequences)
  void putCharSequenceArray(
    jni.JString string,
    jni.JArray<jni.JObject> charSequences,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putCharSequenceArray,
        jni.JniCallType.voidType,
        [string.reference, charSequences.reference]).check();
  }

  static final _id_putBundle = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putBundle", r"(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void putBundle(java.lang.String string, android.os.Bundle bundle)
  void putBundle(
    jni.JString string,
    Bundle bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putBundle,
        jni.JniCallType.voidType, [string.reference, bundle.reference]).check();
  }

  static final _id_putBinder = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putBinder", r"(Ljava/lang/String;Landroid/os/IBinder;)V");

  /// from: public void putBinder(java.lang.String string, android.os.IBinder iBinder)
  void putBinder(
    jni.JString string,
    jni.JObject iBinder,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putBinder,
        jni.JniCallType.voidType,
        [string.reference, iBinder.reference]).check();
  }

  static final _id_getByte = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getByte", r"(Ljava/lang/String;)B");

  /// from: public byte getByte(java.lang.String string)
  int getByte(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getByte,
        jni.JniCallType.byteType, [string.reference]).byte;
  }

  static final _id_getByte1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getByte", r"(Ljava/lang/String;B)Ljava/lang/Byte;");

  /// from: public java.lang.Byte getByte(java.lang.String string, byte b)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JByte getByte1(
    jni.JString string,
    int b,
  ) {
    return const jni.JByteType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getByte1,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueByte(b)]).object);
  }

  static final _id_getChar = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getChar", r"(Ljava/lang/String;)C");

  /// from: public char getChar(java.lang.String string)
  int getChar(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getChar,
        jni.JniCallType.charType, [string.reference]).char;
  }

  static final _id_getChar1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getChar", r"(Ljava/lang/String;C)C");

  /// from: public char getChar(java.lang.String string, char c)
  int getChar1(
    jni.JString string,
    int c,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getChar1,
        jni.JniCallType.charType, [string.reference, jni.JValueChar(c)]).char;
  }

  static final _id_getShort = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getShort", r"(Ljava/lang/String;)S");

  /// from: public short getShort(java.lang.String string)
  int getShort(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getShort,
        jni.JniCallType.shortType, [string.reference]).short;
  }

  static final _id_getShort1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getShort", r"(Ljava/lang/String;S)S");

  /// from: public short getShort(java.lang.String string, short s)
  int getShort1(
    jni.JString string,
    int s,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getShort1,
        jni.JniCallType.shortType,
        [string.reference, jni.JValueShort(s)]).short;
  }

  static final _id_getFloat = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getFloat", r"(Ljava/lang/String;)F");

  /// from: public float getFloat(java.lang.String string)
  double getFloat(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getFloat,
        jni.JniCallType.floatType, [string.reference]).float;
  }

  static final _id_getFloat1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getFloat", r"(Ljava/lang/String;F)F");

  /// from: public float getFloat(java.lang.String string, float f)
  double getFloat1(
    jni.JString string,
    double f,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getFloat1,
        jni.JniCallType.floatType,
        [string.reference, jni.JValueFloat(f)]).float;
  }

  static final _id_getCharSequence = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCharSequence",
      r"(Ljava/lang/String;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getCharSequence(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequence(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCharSequence,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getCharSequence1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCharSequence",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getCharSequence(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequence1(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCharSequence1,
        jni.JniCallType.objectType,
        [string.reference, charSequence.reference]).object);
  }

  static final _id_getSize = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSize", r"(Ljava/lang/String;)Landroid/util/Size;");

  /// from: public android.util.Size getSize(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSize(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSize,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getSizeF = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"getSizeF", r"(Ljava/lang/String;)Landroid/util/SizeF;");

  /// from: public android.util.SizeF getSizeF(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSizeF(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSizeF,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getBundle = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"getBundle", r"(Ljava/lang/String;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle getBundle(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Bundle getBundle(
    jni.JString string,
  ) {
    return const $BundleType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBundle,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getParcelable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelable",
      r"(Ljava/lang/String;)Landroid/os/Parcelable;");

  /// from: public T getParcelable(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelable<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelable,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getParcelable1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelable",
      r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");

  /// from: public T getParcelable(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelable1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelable1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getParcelableArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelableArray",
      r"(Ljava/lang/String;)[Landroid/os/Parcelable;");

  /// from: public android.os.Parcelable[] getParcelableArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getParcelableArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getParcelableArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getParcelableArray1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelableArray",
      r"(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;");

  /// from: public java.lang.Object[] getParcelableArray(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<$T> getParcelableArray1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return jni.JArrayType(T).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelableArray1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getParcelableArrayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelableArrayList",
      r"(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getParcelableArrayList(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayList<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelableArrayList,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getParcelableArrayList1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParcelableArrayList",
      r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getParcelableArrayList(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayList1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParcelableArrayList1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getSparseParcelableArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSparseParcelableArray",
      r"(Ljava/lang/String;)Landroid/util/SparseArray;");

  /// from: public android.util.SparseArray getSparseParcelableArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSparseParcelableArray<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSparseParcelableArray,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getSparseParcelableArray1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSparseParcelableArray",
      r"(Ljava/lang/String;Ljava/lang/Class;)Landroid/util/SparseArray;");

  /// from: public android.util.SparseArray getSparseParcelableArray(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSparseParcelableArray1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSparseParcelableArray1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getSerializable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSerializable",
      r"(Ljava/lang/String;)Ljava/io/Serializable;");

  /// from: public java.io.Serializable getSerializable(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSerializable(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSerializable,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getSerializable1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSerializable",
      r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/Serializable;");

  /// from: public T getSerializable(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSerializable1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSerializable1,
        jni.JniCallType.objectType,
        [string.reference, class0.reference]).object);
  }

  static final _id_getIntegerArrayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getIntegerArrayList",
      r"(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getIntegerArrayList(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIntegerArrayList(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getIntegerArrayList,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getStringArrayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getStringArrayList",
      r"(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getStringArrayList(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStringArrayList(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getStringArrayList,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getCharSequenceArrayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCharSequenceArrayList",
      r"(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList getCharSequenceArrayList(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceArrayList(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCharSequenceArrayList,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getByteArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getByteArray", r"(Ljava/lang/String;)[B");

  /// from: public byte[] getByteArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getByteArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getByteArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getShortArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getShortArray", r"(Ljava/lang/String;)[S");

  /// from: public short[] getShortArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jshort> getShortArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jshortType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getShortArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getCharArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCharArray", r"(Ljava/lang/String;)[C");

  /// from: public char[] getCharArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jchar> getCharArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jcharType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getCharArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getFloatArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getFloatArray", r"(Ljava/lang/String;)[F");

  /// from: public float[] getFloatArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> getFloatArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jfloatType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getFloatArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getCharSequenceArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCharSequenceArray",
      r"(Ljava/lang/String;)[Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence[] getCharSequenceArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getCharSequenceArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getCharSequenceArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getBinder = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"getBinder", r"(Ljava/lang/String;)Landroid/os/IBinder;");

  /// from: public android.os.IBinder getBinder(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBinder(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBinder,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_describeContents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"describeContents", r"()I");

  /// from: public int describeContents()
  int describeContents() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_describeContents, jni.JniCallType.intType, []).integer;
  }

  static final _id_writeToParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeToParcel", r"(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeToParcel,
        jni.JniCallType.voidType, [parcel.reference, jni.JValueInt(i)]).check();
  }

  static final _id_readFromParcel = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"readFromParcel", r"(Landroid/os/Parcel;)V");

  /// from: public void readFromParcel(android.os.Parcel parcel)
  void readFromParcel(
    jni.JObject parcel,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_readFromParcel,
        jni.JniCallType.voidType, [parcel.reference]).check();
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }
}

final class $BundleType extends jni.JObjType<Bundle> {
  const $BundleType();

  @override
  String get signature => r"Landroid/os/Bundle;";

  @override
  Bundle fromRef(jni.JObjectPtr ref) => Bundle.fromRef(ref);

  @override
  jni.JObjType get superType => const $BaseBundleType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($BundleType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BundleType) && other is $BundleType;
  }
}

/// from: android.os.BaseBundle
class BaseBundle extends jni.JObject {
  @override
  late final jni.JObjType<BaseBundle> $type = type;

  BaseBundle.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/os/BaseBundle");

  /// The type which includes information such as the signature of this class.
  static const type = $BaseBundleType();
  static final _id_size =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"size", r"()I");

  /// from: public int size()
  int size() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_size, jni.JniCallType.intType, []).integer;
  }

  static final _id_isEmpty =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isEmpty", r"()Z");

  /// from: public boolean isEmpty()
  bool isEmpty() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isEmpty, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_clear =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"clear", r"()V");

  /// from: public void clear()
  void clear() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clear, jni.JniCallType.voidType, []).check();
  }

  static final _id_containsKey = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"containsKey", r"(Ljava/lang/String;)Z");

  /// from: public boolean containsKey(java.lang.String string)
  bool containsKey(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_containsKey,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_get0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"get", r"(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public java.lang.Object get(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get0(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_get0,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_remove = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"remove", r"(Ljava/lang/String;)V");

  /// from: public void remove(java.lang.String string)
  void remove(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_remove,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_putAll = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putAll", r"(Landroid/os/PersistableBundle;)V");

  /// from: public void putAll(android.os.PersistableBundle persistableBundle)
  void putAll(
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putAll,
        jni.JniCallType.voidType, [persistableBundle.reference]).check();
  }

  static final _id_keySet = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"keySet", r"()Ljava/util/Set;");

  /// from: public java.util.Set keySet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> keySet() {
    return const jni.JSetType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_keySet, jni.JniCallType.objectType, []).object);
  }

  static final _id_putBoolean = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putBoolean", r"(Ljava/lang/String;Z)V");

  /// from: public void putBoolean(java.lang.String string, boolean z)
  void putBoolean(
    jni.JString string,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putBoolean,
        jni.JniCallType.voidType, [string.reference, z ? 1 : 0]).check();
  }

  static final _id_putInt = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putInt", r"(Ljava/lang/String;I)V");

  /// from: public void putInt(java.lang.String string, int i)
  void putInt(
    jni.JString string,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putInt,
        jni.JniCallType.voidType, [string.reference, jni.JValueInt(i)]).check();
  }

  static final _id_putLong = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putLong", r"(Ljava/lang/String;J)V");

  /// from: public void putLong(java.lang.String string, long j)
  void putLong(
    jni.JString string,
    int j,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putLong,
        jni.JniCallType.voidType, [string.reference, j]).check();
  }

  static final _id_putDouble = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"putDouble", r"(Ljava/lang/String;D)V");

  /// from: public void putDouble(java.lang.String string, double d)
  void putDouble(
    jni.JString string,
    double d,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putDouble,
        jni.JniCallType.voidType, [string.reference, d]).check();
  }

  static final _id_putString = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"putString", r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void putString(java.lang.String string, java.lang.String string1)
  void putString(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putString,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_putBooleanArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putBooleanArray", r"(Ljava/lang/String;[Z)V");

  /// from: public void putBooleanArray(java.lang.String string, boolean[] zs)
  void putBooleanArray(
    jni.JString string,
    jni.JArray<jni.jboolean> zs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putBooleanArray,
        jni.JniCallType.voidType, [string.reference, zs.reference]).check();
  }

  static final _id_putIntArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putIntArray", r"(Ljava/lang/String;[I)V");

  /// from: public void putIntArray(java.lang.String string, int[] is)
  void putIntArray(
    jni.JString string,
    jni.JArray<jni.jint> is0,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putIntArray,
        jni.JniCallType.voidType, [string.reference, is0.reference]).check();
  }

  static final _id_putLongArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putLongArray", r"(Ljava/lang/String;[J)V");

  /// from: public void putLongArray(java.lang.String string, long[] js)
  void putLongArray(
    jni.JString string,
    jni.JArray<jni.jlong> js,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putLongArray,
        jni.JniCallType.voidType, [string.reference, js.reference]).check();
  }

  static final _id_putDoubleArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"putDoubleArray", r"(Ljava/lang/String;[D)V");

  /// from: public void putDoubleArray(java.lang.String string, double[] ds)
  void putDoubleArray(
    jni.JString string,
    jni.JArray<jni.jdouble> ds,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_putDoubleArray,
        jni.JniCallType.voidType, [string.reference, ds.reference]).check();
  }

  static final _id_putStringArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"putStringArray",
      r"(Ljava/lang/String;[Ljava/lang/String;)V");

  /// from: public void putStringArray(java.lang.String string, java.lang.String[] strings)
  void putStringArray(
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_putStringArray,
        jni.JniCallType.voidType,
        [string.reference, strings.reference]).check();
  }

  static final _id_getBoolean = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBoolean", r"(Ljava/lang/String;)Z");

  /// from: public boolean getBoolean(java.lang.String string)
  bool getBoolean(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getBoolean,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_getBoolean1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBoolean", r"(Ljava/lang/String;Z)Z");

  /// from: public boolean getBoolean(java.lang.String string, boolean z)
  bool getBoolean1(
    jni.JString string,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getBoolean1,
        jni.JniCallType.booleanType, [string.reference, z ? 1 : 0]).boolean;
  }

  static final _id_getInt = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getInt", r"(Ljava/lang/String;)I");

  /// from: public int getInt(java.lang.String string)
  int getInt(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getInt,
        jni.JniCallType.intType, [string.reference]).integer;
  }

  static final _id_getInt1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getInt", r"(Ljava/lang/String;I)I");

  /// from: public int getInt(java.lang.String string, int i)
  int getInt1(
    jni.JString string,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getInt1,
        jni.JniCallType.intType, [string.reference, jni.JValueInt(i)]).integer;
  }

  static final _id_getLong = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLong", r"(Ljava/lang/String;)J");

  /// from: public long getLong(java.lang.String string)
  int getLong(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getLong,
        jni.JniCallType.longType, [string.reference]).long;
  }

  static final _id_getLong1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLong", r"(Ljava/lang/String;J)J");

  /// from: public long getLong(java.lang.String string, long j)
  int getLong1(
    jni.JString string,
    int j,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getLong1,
        jni.JniCallType.longType, [string.reference, j]).long;
  }

  static final _id_getDouble = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getDouble", r"(Ljava/lang/String;)D");

  /// from: public double getDouble(java.lang.String string)
  double getDouble(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getDouble,
        jni.JniCallType.doubleType, [string.reference]).doubleFloat;
  }

  static final _id_getDouble1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getDouble", r"(Ljava/lang/String;D)D");

  /// from: public double getDouble(java.lang.String string, double d)
  double getDouble1(
    jni.JString string,
    double d,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getDouble1,
        jni.JniCallType.doubleType, [string.reference, d]).doubleFloat;
  }

  static final _id_getString = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"getString", r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getString(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getString,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getString1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getString",
      r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getString(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString1(
    jni.JString string,
    jni.JString string1,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getString1,
        jni.JniCallType.objectType,
        [string.reference, string1.reference]).object);
  }

  static final _id_getBooleanArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBooleanArray", r"(Ljava/lang/String;)[Z");

  /// from: public boolean[] getBooleanArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jboolean> getBooleanArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jbooleanType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getBooleanArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getIntArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getIntArray", r"(Ljava/lang/String;)[I");

  /// from: public int[] getIntArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getIntArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getIntArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getLongArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLongArray", r"(Ljava/lang/String;)[J");

  /// from: public long[] getLongArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jlong> getLongArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jlongType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getLongArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getDoubleArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDoubleArray", r"(Ljava/lang/String;)[D");

  /// from: public double[] getDoubleArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jdouble> getDoubleArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.jdoubleType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getDoubleArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getStringArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getStringArray",
      r"(Ljava/lang/String;)[Ljava/lang/String;");

  /// from: public java.lang.String[] getStringArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getStringArray(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getStringArray,
            jni.JniCallType.objectType, [string.reference]).object);
  }
}

final class $BaseBundleType extends jni.JObjType<BaseBundle> {
  const $BaseBundleType();

  @override
  String get signature => r"Landroid/os/BaseBundle;";

  @override
  BaseBundle fromRef(jni.JObjectPtr ref) => BaseBundle.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BaseBundleType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BaseBundleType) && other is $BaseBundleType;
  }
}

/// from: java.lang.Runnable
class Runnable extends jni.JObject {
  @override
  late final jni.JObjType<Runnable> $type = type;

  Runnable.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/lang/Runnable");

  /// The type which includes information such as the signature of this class.
  static const type = $RunnableType();
  static final _id_run =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"run", r"()V");

  /// from: public abstract void run()
  void run() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_run, jni.JniCallType.voidType, []).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $RunnableImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"run()V") {
        _$impls[$p]!.run();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Runnable.implement(
    $RunnableImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Runnable.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"java.lang.Runnable",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $RunnableImpl {
  factory $RunnableImpl({
    required void Function() run,
  }) = _$RunnableImpl;

  void run();
}

class _$RunnableImpl implements $RunnableImpl {
  _$RunnableImpl({
    required void Function() run,
  }) : _run = run;

  final void Function() _run;

  void run() {
    return _run();
  }
}

final class $RunnableType extends jni.JObjType<Runnable> {
  const $RunnableType();

  @override
  String get signature => r"Ljava/lang/Runnable;";

  @override
  Runnable fromRef(jni.JObjectPtr ref) => Runnable.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($RunnableType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($RunnableType) && other is $RunnableType;
  }
}

/// from: java.lang.Exception
class Exception extends Throwable {
  @override
  late final jni.JObjType<Exception> $type = type;

  Exception.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/lang/Exception");

  /// The type which includes information such as the signature of this class.
  static const type = $ExceptionType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception() {
    return Exception.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception.new1(
    jni.JString string,
  ) {
    return Exception.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.String string, java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception.new2(
    jni.JString string,
    Throwable throwable,
  ) {
    return Exception.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new2,
        [string.reference, throwable.reference]).object);
  }

  static final _id_new3 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception.new3(
    Throwable throwable,
  ) {
    return Exception.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new3, [throwable.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V");

  /// from: protected void <init>(java.lang.String string, java.lang.Throwable throwable, boolean z, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception.new4(
    jni.JString string,
    Throwable throwable,
    bool z,
    bool z1,
  ) {
    return Exception.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new4,
        [string.reference, throwable.reference, z ? 1 : 0, z1 ? 1 : 0]).object);
  }
}

final class $ExceptionType extends jni.JObjType<Exception> {
  const $ExceptionType();

  @override
  String get signature => r"Ljava/lang/Exception;";

  @override
  Exception fromRef(jni.JObjectPtr ref) => Exception.fromRef(ref);

  @override
  jni.JObjType get superType => const $ThrowableType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($ExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExceptionType) && other is $ExceptionType;
  }
}

/// from: java.lang.Throwable
class Throwable extends jni.JObject {
  @override
  late final jni.JObjType<Throwable> $type = type;

  Throwable.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/lang/Throwable");

  /// The type which includes information such as the signature of this class.
  static const type = $ThrowableType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable() {
    return Throwable.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable.new1(
    jni.JString string,
  ) {
    return Throwable.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.String string, java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable.new2(
    jni.JString string,
    Throwable throwable,
  ) {
    return Throwable.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new2,
        [string.reference, throwable.reference]).object);
  }

  static final _id_new3 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable.new3(
    Throwable throwable,
  ) {
    return Throwable.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new3, [throwable.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V");

  /// from: protected void <init>(java.lang.String string, java.lang.Throwable throwable, boolean z, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable.new4(
    jni.JString string,
    Throwable throwable,
    bool z,
    bool z1,
  ) {
    return Throwable.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new4,
        [string.reference, throwable.reference, z ? 1 : 0, z1 ? 1 : 0]).object);
  }

  static final _id_getMessage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getMessage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getMessage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMessage, jni.JniCallType.objectType, []).object);
  }

  static final _id_getLocalizedMessage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLocalizedMessage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getLocalizedMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalizedMessage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLocalizedMessage,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCause = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCause", r"()Ljava/lang/Throwable;");

  /// from: public java.lang.Throwable getCause()
  /// The returned object must be released after use, by calling the [release] method.
  Throwable getCause() {
    return const $ThrowableType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCause, jni.JniCallType.objectType, []).object);
  }

  static final _id_initCause = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"initCause", r"(Ljava/lang/Throwable;)Ljava/lang/Throwable;");

  /// from: public java.lang.Throwable initCause(java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  Throwable initCause(
    Throwable throwable,
  ) {
    return const $ThrowableType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_initCause,
        jni.JniCallType.objectType,
        [throwable.reference]).object);
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }

  static final _id_printStackTrace = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"printStackTrace", r"()V");

  /// from: public void printStackTrace()
  void printStackTrace() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_printStackTrace, jni.JniCallType.voidType, []).check();
  }

  static final _id_printStackTrace1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"printStackTrace", r"(Ljava/io/PrintStream;)V");

  /// from: public void printStackTrace(java.io.PrintStream printStream)
  void printStackTrace1(
    jni.JObject printStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_printStackTrace1,
        jni.JniCallType.voidType, [printStream.reference]).check();
  }

  static final _id_printStackTrace2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"printStackTrace", r"(Ljava/io/PrintWriter;)V");

  /// from: public void printStackTrace(java.io.PrintWriter printWriter)
  void printStackTrace2(
    jni.JObject printWriter,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_printStackTrace2,
        jni.JniCallType.voidType, [printWriter.reference]).check();
  }

  static final _id_fillInStackTrace = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"fillInStackTrace", r"()Ljava/lang/Throwable;");

  /// from: public java.lang.Throwable fillInStackTrace()
  /// The returned object must be released after use, by calling the [release] method.
  Throwable fillInStackTrace() {
    return const $ThrowableType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_fillInStackTrace,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getStackTrace = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getStackTrace", r"()[Ljava/lang/StackTraceElement;");

  /// from: public java.lang.StackTraceElement[] getStackTrace()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getStackTrace() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getStackTrace,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_setStackTrace = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setStackTrace", r"([Ljava/lang/StackTraceElement;)V");

  /// from: public void setStackTrace(java.lang.StackTraceElement[] stackTraceElements)
  void setStackTrace(
    jni.JArray<jni.JObject> stackTraceElements,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setStackTrace,
        jni.JniCallType.voidType, [stackTraceElements.reference]).check();
  }

  static final _id_addSuppressed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"addSuppressed", r"(Ljava/lang/Throwable;)V");

  /// from: public final void addSuppressed(java.lang.Throwable throwable)
  void addSuppressed(
    Throwable throwable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_addSuppressed,
        jni.JniCallType.voidType, [throwable.reference]).check();
  }

  static final _id_getSuppressed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSuppressed", r"()[Ljava/lang/Throwable;");

  /// from: public final java.lang.Throwable[] getSuppressed()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<Throwable> getSuppressed() {
    return const jni.JArrayType($ThrowableType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getSuppressed,
            jni.JniCallType.objectType, []).object);
  }
}

final class $ThrowableType extends jni.JObjType<Throwable> {
  const $ThrowableType();

  @override
  String get signature => r"Ljava/lang/Throwable;";

  @override
  Throwable fromRef(jni.JObjectPtr ref) => Throwable.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ThrowableType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ThrowableType) && other is $ThrowableType;
  }
}

/// from: java.util.concurrent.Executor
class Executor extends jni.JObject {
  @override
  late final jni.JObjType<Executor> $type = type;

  Executor.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/util/concurrent/Executor");

  /// The type which includes information such as the signature of this class.
  static const type = $ExecutorType();
  static final _id_execute = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"execute", r"(Ljava/lang/Runnable;)V");

  /// from: public abstract void execute(java.lang.Runnable runnable)
  void execute(
    Runnable runnable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_execute,
        jni.JniCallType.voidType, [runnable.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ExecutorImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"execute(Ljava/lang/Runnable;)V") {
        _$impls[$p]!.execute(
          $a[0].castTo(const $RunnableType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Executor.implement(
    $ExecutorImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Executor.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"java.util.concurrent.Executor",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $ExecutorImpl {
  factory $ExecutorImpl({
    required void Function(Runnable runnable) execute,
  }) = _$ExecutorImpl;

  void execute(Runnable runnable);
}

class _$ExecutorImpl implements $ExecutorImpl {
  _$ExecutorImpl({
    required void Function(Runnable runnable) execute,
  }) : _execute = execute;

  final void Function(Runnable runnable) _execute;

  void execute(Runnable runnable) {
    return _execute(runnable);
  }
}

final class $ExecutorType extends jni.JObjType<Executor> {
  const $ExecutorType();

  @override
  String get signature => r"Ljava/util/concurrent/Executor;";

  @override
  Executor fromRef(jni.JObjectPtr ref) => Executor.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExecutorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExecutorType) && other is $ExecutorType;
  }
}

/// from: java.util.concurrent.Executors
class Executors extends jni.JObject {
  @override
  late final jni.JObjType<Executors> $type = type;

  Executors.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/util/concurrent/Executors");

  /// The type which includes information such as the signature of this class.
  static const type = $ExecutorsType();
  static final _id_newFixedThreadPool = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"newFixedThreadPool",
      r"(I)Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newFixedThreadPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_newFixedThreadPool,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_newWorkStealingPool = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"newWorkStealingPool",
      r"(I)Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newWorkStealingPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_newWorkStealingPool,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_newWorkStealingPool1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"newWorkStealingPool",
      r"()Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newWorkStealingPool1() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_newWorkStealingPool1,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_newFixedThreadPool1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"newFixedThreadPool",
      r"(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newFixedThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_newFixedThreadPool1,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), threadFactory.reference]).object);
  }

  static final _id_newSingleThreadExecutor = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"newSingleThreadExecutor",
          r"()Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadExecutor() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_newSingleThreadExecutor,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_newSingleThreadExecutor1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"newSingleThreadExecutor",
      r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadExecutor1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_newSingleThreadExecutor1,
            jni.JniCallType.objectType,
            [threadFactory.reference]).object);
  }

  static final _id_newCachedThreadPool = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"newCachedThreadPool",
      r"()Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newCachedThreadPool() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_newCachedThreadPool,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_newCachedThreadPool1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"newCachedThreadPool",
      r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newCachedThreadPool1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_newCachedThreadPool1,
            jni.JniCallType.objectType, [threadFactory.reference]).object);
  }

  static final _id_newSingleThreadScheduledExecutor = jni.Jni.accessors
      .getStaticMethodIDOf(
          _class.reference,
          r"newSingleThreadScheduledExecutor",
          r"()Ljava/util/concurrent/ScheduledExecutorService;");

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadScheduledExecutor() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_newSingleThreadScheduledExecutor,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_newSingleThreadScheduledExecutor1 = jni.Jni.accessors
      .getStaticMethodIDOf(
          _class.reference,
          r"newSingleThreadScheduledExecutor",
          r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadScheduledExecutor1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_newSingleThreadScheduledExecutor1,
            jni.JniCallType.objectType,
            [threadFactory.reference]).object);
  }

  static final _id_newScheduledThreadPool = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"newScheduledThreadPool",
          r"(I)Ljava/util/concurrent/ScheduledExecutorService;");

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newScheduledThreadPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_newScheduledThreadPool,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_newScheduledThreadPool1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"newScheduledThreadPool",
      r"(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newScheduledThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_newScheduledThreadPool1,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), threadFactory.reference]).object);
  }

  static final _id_unconfigurableExecutorService = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"unconfigurableExecutorService",
          r"(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;");

  /// from: static public java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService executorService)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject unconfigurableExecutorService(
    jni.JObject executorService,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_unconfigurableExecutorService,
            jni.JniCallType.objectType,
            [executorService.reference]).object);
  }

  static final _id_unconfigurableScheduledExecutorService = jni.Jni.accessors
      .getStaticMethodIDOf(
          _class.reference,
          r"unconfigurableScheduledExecutorService",
          r"(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;");

  /// from: static public java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService scheduledExecutorService)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject unconfigurableScheduledExecutorService(
    jni.JObject scheduledExecutorService,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_unconfigurableScheduledExecutorService,
            jni.JniCallType.objectType,
            [scheduledExecutorService.reference]).object);
  }

  static final _id_defaultThreadFactory = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"defaultThreadFactory",
      r"()Ljava/util/concurrent/ThreadFactory;");

  /// from: static public java.util.concurrent.ThreadFactory defaultThreadFactory()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject defaultThreadFactory() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_defaultThreadFactory,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_privilegedThreadFactory = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"privilegedThreadFactory",
          r"()Ljava/util/concurrent/ThreadFactory;");

  /// from: static public java.util.concurrent.ThreadFactory privilegedThreadFactory()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject privilegedThreadFactory() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_privilegedThreadFactory,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_callable = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"callable",
      r"(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;");

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable, T object)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable<$T extends jni.JObject>(
    Runnable runnable,
    $T object, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      object.$type,
    ]) as jni.JObjType<$T>;
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_callable,
            jni.JniCallType.objectType,
            [runnable.reference, object.reference]).object);
  }

  static final _id_callable1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"callable",
      r"(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;");

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable1(
    Runnable runnable,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_callable1,
            jni.JniCallType.objectType, [runnable.reference]).object);
  }

  static final _id_callable2 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"callable",
      r"(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;");

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedAction privilegedAction)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable2(
    jni.JObject privilegedAction,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_callable2,
            jni.JniCallType.objectType, [privilegedAction.reference]).object);
  }

  static final _id_callable3 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"callable",
      r"(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;");

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction privilegedExceptionAction)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable3(
    jni.JObject privilegedExceptionAction,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_callable3,
            jni.JniCallType.objectType,
            [privilegedExceptionAction.reference]).object);
  }

  static final _id_privilegedCallable = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"privilegedCallable",
      r"(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");

  /// from: static public java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject privilegedCallable<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_privilegedCallable,
            jni.JniCallType.objectType, [callable.reference]).object);
  }

  static final _id_privilegedCallableUsingCurrentClassLoader = jni.Jni.accessors
      .getStaticMethodIDOf(
          _class.reference,
          r"privilegedCallableUsingCurrentClassLoader",
          r"(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");

  /// from: static public java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject
      privilegedCallableUsingCurrentClassLoader<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_privilegedCallableUsingCurrentClassLoader,
            jni.JniCallType.objectType,
            [callable.reference]).object);
  }
}

final class $ExecutorsType extends jni.JObjType<Executors> {
  const $ExecutorsType();

  @override
  String get signature => r"Ljava/util/concurrent/Executors;";

  @override
  Executors fromRef(jni.JObjectPtr ref) => Executors.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExecutorsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExecutorsType) && other is $ExecutorsType;
  }
}

/// from: com.google.android.gms.fido.Fido
class Fido extends jni.JObject {
  @override
  late final jni.JObjType<Fido> $type = type;

  Fido.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/google/android/gms/fido/Fido");

  /// The type which includes information such as the signature of this class.
  static const type = $FidoType();

  /// from: static public final java.lang.String KEY_RESPONSE_EXTRA
  static const KEY_RESPONSE_EXTRA = r"""RESPONSE_EXTRA""";

  /// from: static public final java.lang.String FIDO2_KEY_RESPONSE_EXTRA
  static const FIDO2_KEY_RESPONSE_EXTRA = r"""FIDO2_RESPONSE_EXTRA""";

  /// from: static public final java.lang.String FIDO2_KEY_ERROR_EXTRA
  static const FIDO2_KEY_ERROR_EXTRA = r"""FIDO2_ERROR_EXTRA""";

  /// from: static public final java.lang.String FIDO2_KEY_CREDENTIAL_EXTRA
  static const FIDO2_KEY_CREDENTIAL_EXTRA = r"""FIDO2_CREDENTIAL_EXTRA""";

  static final _id_zza = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"zza",
    r"Lcom/google/android/gms/common/api/Api$ClientKey;",
  );

  /// from: static public final com.google.android.gms.common.api.Api$ClientKey zza
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get zza =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_zza, jni.JniCallType.objectType)
          .object);

  static final _id_zzb = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"zzb",
    r"Lcom/google/android/gms/common/api/Api;",
  );

  /// from: static public final com.google.android.gms.common.api.Api zzb
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get zzb =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_zzb, jni.JniCallType.objectType)
          .object);

  static final _id_zzc = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"zzc",
    r"Lcom/google/android/gms/internal/fido/zzaa;",
  );

  /// from: static public final com.google.android.gms.internal.fido.zzaa zzc
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get zzc =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_zzc, jni.JniCallType.objectType)
          .object);

  static final _id_getFido2ApiClient = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getFido2ApiClient",
      r"(Landroid/app/Activity;)Lcom/google/android/gms/fido/fido2/Fido2ApiClient;");

  /// from: static public com.google.android.gms.fido.fido2.Fido2ApiClient getFido2ApiClient(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  static Fido2ApiClient getFido2ApiClient(
    Activity activity,
  ) {
    return const $Fido2ApiClientType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getFido2ApiClient,
            jni.JniCallType.objectType, [activity.reference]).object);
  }

  static final _id_getFido2ApiClient1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getFido2ApiClient",
      r"(Landroid/content/Context;)Lcom/google/android/gms/fido/fido2/Fido2ApiClient;");

  /// from: static public com.google.android.gms.fido.fido2.Fido2ApiClient getFido2ApiClient(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static Fido2ApiClient getFido2ApiClient1(
    Context context,
  ) {
    return const $Fido2ApiClientType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getFido2ApiClient1,
            jni.JniCallType.objectType, [context.reference]).object);
  }

  static final _id_getFido2PrivilegedApiClient = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getFido2PrivilegedApiClient",
          r"(Landroid/app/Activity;)Lcom/google/android/gms/fido/fido2/Fido2PrivilegedApiClient;");

  /// from: static public com.google.android.gms.fido.fido2.Fido2PrivilegedApiClient getFido2PrivilegedApiClient(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getFido2PrivilegedApiClient(
    Activity activity,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_getFido2PrivilegedApiClient,
            jni.JniCallType.objectType,
            [activity.reference]).object);
  }

  static final _id_getFido2PrivilegedApiClient1 = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getFido2PrivilegedApiClient",
          r"(Landroid/content/Context;)Lcom/google/android/gms/fido/fido2/Fido2PrivilegedApiClient;");

  /// from: static public com.google.android.gms.fido.fido2.Fido2PrivilegedApiClient getFido2PrivilegedApiClient(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getFido2PrivilegedApiClient1(
    Context context,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_getFido2PrivilegedApiClient1,
            jni.JniCallType.objectType,
            [context.reference]).object);
  }

  static final _id_getU2fApiClient = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getU2fApiClient",
      r"(Landroid/app/Activity;)Lcom/google/android/gms/fido/u2f/U2fApiClient;");

  /// from: static public com.google.android.gms.fido.u2f.U2fApiClient getU2fApiClient(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getU2fApiClient(
    Activity activity,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getU2fApiClient,
            jni.JniCallType.objectType, [activity.reference]).object);
  }

  static final _id_getU2fApiClient1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getU2fApiClient",
      r"(Landroid/content/Context;)Lcom/google/android/gms/fido/u2f/U2fApiClient;");

  /// from: static public com.google.android.gms.fido.u2f.U2fApiClient getU2fApiClient(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getU2fApiClient1(
    Context context,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getU2fApiClient1,
            jni.JniCallType.objectType, [context.reference]).object);
  }
}

final class $FidoType extends jni.JObjType<Fido> {
  const $FidoType();

  @override
  String get signature => r"Lcom/google/android/gms/fido/Fido;";

  @override
  Fido fromRef(jni.JObjectPtr ref) => Fido.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FidoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FidoType) && other is $FidoType;
  }
}

/// from: com.google.android.gms.fido.fido2.Fido2ApiClient
class Fido2ApiClient extends jni.JObject {
  @override
  late final jni.JObjType<Fido2ApiClient> $type = type;

  Fido2ApiClient.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/google/android/gms/fido/fido2/Fido2ApiClient");

  /// The type which includes information such as the signature of this class.
  static const type = $Fido2ApiClientType();
  static final _id_getRegisterIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getRegisterIntent",
      r"(Lcom/google/android/gms/fido/fido2/api/common/PublicKeyCredentialCreationOptions;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task getRegisterIntent(com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialCreationOptions publicKeyCredentialCreationOptions)
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JObject> getRegisterIntent(
    jni.JObject publicKeyCredentialCreationOptions,
  ) {
    return const $TaskType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getRegisterIntent,
            jni.JniCallType.objectType,
            [publicKeyCredentialCreationOptions.reference]).object);
  }

  static final _id_getRegisterPendingIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getRegisterPendingIntent",
      r"(Lcom/google/android/gms/fido/fido2/api/common/PublicKeyCredentialCreationOptions;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task getRegisterPendingIntent(com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialCreationOptions publicKeyCredentialCreationOptions)
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JObject> getRegisterPendingIntent(
    jni.JObject publicKeyCredentialCreationOptions,
  ) {
    return const $TaskType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getRegisterPendingIntent,
            jni.JniCallType.objectType,
            [publicKeyCredentialCreationOptions.reference]).object);
  }

  static final _id_getSignIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSignIntent",
      r"(Lcom/google/android/gms/fido/fido2/api/common/PublicKeyCredentialRequestOptions;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task getSignIntent(com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialRequestOptions publicKeyCredentialRequestOptions)
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JObject> getSignIntent(
    jni.JObject publicKeyCredentialRequestOptions,
  ) {
    return const $TaskType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getSignIntent,
            jni.JniCallType.objectType,
            [publicKeyCredentialRequestOptions.reference]).object);
  }

  static final _id_getSignPendingIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSignPendingIntent",
      r"(Lcom/google/android/gms/fido/fido2/api/common/PublicKeyCredentialRequestOptions;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task getSignPendingIntent(com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialRequestOptions publicKeyCredentialRequestOptions)
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JObject> getSignPendingIntent(
    jni.JObject publicKeyCredentialRequestOptions,
  ) {
    return const $TaskType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getSignPendingIntent,
            jni.JniCallType.objectType,
            [publicKeyCredentialRequestOptions.reference]).object);
  }

  static final _id_isUserVerifyingPlatformAuthenticatorAvailable =
      jni.Jni.accessors.getMethodIDOf(
          _class.reference,
          r"isUserVerifyingPlatformAuthenticatorAvailable",
          r"()Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task isUserVerifyingPlatformAuthenticatorAvailable()
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JBoolean> isUserVerifyingPlatformAuthenticatorAvailable() {
    return const $TaskType(jni.JBooleanType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_isUserVerifyingPlatformAuthenticatorAvailable,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_new0 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Landroid/app/Activity;)V");

  /// from: public void <init>(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  factory Fido2ApiClient(
    Activity activity,
  ) {
    return Fido2ApiClient.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [activity.reference]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory Fido2ApiClient.new1(
    Context context,
  ) {
    return Fido2ApiClient.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [context.reference]).object);
  }
}

final class $Fido2ApiClientType extends jni.JObjType<Fido2ApiClient> {
  const $Fido2ApiClientType();

  @override
  String get signature => r"Lcom/google/android/gms/fido/fido2/Fido2ApiClient;";

  @override
  Fido2ApiClient fromRef(jni.JObjectPtr ref) => Fido2ApiClient.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Fido2ApiClientType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Fido2ApiClientType) &&
        other is $Fido2ApiClientType;
  }
}

/// from: com.google.android.gms.tasks.Task
class Task<$TResult extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<Task<$TResult>> $type = type(TResult);

  final jni.JObjType<$TResult> TResult;

  Task.fromRef(
    this.TResult,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/google/android/gms/tasks/Task");

  /// The type which includes information such as the signature of this class.
  static $TaskType<$TResult> type<$TResult extends jni.JObject>(
    jni.JObjType<$TResult> TResult,
  ) {
    return $TaskType(
      TResult,
    );
  }

  static final _id_addOnCanceledListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCanceledListener",
      r"(Lcom/google/android/gms/tasks/OnCanceledListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCanceledListener(
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCanceledListener,
        jni.JniCallType.objectType,
        [onCanceledListener.reference]).object);
  }

  static final _id_addOnCanceledListener1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCanceledListener",
      r"(Landroid/app/Activity;Lcom/google/android/gms/tasks/OnCanceledListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(android.app.Activity activity, com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCanceledListener1(
    Activity activity,
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCanceledListener1,
        jni.JniCallType.objectType,
        [activity.reference, onCanceledListener.reference]).object);
  }

  static final _id_addOnCanceledListener2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCanceledListener",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/OnCanceledListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCanceledListener2(
    Executor executor,
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCanceledListener2,
        jni.JniCallType.objectType,
        [executor.reference, onCanceledListener.reference]).object);
  }

  static final _id_addOnCompleteListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCompleteListener",
      r"(Lcom/google/android/gms/tasks/OnCompleteListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCompleteListener(
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCompleteListener,
        jni.JniCallType.objectType,
        [onCompleteListener.reference]).object);
  }

  static final _id_addOnCompleteListener1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCompleteListener",
      r"(Landroid/app/Activity;Lcom/google/android/gms/tasks/OnCompleteListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(android.app.Activity activity, com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCompleteListener1(
    Activity activity,
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCompleteListener1,
        jni.JniCallType.objectType,
        [activity.reference, onCompleteListener.reference]).object);
  }

  static final _id_addOnCompleteListener2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCompleteListener",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/OnCompleteListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCompleteListener2(
    Executor executor,
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCompleteListener2,
        jni.JniCallType.objectType,
        [executor.reference, onCompleteListener.reference]).object);
  }

  static final _id_addOnFailureListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnFailureListener",
      r"(Lcom/google/android/gms/tasks/OnFailureListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnFailureListener(
    OnFailureListener onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnFailureListener,
        jni.JniCallType.objectType,
        [onFailureListener.reference]).object);
  }

  static final _id_addOnFailureListener1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnFailureListener",
      r"(Landroid/app/Activity;Lcom/google/android/gms/tasks/OnFailureListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(android.app.Activity activity, com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnFailureListener1(
    Activity activity,
    OnFailureListener onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnFailureListener1,
        jni.JniCallType.objectType,
        [activity.reference, onFailureListener.reference]).object);
  }

  static final _id_addOnFailureListener2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnFailureListener",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/OnFailureListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnFailureListener2(
    Executor executor,
    OnFailureListener onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnFailureListener2,
        jni.JniCallType.objectType,
        [executor.reference, onFailureListener.reference]).object);
  }

  static final _id_addOnSuccessListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnSuccessListener",
      r"(Lcom/google/android/gms/tasks/OnSuccessListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnSuccessListener(
    OnSuccessListener<$TResult> onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnSuccessListener,
        jni.JniCallType.objectType,
        [onSuccessListener.reference]).object);
  }

  static final _id_addOnSuccessListener1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnSuccessListener",
      r"(Landroid/app/Activity;Lcom/google/android/gms/tasks/OnSuccessListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(android.app.Activity activity, com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnSuccessListener1(
    Activity activity,
    OnSuccessListener<$TResult> onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnSuccessListener1,
        jni.JniCallType.objectType,
        [activity.reference, onSuccessListener.reference]).object);
  }

  static final _id_addOnSuccessListener2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnSuccessListener",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/OnSuccessListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnSuccessListener2(
    Executor executor,
    OnSuccessListener<$TResult> onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnSuccessListener2,
        jni.JniCallType.objectType,
        [executor.reference, onSuccessListener.reference]).object);
  }

  static final _id_continueWith = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"continueWith",
      r"(Lcom/google/android/gms/tasks/Continuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task continueWith(com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      continueWith<$TContinuationResult extends jni.JObject>(
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_continueWith,
            jni.JniCallType.objectType, [continuation.reference]).object);
  }

  static final _id_continueWith1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"continueWith",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/Continuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task continueWith(java.util.concurrent.Executor executor, com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      continueWith1<$TContinuationResult extends jni.JObject>(
    Executor executor,
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_continueWith1,
            jni.JniCallType.objectType,
            [executor.reference, continuation.reference]).object);
  }

  static final _id_continueWithTask = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"continueWithTask",
      r"(Lcom/google/android/gms/tasks/Continuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task continueWithTask(com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      continueWithTask<$TContinuationResult extends jni.JObject>(
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_continueWithTask,
            jni.JniCallType.objectType, [continuation.reference]).object);
  }

  static final _id_continueWithTask1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"continueWithTask",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/Continuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task continueWithTask(java.util.concurrent.Executor executor, com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      continueWithTask1<$TContinuationResult extends jni.JObject>(
    Executor executor,
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_continueWithTask1,
            jni.JniCallType.objectType,
            [executor.reference, continuation.reference]).object);
  }

  static final _id_onSuccessTask = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onSuccessTask",
      r"(Lcom/google/android/gms/tasks/SuccessContinuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task onSuccessTask(com.google.android.gms.tasks.SuccessContinuation successContinuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      onSuccessTask<$TContinuationResult extends jni.JObject>(
    jni.JObject successContinuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_onSuccessTask,
            jni.JniCallType.objectType,
            [successContinuation.reference]).object);
  }

  static final _id_onSuccessTask1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onSuccessTask",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/SuccessContinuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task onSuccessTask(java.util.concurrent.Executor executor, com.google.android.gms.tasks.SuccessContinuation successContinuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      onSuccessTask1<$TContinuationResult extends jni.JObject>(
    Executor executor,
    jni.JObject successContinuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_onSuccessTask1,
            jni.JniCallType.objectType,
            [executor.reference, successContinuation.reference]).object);
  }

  static final _id_getException = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getException", r"()Ljava/lang/Exception;");

  /// from: public abstract java.lang.Exception getException()
  /// The returned object must be released after use, by calling the [release] method.
  Exception getException() {
    return const $ExceptionType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getException, jni.JniCallType.objectType, []).object);
  }

  static final _id_getResult = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getResult", r"()Ljava/lang/Object;");

  /// from: public abstract TResult getResult()
  /// The returned object must be released after use, by calling the [release] method.
  $TResult getResult() {
    return TResult.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getResult, jni.JniCallType.objectType, []).object);
  }

  static final _id_getResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getResult", r"(Ljava/lang/Class;)Ljava/lang/Object;");

  /// from: public abstract TResult getResult(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $TResult getResult1<$X extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$X> X,
  }) {
    return TResult.fromRef(jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getResult1, jni.JniCallType.objectType, [class0.reference]).object);
  }

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Task({
    required jni.JObjType<$TResult> TResult,
  }) {
    return Task.fromRef(
        TResult,
        jni.Jni.accessors
            .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_isCanceled =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isCanceled", r"()Z");

  /// from: public abstract boolean isCanceled()
  bool isCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isCanceled, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isComplete =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isComplete", r"()Z");

  /// from: public abstract boolean isComplete()
  bool isComplete() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isComplete, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isSuccessful = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isSuccessful", r"()Z");

  /// from: public abstract boolean isSuccessful()
  bool isSuccessful() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isSuccessful, jni.JniCallType.booleanType, []).boolean;
  }
}

final class $TaskType<$TResult extends jni.JObject>
    extends jni.JObjType<Task<$TResult>> {
  final jni.JObjType<$TResult> TResult;

  const $TaskType(
    this.TResult,
  );

  @override
  String get signature => r"Lcom/google/android/gms/tasks/Task;";

  @override
  Task<$TResult> fromRef(jni.JObjectPtr ref) => Task.fromRef(TResult, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($TaskType, TResult);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TaskType<$TResult>) &&
        other is $TaskType<$TResult> &&
        TResult == other.TResult;
  }
}

/// from: com.google.android.gms.tasks.OnSuccessListener
class OnSuccessListener<$TResult extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<OnSuccessListener<$TResult>> $type = type(TResult);

  final jni.JObjType<$TResult> TResult;

  OnSuccessListener.fromRef(
    this.TResult,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/google/android/gms/tasks/OnSuccessListener");

  /// The type which includes information such as the signature of this class.
  static $OnSuccessListenerType<$TResult> type<$TResult extends jni.JObject>(
    jni.JObjType<$TResult> TResult,
  ) {
    return $OnSuccessListenerType(
      TResult,
    );
  }

  static final _id_onSuccess = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onSuccess", r"(Ljava/lang/Object;)V");

  /// from: public abstract void onSuccess(TResult object)
  void onSuccess(
    $TResult object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onSuccess,
        jni.JniCallType.voidType, [object.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $OnSuccessListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onSuccess(Ljava/lang/Object;)V") {
        _$impls[$p]!.onSuccess(
          $a[0].castTo(_$impls[$p]!.TResult, releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory OnSuccessListener.implement(
    $OnSuccessListenerImpl<$TResult> $impl,
  ) {
    final $p = ReceivePort();
    final $x = OnSuccessListener.fromRef(
      $impl.TResult,
      ProtectedJniExtensions.newPortProxy(
        r"com.google.android.gms.tasks.OnSuccessListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $OnSuccessListenerImpl<$TResult extends jni.JObject> {
  factory $OnSuccessListenerImpl({
    required jni.JObjType<$TResult> TResult,
    required void Function($TResult object) onSuccess,
  }) = _$OnSuccessListenerImpl;

  jni.JObjType<$TResult> get TResult;

  void onSuccess($TResult object);
}

class _$OnSuccessListenerImpl<$TResult extends jni.JObject>
    implements $OnSuccessListenerImpl<$TResult> {
  _$OnSuccessListenerImpl({
    required this.TResult,
    required void Function($TResult object) onSuccess,
  }) : _onSuccess = onSuccess;

  @override
  final jni.JObjType<$TResult> TResult;

  final void Function($TResult object) _onSuccess;

  void onSuccess($TResult object) {
    return _onSuccess(object);
  }
}

final class $OnSuccessListenerType<$TResult extends jni.JObject>
    extends jni.JObjType<OnSuccessListener<$TResult>> {
  final jni.JObjType<$TResult> TResult;

  const $OnSuccessListenerType(
    this.TResult,
  );

  @override
  String get signature => r"Lcom/google/android/gms/tasks/OnSuccessListener;";

  @override
  OnSuccessListener<$TResult> fromRef(jni.JObjectPtr ref) =>
      OnSuccessListener.fromRef(TResult, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($OnSuccessListenerType, TResult);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OnSuccessListenerType<$TResult>) &&
        other is $OnSuccessListenerType<$TResult> &&
        TResult == other.TResult;
  }
}

/// from: com.google.android.gms.tasks.OnFailureListener
class OnFailureListener extends jni.JObject {
  @override
  late final jni.JObjType<OnFailureListener> $type = type;

  OnFailureListener.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/google/android/gms/tasks/OnFailureListener");

  /// The type which includes information such as the signature of this class.
  static const type = $OnFailureListenerType();
  static final _id_onFailure = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onFailure", r"(Ljava/lang/Exception;)V");

  /// from: public abstract void onFailure(java.lang.Exception exception)
  void onFailure(
    Exception exception,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onFailure,
        jni.JniCallType.voidType, [exception.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $OnFailureListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onFailure(Ljava/lang/Exception;)V") {
        _$impls[$p]!.onFailure(
          $a[0].castTo(const $ExceptionType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory OnFailureListener.implement(
    $OnFailureListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = OnFailureListener.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.android.gms.tasks.OnFailureListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $OnFailureListenerImpl {
  factory $OnFailureListenerImpl({
    required void Function(Exception exception) onFailure,
  }) = _$OnFailureListenerImpl;

  void onFailure(Exception exception);
}

class _$OnFailureListenerImpl implements $OnFailureListenerImpl {
  _$OnFailureListenerImpl({
    required void Function(Exception exception) onFailure,
  }) : _onFailure = onFailure;

  final void Function(Exception exception) _onFailure;

  void onFailure(Exception exception) {
    return _onFailure(exception);
  }
}

final class $OnFailureListenerType extends jni.JObjType<OnFailureListener> {
  const $OnFailureListenerType();

  @override
  String get signature => r"Lcom/google/android/gms/tasks/OnFailureListener;";

  @override
  OnFailureListener fromRef(jni.JObjectPtr ref) =>
      OnFailureListener.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OnFailureListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OnFailureListenerType) &&
        other is $OnFailureListenerType;
  }
}
