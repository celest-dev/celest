// ignore_for_file: type=lint
// ignore_for_file: return_of_invalid_type
// ignore_for_file: unnecessary_non_null_assertion

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for AuthenticationServices on macOS/iOS.
///
/// Regenerate bindings with `dart run ffigen --config=ffigen.authentication_services.yaml`.
///
class AuthenticationServices {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AuthenticationServices(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AuthenticationServices.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ObjCSel> _registerName1(String name) {
    final cstr = name.toNativeUtf8();
    final sel = _sel_registerName(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return sel;
  }

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _getClass1(String name) {
    final cstr = name.toNativeUtf8();
    final clazz = _objc_getClass(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    if (clazz == ffi.nullptr) {
      throw Exception('Failed to load Objective-C class: $name');
    }
    return clazz;
  }

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _objc_retain(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_retain(
      value,
    );
  }

  late final __objc_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('objc_retain');
  late final __objc_retain = __objc_retainPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  void _objc_release(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_release(
      value,
    );
  }

  late final __objc_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_release');
  late final __objc_release =
      __objc_releasePtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  late final _objc_releaseFinalizer2 =
      ffi.NativeFinalizer(__objc_releasePtr.cast());
  late final _class_ASWebAuthenticationSession1 =
      _getClass1("ASWebAuthenticationSession");
  bool _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> clazz,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
      clazz,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isKindOfClass_1 = _registerName1("isKindOfClass:");
  late final _class_NSObject1 = _getClass1("NSObject");
  late final _sel_load1 = _registerName1("load");
  void _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initialize1 = _registerName1("initialize");
  late final _sel_init1 = _registerName1("init");
  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_new1 = _registerName1("new");
  late final _sel_allocWithZone_1 = _registerName1("allocWithZone:");
  instancetype _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_3(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final _sel_alloc1 = _registerName1("alloc");
  late final _sel_dealloc1 = _registerName1("dealloc");
  late final _sel_finalize1 = _registerName1("finalize");
  late final _sel_copy1 = _registerName1("copy");
  late final _sel_mutableCopy1 = _registerName1("mutableCopy");
  late final _sel_copyWithZone_1 = _registerName1("copyWithZone:");
  late final _sel_mutableCopyWithZone_1 =
      _registerName1("mutableCopyWithZone:");
  late final _sel_instancesRespondToSelector_1 =
      _registerName1("instancesRespondToSelector:");
  bool _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_4(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _class_Protocol1 = _getClass1("Protocol");
  late final _sel_conformsToProtocol_1 = _registerName1("conformsToProtocol:");
  bool _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protocol,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      protocol,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodForSelector_1 = _registerName1("methodForSelector:");
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodForSelector_1 =
      _registerName1("instanceMethodForSelector:");
  late final _sel_doesNotRecognizeSelector_1 =
      _registerName1("doesNotRecognizeSelector:");
  void _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_forwardingTargetForSelector_1 =
      _registerName1("forwardingTargetForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_8(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSInvocation1 = _getClass1("NSInvocation");
  late final _class_NSMethodSignature1 = _getClass1("NSMethodSignature");
  late final _sel_signatureWithObjCTypes_1 =
      _registerName1("signatureWithObjCTypes:");
  ffi.Pointer<ObjCObject> _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> types,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
      types,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Char>)>();

  late final _sel_numberOfArguments1 = _registerName1("numberOfArguments");
  int _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_10(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_getArgumentTypeAtIndex_1 =
      _registerName1("getArgumentTypeAtIndex:");
  ffi.Pointer<ffi.Char> _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int idx,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
      idx,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_frameLength1 = _registerName1("frameLength");
  late final _sel_isOneway1 = _registerName1("isOneway");
  bool _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_methodReturnType1 = _registerName1("methodReturnType");
  ffi.Pointer<ffi.Char> _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_methodReturnLength1 = _registerName1("methodReturnLength");
  late final _sel_invocationWithMethodSignature_1 =
      _registerName1("invocationWithMethodSignature:");
  ffi.Pointer<ObjCObject> _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sig,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
      sig,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_methodSignature1 = _registerName1("methodSignature");
  ffi.Pointer<ObjCObject> _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_retainArguments1 = _registerName1("retainArguments");
  late final _sel_argumentsRetained1 = _registerName1("argumentsRetained");
  late final _sel_target1 = _registerName1("target");
  ffi.Pointer<ObjCObject> _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_16(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTarget_1 = _registerName1("setTarget:");
  void _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_17(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_selector1 = _registerName1("selector");
  ffi.Pointer<ObjCSel> _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_18(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setSelector_1 = _registerName1("setSelector:");
  void _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> value,
  ) {
    return __objc_msgSend_19(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_getReturnValue_1 = _registerName1("getReturnValue:");
  void _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> retLoc,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
      retLoc,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_setReturnValue_1 = _registerName1("setReturnValue:");
  late final _sel_getArgument_atIndex_1 =
      _registerName1("getArgument:atIndex:");
  void _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> argumentLocation,
    int idx,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
      argumentLocation,
      idx,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_setArgument_atIndex_1 =
      _registerName1("setArgument:atIndex:");
  late final _sel_invoke1 = _registerName1("invoke");
  late final _sel_invokeWithTarget_1 = _registerName1("invokeWithTarget:");
  void _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
      target,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_invokeUsingIMP_1 = _registerName1("invokeUsingIMP:");
  void _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> imp,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      imp,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  late final _sel_forwardInvocation_1 = _registerName1("forwardInvocation:");
  void _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodSignatureForSelector_1 =
      _registerName1("methodSignatureForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodSignatureForSelector_1 =
      _registerName1("instanceMethodSignatureForSelector:");
  late final _sel_allowsWeakReference1 = _registerName1("allowsWeakReference");
  late final _sel_retainWeakReference1 = _registerName1("retainWeakReference");
  late final _sel_isSubclassOfClass_1 = _registerName1("isSubclassOfClass:");
  late final _sel_resolveClassMethod_1 = _registerName1("resolveClassMethod:");
  late final _sel_resolveInstanceMethod_1 =
      _registerName1("resolveInstanceMethod:");
  late final _sel_hash1 = _registerName1("hash");
  late final _sel_superclass1 = _registerName1("superclass");
  late final _sel_class1 = _registerName1("class");
  late final _class_NSString1 = _getClass1("NSString");
  late final _sel_length1 = _registerName1("length");
  late final _sel_characterAtIndex_1 = _registerName1("characterAtIndex:");
  int _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_NSCoder1 = _getClass1("NSCoder");
  late final _sel_encodeValueOfObjCType_at_1 =
      _registerName1("encodeValueOfObjCType:at:");
  void _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> addr,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
      type,
      addr,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  late final _class_NSData1 = _getClass1("NSData");
  late final _sel_bytes1 = _registerName1("bytes");
  ffi.Pointer<ffi.Void> _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeDataObject_1 = _registerName1("encodeDataObject:");
  void _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
      data,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeDataObject1 = _registerName1("decodeDataObject");
  ffi.Pointer<ObjCObject> _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_decodeValueOfObjCType_at_size_1 =
      _registerName1("decodeValueOfObjCType:at:size:");
  void _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
      type,
      data,
      size,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  late final _sel_versionForClassName_1 =
      _registerName1("versionForClassName:");
  int _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> className,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
      className,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithCoder_1 = _registerName1("initWithCoder:");
  instancetype _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_stringWithCharacters_length_1 =
      _registerName1("stringWithCharacters:length:");
  ffi.Pointer<ObjCObject> _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.WChar> characters,
    int length,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
      characters,
      length,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.WChar>, int)>();

  late final _sel_dataUsingEncoding_1 = _registerName1("dataUsingEncoding:");
  ffi.Pointer<ObjCObject> _objc_msgSend_35(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_35(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_35 = __objc_msgSend_35Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_description1 = _registerName1("description");
  ffi.Pointer<ObjCObject> _objc_msgSend_36(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_36(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_36 = __objc_msgSend_36Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_debugDescription1 = _registerName1("debugDescription");
  late final _class_NSURL1 = _getClass1("NSURL");
  late final _sel_initWithScheme_host_path_1 =
      _registerName1("initWithScheme:host:path:");
  instancetype _objc_msgSend_37(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> scheme,
    ffi.Pointer<ObjCObject> host,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_37(
      obj,
      sel,
      scheme,
      host,
      path,
    );
  }

  late final __objc_msgSend_37Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_37 = __objc_msgSend_37Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initFileURLWithPath_isDirectory_relativeToURL_1 =
      _registerName1("initFileURLWithPath:isDirectory:relativeToURL:");
  instancetype _objc_msgSend_38(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_38(
      obj,
      sel,
      path,
      isDir,
      baseURL,
    );
  }

  late final __objc_msgSend_38Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_38 = __objc_msgSend_38Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool, ffi.Pointer<ObjCObject>)>();

  late final _sel_initFileURLWithPath_relativeToURL_1 =
      _registerName1("initFileURLWithPath:relativeToURL:");
  instancetype _objc_msgSend_39(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_39(
      obj,
      sel,
      path,
      baseURL,
    );
  }

  late final __objc_msgSend_39Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_39 = __objc_msgSend_39Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initFileURLWithPath_isDirectory_1 =
      _registerName1("initFileURLWithPath:isDirectory:");
  instancetype _objc_msgSend_40(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
  ) {
    return __objc_msgSend_40(
      obj,
      sel,
      path,
      isDir,
    );
  }

  late final __objc_msgSend_40Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_40 = __objc_msgSend_40Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initFileURLWithPath_1 =
      _registerName1("initFileURLWithPath:");
  instancetype _objc_msgSend_41(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_41(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_41Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_41 = __objc_msgSend_41Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_fileURLWithPath_isDirectory_relativeToURL_1 =
      _registerName1("fileURLWithPath:isDirectory:relativeToURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_42(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_42(
      obj,
      sel,
      path,
      isDir,
      baseURL,
    );
  }

  late final __objc_msgSend_42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_42 = __objc_msgSend_42Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          bool,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_fileURLWithPath_relativeToURL_1 =
      _registerName1("fileURLWithPath:relativeToURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_43(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_43(
      obj,
      sel,
      path,
      baseURL,
    );
  }

  late final __objc_msgSend_43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_43 = __objc_msgSend_43Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_fileURLWithPath_isDirectory_1 =
      _registerName1("fileURLWithPath:isDirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_44(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
  ) {
    return __objc_msgSend_44(
      obj,
      sel,
      path,
      isDir,
    );
  }

  late final __objc_msgSend_44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_44 = __objc_msgSend_44Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_fileURLWithPath_1 = _registerName1("fileURLWithPath:");
  ffi.Pointer<ObjCObject> _objc_msgSend_45(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_45(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_45 = __objc_msgSend_45Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1 =
      _registerName1(
          "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
  instancetype _objc_msgSend_46(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_46(
      obj,
      sel,
      path,
      isDir,
      baseURL,
    );
  }

  late final __objc_msgSend_46Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_46 = __objc_msgSend_46Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, bool, ffi.Pointer<ObjCObject>)>();

  late final _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1 =
      _registerName1(
          "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_47(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_47(
      obj,
      sel,
      path,
      isDir,
      baseURL,
    );
  }

  late final __objc_msgSend_47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_47 = __objc_msgSend_47Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>,
          bool,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithString_1 = _registerName1("initWithString:");
  instancetype _objc_msgSend_48(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
  ) {
    return __objc_msgSend_48(
      obj,
      sel,
      URLString,
    );
  }

  late final __objc_msgSend_48Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_48 = __objc_msgSend_48Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithString_relativeToURL_1 =
      _registerName1("initWithString:relativeToURL:");
  instancetype _objc_msgSend_49(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_49(
      obj,
      sel,
      URLString,
      baseURL,
    );
  }

  late final __objc_msgSend_49Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_49 = __objc_msgSend_49Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_URLWithString_1 = _registerName1("URLWithString:");
  late final _sel_URLWithString_relativeToURL_1 =
      _registerName1("URLWithString:relativeToURL:");
  late final _sel_initWithString_encodingInvalidCharacters_1 =
      _registerName1("initWithString:encodingInvalidCharacters:");
  instancetype _objc_msgSend_50(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
    bool encodingInvalidCharacters,
  ) {
    return __objc_msgSend_50(
      obj,
      sel,
      URLString,
      encodingInvalidCharacters,
    );
  }

  late final __objc_msgSend_50Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_50 = __objc_msgSend_50Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_URLWithString_encodingInvalidCharacters_1 =
      _registerName1("URLWithString:encodingInvalidCharacters:");
  late final _sel_initWithDataRepresentation_relativeToURL_1 =
      _registerName1("initWithDataRepresentation:relativeToURL:");
  instancetype _objc_msgSend_51(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_51(
      obj,
      sel,
      data,
      baseURL,
    );
  }

  late final __objc_msgSend_51Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_51 = __objc_msgSend_51Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_URLWithDataRepresentation_relativeToURL_1 =
      _registerName1("URLWithDataRepresentation:relativeToURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_52(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_52(
      obj,
      sel,
      data,
      baseURL,
    );
  }

  late final __objc_msgSend_52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_52 = __objc_msgSend_52Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initAbsoluteURLWithDataRepresentation_relativeToURL_1 =
      _registerName1("initAbsoluteURLWithDataRepresentation:relativeToURL:");
  late final _sel_absoluteURLWithDataRepresentation_relativeToURL_1 =
      _registerName1("absoluteURLWithDataRepresentation:relativeToURL:");
  late final _sel_dataRepresentation1 = _registerName1("dataRepresentation");
  ffi.Pointer<ObjCObject> _objc_msgSend_53(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_53(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_53 = __objc_msgSend_53Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_absoluteString1 = _registerName1("absoluteString");
  ffi.Pointer<ObjCObject> _objc_msgSend_54(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_54(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_54 = __objc_msgSend_54Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_relativeString1 = _registerName1("relativeString");
  late final _sel_baseURL1 = _registerName1("baseURL");
  ffi.Pointer<ObjCObject> _objc_msgSend_55(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_55(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_55 = __objc_msgSend_55Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_absoluteURL1 = _registerName1("absoluteURL");
  late final _sel_scheme1 = _registerName1("scheme");
  late final _sel_resourceSpecifier1 = _registerName1("resourceSpecifier");
  late final _sel_host1 = _registerName1("host");
  late final _class_NSNumber1 = _getClass1("NSNumber");
  late final _class_NSValue1 = _getClass1("NSValue");
  late final _sel_getValue_size_1 = _registerName1("getValue:size:");
  void _objc_msgSend_56(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    return __objc_msgSend_56(
      obj,
      sel,
      value,
      size,
    );
  }

  late final __objc_msgSend_56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_56 = __objc_msgSend_56Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_objCType1 = _registerName1("objCType");
  late final _sel_initWithBytes_objCType_1 =
      _registerName1("initWithBytes:objCType:");
  instancetype _objc_msgSend_57(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_57(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_57Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_57 = __objc_msgSend_57Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  late final _sel_initWithChar_1 = _registerName1("initWithChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_58(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_58(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_58 = __objc_msgSend_58Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedChar_1 =
      _registerName1("initWithUnsignedChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_59(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_59(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_59 = __objc_msgSend_59Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithShort_1 = _registerName1("initWithShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_60(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_60(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_60 = __objc_msgSend_60Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedShort_1 =
      _registerName1("initWithUnsignedShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_61(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_61(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_61 = __objc_msgSend_61Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithInt_1 = _registerName1("initWithInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_62(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_62(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_62 = __objc_msgSend_62Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedInt_1 =
      _registerName1("initWithUnsignedInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_63(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_63(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_63Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_63 = __objc_msgSend_63Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLong_1 = _registerName1("initWithLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_64(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_64(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_64 = __objc_msgSend_64Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLong_1 =
      _registerName1("initWithUnsignedLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_65(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_65(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_65 = __objc_msgSend_65Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLongLong_1 = _registerName1("initWithLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_66(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_66(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_66Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_66 = __objc_msgSend_66Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLongLong_1 =
      _registerName1("initWithUnsignedLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_67(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_67(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_67 = __objc_msgSend_67Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithFloat_1 = _registerName1("initWithFloat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_68(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_68(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_68Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_68 = __objc_msgSend_68Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithDouble_1 = _registerName1("initWithDouble:");
  ffi.Pointer<ObjCObject> _objc_msgSend_69(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_69(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_69 = __objc_msgSend_69Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithBool_1 = _registerName1("initWithBool:");
  ffi.Pointer<ObjCObject> _objc_msgSend_70(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_70(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_70Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_70 = __objc_msgSend_70Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_initWithInteger_1 = _registerName1("initWithInteger:");
  late final _sel_initWithUnsignedInteger_1 =
      _registerName1("initWithUnsignedInteger:");
  late final _sel_charValue1 = _registerName1("charValue");
  int _objc_msgSend_71(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_71(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_71Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Char Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_71 = __objc_msgSend_71Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedCharValue1 = _registerName1("unsignedCharValue");
  int _objc_msgSend_72(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_72(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_72Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_72 = __objc_msgSend_72Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_shortValue1 = _registerName1("shortValue");
  int _objc_msgSend_73(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_73(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_73Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_73 = __objc_msgSend_73Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedShortValue1 = _registerName1("unsignedShortValue");
  int _objc_msgSend_74(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_74(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_74Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_74 = __objc_msgSend_74Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_intValue1 = _registerName1("intValue");
  int _objc_msgSend_75(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_75(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_75Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_75 = __objc_msgSend_75Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedIntValue1 = _registerName1("unsignedIntValue");
  int _objc_msgSend_76(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_76(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_76Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_76 = __objc_msgSend_76Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_longValue1 = _registerName1("longValue");
  int _objc_msgSend_77(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_77(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_77Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_77 = __objc_msgSend_77Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedLongValue1 = _registerName1("unsignedLongValue");
  late final _sel_longLongValue1 = _registerName1("longLongValue");
  int _objc_msgSend_78(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_78(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_78Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_78 = __objc_msgSend_78Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedLongLongValue1 =
      _registerName1("unsignedLongLongValue");
  int _objc_msgSend_79(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_79(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_79Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_79 = __objc_msgSend_79Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_floatValue1 = _registerName1("floatValue");
  late final _objc_msgSend_useVariants1 = ffi.Abi.current() == ffi.Abi.iosX64 ||
      ffi.Abi.current() == ffi.Abi.macosX64;
  double _objc_msgSend_80(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_80(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_80Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_80 = __objc_msgSend_80Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  double _objc_msgSend_80_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_80_fpret(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_80_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_80_fpret = __objc_msgSend_80_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_doubleValue1 = _registerName1("doubleValue");
  double _objc_msgSend_81(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_81(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_81Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_81 = __objc_msgSend_81Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  double _objc_msgSend_81_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_81_fpret(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_81_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_81_fpret = __objc_msgSend_81_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_boolValue1 = _registerName1("boolValue");
  late final _sel_integerValue1 = _registerName1("integerValue");
  late final _sel_unsignedIntegerValue1 =
      _registerName1("unsignedIntegerValue");
  late final _sel_stringValue1 = _registerName1("stringValue");
  late final _sel_compare_1 = _registerName1("compare:");
  int _objc_msgSend_82(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherNumber,
  ) {
    return __objc_msgSend_82(
      obj,
      sel,
      otherNumber,
    );
  }

  late final __objc_msgSend_82Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_82 = __objc_msgSend_82Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToNumber_1 = _registerName1("isEqualToNumber:");
  bool _objc_msgSend_83(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> number,
  ) {
    return __objc_msgSend_83(
      obj,
      sel,
      number,
    );
  }

  late final __objc_msgSend_83Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_83 = __objc_msgSend_83Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_descriptionWithLocale_1 =
      _registerName1("descriptionWithLocale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_84(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_84(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_84Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_84 = __objc_msgSend_84Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_port1 = _registerName1("port");
  ffi.Pointer<ObjCObject> _objc_msgSend_85(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_85(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_85Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_85 = __objc_msgSend_85Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_user1 = _registerName1("user");
  late final _sel_password1 = _registerName1("password");
  late final _sel_path1 = _registerName1("path");
  late final _sel_fragment1 = _registerName1("fragment");
  late final _sel_parameterString1 = _registerName1("parameterString");
  late final _sel_query1 = _registerName1("query");
  late final _sel_relativePath1 = _registerName1("relativePath");
  late final _sel_hasDirectoryPath1 = _registerName1("hasDirectoryPath");
  late final _sel_getFileSystemRepresentation_maxLength_1 =
      _registerName1("getFileSystemRepresentation:maxLength:");
  bool _objc_msgSend_86(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufferLength,
  ) {
    return __objc_msgSend_86(
      obj,
      sel,
      buffer,
      maxBufferLength,
    );
  }

  late final __objc_msgSend_86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_86 = __objc_msgSend_86Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int)>();

  late final _sel_fileSystemRepresentation1 =
      _registerName1("fileSystemRepresentation");
  late final _sel_isFileURL1 = _registerName1("isFileURL");
  late final _sel_standardizedURL1 = _registerName1("standardizedURL");
  late final _sel_isFileReferenceURL1 = _registerName1("isFileReferenceURL");
  late final _sel_fileReferenceURL1 = _registerName1("fileReferenceURL");
  late final _sel_filePathURL1 = _registerName1("filePathURL");
  late final _class_NSError1 = _getClass1("NSError");
  late final _sel_initWithDomain_code_userInfo_1 =
      _registerName1("initWithDomain:code:userInfo:");
  instancetype _objc_msgSend_87(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> domain,
    int code,
    ffi.Pointer<ObjCObject> dict,
  ) {
    return __objc_msgSend_87(
      obj,
      sel,
      domain,
      code,
      dict,
    );
  }

  late final __objc_msgSend_87Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Long,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_87 = __objc_msgSend_87Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_errorWithDomain_code_userInfo_1 =
      _registerName1("errorWithDomain:code:userInfo:");
  late final _sel_domain1 = _registerName1("domain");
  late final _sel_code1 = _registerName1("code");
  late final _sel_userInfo1 = _registerName1("userInfo");
  late final _sel_localizedDescription1 =
      _registerName1("localizedDescription");
  late final _sel_localizedFailureReason1 =
      _registerName1("localizedFailureReason");
  late final _sel_localizedRecoverySuggestion1 =
      _registerName1("localizedRecoverySuggestion");
  late final _sel_localizedRecoveryOptions1 =
      _registerName1("localizedRecoveryOptions");
  late final _sel_recoveryAttempter1 = _registerName1("recoveryAttempter");
  late final _sel_helpAnchor1 = _registerName1("helpAnchor");
  late final _sel_underlyingErrors1 = _registerName1("underlyingErrors");
  ffi.Pointer<_ObjCBlockDesc> _newBlockDesc1() {
    final d =
        pkg_ffi.calloc.allocate<_ObjCBlockDesc>(ffi.sizeOf<_ObjCBlockDesc>());
    d.ref.reserved = 0;
    d.ref.size = ffi.sizeOf<_ObjCBlock>();
    d.ref.copy_helper = ffi.nullptr;
    d.ref.dispose_helper = ffi.nullptr;
    d.ref.signature = ffi.nullptr;
    return d;
  }

  late final _objc_block_desc1 = _newBlockDesc1();
  late final _objc_concrete_global_block1 =
      _lookup<ffi.Void>('_NSConcreteGlobalBlock');
  ffi.Pointer<_ObjCBlock> _newBlock1(
      ffi.Pointer<ffi.Void> invoke, ffi.Pointer<ffi.Void> target) {
    final b = pkg_ffi.calloc.allocate<_ObjCBlock>(ffi.sizeOf<_ObjCBlock>());
    b.ref.isa = _objc_concrete_global_block1;
    b.ref.flags = 0;
    b.ref.reserved = 0;
    b.ref.invoke = invoke;
    b.ref.target = target;
    b.ref.descriptor = _objc_block_desc1;
    final copy = _Block_copy(b.cast()).cast<_ObjCBlock>();
    pkg_ffi.calloc.free(b);
    return copy;
  }

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_copy(
      value,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_release(
      value,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  late final _objc_releaseFinalizer11 =
      ffi.NativeFinalizer(__Block_releasePtr.cast());
  late final _sel_setUserInfoValueProviderForDomain_provider_1 =
      _registerName1("setUserInfoValueProviderForDomain:provider:");
  void _objc_msgSend_88(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> errorDomain,
    ffi.Pointer<_ObjCBlock> provider,
  ) {
    return __objc_msgSend_88(
      obj,
      sel,
      errorDomain,
      provider,
    );
  }

  late final __objc_msgSend_88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_88 = __objc_msgSend_88Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_userInfoValueProviderForDomain_1 =
      _registerName1("userInfoValueProviderForDomain:");
  ffi.Pointer<_ObjCBlock> _objc_msgSend_89(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> err,
    ffi.Pointer<ObjCObject> userInfoKey,
    ffi.Pointer<ObjCObject> errorDomain,
  ) {
    return __objc_msgSend_89(
      obj,
      sel,
      err,
      userInfoKey,
      errorDomain,
    );
  }

  late final __objc_msgSend_89Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_ObjCBlock> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_89 = __objc_msgSend_89Ptr.asFunction<
      ffi.Pointer<_ObjCBlock> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_getResourceValue_forKey_error_1 =
      _registerName1("getResourceValue:forKey:error:");
  bool _objc_msgSend_90(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> value,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_90(
      obj,
      sel,
      value,
      key,
      error,
    );
  }

  late final __objc_msgSend_90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_90 = __objc_msgSend_90Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_resourceValuesForKeys_error_1 =
      _registerName1("resourceValuesForKeys:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_91(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_91(
      obj,
      sel,
      keys,
      error,
    );
  }

  late final __objc_msgSend_91Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_91 = __objc_msgSend_91Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_setResourceValue_forKey_error_1 =
      _registerName1("setResourceValue:forKey:error:");
  bool _objc_msgSend_92(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_92(
      obj,
      sel,
      value,
      key,
      error,
    );
  }

  late final __objc_msgSend_92Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_92 = __objc_msgSend_92Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_setResourceValues_error_1 =
      _registerName1("setResourceValues:error:");
  bool _objc_msgSend_93(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyedValues,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_93(
      obj,
      sel,
      keyedValues,
      error,
    );
  }

  late final __objc_msgSend_93Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_93 = __objc_msgSend_93Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_removeCachedResourceValueForKey_1 =
      _registerName1("removeCachedResourceValueForKey:");
  void _objc_msgSend_94(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_94(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_94Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_94 = __objc_msgSend_94Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_removeAllCachedResourceValues1 =
      _registerName1("removeAllCachedResourceValues");
  late final _sel_setTemporaryResourceValue_forKey_1 =
      _registerName1("setTemporaryResourceValue:forKey:");
  void _objc_msgSend_95(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_95(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_95Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_95 = __objc_msgSend_95Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_1 =
      _registerName1(
          "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_96(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_96(
      obj,
      sel,
      options,
      keys,
      relativeURL,
      error,
    );
  }

  late final __objc_msgSend_96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_96 = __objc_msgSend_96Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1 =
      _registerName1(
          "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
  instancetype _objc_msgSend_97(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    int options,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Bool> isStale,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_97(
      obj,
      sel,
      bookmarkData,
      options,
      relativeURL,
      isStale,
      error,
    );
  }

  late final __objc_msgSend_97Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_97 = __objc_msgSend_97Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1 =
      _registerName1(
          "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
  late final _sel_resourceValuesForKeys_fromBookmarkData_1 =
      _registerName1("resourceValuesForKeys:fromBookmarkData:");
  ffi.Pointer<ObjCObject> _objc_msgSend_98(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ObjCObject> bookmarkData,
  ) {
    return __objc_msgSend_98(
      obj,
      sel,
      keys,
      bookmarkData,
    );
  }

  late final __objc_msgSend_98Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_98 = __objc_msgSend_98Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_writeBookmarkData_toURL_options_error_1 =
      _registerName1("writeBookmarkData:toURL:options:error:");
  bool _objc_msgSend_99(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    ffi.Pointer<ObjCObject> bookmarkFileURL,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_99(
      obj,
      sel,
      bookmarkData,
      bookmarkFileURL,
      options,
      error,
    );
  }

  late final __objc_msgSend_99Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_99 = __objc_msgSend_99Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_bookmarkDataWithContentsOfURL_error_1 =
      _registerName1("bookmarkDataWithContentsOfURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_100(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkFileURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_100(
      obj,
      sel,
      bookmarkFileURL,
      error,
    );
  }

  late final __objc_msgSend_100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_100 = __objc_msgSend_100Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_URLByResolvingAliasFileAtURL_options_error_1 =
      _registerName1("URLByResolvingAliasFileAtURL:options:error:");
  instancetype _objc_msgSend_101(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_101(
      obj,
      sel,
      url,
      options,
      error,
    );
  }

  late final __objc_msgSend_101Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_101 = __objc_msgSend_101Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_startAccessingSecurityScopedResource1 =
      _registerName1("startAccessingSecurityScopedResource");
  late final _sel_stopAccessingSecurityScopedResource1 =
      _registerName1("stopAccessingSecurityScopedResource");
  late final _sel_initWithURL_callbackURLScheme_completionHandler_1 =
      _registerName1("initWithURL:callbackURLScheme:completionHandler:");
  instancetype _objc_msgSend_102(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
    ffi.Pointer<ObjCObject> callbackURLScheme,
    ASWebAuthenticationSessionCompletionHandler completionHandler,
  ) {
    return __objc_msgSend_102(
      obj,
      sel,
      URL,
      callbackURLScheme,
      completionHandler,
    );
  }

  late final __objc_msgSend_102Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ASWebAuthenticationSessionCompletionHandler)>>('objc_msgSend');
  late final __objc_msgSend_102 = __objc_msgSend_102Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ASWebAuthenticationSessionCompletionHandler)>();

  late final _sel_presentationContextProvider1 =
      _registerName1("presentationContextProvider");
  late final _sel_setPresentationContextProvider_1 =
      _registerName1("setPresentationContextProvider:");
  late final _sel_prefersEphemeralWebBrowserSession1 =
      _registerName1("prefersEphemeralWebBrowserSession");
  late final _sel_setPrefersEphemeralWebBrowserSession_1 =
      _registerName1("setPrefersEphemeralWebBrowserSession:");
  void _objc_msgSend_103(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_103(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_103Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_103 = __objc_msgSend_103Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_canStart1 = _registerName1("canStart");
  late final _sel_start1 = _registerName1("start");
  late final _sel_cancel1 = _registerName1("cancel");
  late final _class_NSWindow1 = _getClass1("NSWindow");
  late final _class_NSResponder1 = _getClass1("NSResponder");
  late final _sel_nextResponder1 = _registerName1("nextResponder");
  ffi.Pointer<ObjCObject> _objc_msgSend_104(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_104(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_104Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_104 = __objc_msgSend_104Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setNextResponder_1 = _registerName1("setNextResponder:");
  void _objc_msgSend_105(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_105(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_105 = __objc_msgSend_105Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_tryToPerform_with_1 = _registerName1("tryToPerform:with:");
  bool _objc_msgSend_106(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> action,
    ffi.Pointer<ObjCObject> object,
  ) {
    return __objc_msgSend_106(
      obj,
      sel,
      action,
      object,
    );
  }

  late final __objc_msgSend_106Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_106 = __objc_msgSend_106Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_NSEvent1 = _getClass1("NSEvent");
  late final _sel_type1 = _registerName1("type");
  int _objc_msgSend_107(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_107(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_107Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_107 = __objc_msgSend_107Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_modifierFlags1 = _registerName1("modifierFlags");
  int _objc_msgSend_108(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_108(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_108 = __objc_msgSend_108Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_timestamp1 = _registerName1("timestamp");
  late final _sel_window1 = _registerName1("window");
  ffi.Pointer<ObjCObject> _objc_msgSend_109(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_109(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_109Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_109 = __objc_msgSend_109Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_windowNumber1 = _registerName1("windowNumber");
  late final _class_NSGraphicsContext1 = _getClass1("NSGraphicsContext");
  late final _sel_context1 = _registerName1("context");
  ffi.Pointer<ObjCObject> _objc_msgSend_110(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_110(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_110Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_110 = __objc_msgSend_110Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_clickCount1 = _registerName1("clickCount");
  late final _sel_buttonNumber1 = _registerName1("buttonNumber");
  late final _sel_eventNumber1 = _registerName1("eventNumber");
  late final _sel_pressure1 = _registerName1("pressure");
  late final _sel_locationInWindow1 = _registerName1("locationInWindow");
  CGPoint _objc_msgSend_111(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_111(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_111Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_111 = __objc_msgSend_111Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_111_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_111_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_111_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_111_stret = __objc_msgSend_111_stretPtr.asFunction<
      void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_deltaX1 = _registerName1("deltaX");
  late final _sel_deltaY1 = _registerName1("deltaY");
  late final _sel_deltaZ1 = _registerName1("deltaZ");
  late final _sel_hasPreciseScrollingDeltas1 =
      _registerName1("hasPreciseScrollingDeltas");
  late final _sel_scrollingDeltaX1 = _registerName1("scrollingDeltaX");
  late final _sel_scrollingDeltaY1 = _registerName1("scrollingDeltaY");
  late final _sel_momentumPhase1 = _registerName1("momentumPhase");
  int _objc_msgSend_112(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_112(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_112Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_112 = __objc_msgSend_112Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_isDirectionInvertedFromDevice1 =
      _registerName1("isDirectionInvertedFromDevice");
  late final _sel_characters1 = _registerName1("characters");
  late final _sel_charactersIgnoringModifiers1 =
      _registerName1("charactersIgnoringModifiers");
  late final _sel_charactersByApplyingModifiers_1 =
      _registerName1("charactersByApplyingModifiers:");
  ffi.Pointer<ObjCObject> _objc_msgSend_113(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int modifiers,
  ) {
    return __objc_msgSend_113(
      obj,
      sel,
      modifiers,
    );
  }

  late final __objc_msgSend_113Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_113 = __objc_msgSend_113Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_isARepeat1 = _registerName1("isARepeat");
  late final _sel_keyCode1 = _registerName1("keyCode");
  late final _sel_trackingNumber1 = _registerName1("trackingNumber");
  late final _sel_userData1 = _registerName1("userData");
  late final _class_NSTrackingArea1 = _getClass1("NSTrackingArea");
  late final _sel_trackingArea1 = _registerName1("trackingArea");
  ffi.Pointer<ObjCObject> _objc_msgSend_114(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_114(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_114Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_114 = __objc_msgSend_114Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_subtype1 = _registerName1("subtype");
  int _objc_msgSend_115(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_115(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_115Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_115 = __objc_msgSend_115Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_data11 = _registerName1("data1");
  late final _sel_data21 = _registerName1("data2");
  late final _sel_eventRef1 = _registerName1("eventRef");
  late final _sel_eventWithEventRef_1 = _registerName1("eventWithEventRef:");
  ffi.Pointer<ObjCObject> _objc_msgSend_116(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> eventRef,
  ) {
    return __objc_msgSend_116(
      obj,
      sel,
      eventRef,
    );
  }

  late final __objc_msgSend_116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_116 = __objc_msgSend_116Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>();

  late final _sel_CGEvent1 = _registerName1("CGEvent");
  ffi.Pointer<__CGEvent> _objc_msgSend_117(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_117(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_117Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CGEvent> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_117 = __objc_msgSend_117Ptr.asFunction<
      ffi.Pointer<__CGEvent> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_eventWithCGEvent_1 = _registerName1("eventWithCGEvent:");
  ffi.Pointer<ObjCObject> _objc_msgSend_118(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<__CGEvent> cgEvent,
  ) {
    return __objc_msgSend_118(
      obj,
      sel,
      cgEvent,
    );
  }

  late final __objc_msgSend_118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<__CGEvent>)>>('objc_msgSend');
  late final __objc_msgSend_118 = __objc_msgSend_118Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<__CGEvent>)>();

  late final _sel_isMouseCoalescingEnabled1 =
      _registerName1("isMouseCoalescingEnabled");
  late final _sel_setMouseCoalescingEnabled_1 =
      _registerName1("setMouseCoalescingEnabled:");
  late final _sel_magnification1 = _registerName1("magnification");
  late final _sel_deviceID1 = _registerName1("deviceID");
  late final _sel_rotation1 = _registerName1("rotation");
  late final _sel_absoluteX1 = _registerName1("absoluteX");
  late final _sel_absoluteY1 = _registerName1("absoluteY");
  late final _sel_absoluteZ1 = _registerName1("absoluteZ");
  late final _sel_buttonMask1 = _registerName1("buttonMask");
  int _objc_msgSend_119(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_119(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_119Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_119 = __objc_msgSend_119Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_tilt1 = _registerName1("tilt");
  late final _sel_tangentialPressure1 = _registerName1("tangentialPressure");
  late final _sel_vendorDefined1 = _registerName1("vendorDefined");
  late final _sel_vendorID1 = _registerName1("vendorID");
  late final _sel_tabletID1 = _registerName1("tabletID");
  late final _sel_pointingDeviceID1 = _registerName1("pointingDeviceID");
  late final _sel_systemTabletID1 = _registerName1("systemTabletID");
  late final _sel_vendorPointingDeviceType1 =
      _registerName1("vendorPointingDeviceType");
  late final _sel_pointingDeviceSerialNumber1 =
      _registerName1("pointingDeviceSerialNumber");
  late final _sel_uniqueID1 = _registerName1("uniqueID");
  late final _sel_capabilityMask1 = _registerName1("capabilityMask");
  late final _sel_pointingDeviceType1 = _registerName1("pointingDeviceType");
  int _objc_msgSend_120(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_120(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_120Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_120 = __objc_msgSend_120Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_isEnteringProximity1 = _registerName1("isEnteringProximity");
  late final _class_NSView1 = _getClass1("NSView");
  late final _sel_initWithFrame_1 = _registerName1("initWithFrame:");
  instancetype _objc_msgSend_121(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect frameRect,
  ) {
    return __objc_msgSend_121(
      obj,
      sel,
      frameRect,
    );
  }

  late final __objc_msgSend_121Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_121 = __objc_msgSend_121Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_superview1 = _registerName1("superview");
  ffi.Pointer<ObjCObject> _objc_msgSend_122(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_122(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_122Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_122 = __objc_msgSend_122Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_subviews1 = _registerName1("subviews");
  late final _sel_setSubviews_1 = _registerName1("setSubviews:");
  void _objc_msgSend_123(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_123(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_123Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_123 = __objc_msgSend_123Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isDescendantOf_1 = _registerName1("isDescendantOf:");
  bool _objc_msgSend_124(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_124(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_124Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_124 = __objc_msgSend_124Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_ancestorSharedWithView_1 =
      _registerName1("ancestorSharedWithView:");
  ffi.Pointer<ObjCObject> _objc_msgSend_125(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_125(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_125 = __objc_msgSend_125Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_opaqueAncestor1 = _registerName1("opaqueAncestor");
  late final _sel_isHidden1 = _registerName1("isHidden");
  late final _sel_setHidden_1 = _registerName1("setHidden:");
  late final _sel_isHiddenOrHasHiddenAncestor1 =
      _registerName1("isHiddenOrHasHiddenAncestor");
  late final _sel_getRectsBeingDrawn_count_1 =
      _registerName1("getRectsBeingDrawn:count:");
  void _objc_msgSend_126(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<CGRect>> rects,
    ffi.Pointer<ffi.Long> count,
  ) {
    return __objc_msgSend_126(
      obj,
      sel,
      rects,
      count,
    );
  }

  late final __objc_msgSend_126Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<CGRect>>,
              ffi.Pointer<ffi.Long>)>>('objc_msgSend');
  late final __objc_msgSend_126 = __objc_msgSend_126Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<CGRect>>, ffi.Pointer<ffi.Long>)>();

  late final _sel_needsToDrawRect_1 = _registerName1("needsToDrawRect:");
  bool _objc_msgSend_127(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_127(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_127Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_127 = __objc_msgSend_127Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_wantsDefaultClipping1 =
      _registerName1("wantsDefaultClipping");
  late final _sel_viewDidHide1 = _registerName1("viewDidHide");
  late final _sel_viewDidUnhide1 = _registerName1("viewDidUnhide");
  late final _sel_addSubview_1 = _registerName1("addSubview:");
  void _objc_msgSend_128(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_128(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_128 = __objc_msgSend_128Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_addSubview_positioned_relativeTo_1 =
      _registerName1("addSubview:positioned:relativeTo:");
  void _objc_msgSend_129(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
    int place,
    ffi.Pointer<ObjCObject> otherView,
  ) {
    return __objc_msgSend_129(
      obj,
      sel,
      view,
      place,
      otherView,
    );
  }

  late final __objc_msgSend_129Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_129 = __objc_msgSend_129Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_sortSubviewsUsingFunction_context_1 =
      _registerName1("sortSubviewsUsingFunction:context:");
  void _objc_msgSend_130(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        compare,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_130(
      obj,
      sel,
      compare,
      context,
    );
  }

  late final __objc_msgSend_130Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_130 = __objc_msgSend_130Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_viewWillMoveToWindow_1 =
      _registerName1("viewWillMoveToWindow:");
  void _objc_msgSend_131(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> newWindow,
  ) {
    return __objc_msgSend_131(
      obj,
      sel,
      newWindow,
    );
  }

  late final __objc_msgSend_131Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_131 = __objc_msgSend_131Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_viewDidMoveToWindow1 = _registerName1("viewDidMoveToWindow");
  late final _sel_viewWillMoveToSuperview_1 =
      _registerName1("viewWillMoveToSuperview:");
  void _objc_msgSend_132(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> newSuperview,
  ) {
    return __objc_msgSend_132(
      obj,
      sel,
      newSuperview,
    );
  }

  late final __objc_msgSend_132Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_132 = __objc_msgSend_132Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_viewDidMoveToSuperview1 =
      _registerName1("viewDidMoveToSuperview");
  late final _sel_didAddSubview_1 = _registerName1("didAddSubview:");
  late final _sel_willRemoveSubview_1 = _registerName1("willRemoveSubview:");
  late final _sel_removeFromSuperview1 = _registerName1("removeFromSuperview");
  late final _sel_replaceSubview_with_1 =
      _registerName1("replaceSubview:with:");
  void _objc_msgSend_133(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> oldView,
    ffi.Pointer<ObjCObject> newView,
  ) {
    return __objc_msgSend_133(
      obj,
      sel,
      oldView,
      newView,
    );
  }

  late final __objc_msgSend_133Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_133 = __objc_msgSend_133Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_removeFromSuperviewWithoutNeedingDisplay1 =
      _registerName1("removeFromSuperviewWithoutNeedingDisplay");
  late final _sel_viewDidChangeBackingProperties1 =
      _registerName1("viewDidChangeBackingProperties");
  late final _sel_postsFrameChangedNotifications1 =
      _registerName1("postsFrameChangedNotifications");
  late final _sel_setPostsFrameChangedNotifications_1 =
      _registerName1("setPostsFrameChangedNotifications:");
  late final _sel_resizeSubviewsWithOldSize_1 =
      _registerName1("resizeSubviewsWithOldSize:");
  void _objc_msgSend_134(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize oldSize,
  ) {
    return __objc_msgSend_134(
      obj,
      sel,
      oldSize,
    );
  }

  late final __objc_msgSend_134Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGSize)>>('objc_msgSend');
  late final __objc_msgSend_134 = __objc_msgSend_134Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize)>();

  late final _sel_resizeWithOldSuperviewSize_1 =
      _registerName1("resizeWithOldSuperviewSize:");
  late final _sel_autoresizesSubviews1 = _registerName1("autoresizesSubviews");
  late final _sel_setAutoresizesSubviews_1 =
      _registerName1("setAutoresizesSubviews:");
  late final _sel_autoresizingMask1 = _registerName1("autoresizingMask");
  int _objc_msgSend_135(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_135(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_135Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_135 = __objc_msgSend_135Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setAutoresizingMask_1 =
      _registerName1("setAutoresizingMask:");
  void _objc_msgSend_136(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_136(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_136 = __objc_msgSend_136Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_setFrameOrigin_1 = _registerName1("setFrameOrigin:");
  void _objc_msgSend_137(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint newOrigin,
  ) {
    return __objc_msgSend_137(
      obj,
      sel,
      newOrigin,
    );
  }

  late final __objc_msgSend_137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_137 = __objc_msgSend_137Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_setFrameSize_1 = _registerName1("setFrameSize:");
  late final _sel_frame1 = _registerName1("frame");
  CGRect _objc_msgSend_138(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_138(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_138Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_138 = __objc_msgSend_138Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_138_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_138_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_138_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_138_stret = __objc_msgSend_138_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_setFrame_1 = _registerName1("setFrame:");
  void _objc_msgSend_139(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect value,
  ) {
    return __objc_msgSend_139(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_139Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_139 = __objc_msgSend_139Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_frameRotation1 = _registerName1("frameRotation");
  late final _sel_setFrameRotation_1 = _registerName1("setFrameRotation:");
  void _objc_msgSend_140(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_140(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_140Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_140 = __objc_msgSend_140Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_frameCenterRotation1 = _registerName1("frameCenterRotation");
  late final _sel_setFrameCenterRotation_1 =
      _registerName1("setFrameCenterRotation:");
  late final _sel_setBoundsOrigin_1 = _registerName1("setBoundsOrigin:");
  late final _sel_setBoundsSize_1 = _registerName1("setBoundsSize:");
  late final _sel_boundsRotation1 = _registerName1("boundsRotation");
  late final _sel_setBoundsRotation_1 = _registerName1("setBoundsRotation:");
  late final _sel_translateOriginToPoint_1 =
      _registerName1("translateOriginToPoint:");
  late final _sel_scaleUnitSquareToSize_1 =
      _registerName1("scaleUnitSquareToSize:");
  late final _sel_rotateByAngle_1 = _registerName1("rotateByAngle:");
  void _objc_msgSend_141(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double angle,
  ) {
    return __objc_msgSend_141(
      obj,
      sel,
      angle,
    );
  }

  late final __objc_msgSend_141Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_141 = __objc_msgSend_141Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_bounds1 = _registerName1("bounds");
  late final _sel_setBounds_1 = _registerName1("setBounds:");
  late final _sel_isFlipped1 = _registerName1("isFlipped");
  late final _sel_isRotatedFromBase1 = _registerName1("isRotatedFromBase");
  late final _sel_isRotatedOrScaledFromBase1 =
      _registerName1("isRotatedOrScaledFromBase");
  late final _sel_isOpaque1 = _registerName1("isOpaque");
  late final _sel_convertPoint_fromView_1 =
      _registerName1("convertPoint:fromView:");
  CGPoint _objc_msgSend_142(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_142(
      obj,
      sel,
      point,
      view,
    );
  }

  late final __objc_msgSend_142Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_142 = __objc_msgSend_142Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_142_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_142_stret(
      stret,
      obj,
      sel,
      point,
      view,
    );
  }

  late final __objc_msgSend_142_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGPoint>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGPoint,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_142_stret = __objc_msgSend_142_stretPtr.asFunction<
      void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGPoint, ffi.Pointer<ObjCObject>)>();

  late final _sel_convertPoint_toView_1 =
      _registerName1("convertPoint:toView:");
  late final _sel_convertSize_fromView_1 =
      _registerName1("convertSize:fromView:");
  CGSize _objc_msgSend_143(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_143(
      obj,
      sel,
      size,
      view,
    );
  }

  late final __objc_msgSend_143Ptr = _lookup<
      ffi.NativeFunction<
          CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_143 = __objc_msgSend_143Ptr.asFunction<
      CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_143_stret(
    ffi.Pointer<CGSize> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_143_stret(
      stret,
      obj,
      sel,
      size,
      view,
    );
  }

  late final __objc_msgSend_143_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGSize>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGSize,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_143_stret = __objc_msgSend_143_stretPtr.asFunction<
      void Function(ffi.Pointer<CGSize>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGSize, ffi.Pointer<ObjCObject>)>();

  late final _sel_convertSize_toView_1 = _registerName1("convertSize:toView:");
  late final _sel_convertRect_fromView_1 =
      _registerName1("convertRect:fromView:");
  CGRect _objc_msgSend_144(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_144(
      obj,
      sel,
      rect,
      view,
    );
  }

  late final __objc_msgSend_144Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_144 = __objc_msgSend_144Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_144_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_144_stret(
      stret,
      obj,
      sel,
      rect,
      view,
    );
  }

  late final __objc_msgSend_144_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGRect>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGRect,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_144_stret = __objc_msgSend_144_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGRect, ffi.Pointer<ObjCObject>)>();

  late final _sel_convertRect_toView_1 = _registerName1("convertRect:toView:");
  late final _sel_backingAlignedRect_options_1 =
      _registerName1("backingAlignedRect:options:");
  CGRect _objc_msgSend_145(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    int options,
  ) {
    return __objc_msgSend_145(
      obj,
      sel,
      rect,
      options,
    );
  }

  late final __objc_msgSend_145Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_145 = __objc_msgSend_145Ptr.asFunction<
      CGRect Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect, int)>();

  void _objc_msgSend_145_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    int options,
  ) {
    return __objc_msgSend_145_stret(
      stret,
      obj,
      sel,
      rect,
      options,
    );
  }

  late final __objc_msgSend_145_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGRect, ffi.Int32)>>('objc_msgSend_stret');
  late final __objc_msgSend_145_stret = __objc_msgSend_145_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGRect, int)>();

  late final _sel_centerScanRect_1 = _registerName1("centerScanRect:");
  CGRect _objc_msgSend_146(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_146(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_146Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_146 = __objc_msgSend_146Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  void _objc_msgSend_146_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_146_stret(
      stret,
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_146_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGRect)>>('objc_msgSend_stret');
  late final __objc_msgSend_146_stret = __objc_msgSend_146_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_convertPointToBacking_1 =
      _registerName1("convertPointToBacking:");
  CGPoint _objc_msgSend_147(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_147(
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_147Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_147 = __objc_msgSend_147Ptr.asFunction<
      CGPoint Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  void _objc_msgSend_147_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_147_stret(
      stret,
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_147_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGPoint)>>('objc_msgSend_stret');
  late final __objc_msgSend_147_stret = __objc_msgSend_147_stretPtr.asFunction<
      void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_convertPointFromBacking_1 =
      _registerName1("convertPointFromBacking:");
  late final _sel_convertSizeToBacking_1 =
      _registerName1("convertSizeToBacking:");
  CGSize _objc_msgSend_148(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
  ) {
    return __objc_msgSend_148(
      obj,
      sel,
      size,
    );
  }

  late final __objc_msgSend_148Ptr = _lookup<
      ffi.NativeFunction<
          CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGSize)>>('objc_msgSend');
  late final __objc_msgSend_148 = __objc_msgSend_148Ptr.asFunction<
      CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize)>();

  void _objc_msgSend_148_stret(
    ffi.Pointer<CGSize> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
  ) {
    return __objc_msgSend_148_stret(
      stret,
      obj,
      sel,
      size,
    );
  }

  late final __objc_msgSend_148_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGSize>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGSize)>>('objc_msgSend_stret');
  late final __objc_msgSend_148_stret = __objc_msgSend_148_stretPtr.asFunction<
      void Function(ffi.Pointer<CGSize>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGSize)>();

  late final _sel_convertSizeFromBacking_1 =
      _registerName1("convertSizeFromBacking:");
  late final _sel_convertRectToBacking_1 =
      _registerName1("convertRectToBacking:");
  late final _sel_convertRectFromBacking_1 =
      _registerName1("convertRectFromBacking:");
  late final _sel_convertPointToLayer_1 =
      _registerName1("convertPointToLayer:");
  late final _sel_convertPointFromLayer_1 =
      _registerName1("convertPointFromLayer:");
  late final _sel_convertSizeToLayer_1 = _registerName1("convertSizeToLayer:");
  late final _sel_convertSizeFromLayer_1 =
      _registerName1("convertSizeFromLayer:");
  late final _sel_convertRectToLayer_1 = _registerName1("convertRectToLayer:");
  late final _sel_convertRectFromLayer_1 =
      _registerName1("convertRectFromLayer:");
  late final _sel_canDrawConcurrently1 = _registerName1("canDrawConcurrently");
  late final _sel_setCanDrawConcurrently_1 =
      _registerName1("setCanDrawConcurrently:");
  late final _sel_canDraw1 = _registerName1("canDraw");
  late final _sel_setNeedsDisplayInRect_1 =
      _registerName1("setNeedsDisplayInRect:");
  void _objc_msgSend_149(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect invalidRect,
  ) {
    return __objc_msgSend_149(
      obj,
      sel,
      invalidRect,
    );
  }

  late final __objc_msgSend_149Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_149 = __objc_msgSend_149Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_needsDisplay1 = _registerName1("needsDisplay");
  late final _sel_setNeedsDisplay_1 = _registerName1("setNeedsDisplay:");
  late final _sel_lockFocus1 = _registerName1("lockFocus");
  late final _sel_unlockFocus1 = _registerName1("unlockFocus");
  late final _sel_lockFocusIfCanDraw1 = _registerName1("lockFocusIfCanDraw");
  late final _sel_lockFocusIfCanDrawInContext_1 =
      _registerName1("lockFocusIfCanDrawInContext:");
  bool _objc_msgSend_150(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> context,
  ) {
    return __objc_msgSend_150(
      obj,
      sel,
      context,
    );
  }

  late final __objc_msgSend_150Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_150 = __objc_msgSend_150Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_focusView1 = _registerName1("focusView");
  late final _sel_visibleRect1 = _registerName1("visibleRect");
  late final _sel_display1 = _registerName1("display");
  late final _sel_displayIfNeeded1 = _registerName1("displayIfNeeded");
  late final _sel_displayIfNeededIgnoringOpacity1 =
      _registerName1("displayIfNeededIgnoringOpacity");
  late final _sel_displayRect_1 = _registerName1("displayRect:");
  late final _sel_displayIfNeededInRect_1 =
      _registerName1("displayIfNeededInRect:");
  late final _sel_displayRectIgnoringOpacity_1 =
      _registerName1("displayRectIgnoringOpacity:");
  late final _sel_displayIfNeededInRectIgnoringOpacity_1 =
      _registerName1("displayIfNeededInRectIgnoringOpacity:");
  late final _sel_drawRect_1 = _registerName1("drawRect:");
  late final _sel_displayRectIgnoringOpacity_inContext_1 =
      _registerName1("displayRectIgnoringOpacity:inContext:");
  void _objc_msgSend_151(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> context,
  ) {
    return __objc_msgSend_151(
      obj,
      sel,
      rect,
      context,
    );
  }

  late final __objc_msgSend_151Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_151 = __objc_msgSend_151Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSBitmapImageRep1 = _getClass1("NSBitmapImageRep");
  late final _sel_bitmapImageRepForCachingDisplayInRect_1 =
      _registerName1("bitmapImageRepForCachingDisplayInRect:");
  ffi.Pointer<ObjCObject> _objc_msgSend_152(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_152(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_152Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGRect)>>('objc_msgSend');
  late final __objc_msgSend_152 = __objc_msgSend_152Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_cacheDisplayInRect_toBitmapImageRep_1 =
      _registerName1("cacheDisplayInRect:toBitmapImageRep:");
  void _objc_msgSend_153(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> bitmapImageRep,
  ) {
    return __objc_msgSend_153(
      obj,
      sel,
      rect,
      bitmapImageRep,
    );
  }

  late final __objc_msgSend_153Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_153 = __objc_msgSend_153Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_viewWillDraw1 = _registerName1("viewWillDraw");
  late final _sel_scrollPoint_1 = _registerName1("scrollPoint:");
  late final _sel_scrollRectToVisible_1 =
      _registerName1("scrollRectToVisible:");
  late final _sel_autoscroll_1 = _registerName1("autoscroll:");
  bool _objc_msgSend_154(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_154(
      obj,
      sel,
      event,
    );
  }

  late final __objc_msgSend_154Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_154 = __objc_msgSend_154Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_adjustScroll_1 = _registerName1("adjustScroll:");
  late final _sel_scrollRect_by_1 = _registerName1("scrollRect:by:");
  void _objc_msgSend_155(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    CGSize delta,
  ) {
    return __objc_msgSend_155(
      obj,
      sel,
      rect,
      delta,
    );
  }

  late final __objc_msgSend_155Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect, CGSize)>>('objc_msgSend');
  late final __objc_msgSend_155 = __objc_msgSend_155Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect, CGSize)>();

  late final _sel_translateRectsNeedingDisplayInRect_by_1 =
      _registerName1("translateRectsNeedingDisplayInRect:by:");
  late final _sel_hitTest_1 = _registerName1("hitTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_156(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_156(
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_156Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_156 = __objc_msgSend_156Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_mouse_inRect_1 = _registerName1("mouse:inRect:");
  bool _objc_msgSend_157(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
    CGRect rect,
  ) {
    return __objc_msgSend_157(
      obj,
      sel,
      point,
      rect,
    );
  }

  late final __objc_msgSend_157Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint, CGRect)>>('objc_msgSend');
  late final __objc_msgSend_157 = __objc_msgSend_157Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint, CGRect)>();

  late final _sel_viewWithTag_1 = _registerName1("viewWithTag:");
  ffi.Pointer<ObjCObject> _objc_msgSend_158(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int tag,
  ) {
    return __objc_msgSend_158(
      obj,
      sel,
      tag,
    );
  }

  late final __objc_msgSend_158Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_158 = __objc_msgSend_158Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_tag1 = _registerName1("tag");
  late final _sel_performKeyEquivalent_1 =
      _registerName1("performKeyEquivalent:");
  late final _sel_acceptsFirstMouse_1 = _registerName1("acceptsFirstMouse:");
  bool _objc_msgSend_159(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_159(
      obj,
      sel,
      event,
    );
  }

  late final __objc_msgSend_159Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_159 = __objc_msgSend_159Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_shouldDelayWindowOrderingForEvent_1 =
      _registerName1("shouldDelayWindowOrderingForEvent:");
  late final _sel_needsPanelToBecomeKey1 =
      _registerName1("needsPanelToBecomeKey");
  late final _sel_mouseDownCanMoveWindow1 =
      _registerName1("mouseDownCanMoveWindow");
  late final _sel_acceptsTouchEvents1 = _registerName1("acceptsTouchEvents");
  late final _sel_setAcceptsTouchEvents_1 =
      _registerName1("setAcceptsTouchEvents:");
  late final _sel_wantsRestingTouches1 = _registerName1("wantsRestingTouches");
  late final _sel_setWantsRestingTouches_1 =
      _registerName1("setWantsRestingTouches:");
  late final _class_CALayer1 = _getClass1("CALayer");
  late final _sel_makeBackingLayer1 = _registerName1("makeBackingLayer");
  ffi.Pointer<ObjCObject> _objc_msgSend_160(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_160(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_160 = __objc_msgSend_160Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_layerContentsRedrawPolicy1 =
      _registerName1("layerContentsRedrawPolicy");
  int _objc_msgSend_161(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_161(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_161Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_161 = __objc_msgSend_161Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setLayerContentsRedrawPolicy_1 =
      _registerName1("setLayerContentsRedrawPolicy:");
  void _objc_msgSend_162(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_162(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_162Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_162 = __objc_msgSend_162Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_layerContentsPlacement1 =
      _registerName1("layerContentsPlacement");
  int _objc_msgSend_163(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_163(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_163Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_163 = __objc_msgSend_163Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setLayerContentsPlacement_1 =
      _registerName1("setLayerContentsPlacement:");
  void _objc_msgSend_164(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_164(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_164Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_164 = __objc_msgSend_164Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_wantsLayer1 = _registerName1("wantsLayer");
  late final _sel_setWantsLayer_1 = _registerName1("setWantsLayer:");
  late final _sel_layer1 = _registerName1("layer");
  ffi.Pointer<ObjCObject> _objc_msgSend_165(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_165(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_165Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_165 = __objc_msgSend_165Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setLayer_1 = _registerName1("setLayer:");
  void _objc_msgSend_166(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_166(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_166Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_166 = __objc_msgSend_166Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_wantsUpdateLayer1 = _registerName1("wantsUpdateLayer");
  late final _sel_updateLayer1 = _registerName1("updateLayer");
  late final _sel_canDrawSubviewsIntoLayer1 =
      _registerName1("canDrawSubviewsIntoLayer");
  late final _sel_setCanDrawSubviewsIntoLayer_1 =
      _registerName1("setCanDrawSubviewsIntoLayer:");
  late final _sel_layoutSubtreeIfNeeded1 =
      _registerName1("layoutSubtreeIfNeeded");
  late final _sel_layout1 = _registerName1("layout");
  late final _sel_needsLayout1 = _registerName1("needsLayout");
  late final _sel_setNeedsLayout_1 = _registerName1("setNeedsLayout:");
  late final _sel_alphaValue1 = _registerName1("alphaValue");
  late final _sel_setAlphaValue_1 = _registerName1("setAlphaValue:");
  late final _sel_layerUsesCoreImageFilters1 =
      _registerName1("layerUsesCoreImageFilters");
  late final _sel_setLayerUsesCoreImageFilters_1 =
      _registerName1("setLayerUsesCoreImageFilters:");
  late final _sel_backgroundFilters1 = _registerName1("backgroundFilters");
  late final _sel_setBackgroundFilters_1 =
      _registerName1("setBackgroundFilters:");
  late final _class_CIFilter1 = _getClass1("CIFilter");
  late final _sel_compositingFilter1 = _registerName1("compositingFilter");
  ffi.Pointer<ObjCObject> _objc_msgSend_167(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_167(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_167Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_167 = __objc_msgSend_167Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setCompositingFilter_1 =
      _registerName1("setCompositingFilter:");
  void _objc_msgSend_168(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_168(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_168Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_168 = __objc_msgSend_168Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_contentFilters1 = _registerName1("contentFilters");
  late final _sel_setContentFilters_1 = _registerName1("setContentFilters:");
  late final _class_NSShadow1 = _getClass1("NSShadow");
  late final _sel_shadow1 = _registerName1("shadow");
  ffi.Pointer<ObjCObject> _objc_msgSend_169(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_169(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_169Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_169 = __objc_msgSend_169Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setShadow_1 = _registerName1("setShadow:");
  void _objc_msgSend_170(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_170(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_170Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_170 = __objc_msgSend_170Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_clipsToBounds1 = _registerName1("clipsToBounds");
  late final _sel_setClipsToBounds_1 = _registerName1("setClipsToBounds:");
  late final _sel_postsBoundsChangedNotifications1 =
      _registerName1("postsBoundsChangedNotifications");
  late final _sel_setPostsBoundsChangedNotifications_1 =
      _registerName1("setPostsBoundsChangedNotifications:");
  late final _class_NSScrollView1 = _getClass1("NSScrollView");
  late final _sel_enclosingScrollView1 = _registerName1("enclosingScrollView");
  ffi.Pointer<ObjCObject> _objc_msgSend_171(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_171(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_171Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_171 = __objc_msgSend_171Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSMenu1 = _getClass1("NSMenu");
  late final _sel_initWithTitle_1 = _registerName1("initWithTitle:");
  instancetype _objc_msgSend_172(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_172(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_172Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_172 = __objc_msgSend_172Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_title1 = _registerName1("title");
  late final _sel_setTitle_1 = _registerName1("setTitle:");
  void _objc_msgSend_173(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_173(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_173Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_173 = __objc_msgSend_173Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_popUpContextMenu_withEvent_forView_1 =
      _registerName1("popUpContextMenu:withEvent:forView:");
  void _objc_msgSend_174(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> menu,
    ffi.Pointer<ObjCObject> event,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_174(
      obj,
      sel,
      menu,
      event,
      view,
    );
  }

  late final __objc_msgSend_174Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_174 = __objc_msgSend_174Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSFont1 = _getClass1("NSFont");
  late final _sel_popUpContextMenu_withEvent_forView_withFont_1 =
      _registerName1("popUpContextMenu:withEvent:forView:withFont:");
  void _objc_msgSend_175(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> menu,
    ffi.Pointer<ObjCObject> event,
    ffi.Pointer<ObjCObject> view,
    ffi.Pointer<ObjCObject> font,
  ) {
    return __objc_msgSend_175(
      obj,
      sel,
      menu,
      event,
      view,
      font,
    );
  }

  late final __objc_msgSend_175Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_175 = __objc_msgSend_175Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSMenuItem1 = _getClass1("NSMenuItem");
  late final _sel_usesUserKeyEquivalents1 =
      _registerName1("usesUserKeyEquivalents");
  late final _sel_setUsesUserKeyEquivalents_1 =
      _registerName1("setUsesUserKeyEquivalents:");
  late final _sel_separatorItem1 = _registerName1("separatorItem");
  ffi.Pointer<ObjCObject> _objc_msgSend_176(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_176(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_176Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_176 = __objc_msgSend_176Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_sectionHeaderWithTitle_1 =
      _registerName1("sectionHeaderWithTitle:");
  late final _sel_initWithTitle_action_keyEquivalent_1 =
      _registerName1("initWithTitle:action:keyEquivalent:");
  instancetype _objc_msgSend_177(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    ffi.Pointer<ObjCSel> selector,
    ffi.Pointer<ObjCObject> charCode,
  ) {
    return __objc_msgSend_177(
      obj,
      sel,
      string,
      selector,
      charCode,
    );
  }

  late final __objc_msgSend_177Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_177 = __objc_msgSend_177Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_menu1 = _registerName1("menu");
  ffi.Pointer<ObjCObject> _objc_msgSend_178(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_178(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_178Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_178 = __objc_msgSend_178Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setMenu_1 = _registerName1("setMenu:");
  void _objc_msgSend_179(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_179(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_179Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_179 = __objc_msgSend_179Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_hasSubmenu1 = _registerName1("hasSubmenu");
  late final _sel_submenu1 = _registerName1("submenu");
  late final _sel_setSubmenu_1 = _registerName1("setSubmenu:");
  late final _sel_parentItem1 = _registerName1("parentItem");
  ffi.Pointer<ObjCObject> _objc_msgSend_180(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_180(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_180 = __objc_msgSend_180Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSAttributedString1 = _getClass1("NSAttributedString");
  late final _sel_string1 = _registerName1("string");
  late final _sel_attributesAtIndex_effectiveRange_1 =
      _registerName1("attributesAtIndex:effectiveRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_181(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int location,
    ffi.Pointer<_NSRange> range,
  ) {
    return __objc_msgSend_181(
      obj,
      sel,
      location,
      range,
    );
  }

  late final __objc_msgSend_181Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong,
              ffi.Pointer<_NSRange>)>>('objc_msgSend');
  late final __objc_msgSend_181 = __objc_msgSend_181Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_NSRange>)>();

  late final _sel_attributedTitle1 = _registerName1("attributedTitle");
  ffi.Pointer<ObjCObject> _objc_msgSend_182(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_182(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_182Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_182 = __objc_msgSend_182Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setAttributedTitle_1 = _registerName1("setAttributedTitle:");
  void _objc_msgSend_183(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_183(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_183Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_183 = __objc_msgSend_183Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isSeparatorItem1 = _registerName1("isSeparatorItem");
  late final _sel_isSectionHeader1 = _registerName1("isSectionHeader");
  late final _sel_keyEquivalent1 = _registerName1("keyEquivalent");
  late final _sel_setKeyEquivalent_1 = _registerName1("setKeyEquivalent:");
  late final _sel_keyEquivalentModifierMask1 =
      _registerName1("keyEquivalentModifierMask");
  late final _sel_setKeyEquivalentModifierMask_1 =
      _registerName1("setKeyEquivalentModifierMask:");
  void _objc_msgSend_184(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_184(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_184Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_184 = __objc_msgSend_184Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_userKeyEquivalent1 = _registerName1("userKeyEquivalent");
  late final _sel_allowsKeyEquivalentWhenHidden1 =
      _registerName1("allowsKeyEquivalentWhenHidden");
  late final _sel_setAllowsKeyEquivalentWhenHidden_1 =
      _registerName1("setAllowsKeyEquivalentWhenHidden:");
  late final _sel_allowsAutomaticKeyEquivalentLocalization1 =
      _registerName1("allowsAutomaticKeyEquivalentLocalization");
  late final _sel_setAllowsAutomaticKeyEquivalentLocalization_1 =
      _registerName1("setAllowsAutomaticKeyEquivalentLocalization:");
  late final _sel_allowsAutomaticKeyEquivalentMirroring1 =
      _registerName1("allowsAutomaticKeyEquivalentMirroring");
  late final _sel_setAllowsAutomaticKeyEquivalentMirroring_1 =
      _registerName1("setAllowsAutomaticKeyEquivalentMirroring:");
  late final _class_NSImage1 = _getClass1("NSImage");
  late final _sel_image1 = _registerName1("image");
  ffi.Pointer<ObjCObject> _objc_msgSend_185(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_185(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_185Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_185 = __objc_msgSend_185Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setImage_1 = _registerName1("setImage:");
  void _objc_msgSend_186(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_186(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_186Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_186 = __objc_msgSend_186Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_state1 = _registerName1("state");
  late final _sel_setState_1 = _registerName1("setState:");
  void _objc_msgSend_187(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_187(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_187Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_187 = __objc_msgSend_187Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_onStateImage1 = _registerName1("onStateImage");
  ffi.Pointer<ObjCObject> _objc_msgSend_188(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_188(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_188Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_188 = __objc_msgSend_188Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setOnStateImage_1 = _registerName1("setOnStateImage:");
  void _objc_msgSend_189(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_189(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_189Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_189 = __objc_msgSend_189Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_offStateImage1 = _registerName1("offStateImage");
  late final _sel_setOffStateImage_1 = _registerName1("setOffStateImage:");
  late final _sel_mixedStateImage1 = _registerName1("mixedStateImage");
  late final _sel_setMixedStateImage_1 = _registerName1("setMixedStateImage:");
  late final _sel_isEnabled1 = _registerName1("isEnabled");
  late final _sel_setEnabled_1 = _registerName1("setEnabled:");
  late final _sel_isAlternate1 = _registerName1("isAlternate");
  late final _sel_setAlternate_1 = _registerName1("setAlternate:");
  late final _sel_indentationLevel1 = _registerName1("indentationLevel");
  late final _sel_setIndentationLevel_1 =
      _registerName1("setIndentationLevel:");
  late final _sel_action1 = _registerName1("action");
  late final _sel_setAction_1 = _registerName1("setAction:");
  late final _sel_setTag_1 = _registerName1("setTag:");
  late final _sel_representedObject1 = _registerName1("representedObject");
  late final _sel_setRepresentedObject_1 =
      _registerName1("setRepresentedObject:");
  late final _sel_view1 = _registerName1("view");
  late final _sel_setView_1 = _registerName1("setView:");
  void _objc_msgSend_190(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_190(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_190Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_190 = __objc_msgSend_190Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isHighlighted1 = _registerName1("isHighlighted");
  late final _sel_toolTip1 = _registerName1("toolTip");
  late final _sel_setToolTip_1 = _registerName1("setToolTip:");
  void _objc_msgSend_191(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_191(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_191Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_191 = __objc_msgSend_191Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSMenuItemBadge1 = _getClass1("NSMenuItemBadge");
  late final _sel_badge1 = _registerName1("badge");
  ffi.Pointer<ObjCObject> _objc_msgSend_192(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_192(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_192 = __objc_msgSend_192Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setBadge_1 = _registerName1("setBadge:");
  void _objc_msgSend_193(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_193(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_193Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_193 = __objc_msgSend_193Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_popUpMenuPositioningItem_atLocation_inView_1 =
      _registerName1("popUpMenuPositioningItem:atLocation:inView:");
  bool _objc_msgSend_194(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> item,
    CGPoint location,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_194(
      obj,
      sel,
      item,
      location,
      view,
    );
  }

  late final __objc_msgSend_194Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              CGPoint,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_194 = __objc_msgSend_194Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, CGPoint, ffi.Pointer<ObjCObject>)>();

  late final _sel_setMenuBarVisible_1 = _registerName1("setMenuBarVisible:");
  void _objc_msgSend_195(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool visible,
  ) {
    return __objc_msgSend_195(
      obj,
      sel,
      visible,
    );
  }

  late final __objc_msgSend_195Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_195 = __objc_msgSend_195Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_menuBarVisible1 = _registerName1("menuBarVisible");
  late final _sel_supermenu1 = _registerName1("supermenu");
  late final _sel_setSupermenu_1 = _registerName1("setSupermenu:");
  late final _sel_insertItem_atIndex_1 = _registerName1("insertItem:atIndex:");
  void _objc_msgSend_196(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> newItem,
    int index,
  ) {
    return __objc_msgSend_196(
      obj,
      sel,
      newItem,
      index,
    );
  }

  late final __objc_msgSend_196Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_196 = __objc_msgSend_196Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_addItem_1 = _registerName1("addItem:");
  void _objc_msgSend_197(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> newItem,
  ) {
    return __objc_msgSend_197(
      obj,
      sel,
      newItem,
    );
  }

  late final __objc_msgSend_197Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_197 = __objc_msgSend_197Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_insertItemWithTitle_action_keyEquivalent_atIndex_1 =
      _registerName1("insertItemWithTitle:action:keyEquivalent:atIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_198(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    ffi.Pointer<ObjCSel> selector,
    ffi.Pointer<ObjCObject> charCode,
    int index,
  ) {
    return __objc_msgSend_198(
      obj,
      sel,
      string,
      selector,
      charCode,
      index,
    );
  }

  late final __objc_msgSend_198Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_198 = __objc_msgSend_198Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int)>();

  late final _sel_addItemWithTitle_action_keyEquivalent_1 =
      _registerName1("addItemWithTitle:action:keyEquivalent:");
  ffi.Pointer<ObjCObject> _objc_msgSend_199(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    ffi.Pointer<ObjCSel> selector,
    ffi.Pointer<ObjCObject> charCode,
  ) {
    return __objc_msgSend_199(
      obj,
      sel,
      string,
      selector,
      charCode,
    );
  }

  late final __objc_msgSend_199Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_199 = __objc_msgSend_199Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_removeItemAtIndex_1 = _registerName1("removeItemAtIndex:");
  void _objc_msgSend_200(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_200(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_200Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_200 = __objc_msgSend_200Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_removeItem_1 = _registerName1("removeItem:");
  late final _sel_setSubmenu_forItem_1 = _registerName1("setSubmenu:forItem:");
  void _objc_msgSend_201(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> menu,
    ffi.Pointer<ObjCObject> item,
  ) {
    return __objc_msgSend_201(
      obj,
      sel,
      menu,
      item,
    );
  }

  late final __objc_msgSend_201Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_201 = __objc_msgSend_201Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_removeAllItems1 = _registerName1("removeAllItems");
  late final _sel_itemArray1 = _registerName1("itemArray");
  late final _sel_setItemArray_1 = _registerName1("setItemArray:");
  late final _sel_numberOfItems1 = _registerName1("numberOfItems");
  late final _sel_itemAtIndex_1 = _registerName1("itemAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_202(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_202(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_202Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_202 = __objc_msgSend_202Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_indexOfItem_1 = _registerName1("indexOfItem:");
  int _objc_msgSend_203(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> item,
  ) {
    return __objc_msgSend_203(
      obj,
      sel,
      item,
    );
  }

  late final __objc_msgSend_203Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_203 = __objc_msgSend_203Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_indexOfItemWithTitle_1 =
      _registerName1("indexOfItemWithTitle:");
  late final _sel_indexOfItemWithTag_1 = _registerName1("indexOfItemWithTag:");
  int _objc_msgSend_204(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int tag,
  ) {
    return __objc_msgSend_204(
      obj,
      sel,
      tag,
    );
  }

  late final __objc_msgSend_204Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_204 = __objc_msgSend_204Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_indexOfItemWithRepresentedObject_1 =
      _registerName1("indexOfItemWithRepresentedObject:");
  int _objc_msgSend_205(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
  ) {
    return __objc_msgSend_205(
      obj,
      sel,
      object,
    );
  }

  late final __objc_msgSend_205Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_205 = __objc_msgSend_205Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_indexOfItemWithSubmenu_1 =
      _registerName1("indexOfItemWithSubmenu:");
  int _objc_msgSend_206(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> submenu,
  ) {
    return __objc_msgSend_206(
      obj,
      sel,
      submenu,
    );
  }

  late final __objc_msgSend_206Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_206 = __objc_msgSend_206Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_indexOfItemWithTarget_andAction_1 =
      _registerName1("indexOfItemWithTarget:andAction:");
  int _objc_msgSend_207(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCSel> actionSelector,
  ) {
    return __objc_msgSend_207(
      obj,
      sel,
      target,
      actionSelector,
    );
  }

  late final __objc_msgSend_207Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_207 = __objc_msgSend_207Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_itemWithTitle_1 = _registerName1("itemWithTitle:");
  ffi.Pointer<ObjCObject> _objc_msgSend_208(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> title,
  ) {
    return __objc_msgSend_208(
      obj,
      sel,
      title,
    );
  }

  late final __objc_msgSend_208Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_208 = __objc_msgSend_208Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_itemWithTag_1 = _registerName1("itemWithTag:");
  late final _sel_autoenablesItems1 = _registerName1("autoenablesItems");
  late final _sel_setAutoenablesItems_1 =
      _registerName1("setAutoenablesItems:");
  late final _sel_update1 = _registerName1("update");
  late final _sel_itemChanged_1 = _registerName1("itemChanged:");
  late final _sel_performActionForItemAtIndex_1 =
      _registerName1("performActionForItemAtIndex:");
  late final _sel_delegate1 = _registerName1("delegate");
  late final _sel_setDelegate_1 = _registerName1("setDelegate:");
  late final _sel_menuBarHeight1 = _registerName1("menuBarHeight");
  late final _sel_cancelTracking1 = _registerName1("cancelTracking");
  late final _sel_cancelTrackingWithoutAnimation1 =
      _registerName1("cancelTrackingWithoutAnimation");
  late final _sel_highlightedItem1 = _registerName1("highlightedItem");
  late final _sel_minimumWidth1 = _registerName1("minimumWidth");
  late final _sel_setMinimumWidth_1 = _registerName1("setMinimumWidth:");
  late final _sel_size1 = _registerName1("size");
  CGSize _objc_msgSend_209(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_209(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_209Ptr = _lookup<
      ffi.NativeFunction<
          CGSize Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_209 = __objc_msgSend_209Ptr.asFunction<
      CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_209_stret(
    ffi.Pointer<CGSize> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_209_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_209_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGSize>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_209_stret = __objc_msgSend_209_stretPtr.asFunction<
      void Function(ffi.Pointer<CGSize>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_font1 = _registerName1("font");
  ffi.Pointer<ObjCObject> _objc_msgSend_210(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_210(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_210Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_210 = __objc_msgSend_210Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setFont_1 = _registerName1("setFont:");
  void _objc_msgSend_211(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_211(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_211Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_211 = __objc_msgSend_211Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_allowsContextMenuPlugIns1 =
      _registerName1("allowsContextMenuPlugIns");
  late final _sel_setAllowsContextMenuPlugIns_1 =
      _registerName1("setAllowsContextMenuPlugIns:");
  late final _sel_showsStateColumn1 = _registerName1("showsStateColumn");
  late final _sel_setShowsStateColumn_1 =
      _registerName1("setShowsStateColumn:");
  late final _sel_userInterfaceLayoutDirection1 =
      _registerName1("userInterfaceLayoutDirection");
  int _objc_msgSend_212(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_212(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_212 = __objc_msgSend_212Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setUserInterfaceLayoutDirection_1 =
      _registerName1("setUserInterfaceLayoutDirection:");
  void _objc_msgSend_213(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_213(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_213Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_213 = __objc_msgSend_213Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_menuForEvent_1 = _registerName1("menuForEvent:");
  ffi.Pointer<ObjCObject> _objc_msgSend_214(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_214(
      obj,
      sel,
      event,
    );
  }

  late final __objc_msgSend_214Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_214 = __objc_msgSend_214Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_defaultMenu1 = _registerName1("defaultMenu");
  late final _sel_willOpenMenu_withEvent_1 =
      _registerName1("willOpenMenu:withEvent:");
  void _objc_msgSend_215(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> menu,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_215(
      obj,
      sel,
      menu,
      event,
    );
  }

  late final __objc_msgSend_215Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_215 = __objc_msgSend_215Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_didCloseMenu_withEvent_1 =
      _registerName1("didCloseMenu:withEvent:");
  void _objc_msgSend_216(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> menu,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_216(
      obj,
      sel,
      menu,
      event,
    );
  }

  late final __objc_msgSend_216Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_216 = __objc_msgSend_216Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_addToolTipRect_owner_userData_1 =
      _registerName1("addToolTipRect:owner:userData:");
  int _objc_msgSend_217(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> owner,
    ffi.Pointer<ffi.Void> data,
  ) {
    return __objc_msgSend_217(
      obj,
      sel,
      rect,
      owner,
      data,
    );
  }

  late final __objc_msgSend_217Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGRect,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_217 = __objc_msgSend_217Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>();

  late final _sel_removeToolTip_1 = _registerName1("removeToolTip:");
  late final _sel_removeAllToolTips1 = _registerName1("removeAllToolTips");
  late final _sel_viewWillStartLiveResize1 =
      _registerName1("viewWillStartLiveResize");
  late final _sel_viewDidEndLiveResize1 =
      _registerName1("viewDidEndLiveResize");
  late final _sel_inLiveResize1 = _registerName1("inLiveResize");
  late final _sel_preservesContentDuringLiveResize1 =
      _registerName1("preservesContentDuringLiveResize");
  late final _sel_rectPreservedDuringLiveResize1 =
      _registerName1("rectPreservedDuringLiveResize");
  late final _sel_getRectsExposedDuringLiveResize_count_1 =
      _registerName1("getRectsExposedDuringLiveResize:count:");
  void _objc_msgSend_218(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<CGRect> exposedRects,
    ffi.Pointer<ffi.Long> count,
  ) {
    return __objc_msgSend_218(
      obj,
      sel,
      exposedRects,
      count,
    );
  }

  late final __objc_msgSend_218Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<CGRect>, ffi.Pointer<ffi.Long>)>>('objc_msgSend');
  late final __objc_msgSend_218 = __objc_msgSend_218Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<CGRect>, ffi.Pointer<ffi.Long>)>();

  late final _class_NSTextInputContext1 = _getClass1("NSTextInputContext");
  late final _sel_inputContext1 = _registerName1("inputContext");
  ffi.Pointer<ObjCObject> _objc_msgSend_219(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_219(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_219Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_219 = __objc_msgSend_219Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_rectForSmartMagnificationAtPoint_inRect_1 =
      _registerName1("rectForSmartMagnificationAtPoint:inRect:");
  CGRect _objc_msgSend_220(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint location,
    CGRect visibleRect,
  ) {
    return __objc_msgSend_220(
      obj,
      sel,
      location,
      visibleRect,
    );
  }

  late final __objc_msgSend_220Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint, CGRect)>>('objc_msgSend');
  late final __objc_msgSend_220 = __objc_msgSend_220Ptr.asFunction<
      CGRect Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint, CGRect)>();

  void _objc_msgSend_220_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint location,
    CGRect visibleRect,
  ) {
    return __objc_msgSend_220_stret(
      stret,
      obj,
      sel,
      location,
      visibleRect,
    );
  }

  late final __objc_msgSend_220_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGPoint, CGRect)>>('objc_msgSend_stret');
  late final __objc_msgSend_220_stret = __objc_msgSend_220_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGPoint, CGRect)>();

  late final _sel_prepareForReuse1 = _registerName1("prepareForReuse");
  late final _sel_isCompatibleWithResponsiveScrolling1 =
      _registerName1("isCompatibleWithResponsiveScrolling");
  late final _sel_prepareContentInRect_1 =
      _registerName1("prepareContentInRect:");
  late final _sel_preparedContentRect1 = _registerName1("preparedContentRect");
  late final _sel_setPreparedContentRect_1 =
      _registerName1("setPreparedContentRect:");
  late final _sel_allowsVibrancy1 = _registerName1("allowsVibrancy");
  late final _sel_viewDidChangeEffectiveAppearance1 =
      _registerName1("viewDidChangeEffectiveAppearance");
  late final _sel_touchesMatchingPhase_inView_1 =
      _registerName1("touchesMatchingPhase:inView:");
  ffi.Pointer<ObjCObject> _objc_msgSend_221(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int phase,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_221(
      obj,
      sel,
      phase,
      view,
    );
  }

  late final __objc_msgSend_221Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_221 = __objc_msgSend_221Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_allTouches1 = _registerName1("allTouches");
  late final _sel_touchesForView_1 = _registerName1("touchesForView:");
  ffi.Pointer<ObjCObject> _objc_msgSend_222(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_222(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_222Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_222 = __objc_msgSend_222Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_NSTouch1 = _getClass1("NSTouch");
  late final _sel_identity1 = _registerName1("identity");
  late final _sel_phase1 = _registerName1("phase");
  int _objc_msgSend_223(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_223(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_223Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_223 = __objc_msgSend_223Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_normalizedPosition1 = _registerName1("normalizedPosition");
  late final _sel_isResting1 = _registerName1("isResting");
  late final _sel_device1 = _registerName1("device");
  late final _sel_deviceSize1 = _registerName1("deviceSize");
  late final _sel_coalescedTouchesForTouch_1 =
      _registerName1("coalescedTouchesForTouch:");
  ffi.Pointer<ObjCObject> _objc_msgSend_224(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> touch,
  ) {
    return __objc_msgSend_224(
      obj,
      sel,
      touch,
    );
  }

  late final __objc_msgSend_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_224 = __objc_msgSend_224Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stage1 = _registerName1("stage");
  late final _sel_stageTransition1 = _registerName1("stageTransition");
  late final _sel_associatedEventsMask1 =
      _registerName1("associatedEventsMask");
  int _objc_msgSend_225(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_225(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_225Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_225 = __objc_msgSend_225Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_pressureBehavior1 = _registerName1("pressureBehavior");
  int _objc_msgSend_226(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_226(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_226Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_226 = __objc_msgSend_226Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_isSwipeTrackingFromScrollEventsEnabled1 =
      _registerName1("isSwipeTrackingFromScrollEventsEnabled");
  late final _sel_trackSwipeEventWithOptions_dampenAmountThresholdMin_max_usingHandler_1 =
      _registerName1(
          "trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:");
  void _objc_msgSend_227(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    double minDampenThreshold,
    double maxDampenThreshold,
    ffi.Pointer<_ObjCBlock> trackingHandler,
  ) {
    return __objc_msgSend_227(
      obj,
      sel,
      options,
      minDampenThreshold,
      maxDampenThreshold,
      trackingHandler,
    );
  }

  late final __objc_msgSend_227Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_227 = __objc_msgSend_227Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, double,
          double, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_startPeriodicEventsAfterDelay_withPeriod_1 =
      _registerName1("startPeriodicEventsAfterDelay:withPeriod:");
  void _objc_msgSend_228(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double delay,
    double period,
  ) {
    return __objc_msgSend_228(
      obj,
      sel,
      delay,
      period,
    );
  }

  late final __objc_msgSend_228Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_228 = __objc_msgSend_228Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double, double)>();

  late final _sel_stopPeriodicEvents1 = _registerName1("stopPeriodicEvents");
  late final _sel_mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_1 =
      _registerName1(
          "mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:");
  ffi.Pointer<ObjCObject> _objc_msgSend_229(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int type,
    CGPoint location,
    int flags,
    double time,
    int wNum,
    ffi.Pointer<ObjCObject> unusedPassNil,
    int eNum,
    int cNum,
    double pressure,
  ) {
    return __objc_msgSend_229(
      obj,
      sel,
      type,
      location,
      flags,
      time,
      wNum,
      unusedPassNil,
      eNum,
      cNum,
      pressure,
    );
  }

  late final __objc_msgSend_229Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              CGPoint,
              ffi.Int32,
              ffi.Double,
              ffi.Long,
              ffi.Pointer<ObjCObject>,
              ffi.Long,
              ffi.Long,
              ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_229 = __objc_msgSend_229Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          CGPoint,
          int,
          double,
          int,
          ffi.Pointer<ObjCObject>,
          int,
          int,
          double)>();

  late final _sel_keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode_1 =
      _registerName1(
          "keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:");
  ffi.Pointer<ObjCObject> _objc_msgSend_230(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int type,
    CGPoint location,
    int flags,
    double time,
    int wNum,
    ffi.Pointer<ObjCObject> unusedPassNil,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ObjCObject> ukeys,
    bool flag,
    int code,
  ) {
    return __objc_msgSend_230(
      obj,
      sel,
      type,
      location,
      flags,
      time,
      wNum,
      unusedPassNil,
      keys,
      ukeys,
      flag,
      code,
    );
  }

  late final __objc_msgSend_230Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              CGPoint,
              ffi.Int32,
              ffi.Double,
              ffi.Long,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_230 = __objc_msgSend_230Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          CGPoint,
          int,
          double,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          bool,
          int)>();

  late final _sel_enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData_1 =
      _registerName1(
          "enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:");
  ffi.Pointer<ObjCObject> _objc_msgSend_231(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int type,
    CGPoint location,
    int flags,
    double time,
    int wNum,
    ffi.Pointer<ObjCObject> unusedPassNil,
    int eNum,
    int tNum,
    ffi.Pointer<ffi.Void> data,
  ) {
    return __objc_msgSend_231(
      obj,
      sel,
      type,
      location,
      flags,
      time,
      wNum,
      unusedPassNil,
      eNum,
      tNum,
      data,
    );
  }

  late final __objc_msgSend_231Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              CGPoint,
              ffi.Int32,
              ffi.Double,
              ffi.Long,
              ffi.Pointer<ObjCObject>,
              ffi.Long,
              ffi.Long,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_231 = __objc_msgSend_231Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          CGPoint,
          int,
          double,
          int,
          ffi.Pointer<ObjCObject>,
          int,
          int,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2_1 =
      _registerName1(
          "otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:");
  ffi.Pointer<ObjCObject> _objc_msgSend_232(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int type,
    CGPoint location,
    int flags,
    double time,
    int wNum,
    ffi.Pointer<ObjCObject> unusedPassNil,
    int subtype,
    int d1,
    int d2,
  ) {
    return __objc_msgSend_232(
      obj,
      sel,
      type,
      location,
      flags,
      time,
      wNum,
      unusedPassNil,
      subtype,
      d1,
      d2,
    );
  }

  late final __objc_msgSend_232Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              CGPoint,
              ffi.Int32,
              ffi.Double,
              ffi.Long,
              ffi.Pointer<ObjCObject>,
              ffi.Short,
              ffi.Long,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_232 = __objc_msgSend_232Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          CGPoint,
          int,
          double,
          int,
          ffi.Pointer<ObjCObject>,
          int,
          int,
          int)>();

  late final _sel_mouseLocation1 = _registerName1("mouseLocation");
  late final _sel_pressedMouseButtons1 = _registerName1("pressedMouseButtons");
  late final _sel_doubleClickInterval1 = _registerName1("doubleClickInterval");
  late final _sel_keyRepeatDelay1 = _registerName1("keyRepeatDelay");
  late final _sel_keyRepeatInterval1 = _registerName1("keyRepeatInterval");
  late final _sel_addGlobalMonitorForEventsMatchingMask_handler_1 =
      _registerName1("addGlobalMonitorForEventsMatchingMask:handler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_233(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int mask,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_233(
      obj,
      sel,
      mask,
      block,
    );
  }

  late final __objc_msgSend_233Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_233 = __objc_msgSend_233Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_addLocalMonitorForEventsMatchingMask_handler_1 =
      _registerName1("addLocalMonitorForEventsMatchingMask:handler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_234(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int mask,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_234(
      obj,
      sel,
      mask,
      block,
    );
  }

  late final __objc_msgSend_234Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_234 = __objc_msgSend_234Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_removeMonitor_1 = _registerName1("removeMonitor:");
  late final _sel_validRequestorForSendType_returnType_1 =
      _registerName1("validRequestorForSendType:returnType:");
  ffi.Pointer<ObjCObject> _objc_msgSend_235(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sendType,
    ffi.Pointer<ObjCObject> returnType,
  ) {
    return __objc_msgSend_235(
      obj,
      sel,
      sendType,
      returnType,
    );
  }

  late final __objc_msgSend_235Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_235 = __objc_msgSend_235Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_mouseDown_1 = _registerName1("mouseDown:");
  void _objc_msgSend_236(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_236(
      obj,
      sel,
      event,
    );
  }

  late final __objc_msgSend_236Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_236 = __objc_msgSend_236Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_rightMouseDown_1 = _registerName1("rightMouseDown:");
  late final _sel_otherMouseDown_1 = _registerName1("otherMouseDown:");
  late final _sel_mouseUp_1 = _registerName1("mouseUp:");
  late final _sel_rightMouseUp_1 = _registerName1("rightMouseUp:");
  late final _sel_otherMouseUp_1 = _registerName1("otherMouseUp:");
  late final _sel_mouseMoved_1 = _registerName1("mouseMoved:");
  late final _sel_mouseDragged_1 = _registerName1("mouseDragged:");
  late final _sel_scrollWheel_1 = _registerName1("scrollWheel:");
  late final _sel_rightMouseDragged_1 = _registerName1("rightMouseDragged:");
  late final _sel_otherMouseDragged_1 = _registerName1("otherMouseDragged:");
  late final _sel_mouseEntered_1 = _registerName1("mouseEntered:");
  late final _sel_mouseExited_1 = _registerName1("mouseExited:");
  late final _sel_keyDown_1 = _registerName1("keyDown:");
  late final _sel_keyUp_1 = _registerName1("keyUp:");
  late final _sel_flagsChanged_1 = _registerName1("flagsChanged:");
  late final _sel_tabletPoint_1 = _registerName1("tabletPoint:");
  late final _sel_tabletProximity_1 = _registerName1("tabletProximity:");
  late final _sel_cursorUpdate_1 = _registerName1("cursorUpdate:");
  late final _sel_magnifyWithEvent_1 = _registerName1("magnifyWithEvent:");
  late final _sel_rotateWithEvent_1 = _registerName1("rotateWithEvent:");
  late final _sel_swipeWithEvent_1 = _registerName1("swipeWithEvent:");
  late final _sel_beginGestureWithEvent_1 =
      _registerName1("beginGestureWithEvent:");
  late final _sel_endGestureWithEvent_1 =
      _registerName1("endGestureWithEvent:");
  late final _sel_smartMagnifyWithEvent_1 =
      _registerName1("smartMagnifyWithEvent:");
  late final _sel_changeModeWithEvent_1 =
      _registerName1("changeModeWithEvent:");
  late final _sel_touchesBeganWithEvent_1 =
      _registerName1("touchesBeganWithEvent:");
  late final _sel_touchesMovedWithEvent_1 =
      _registerName1("touchesMovedWithEvent:");
  late final _sel_touchesEndedWithEvent_1 =
      _registerName1("touchesEndedWithEvent:");
  late final _sel_touchesCancelledWithEvent_1 =
      _registerName1("touchesCancelledWithEvent:");
  late final _sel_quickLookWithEvent_1 = _registerName1("quickLookWithEvent:");
  late final _sel_pressureChangeWithEvent_1 =
      _registerName1("pressureChangeWithEvent:");
  late final _sel_noResponderFor_1 = _registerName1("noResponderFor:");
  late final _sel_acceptsFirstResponder1 =
      _registerName1("acceptsFirstResponder");
  late final _sel_becomeFirstResponder1 =
      _registerName1("becomeFirstResponder");
  late final _sel_resignFirstResponder1 =
      _registerName1("resignFirstResponder");
  late final _sel_interpretKeyEvents_1 = _registerName1("interpretKeyEvents:");
  late final _sel_flushBufferedKeyEvents1 =
      _registerName1("flushBufferedKeyEvents");
  late final _sel_showContextHelp_1 = _registerName1("showContextHelp:");
  void _objc_msgSend_237(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sender,
  ) {
    return __objc_msgSend_237(
      obj,
      sel,
      sender,
    );
  }

  late final __objc_msgSend_237Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_237 = __objc_msgSend_237Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_helpRequested_1 = _registerName1("helpRequested:");
  late final _sel_shouldBeTreatedAsInkEvent_1 =
      _registerName1("shouldBeTreatedAsInkEvent:");
  late final _sel_wantsScrollEventsForSwipeTrackingOnAxis_1 =
      _registerName1("wantsScrollEventsForSwipeTrackingOnAxis:");
  bool _objc_msgSend_238(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int axis,
  ) {
    return __objc_msgSend_238(
      obj,
      sel,
      axis,
    );
  }

  late final __objc_msgSend_238Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_238 = __objc_msgSend_238Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_wantsForwardedScrollEventsForAxis_1 =
      _registerName1("wantsForwardedScrollEventsForAxis:");
  late final _sel_supplementalTargetForAction_sender_1 =
      _registerName1("supplementalTargetForAction:sender:");
  ffi.Pointer<ObjCObject> _objc_msgSend_239(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> action,
    ffi.Pointer<ObjCObject> sender,
  ) {
    return __objc_msgSend_239(
      obj,
      sel,
      action,
      sender,
    );
  }

  late final __objc_msgSend_239Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_239 = __objc_msgSend_239Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_frameRectForContentRect_styleMask_1 =
      _registerName1("frameRectForContentRect:styleMask:");
  CGRect _objc_msgSend_240(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect cRect,
    int style,
  ) {
    return __objc_msgSend_240(
      obj,
      sel,
      cRect,
      style,
    );
  }

  late final __objc_msgSend_240Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_240 = __objc_msgSend_240Ptr.asFunction<
      CGRect Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect, int)>();

  void _objc_msgSend_240_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect cRect,
    int style,
  ) {
    return __objc_msgSend_240_stret(
      stret,
      obj,
      sel,
      cRect,
      style,
    );
  }

  late final __objc_msgSend_240_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGRect, ffi.Int32)>>('objc_msgSend_stret');
  late final __objc_msgSend_240_stret = __objc_msgSend_240_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGRect, int)>();

  late final _sel_contentRectForFrameRect_styleMask_1 =
      _registerName1("contentRectForFrameRect:styleMask:");
  late final _sel_minFrameWidthWithTitle_styleMask_1 =
      _registerName1("minFrameWidthWithTitle:styleMask:");
  double _objc_msgSend_241(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> title,
    int style,
  ) {
    return __objc_msgSend_241(
      obj,
      sel,
      title,
      style,
    );
  }

  late final __objc_msgSend_241Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_241 = __objc_msgSend_241Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  double _objc_msgSend_241_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> title,
    int style,
  ) {
    return __objc_msgSend_241_fpret(
      obj,
      sel,
      title,
      style,
    );
  }

  late final __objc_msgSend_241_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend_fpret');
  late final __objc_msgSend_241_fpret = __objc_msgSend_241_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_defaultDepthLimit1 = _registerName1("defaultDepthLimit");
  int _objc_msgSend_242(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_242(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_242Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_242 = __objc_msgSend_242Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_frameRectForContentRect_1 =
      _registerName1("frameRectForContentRect:");
  late final _sel_contentRectForFrameRect_1 =
      _registerName1("contentRectForFrameRect:");
  late final _sel_initWithContentRect_styleMask_backing_defer_1 =
      _registerName1("initWithContentRect:styleMask:backing:defer:");
  instancetype _objc_msgSend_243(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect contentRect,
    int style,
    int backingStoreType,
    bool flag,
  ) {
    return __objc_msgSend_243(
      obj,
      sel,
      contentRect,
      style,
      backingStoreType,
      flag,
    );
  }

  late final __objc_msgSend_243Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect, ffi.Int32, ffi.Int32, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_243 = __objc_msgSend_243Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          CGRect, int, int, bool)>();

  late final _class_NSScreen1 = _getClass1("NSScreen");
  late final _sel_initWithContentRect_styleMask_backing_defer_screen_1 =
      _registerName1("initWithContentRect:styleMask:backing:defer:screen:");
  instancetype _objc_msgSend_244(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect contentRect,
    int style,
    int backingStoreType,
    bool flag,
    ffi.Pointer<ObjCObject> screen,
  ) {
    return __objc_msgSend_244(
      obj,
      sel,
      contentRect,
      style,
      backingStoreType,
      flag,
      screen,
    );
  }

  late final __objc_msgSend_244Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGRect,
              ffi.Int32,
              ffi.Int32,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_244 = __objc_msgSend_244Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          CGRect, int, int, bool, ffi.Pointer<ObjCObject>)>();

  late final _sel_subtitle1 = _registerName1("subtitle");
  late final _sel_setSubtitle_1 = _registerName1("setSubtitle:");
  late final _sel_titleVisibility1 = _registerName1("titleVisibility");
  int _objc_msgSend_245(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_245(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_245Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_245 = __objc_msgSend_245Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTitleVisibility_1 = _registerName1("setTitleVisibility:");
  void _objc_msgSend_246(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_246(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_246Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_246 = __objc_msgSend_246Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_titlebarAppearsTransparent1 =
      _registerName1("titlebarAppearsTransparent");
  late final _sel_setTitlebarAppearsTransparent_1 =
      _registerName1("setTitlebarAppearsTransparent:");
  late final _sel_toolbarStyle1 = _registerName1("toolbarStyle");
  int _objc_msgSend_247(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_247(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_247Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_247 = __objc_msgSend_247Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setToolbarStyle_1 = _registerName1("setToolbarStyle:");
  void _objc_msgSend_248(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_248(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_248Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_248 = __objc_msgSend_248Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_contentLayoutRect1 = _registerName1("contentLayoutRect");
  late final _sel_contentLayoutGuide1 = _registerName1("contentLayoutGuide");
  late final _sel_titlebarAccessoryViewControllers1 =
      _registerName1("titlebarAccessoryViewControllers");
  late final _sel_setTitlebarAccessoryViewControllers_1 =
      _registerName1("setTitlebarAccessoryViewControllers:");
  late final _class_NSTitlebarAccessoryViewController1 =
      _getClass1("NSTitlebarAccessoryViewController");
  late final _sel_addTitlebarAccessoryViewController_1 =
      _registerName1("addTitlebarAccessoryViewController:");
  void _objc_msgSend_249(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> childViewController,
  ) {
    return __objc_msgSend_249(
      obj,
      sel,
      childViewController,
    );
  }

  late final __objc_msgSend_249Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_249 = __objc_msgSend_249Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_insertTitlebarAccessoryViewController_atIndex_1 =
      _registerName1("insertTitlebarAccessoryViewController:atIndex:");
  void _objc_msgSend_250(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> childViewController,
    int index,
  ) {
    return __objc_msgSend_250(
      obj,
      sel,
      childViewController,
      index,
    );
  }

  late final __objc_msgSend_250Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_250 = __objc_msgSend_250Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_removeTitlebarAccessoryViewControllerAtIndex_1 =
      _registerName1("removeTitlebarAccessoryViewControllerAtIndex:");
  late final _sel_representedURL1 = _registerName1("representedURL");
  late final _sel_setRepresentedURL_1 = _registerName1("setRepresentedURL:");
  void _objc_msgSend_251(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_251(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_251Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_251 = __objc_msgSend_251Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_representedFilename1 = _registerName1("representedFilename");
  late final _sel_setRepresentedFilename_1 =
      _registerName1("setRepresentedFilename:");
  late final _sel_setTitleWithRepresentedFilename_1 =
      _registerName1("setTitleWithRepresentedFilename:");
  late final _sel_isExcludedFromWindowsMenu1 =
      _registerName1("isExcludedFromWindowsMenu");
  late final _sel_setExcludedFromWindowsMenu_1 =
      _registerName1("setExcludedFromWindowsMenu:");
  late final _sel_contentView1 = _registerName1("contentView");
  late final _sel_setContentView_1 = _registerName1("setContentView:");
  late final _sel_styleMask1 = _registerName1("styleMask");
  int _objc_msgSend_252(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_252(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_252Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_252 = __objc_msgSend_252Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setStyleMask_1 = _registerName1("setStyleMask:");
  void _objc_msgSend_253(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_253(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_253Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_253 = __objc_msgSend_253Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_NSText1 = _getClass1("NSText");
  late final _sel_setString_1 = _registerName1("setString:");
  late final _sel_replaceCharactersInRange_withString_1 =
      _registerName1("replaceCharactersInRange:withString:");
  void _objc_msgSend_254(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    ffi.Pointer<ObjCObject> string,
  ) {
    return __objc_msgSend_254(
      obj,
      sel,
      range,
      string,
    );
  }

  late final __objc_msgSend_254Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_254 = __objc_msgSend_254Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_replaceCharactersInRange_withRTF_1 =
      _registerName1("replaceCharactersInRange:withRTF:");
  void _objc_msgSend_255(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    ffi.Pointer<ObjCObject> rtfData,
  ) {
    return __objc_msgSend_255(
      obj,
      sel,
      range,
      rtfData,
    );
  }

  late final __objc_msgSend_255Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_255 = __objc_msgSend_255Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_replaceCharactersInRange_withRTFD_1 =
      _registerName1("replaceCharactersInRange:withRTFD:");
  late final _sel_RTFFromRange_1 = _registerName1("RTFFromRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_256(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_256(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_256 = __objc_msgSend_256Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_RTFDFromRange_1 = _registerName1("RTFDFromRange:");
  late final _sel_writeRTFDToFile_atomically_1 =
      _registerName1("writeRTFDToFile:atomically:");
  bool _objc_msgSend_257(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool flag,
  ) {
    return __objc_msgSend_257(
      obj,
      sel,
      path,
      flag,
    );
  }

  late final __objc_msgSend_257Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_257 = __objc_msgSend_257Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_readRTFDFromFile_1 = _registerName1("readRTFDFromFile:");
  bool _objc_msgSend_258(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_258(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_258Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_258 = __objc_msgSend_258Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEditable1 = _registerName1("isEditable");
  late final _sel_setEditable_1 = _registerName1("setEditable:");
  late final _sel_isSelectable1 = _registerName1("isSelectable");
  late final _sel_setSelectable_1 = _registerName1("setSelectable:");
  late final _sel_isRichText1 = _registerName1("isRichText");
  late final _sel_setRichText_1 = _registerName1("setRichText:");
  late final _sel_importsGraphics1 = _registerName1("importsGraphics");
  late final _sel_setImportsGraphics_1 = _registerName1("setImportsGraphics:");
  late final _sel_isFieldEditor1 = _registerName1("isFieldEditor");
  late final _sel_setFieldEditor_1 = _registerName1("setFieldEditor:");
  late final _sel_usesFontPanel1 = _registerName1("usesFontPanel");
  late final _sel_setUsesFontPanel_1 = _registerName1("setUsesFontPanel:");
  late final _sel_drawsBackground1 = _registerName1("drawsBackground");
  late final _sel_setDrawsBackground_1 = _registerName1("setDrawsBackground:");
  late final _class_NSColor1 = _getClass1("NSColor");
  late final _sel_backgroundColor1 = _registerName1("backgroundColor");
  ffi.Pointer<ObjCObject> _objc_msgSend_259(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_259(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_259Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_259 = __objc_msgSend_259Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setBackgroundColor_1 = _registerName1("setBackgroundColor:");
  void _objc_msgSend_260(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_260(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_260Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_260 = __objc_msgSend_260Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isRulerVisible1 = _registerName1("isRulerVisible");
  late final _sel_selectedRange1 = _registerName1("selectedRange");
  _NSRange _objc_msgSend_261(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_261(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_261Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_261 = __objc_msgSend_261Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_261_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_261_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_261_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<_NSRange>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_261_stret = __objc_msgSend_261_stretPtr.asFunction<
      void Function(ffi.Pointer<_NSRange>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_setSelectedRange_1 = _registerName1("setSelectedRange:");
  void _objc_msgSend_262(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange value,
  ) {
    return __objc_msgSend_262(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_262Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_262 = __objc_msgSend_262Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_scrollRangeToVisible_1 =
      _registerName1("scrollRangeToVisible:");
  void _objc_msgSend_263(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_263(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_263Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_263 = __objc_msgSend_263Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_264(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_264(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_264Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_264 = __objc_msgSend_264Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_265(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_265(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_265Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_265 = __objc_msgSend_265Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_textColor1 = _registerName1("textColor");
  late final _sel_setTextColor_1 = _registerName1("setTextColor:");
  late final _sel_alignment1 = _registerName1("alignment");
  int _objc_msgSend_266(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_266(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_266Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_266 = __objc_msgSend_266Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setAlignment_1 = _registerName1("setAlignment:");
  void _objc_msgSend_267(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_267(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_267Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_267 = __objc_msgSend_267Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_baseWritingDirection1 =
      _registerName1("baseWritingDirection");
  int _objc_msgSend_268(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_268(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_268Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_268 = __objc_msgSend_268Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setBaseWritingDirection_1 =
      _registerName1("setBaseWritingDirection:");
  void _objc_msgSend_269(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_269(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_269Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_269 = __objc_msgSend_269Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_setTextColor_range_1 = _registerName1("setTextColor:range:");
  void _objc_msgSend_270(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> color,
    _NSRange range,
  ) {
    return __objc_msgSend_270(
      obj,
      sel,
      color,
      range,
    );
  }

  late final __objc_msgSend_270Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_270 = __objc_msgSend_270Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, _NSRange)>();

  late final _sel_setFont_range_1 = _registerName1("setFont:range:");
  void _objc_msgSend_271(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> font,
    _NSRange range,
  ) {
    return __objc_msgSend_271(
      obj,
      sel,
      font,
      range,
    );
  }

  late final __objc_msgSend_271Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_271 = __objc_msgSend_271Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, _NSRange)>();

  late final _sel_maxSize1 = _registerName1("maxSize");
  late final _sel_setMaxSize_1 = _registerName1("setMaxSize:");
  void _objc_msgSend_272(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize value,
  ) {
    return __objc_msgSend_272(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_272Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGSize)>>('objc_msgSend');
  late final __objc_msgSend_272 = __objc_msgSend_272Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize)>();

  late final _sel_minSize1 = _registerName1("minSize");
  late final _sel_setMinSize_1 = _registerName1("setMinSize:");
  late final _sel_isHorizontallyResizable1 =
      _registerName1("isHorizontallyResizable");
  late final _sel_setHorizontallyResizable_1 =
      _registerName1("setHorizontallyResizable:");
  late final _sel_isVerticallyResizable1 =
      _registerName1("isVerticallyResizable");
  late final _sel_setVerticallyResizable_1 =
      _registerName1("setVerticallyResizable:");
  late final _sel_sizeToFit1 = _registerName1("sizeToFit");
  late final _sel_copy_1 = _registerName1("copy:");
  late final _sel_copyFont_1 = _registerName1("copyFont:");
  late final _sel_copyRuler_1 = _registerName1("copyRuler:");
  late final _sel_cut_1 = _registerName1("cut:");
  late final _sel_delete_1 = _registerName1("delete:");
  late final _sel_paste_1 = _registerName1("paste:");
  late final _sel_pasteFont_1 = _registerName1("pasteFont:");
  late final _sel_pasteRuler_1 = _registerName1("pasteRuler:");
  late final _sel_selectAll_1 = _registerName1("selectAll:");
  late final _sel_changeFont_1 = _registerName1("changeFont:");
  late final _sel_alignLeft_1 = _registerName1("alignLeft:");
  late final _sel_alignRight_1 = _registerName1("alignRight:");
  late final _sel_alignCenter_1 = _registerName1("alignCenter:");
  late final _sel_subscript_1 = _registerName1("subscript:");
  late final _sel_superscript_1 = _registerName1("superscript:");
  late final _sel_underline_1 = _registerName1("underline:");
  late final _sel_unscript_1 = _registerName1("unscript:");
  late final _sel_showGuessPanel_1 = _registerName1("showGuessPanel:");
  late final _sel_checkSpelling_1 = _registerName1("checkSpelling:");
  late final _sel_toggleRuler_1 = _registerName1("toggleRuler:");
  late final _sel_fieldEditor_forObject_1 =
      _registerName1("fieldEditor:forObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_273(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool createFlag,
    ffi.Pointer<ObjCObject> object,
  ) {
    return __objc_msgSend_273(
      obj,
      sel,
      createFlag,
      object,
    );
  }

  late final __objc_msgSend_273Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_273 = __objc_msgSend_273Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, bool, ffi.Pointer<ObjCObject>)>();

  late final _sel_endEditingFor_1 = _registerName1("endEditingFor:");
  late final _sel_constrainFrameRect_toScreen_1 =
      _registerName1("constrainFrameRect:toScreen:");
  CGRect _objc_msgSend_274(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect frameRect,
    ffi.Pointer<ObjCObject> screen,
  ) {
    return __objc_msgSend_274(
      obj,
      sel,
      frameRect,
      screen,
    );
  }

  late final __objc_msgSend_274Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_274 = __objc_msgSend_274Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_274_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect frameRect,
    ffi.Pointer<ObjCObject> screen,
  ) {
    return __objc_msgSend_274_stret(
      stret,
      obj,
      sel,
      frameRect,
      screen,
    );
  }

  late final __objc_msgSend_274_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGRect>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGRect,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_274_stret = __objc_msgSend_274_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGRect, ffi.Pointer<ObjCObject>)>();

  late final _sel_setFrame_display_1 = _registerName1("setFrame:display:");
  void _objc_msgSend_275(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect frameRect,
    bool flag,
  ) {
    return __objc_msgSend_275(
      obj,
      sel,
      frameRect,
      flag,
    );
  }

  late final __objc_msgSend_275Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_275 = __objc_msgSend_275Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect, bool)>();

  late final _sel_setContentSize_1 = _registerName1("setContentSize:");
  late final _sel_setFrameTopLeftPoint_1 =
      _registerName1("setFrameTopLeftPoint:");
  late final _sel_cascadeTopLeftFromPoint_1 =
      _registerName1("cascadeTopLeftFromPoint:");
  late final _sel_animationResizeTime_1 =
      _registerName1("animationResizeTime:");
  double _objc_msgSend_276(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect newFrame,
  ) {
    return __objc_msgSend_276(
      obj,
      sel,
      newFrame,
    );
  }

  late final __objc_msgSend_276Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_276 = __objc_msgSend_276Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  double _objc_msgSend_276_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect newFrame,
  ) {
    return __objc_msgSend_276_fpret(
      obj,
      sel,
      newFrame,
    );
  }

  late final __objc_msgSend_276_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend_fpret');
  late final __objc_msgSend_276_fpret = __objc_msgSend_276_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_setFrame_display_animate_1 =
      _registerName1("setFrame:display:animate:");
  void _objc_msgSend_277(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect frameRect,
    bool displayFlag,
    bool animateFlag,
  ) {
    return __objc_msgSend_277(
      obj,
      sel,
      frameRect,
      displayFlag,
      animateFlag,
    );
  }

  late final __objc_msgSend_277Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect, ffi.Bool, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_277 = __objc_msgSend_277Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect, bool, bool)>();

  late final _sel_resizeIncrements1 = _registerName1("resizeIncrements");
  late final _sel_setResizeIncrements_1 =
      _registerName1("setResizeIncrements:");
  late final _sel_aspectRatio1 = _registerName1("aspectRatio");
  late final _sel_setAspectRatio_1 = _registerName1("setAspectRatio:");
  late final _sel_contentResizeIncrements1 =
      _registerName1("contentResizeIncrements");
  late final _sel_setContentResizeIncrements_1 =
      _registerName1("setContentResizeIncrements:");
  late final _sel_contentAspectRatio1 = _registerName1("contentAspectRatio");
  late final _sel_setContentAspectRatio_1 =
      _registerName1("setContentAspectRatio:");
  late final _sel_viewsNeedDisplay1 = _registerName1("viewsNeedDisplay");
  late final _sel_setViewsNeedDisplay_1 =
      _registerName1("setViewsNeedDisplay:");
  late final _sel_setPreservesContentDuringLiveResize_1 =
      _registerName1("setPreservesContentDuringLiveResize:");
  late final _sel_makeFirstResponder_1 = _registerName1("makeFirstResponder:");
  bool _objc_msgSend_278(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> responder,
  ) {
    return __objc_msgSend_278(
      obj,
      sel,
      responder,
    );
  }

  late final __objc_msgSend_278Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_278 = __objc_msgSend_278Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_firstResponder1 = _registerName1("firstResponder");
  late final _sel_resizeFlags1 = _registerName1("resizeFlags");
  late final _sel_close1 = _registerName1("close");
  late final _sel_isReleasedWhenClosed1 =
      _registerName1("isReleasedWhenClosed");
  late final _sel_setReleasedWhenClosed_1 =
      _registerName1("setReleasedWhenClosed:");
  late final _sel_miniaturize_1 = _registerName1("miniaturize:");
  late final _sel_deminiaturize_1 = _registerName1("deminiaturize:");
  late final _sel_isZoomed1 = _registerName1("isZoomed");
  late final _sel_zoom_1 = _registerName1("zoom:");
  late final _sel_isMiniaturized1 = _registerName1("isMiniaturized");
  ffi.Pointer<ObjCObject> _objc_msgSend_279(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_279(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_279Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_279 = __objc_msgSend_279Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_280(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_280(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_280Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_280 = __objc_msgSend_280Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setContentBorderThickness_forEdge_1 =
      _registerName1("setContentBorderThickness:forEdge:");
  void _objc_msgSend_281(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double thickness,
    int edge,
  ) {
    return __objc_msgSend_281(
      obj,
      sel,
      thickness,
      edge,
    );
  }

  late final __objc_msgSend_281Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_281 = __objc_msgSend_281Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double, int)>();

  late final _sel_contentBorderThicknessForEdge_1 =
      _registerName1("contentBorderThicknessForEdge:");
  double _objc_msgSend_282(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int edge,
  ) {
    return __objc_msgSend_282(
      obj,
      sel,
      edge,
    );
  }

  late final __objc_msgSend_282Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_282 = __objc_msgSend_282Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  double _objc_msgSend_282_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int edge,
  ) {
    return __objc_msgSend_282_fpret(
      obj,
      sel,
      edge,
    );
  }

  late final __objc_msgSend_282_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend_fpret');
  late final __objc_msgSend_282_fpret = __objc_msgSend_282_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_setAutorecalculatesContentBorderThickness_forEdge_1 =
      _registerName1("setAutorecalculatesContentBorderThickness:forEdge:");
  void _objc_msgSend_283(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool flag,
    int edge,
  ) {
    return __objc_msgSend_283(
      obj,
      sel,
      flag,
      edge,
    );
  }

  late final __objc_msgSend_283Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_283 = __objc_msgSend_283Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool, int)>();

  late final _sel_autorecalculatesContentBorderThicknessForEdge_1 =
      _registerName1("autorecalculatesContentBorderThicknessForEdge:");
  bool _objc_msgSend_284(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int edge,
  ) {
    return __objc_msgSend_284(
      obj,
      sel,
      edge,
    );
  }

  late final __objc_msgSend_284Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_284 = __objc_msgSend_284Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_isMovable1 = _registerName1("isMovable");
  late final _sel_setMovable_1 = _registerName1("setMovable:");
  late final _sel_isMovableByWindowBackground1 =
      _registerName1("isMovableByWindowBackground");
  late final _sel_setMovableByWindowBackground_1 =
      _registerName1("setMovableByWindowBackground:");
  late final _sel_hidesOnDeactivate1 = _registerName1("hidesOnDeactivate");
  late final _sel_setHidesOnDeactivate_1 =
      _registerName1("setHidesOnDeactivate:");
  late final _sel_canHide1 = _registerName1("canHide");
  late final _sel_setCanHide_1 = _registerName1("setCanHide:");
  late final _sel_center1 = _registerName1("center");
  late final _sel_makeKeyAndOrderFront_1 =
      _registerName1("makeKeyAndOrderFront:");
  late final _sel_orderFront_1 = _registerName1("orderFront:");
  late final _sel_orderBack_1 = _registerName1("orderBack:");
  late final _sel_orderOut_1 = _registerName1("orderOut:");
  late final _sel_orderWindow_relativeTo_1 =
      _registerName1("orderWindow:relativeTo:");
  void _objc_msgSend_285(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int place,
    int otherWin,
  ) {
    return __objc_msgSend_285(
      obj,
      sel,
      place,
      otherWin,
    );
  }

  late final __objc_msgSend_285Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_285 = __objc_msgSend_285Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_orderFrontRegardless1 =
      _registerName1("orderFrontRegardless");
  late final _sel_miniwindowImage1 = _registerName1("miniwindowImage");
  late final _sel_setMiniwindowImage_1 = _registerName1("setMiniwindowImage:");
  late final _sel_miniwindowTitle1 = _registerName1("miniwindowTitle");
  late final _sel_setMiniwindowTitle_1 = _registerName1("setMiniwindowTitle:");
  late final _class_NSDockTile1 = _getClass1("NSDockTile");
  late final _sel_dockTile1 = _registerName1("dockTile");
  ffi.Pointer<ObjCObject> _objc_msgSend_286(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_286(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_286Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_286 = __objc_msgSend_286Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_isDocumentEdited1 = _registerName1("isDocumentEdited");
  late final _sel_setDocumentEdited_1 = _registerName1("setDocumentEdited:");
  late final _sel_isVisible1 = _registerName1("isVisible");
  late final _sel_isKeyWindow1 = _registerName1("isKeyWindow");
  late final _sel_isMainWindow1 = _registerName1("isMainWindow");
  late final _sel_canBecomeKeyWindow1 = _registerName1("canBecomeKeyWindow");
  late final _sel_canBecomeMainWindow1 = _registerName1("canBecomeMainWindow");
  late final _sel_makeKeyWindow1 = _registerName1("makeKeyWindow");
  late final _sel_makeMainWindow1 = _registerName1("makeMainWindow");
  late final _sel_becomeKeyWindow1 = _registerName1("becomeKeyWindow");
  late final _sel_resignKeyWindow1 = _registerName1("resignKeyWindow");
  late final _sel_becomeMainWindow1 = _registerName1("becomeMainWindow");
  late final _sel_resignMainWindow1 = _registerName1("resignMainWindow");
  late final _sel_worksWhenModal1 = _registerName1("worksWhenModal");
  late final _sel_preventsApplicationTerminationWhenModal1 =
      _registerName1("preventsApplicationTerminationWhenModal");
  late final _sel_setPreventsApplicationTerminationWhenModal_1 =
      _registerName1("setPreventsApplicationTerminationWhenModal:");
  late final _sel_convertRectToScreen_1 =
      _registerName1("convertRectToScreen:");
  late final _sel_convertRectFromScreen_1 =
      _registerName1("convertRectFromScreen:");
  late final _sel_convertPointToScreen_1 =
      _registerName1("convertPointToScreen:");
  late final _sel_convertPointFromScreen_1 =
      _registerName1("convertPointFromScreen:");
  late final _sel_backingScaleFactor1 = _registerName1("backingScaleFactor");
  late final _sel_performClose_1 = _registerName1("performClose:");
  late final _sel_performMiniaturize_1 = _registerName1("performMiniaturize:");
  late final _sel_performZoom_1 = _registerName1("performZoom:");
  late final _sel_dataWithEPSInsideRect_1 =
      _registerName1("dataWithEPSInsideRect:");
  ffi.Pointer<ObjCObject> _objc_msgSend_287(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_287(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_287Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGRect)>>('objc_msgSend');
  late final __objc_msgSend_287 = __objc_msgSend_287Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_dataWithPDFInsideRect_1 =
      _registerName1("dataWithPDFInsideRect:");
  late final _sel_print_1 = _registerName1("print:");
  late final _sel_allowsToolTipsWhenApplicationIsInactive1 =
      _registerName1("allowsToolTipsWhenApplicationIsInactive");
  late final _sel_setAllowsToolTipsWhenApplicationIsInactive_1 =
      _registerName1("setAllowsToolTipsWhenApplicationIsInactive:");
  late final _sel_backingType1 = _registerName1("backingType");
  int _objc_msgSend_288(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_288(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_288Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_288 = __objc_msgSend_288Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setBackingType_1 = _registerName1("setBackingType:");
  void _objc_msgSend_289(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_289(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_289Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_289 = __objc_msgSend_289Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_level1 = _registerName1("level");
  late final _sel_setLevel_1 = _registerName1("setLevel:");
  late final _sel_depthLimit1 = _registerName1("depthLimit");
  late final _sel_setDepthLimit_1 = _registerName1("setDepthLimit:");
  void _objc_msgSend_290(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_290(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_290Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_290 = __objc_msgSend_290Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_setDynamicDepthLimit_1 =
      _registerName1("setDynamicDepthLimit:");
  late final _sel_hasDynamicDepthLimit1 =
      _registerName1("hasDynamicDepthLimit");
  late final _sel_screen1 = _registerName1("screen");
  ffi.Pointer<ObjCObject> _objc_msgSend_291(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_291(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_291Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_291 = __objc_msgSend_291Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_deepestScreen1 = _registerName1("deepestScreen");
  late final _sel_hasShadow1 = _registerName1("hasShadow");
  late final _sel_setHasShadow_1 = _registerName1("setHasShadow:");
  late final _sel_invalidateShadow1 = _registerName1("invalidateShadow");
  late final _sel_setOpaque_1 = _registerName1("setOpaque:");
  late final _sel_sharingType1 = _registerName1("sharingType");
  int _objc_msgSend_292(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_292(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_292Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_292 = __objc_msgSend_292Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setSharingType_1 = _registerName1("setSharingType:");
  void _objc_msgSend_293(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_293(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_293Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_293 = __objc_msgSend_293Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_allowsConcurrentViewDrawing1 =
      _registerName1("allowsConcurrentViewDrawing");
  late final _sel_setAllowsConcurrentViewDrawing_1 =
      _registerName1("setAllowsConcurrentViewDrawing:");
  late final _sel_displaysWhenScreenProfileChanges1 =
      _registerName1("displaysWhenScreenProfileChanges");
  late final _sel_setDisplaysWhenScreenProfileChanges_1 =
      _registerName1("setDisplaysWhenScreenProfileChanges:");
  late final _sel_disableScreenUpdatesUntilFlush1 =
      _registerName1("disableScreenUpdatesUntilFlush");
  late final _sel_canBecomeVisibleWithoutLogin1 =
      _registerName1("canBecomeVisibleWithoutLogin");
  late final _sel_setCanBecomeVisibleWithoutLogin_1 =
      _registerName1("setCanBecomeVisibleWithoutLogin:");
  late final _sel_collectionBehavior1 = _registerName1("collectionBehavior");
  int _objc_msgSend_294(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_294(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_294Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_294 = __objc_msgSend_294Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setCollectionBehavior_1 =
      _registerName1("setCollectionBehavior:");
  void _objc_msgSend_295(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_295(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_295Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_295 = __objc_msgSend_295Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_animationBehavior1 = _registerName1("animationBehavior");
  int _objc_msgSend_296(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_296(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_296Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_296 = __objc_msgSend_296Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setAnimationBehavior_1 =
      _registerName1("setAnimationBehavior:");
  void _objc_msgSend_297(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_297(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_297Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_297 = __objc_msgSend_297Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_isOnActiveSpace1 = _registerName1("isOnActiveSpace");
  late final _sel_toggleFullScreen_1 = _registerName1("toggleFullScreen:");
  late final _sel_stringWithSavedFrame1 =
      _registerName1("stringWithSavedFrame");
  late final _sel_setFrameFromString_1 = _registerName1("setFrameFromString:");
  late final _sel_saveFrameUsingName_1 = _registerName1("saveFrameUsingName:");
  late final _sel_setFrameUsingName_force_1 =
      _registerName1("setFrameUsingName:force:");
  late final _sel_setFrameUsingName_1 = _registerName1("setFrameUsingName:");
  late final _sel_setFrameAutosaveName_1 =
      _registerName1("setFrameAutosaveName:");
  late final _sel_frameAutosaveName1 = _registerName1("frameAutosaveName");
  late final _sel_removeFrameUsingName_1 =
      _registerName1("removeFrameUsingName:");
  late final _sel_contentMinSize1 = _registerName1("contentMinSize");
  late final _sel_setContentMinSize_1 = _registerName1("setContentMinSize:");
  late final _sel_contentMaxSize1 = _registerName1("contentMaxSize");
  late final _sel_setContentMaxSize_1 = _registerName1("setContentMaxSize:");
  late final _sel_minFullScreenContentSize1 =
      _registerName1("minFullScreenContentSize");
  late final _sel_setMinFullScreenContentSize_1 =
      _registerName1("setMinFullScreenContentSize:");
  late final _sel_maxFullScreenContentSize1 =
      _registerName1("maxFullScreenContentSize");
  late final _sel_setMaxFullScreenContentSize_1 =
      _registerName1("setMaxFullScreenContentSize:");
  late final _sel_deviceDescription1 = _registerName1("deviceDescription");
  late final _class_NSWindowController1 = _getClass1("NSWindowController");
  late final _sel_windowController1 = _registerName1("windowController");
  ffi.Pointer<ObjCObject> _objc_msgSend_298(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_298(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_298Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_298 = __objc_msgSend_298Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setWindowController_1 =
      _registerName1("setWindowController:");
  void _objc_msgSend_299(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_299(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_299Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_299 = __objc_msgSend_299Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_beginSheet_completionHandler_1 =
      _registerName1("beginSheet:completionHandler:");
  void _objc_msgSend_300(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sheetWindow,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return __objc_msgSend_300(
      obj,
      sel,
      sheetWindow,
      handler,
    );
  }

  late final __objc_msgSend_300Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_300 = __objc_msgSend_300Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_beginCriticalSheet_completionHandler_1 =
      _registerName1("beginCriticalSheet:completionHandler:");
  late final _sel_endSheet_1 = _registerName1("endSheet:");
  void _objc_msgSend_301(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sheetWindow,
  ) {
    return __objc_msgSend_301(
      obj,
      sel,
      sheetWindow,
    );
  }

  late final __objc_msgSend_301Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_301 = __objc_msgSend_301Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_endSheet_returnCode_1 =
      _registerName1("endSheet:returnCode:");
  void _objc_msgSend_302(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sheetWindow,
    int returnCode,
  ) {
    return __objc_msgSend_302(
      obj,
      sel,
      sheetWindow,
      returnCode,
    );
  }

  late final __objc_msgSend_302Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_302 = __objc_msgSend_302Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_sheets1 = _registerName1("sheets");
  late final _sel_attachedSheet1 = _registerName1("attachedSheet");
  late final _sel_isSheet1 = _registerName1("isSheet");
  late final _sel_sheetParent1 = _registerName1("sheetParent");
  late final _class_NSButton1 = _getClass1("NSButton");
  late final _sel_standardWindowButton_forStyleMask_1 =
      _registerName1("standardWindowButton:forStyleMask:");
  ffi.Pointer<ObjCObject> _objc_msgSend_303(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int b,
    int styleMask,
  ) {
    return __objc_msgSend_303(
      obj,
      sel,
      b,
      styleMask,
    );
  }

  late final __objc_msgSend_303Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_303 = __objc_msgSend_303Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_standardWindowButton_1 =
      _registerName1("standardWindowButton:");
  ffi.Pointer<ObjCObject> _objc_msgSend_304(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int b,
  ) {
    return __objc_msgSend_304(
      obj,
      sel,
      b,
    );
  }

  late final __objc_msgSend_304Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_304 = __objc_msgSend_304Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_addChildWindow_ordered_1 =
      _registerName1("addChildWindow:ordered:");
  void _objc_msgSend_305(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> childWin,
    int place,
  ) {
    return __objc_msgSend_305(
      obj,
      sel,
      childWin,
      place,
    );
  }

  late final __objc_msgSend_305Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_305 = __objc_msgSend_305Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_removeChildWindow_1 = _registerName1("removeChildWindow:");
  late final _sel_childWindows1 = _registerName1("childWindows");
  late final _sel_parentWindow1 = _registerName1("parentWindow");
  late final _sel_setParentWindow_1 = _registerName1("setParentWindow:");
  void _objc_msgSend_306(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_306(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_306Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_306 = __objc_msgSend_306Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_appearanceSource1 = _registerName1("appearanceSource");
  ffi.Pointer<ObjCObject> _objc_msgSend_307(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_307(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_307Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_307 = __objc_msgSend_307Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setAppearanceSource_1 =
      _registerName1("setAppearanceSource:");
  void _objc_msgSend_308(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_308(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_308Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_308 = __objc_msgSend_308Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSColorSpace1 = _getClass1("NSColorSpace");
  late final _sel_colorSpace1 = _registerName1("colorSpace");
  ffi.Pointer<ObjCObject> _objc_msgSend_309(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_309(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_309Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_309 = __objc_msgSend_309Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setColorSpace_1 = _registerName1("setColorSpace:");
  void _objc_msgSend_310(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_310(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_310Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_310 = __objc_msgSend_310Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_canRepresentDisplayGamut_1 =
      _registerName1("canRepresentDisplayGamut:");
  bool _objc_msgSend_311(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int displayGamut,
  ) {
    return __objc_msgSend_311(
      obj,
      sel,
      displayGamut,
    );
  }

  late final __objc_msgSend_311Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_311 = __objc_msgSend_311Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_windowNumbersWithOptions_1 =
      _registerName1("windowNumbersWithOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_312(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
  ) {
    return __objc_msgSend_312(
      obj,
      sel,
      options,
    );
  }

  late final __objc_msgSend_312Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_312 = __objc_msgSend_312Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_windowNumberAtPoint_belowWindowWithWindowNumber_1 =
      _registerName1("windowNumberAtPoint:belowWindowWithWindowNumber:");
  int _objc_msgSend_313(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
    int windowNumber,
  ) {
    return __objc_msgSend_313(
      obj,
      sel,
      point,
      windowNumber,
    );
  }

  late final __objc_msgSend_313Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_313 = __objc_msgSend_313Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint, int)>();

  late final _sel_occlusionState1 = _registerName1("occlusionState");
  int _objc_msgSend_314(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_314(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_314Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_314 = __objc_msgSend_314Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_titlebarSeparatorStyle1 =
      _registerName1("titlebarSeparatorStyle");
  int _objc_msgSend_315(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_315(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_315Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_315 = __objc_msgSend_315Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTitlebarSeparatorStyle_1 =
      _registerName1("setTitlebarSeparatorStyle:");
  void _objc_msgSend_316(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_316(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_316Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_316 = __objc_msgSend_316Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_NSViewController1 = _getClass1("NSViewController");
  late final _sel_contentViewController1 =
      _registerName1("contentViewController");
  ffi.Pointer<ObjCObject> _objc_msgSend_317(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_317(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_317Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_317 = __objc_msgSend_317Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setContentViewController_1 =
      _registerName1("setContentViewController:");
  void _objc_msgSend_318(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_318(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_318Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_318 = __objc_msgSend_318Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_windowWithContentViewController_1 =
      _registerName1("windowWithContentViewController:");
  instancetype _objc_msgSend_319(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> contentViewController,
  ) {
    return __objc_msgSend_319(
      obj,
      sel,
      contentViewController,
    );
  }

  late final __objc_msgSend_319Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_319 = __objc_msgSend_319Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_performWindowDragWithEvent_1 =
      _registerName1("performWindowDragWithEvent:");
  late final _sel_initialFirstResponder1 =
      _registerName1("initialFirstResponder");
  late final _sel_setInitialFirstResponder_1 =
      _registerName1("setInitialFirstResponder:");
  late final _sel_selectNextKeyView_1 = _registerName1("selectNextKeyView:");
  late final _sel_selectPreviousKeyView_1 =
      _registerName1("selectPreviousKeyView:");
  late final _sel_selectKeyViewFollowingView_1 =
      _registerName1("selectKeyViewFollowingView:");
  late final _sel_selectKeyViewPrecedingView_1 =
      _registerName1("selectKeyViewPrecedingView:");
  late final _sel_keyViewSelectionDirection1 =
      _registerName1("keyViewSelectionDirection");
  int _objc_msgSend_320(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_320(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_320Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_320 = __objc_msgSend_320Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSButtonCell1 = _getClass1("NSButtonCell");
  late final _sel_defaultButtonCell1 = _registerName1("defaultButtonCell");
  ffi.Pointer<ObjCObject> _objc_msgSend_321(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_321(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_321Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_321 = __objc_msgSend_321Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setDefaultButtonCell_1 =
      _registerName1("setDefaultButtonCell:");
  void _objc_msgSend_322(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_322(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_322Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_322 = __objc_msgSend_322Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_disableKeyEquivalentForDefaultButtonCell1 =
      _registerName1("disableKeyEquivalentForDefaultButtonCell");
  late final _sel_enableKeyEquivalentForDefaultButtonCell1 =
      _registerName1("enableKeyEquivalentForDefaultButtonCell");
  late final _sel_autorecalculatesKeyViewLoop1 =
      _registerName1("autorecalculatesKeyViewLoop");
  late final _sel_setAutorecalculatesKeyViewLoop_1 =
      _registerName1("setAutorecalculatesKeyViewLoop:");
  late final _sel_recalculateKeyViewLoop1 =
      _registerName1("recalculateKeyViewLoop");
  late final _class_NSToolbar1 = _getClass1("NSToolbar");
  late final _sel_toolbar1 = _registerName1("toolbar");
  ffi.Pointer<ObjCObject> _objc_msgSend_323(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_323(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_323Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_323 = __objc_msgSend_323Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setToolbar_1 = _registerName1("setToolbar:");
  void _objc_msgSend_324(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_324(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_324Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_324 = __objc_msgSend_324Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_toggleToolbarShown_1 = _registerName1("toggleToolbarShown:");
  late final _sel_runToolbarCustomizationPalette_1 =
      _registerName1("runToolbarCustomizationPalette:");
  late final _sel_showsToolbarButton1 = _registerName1("showsToolbarButton");
  late final _sel_setShowsToolbarButton_1 =
      _registerName1("setShowsToolbarButton:");
  late final _sel_allowsAutomaticWindowTabbing1 =
      _registerName1("allowsAutomaticWindowTabbing");
  late final _sel_setAllowsAutomaticWindowTabbing_1 =
      _registerName1("setAllowsAutomaticWindowTabbing:");
  late final _sel_userTabbingPreference1 =
      _registerName1("userTabbingPreference");
  int _objc_msgSend_325(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_325(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_325Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_325 = __objc_msgSend_325Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_tabbingMode1 = _registerName1("tabbingMode");
  int _objc_msgSend_326(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_326(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_326Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_326 = __objc_msgSend_326Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTabbingMode_1 = _registerName1("setTabbingMode:");
  void _objc_msgSend_327(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_327(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_327Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_327 = __objc_msgSend_327Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_tabbingIdentifier1 = _registerName1("tabbingIdentifier");
  late final _sel_setTabbingIdentifier_1 =
      _registerName1("setTabbingIdentifier:");
  late final _sel_selectNextTab_1 = _registerName1("selectNextTab:");
  late final _sel_selectPreviousTab_1 = _registerName1("selectPreviousTab:");
  late final _sel_moveTabToNewWindow_1 = _registerName1("moveTabToNewWindow:");
  late final _sel_mergeAllWindows_1 = _registerName1("mergeAllWindows:");
  late final _sel_toggleTabBar_1 = _registerName1("toggleTabBar:");
  late final _sel_toggleTabOverview_1 = _registerName1("toggleTabOverview:");
  late final _sel_tabbedWindows1 = _registerName1("tabbedWindows");
  late final _sel_addTabbedWindow_ordered_1 =
      _registerName1("addTabbedWindow:ordered:");
  late final _class_NSWindowTab1 = _getClass1("NSWindowTab");
  late final _sel_tab1 = _registerName1("tab");
  ffi.Pointer<ObjCObject> _objc_msgSend_328(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_328(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_328Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_328 = __objc_msgSend_328Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSWindowTabGroup1 = _getClass1("NSWindowTabGroup");
  late final _sel_tabGroup1 = _registerName1("tabGroup");
  ffi.Pointer<ObjCObject> _objc_msgSend_329(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_329(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_329Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_329 = __objc_msgSend_329Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_transferWindowSharingToWindow_completionHandler_1 =
      _registerName1("transferWindowSharingToWindow:completionHandler:");
  void _objc_msgSend_330(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> window,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_330(
      obj,
      sel,
      window,
      completionHandler,
    );
  }

  late final __objc_msgSend_330Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_330 = __objc_msgSend_330Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_hasActiveWindowSharingSession1 =
      _registerName1("hasActiveWindowSharingSession");
  late final _sel_windowTitlebarLayoutDirection1 =
      _registerName1("windowTitlebarLayoutDirection");
  late final _sel_trackEventsMatchingMask_timeout_mode_handler_1 =
      _registerName1("trackEventsMatchingMask:timeout:mode:handler:");
  void _objc_msgSend_331(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int mask,
    double timeout,
    ffi.Pointer<ObjCObject> mode,
    ffi.Pointer<_ObjCBlock> trackingHandler,
  ) {
    return __objc_msgSend_331(
      obj,
      sel,
      mask,
      timeout,
      mode,
      trackingHandler,
    );
  }

  late final __objc_msgSend_331Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_331 = __objc_msgSend_331Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, double,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_nextEventMatchingMask_1 =
      _registerName1("nextEventMatchingMask:");
  ffi.Pointer<ObjCObject> _objc_msgSend_332(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int mask,
  ) {
    return __objc_msgSend_332(
      obj,
      sel,
      mask,
    );
  }

  late final __objc_msgSend_332Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_332 = __objc_msgSend_332Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_NSDate1 = _getClass1("NSDate");
  late final _sel_timeIntervalSinceReferenceDate1 =
      _registerName1("timeIntervalSinceReferenceDate");
  late final _sel_initWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("initWithTimeIntervalSinceReferenceDate:");
  instancetype _objc_msgSend_333(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double ti,
  ) {
    return __objc_msgSend_333(
      obj,
      sel,
      ti,
    );
  }

  late final __objc_msgSend_333Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_333 = __objc_msgSend_333Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_nextEventMatchingMask_untilDate_inMode_dequeue_1 =
      _registerName1("nextEventMatchingMask:untilDate:inMode:dequeue:");
  ffi.Pointer<ObjCObject> _objc_msgSend_334(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int mask,
    ffi.Pointer<ObjCObject> expiration,
    ffi.Pointer<ObjCObject> mode,
    bool deqFlag,
  ) {
    return __objc_msgSend_334(
      obj,
      sel,
      mask,
      expiration,
      mode,
      deqFlag,
    );
  }

  late final __objc_msgSend_334Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_334 = __objc_msgSend_334Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          bool)>();

  late final _sel_discardEventsMatchingMask_beforeEvent_1 =
      _registerName1("discardEventsMatchingMask:beforeEvent:");
  void _objc_msgSend_335(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int mask,
    ffi.Pointer<ObjCObject> lastEvent,
  ) {
    return __objc_msgSend_335(
      obj,
      sel,
      mask,
      lastEvent,
    );
  }

  late final __objc_msgSend_335Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_335 = __objc_msgSend_335Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_postEvent_atStart_1 = _registerName1("postEvent:atStart:");
  void _objc_msgSend_336(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> event,
    bool flag,
  ) {
    return __objc_msgSend_336(
      obj,
      sel,
      event,
      flag,
    );
  }

  late final __objc_msgSend_336Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_336 = __objc_msgSend_336Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_sendEvent_1 = _registerName1("sendEvent:");
  late final _sel_currentEvent1 = _registerName1("currentEvent");
  ffi.Pointer<ObjCObject> _objc_msgSend_337(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_337(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_337Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_337 = __objc_msgSend_337Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_acceptsMouseMovedEvents1 =
      _registerName1("acceptsMouseMovedEvents");
  late final _sel_setAcceptsMouseMovedEvents_1 =
      _registerName1("setAcceptsMouseMovedEvents:");
  late final _sel_ignoresMouseEvents1 = _registerName1("ignoresMouseEvents");
  late final _sel_setIgnoresMouseEvents_1 =
      _registerName1("setIgnoresMouseEvents:");
  late final _sel_mouseLocationOutsideOfEventStream1 =
      _registerName1("mouseLocationOutsideOfEventStream");
  late final _sel_disableCursorRects1 = _registerName1("disableCursorRects");
  late final _sel_enableCursorRects1 = _registerName1("enableCursorRects");
  late final _sel_discardCursorRects1 = _registerName1("discardCursorRects");
  late final _sel_areCursorRectsEnabled1 =
      _registerName1("areCursorRectsEnabled");
  late final _sel_invalidateCursorRectsForView_1 =
      _registerName1("invalidateCursorRectsForView:");
  late final _sel_resetCursorRects1 = _registerName1("resetCursorRects");
  late final _class_NSPasteboard1 = _getClass1("NSPasteboard");
  late final _sel_generalPasteboard1 = _registerName1("generalPasteboard");
  ffi.Pointer<ObjCObject> _objc_msgSend_338(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_338(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_338Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_338 = __objc_msgSend_338Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_pasteboardWithName_1 = _registerName1("pasteboardWithName:");
  ffi.Pointer<ObjCObject> _objc_msgSend_339(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
  ) {
    return __objc_msgSend_339(
      obj,
      sel,
      name,
    );
  }

  late final __objc_msgSend_339Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_339 = __objc_msgSend_339Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_pasteboardWithUniqueName1 =
      _registerName1("pasteboardWithUniqueName");
  late final _sel_name1 = _registerName1("name");
  late final _sel_changeCount1 = _registerName1("changeCount");
  late final _sel_releaseGlobally1 = _registerName1("releaseGlobally");
  late final _sel_prepareForNewContentsWithOptions_1 =
      _registerName1("prepareForNewContentsWithOptions:");
  int _objc_msgSend_340(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
  ) {
    return __objc_msgSend_340(
      obj,
      sel,
      options,
    );
  }

  late final __objc_msgSend_340Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_340 = __objc_msgSend_340Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_clearContents1 = _registerName1("clearContents");
  late final _sel_writeObjects_1 = _registerName1("writeObjects:");
  late final _class_NSArray1 = _getClass1("NSArray");
  late final _sel_count1 = _registerName1("count");
  late final _sel_objectAtIndex_1 = _registerName1("objectAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_341(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_341(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_341Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_341 = __objc_msgSend_341Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithObjects_count_1 =
      _registerName1("initWithObjects:count:");
  instancetype _objc_msgSend_342(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    int cnt,
  ) {
    return __objc_msgSend_342(
      obj,
      sel,
      objects,
      cnt,
    );
  }

  late final __objc_msgSend_342Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_342 = __objc_msgSend_342Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  late final _sel_readObjectsForClasses_options_1 =
      _registerName1("readObjectsForClasses:options:");
  ffi.Pointer<ObjCObject> _objc_msgSend_343(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> classArray,
    ffi.Pointer<ObjCObject> options,
  ) {
    return __objc_msgSend_343(
      obj,
      sel,
      classArray,
      options,
    );
  }

  late final __objc_msgSend_343Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_343 = __objc_msgSend_343Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pasteboardItems1 = _registerName1("pasteboardItems");
  ffi.Pointer<ObjCObject> _objc_msgSend_344(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_344(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_344Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_344 = __objc_msgSend_344Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSPasteboardItem1 = _getClass1("NSPasteboardItem");
  late final _sel_indexOfPasteboardItem_1 =
      _registerName1("indexOfPasteboardItem:");
  int _objc_msgSend_345(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> pasteboardItem,
  ) {
    return __objc_msgSend_345(
      obj,
      sel,
      pasteboardItem,
    );
  }

  late final __objc_msgSend_345Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_345 = __objc_msgSend_345Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_canReadItemWithDataConformingToTypes_1 =
      _registerName1("canReadItemWithDataConformingToTypes:");
  bool _objc_msgSend_346(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> types,
  ) {
    return __objc_msgSend_346(
      obj,
      sel,
      types,
    );
  }

  late final __objc_msgSend_346Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_346 = __objc_msgSend_346Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_canReadObjectForClasses_options_1 =
      _registerName1("canReadObjectForClasses:options:");
  bool _objc_msgSend_347(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> classArray,
    ffi.Pointer<ObjCObject> options,
  ) {
    return __objc_msgSend_347(
      obj,
      sel,
      classArray,
      options,
    );
  }

  late final __objc_msgSend_347Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_347 = __objc_msgSend_347Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_declareTypes_owner_1 = _registerName1("declareTypes:owner:");
  int _objc_msgSend_348(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> newTypes,
    ffi.Pointer<ObjCObject> newOwner,
  ) {
    return __objc_msgSend_348(
      obj,
      sel,
      newTypes,
      newOwner,
    );
  }

  late final __objc_msgSend_348Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_348 = __objc_msgSend_348Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_addTypes_owner_1 = _registerName1("addTypes:owner:");
  late final _sel_types1 = _registerName1("types");
  late final _sel_availableTypeFromArray_1 =
      _registerName1("availableTypeFromArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_349(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> types,
  ) {
    return __objc_msgSend_349(
      obj,
      sel,
      types,
    );
  }

  late final __objc_msgSend_349Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_349 = __objc_msgSend_349Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setData_forType_1 = _registerName1("setData:forType:");
  bool _objc_msgSend_350(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> dataType,
  ) {
    return __objc_msgSend_350(
      obj,
      sel,
      data,
      dataType,
    );
  }

  late final __objc_msgSend_350Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_350 = __objc_msgSend_350Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setPropertyList_forType_1 =
      _registerName1("setPropertyList:forType:");
  bool _objc_msgSend_351(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> plist,
    ffi.Pointer<ObjCObject> dataType,
  ) {
    return __objc_msgSend_351(
      obj,
      sel,
      plist,
      dataType,
    );
  }

  late final __objc_msgSend_351Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_351 = __objc_msgSend_351Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setString_forType_1 = _registerName1("setString:forType:");
  bool _objc_msgSend_352(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    ffi.Pointer<ObjCObject> dataType,
  ) {
    return __objc_msgSend_352(
      obj,
      sel,
      string,
      dataType,
    );
  }

  late final __objc_msgSend_352Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_352 = __objc_msgSend_352Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dataForType_1 = _registerName1("dataForType:");
  ffi.Pointer<ObjCObject> _objc_msgSend_353(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> dataType,
  ) {
    return __objc_msgSend_353(
      obj,
      sel,
      dataType,
    );
  }

  late final __objc_msgSend_353Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_353 = __objc_msgSend_353Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_propertyListForType_1 =
      _registerName1("propertyListForType:");
  late final _sel_stringForType_1 = _registerName1("stringForType:");
  ffi.Pointer<ObjCObject> _objc_msgSend_354(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> dataType,
  ) {
    return __objc_msgSend_354(
      obj,
      sel,
      dataType,
    );
  }

  late final __objc_msgSend_354Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_354 = __objc_msgSend_354Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dragImage_at_offset_event_pasteboard_source_slideBack_1 =
      _registerName1("dragImage:at:offset:event:pasteboard:source:slideBack:");
  void _objc_msgSend_355(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> image,
    CGPoint baseLocation,
    CGSize initialOffset,
    ffi.Pointer<ObjCObject> event,
    ffi.Pointer<ObjCObject> pboard,
    ffi.Pointer<ObjCObject> sourceObj,
    bool slideFlag,
  ) {
    return __objc_msgSend_355(
      obj,
      sel,
      image,
      baseLocation,
      initialOffset,
      event,
      pboard,
      sourceObj,
      slideFlag,
    );
  }

  late final __objc_msgSend_355Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              CGPoint,
              CGSize,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_355 = __objc_msgSend_355Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          CGPoint,
          CGSize,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          bool)>();

  late final _sel_registerForDraggedTypes_1 =
      _registerName1("registerForDraggedTypes:");
  void _objc_msgSend_356(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> newTypes,
  ) {
    return __objc_msgSend_356(
      obj,
      sel,
      newTypes,
    );
  }

  late final __objc_msgSend_356Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_356 = __objc_msgSend_356Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_unregisterDraggedTypes1 =
      _registerName1("unregisterDraggedTypes");
  late final _sel_initWithWindowRef_1 = _registerName1("initWithWindowRef:");
  ffi.Pointer<ObjCObject> _objc_msgSend_357(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> windowRef,
  ) {
    return __objc_msgSend_357(
      obj,
      sel,
      windowRef,
    );
  }

  late final __objc_msgSend_357Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_357 = __objc_msgSend_357Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>();

  late final _sel_windowRef1 = _registerName1("windowRef");
  late final _class_CADisplayLink1 = _getClass1("CADisplayLink");
  late final _sel_displayLinkWithTarget_selector_1 =
      _registerName1("displayLinkWithTarget:selector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_358(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCSel> selector,
  ) {
    return __objc_msgSend_358(
      obj,
      sel,
      target,
      selector,
    );
  }

  late final __objc_msgSend_358Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_358 = __objc_msgSend_358Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_cacheImageInRect_1 = _registerName1("cacheImageInRect:");
  late final _sel_restoreCachedImage1 = _registerName1("restoreCachedImage");
  late final _sel_discardCachedImage1 = _registerName1("discardCachedImage");
  late final _sel_menuChanged_1 = _registerName1("menuChanged:");
  void _objc_msgSend_359(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> menu,
  ) {
    return __objc_msgSend_359(
      obj,
      sel,
      menu,
    );
  }

  late final __objc_msgSend_359Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_359 = __objc_msgSend_359Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_gState1 = _registerName1("gState");
  late final _sel_convertBaseToScreen_1 =
      _registerName1("convertBaseToScreen:");
  late final _sel_convertScreenToBase_1 =
      _registerName1("convertScreenToBase:");
  late final _sel_userSpaceScaleFactor1 =
      _registerName1("userSpaceScaleFactor");
  late final _sel_useOptimizedDrawing_1 =
      _registerName1("useOptimizedDrawing:");
  late final _sel_canStoreColor1 = _registerName1("canStoreColor");
  late final _sel_disableFlushWindow1 = _registerName1("disableFlushWindow");
  late final _sel_enableFlushWindow1 = _registerName1("enableFlushWindow");
  late final _sel_isFlushWindowDisabled1 =
      _registerName1("isFlushWindowDisabled");
  late final _sel_flushWindow1 = _registerName1("flushWindow");
  late final _sel_flushWindowIfNeeded1 = _registerName1("flushWindowIfNeeded");
  late final _sel_isAutodisplay1 = _registerName1("isAutodisplay");
  late final _sel_setAutodisplay_1 = _registerName1("setAutodisplay:");
  late final _sel_graphicsContext1 = _registerName1("graphicsContext");
  late final _sel_isOneShot1 = _registerName1("isOneShot");
  late final _sel_setOneShot_1 = _registerName1("setOneShot:");
  late final _sel_preferredBackingLocation1 =
      _registerName1("preferredBackingLocation");
  int _objc_msgSend_360(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_360(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_360Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_360 = __objc_msgSend_360Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setPreferredBackingLocation_1 =
      _registerName1("setPreferredBackingLocation:");
  void _objc_msgSend_361(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_361(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_361Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_361 = __objc_msgSend_361Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_backingLocation1 = _registerName1("backingLocation");
  late final _sel_showsResizeIndicator1 =
      _registerName1("showsResizeIndicator");
  late final _sel_setShowsResizeIndicator_1 =
      _registerName1("setShowsResizeIndicator:");
  late final _class_NSApplication1 = _getClass1("NSApplication");
  late final _sel_sharedApplication1 = _registerName1("sharedApplication");
  ffi.Pointer<ObjCObject> _objc_msgSend_362(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_362(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_362Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_362 = __objc_msgSend_362Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_hide_1 = _registerName1("hide:");
  late final _sel_unhide_1 = _registerName1("unhide:");
  late final _sel_unhideWithoutActivation1 =
      _registerName1("unhideWithoutActivation");
  late final _sel_windowWithWindowNumber_1 =
      _registerName1("windowWithWindowNumber:");
  ffi.Pointer<ObjCObject> _objc_msgSend_363(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int windowNum,
  ) {
    return __objc_msgSend_363(
      obj,
      sel,
      windowNum,
    );
  }

  late final __objc_msgSend_363Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_363 = __objc_msgSend_363Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_mainWindow1 = _registerName1("mainWindow");
  late final _sel_keyWindow1 = _registerName1("keyWindow");
  late final _sel_isActive1 = _registerName1("isActive");
  late final _sel_isRunning1 = _registerName1("isRunning");
  late final _sel_deactivate1 = _registerName1("deactivate");
  late final _sel_activateIgnoringOtherApps_1 =
      _registerName1("activateIgnoringOtherApps:");
  late final _sel_activate1 = _registerName1("activate");
  late final _class_NSRunningApplication1 = _getClass1("NSRunningApplication");
  late final _sel_isTerminated1 = _registerName1("isTerminated");
  late final _sel_isFinishedLaunching1 = _registerName1("isFinishedLaunching");
  late final _sel_ownsMenuBar1 = _registerName1("ownsMenuBar");
  late final _sel_activationPolicy1 = _registerName1("activationPolicy");
  int _objc_msgSend_364(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_364(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_364Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_364 = __objc_msgSend_364Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_localizedName1 = _registerName1("localizedName");
  late final _sel_bundleIdentifier1 = _registerName1("bundleIdentifier");
  late final _sel_bundleURL1 = _registerName1("bundleURL");
  late final _sel_executableURL1 = _registerName1("executableURL");
  late final _sel_processIdentifier1 = _registerName1("processIdentifier");
  late final _sel_launchDate1 = _registerName1("launchDate");
  ffi.Pointer<ObjCObject> _objc_msgSend_365(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_365(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_365Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_365 = __objc_msgSend_365Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_icon1 = _registerName1("icon");
  late final _sel_executableArchitecture1 =
      _registerName1("executableArchitecture");
  late final _sel_hide1 = _registerName1("hide");
  late final _sel_unhide1 = _registerName1("unhide");
  late final _sel_activateFromApplication_options_1 =
      _registerName1("activateFromApplication:options:");
  bool _objc_msgSend_366(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> application,
    int options,
  ) {
    return __objc_msgSend_366(
      obj,
      sel,
      application,
      options,
    );
  }

  late final __objc_msgSend_366Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_366 = __objc_msgSend_366Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_activateWithOptions_1 =
      _registerName1("activateWithOptions:");
  bool _objc_msgSend_367(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
  ) {
    return __objc_msgSend_367(
      obj,
      sel,
      options,
    );
  }

  late final __objc_msgSend_367Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_367 = __objc_msgSend_367Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_terminate1 = _registerName1("terminate");
  late final _sel_forceTerminate1 = _registerName1("forceTerminate");
  late final _sel_runningApplicationsWithBundleIdentifier_1 =
      _registerName1("runningApplicationsWithBundleIdentifier:");
  ffi.Pointer<ObjCObject> _objc_msgSend_368(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bundleIdentifier,
  ) {
    return __objc_msgSend_368(
      obj,
      sel,
      bundleIdentifier,
    );
  }

  late final __objc_msgSend_368Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_368 = __objc_msgSend_368Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_runningApplicationWithProcessIdentifier_1 =
      _registerName1("runningApplicationWithProcessIdentifier:");
  instancetype _objc_msgSend_369(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int pid,
  ) {
    return __objc_msgSend_369(
      obj,
      sel,
      pid,
    );
  }

  late final __objc_msgSend_369Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_369 = __objc_msgSend_369Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_currentApplication1 = _registerName1("currentApplication");
  ffi.Pointer<ObjCObject> _objc_msgSend_370(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_370(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_370Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_370 = __objc_msgSend_370Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_terminateAutomaticallyTerminableApplications1 =
      _registerName1("terminateAutomaticallyTerminableApplications");
  late final _sel_yieldActivationToApplication_1 =
      _registerName1("yieldActivationToApplication:");
  void _objc_msgSend_371(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> application,
  ) {
    return __objc_msgSend_371(
      obj,
      sel,
      application,
    );
  }

  late final __objc_msgSend_371Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_371 = __objc_msgSend_371Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_yieldActivationToApplicationWithBundleIdentifier_1 =
      _registerName1("yieldActivationToApplicationWithBundleIdentifier:");
  late final _sel_hideOtherApplications_1 =
      _registerName1("hideOtherApplications:");
  late final _sel_unhideAllApplications_1 =
      _registerName1("unhideAllApplications:");
  late final _sel_finishLaunching1 = _registerName1("finishLaunching");
  late final _sel_run1 = _registerName1("run");
  late final _sel_runModalForWindow_1 = _registerName1("runModalForWindow:");
  int _objc_msgSend_372(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> window,
  ) {
    return __objc_msgSend_372(
      obj,
      sel,
      window,
    );
  }

  late final __objc_msgSend_372Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_372 = __objc_msgSend_372Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_stop_1 = _registerName1("stop:");
  late final _sel_stopModal1 = _registerName1("stopModal");
  late final _sel_stopModalWithCode_1 = _registerName1("stopModalWithCode:");
  late final _sel_abortModal1 = _registerName1("abortModal");
  late final _sel_modalWindow1 = _registerName1("modalWindow");
  late final _sel_beginModalSessionForWindow_1 =
      _registerName1("beginModalSessionForWindow:");
  ffi.Pointer<_NSModalSession> _objc_msgSend_373(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> window,
  ) {
    return __objc_msgSend_373(
      obj,
      sel,
      window,
    );
  }

  late final __objc_msgSend_373Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_NSModalSession> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_373 = __objc_msgSend_373Ptr.asFunction<
      ffi.Pointer<_NSModalSession> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_runModalSession_1 = _registerName1("runModalSession:");
  int _objc_msgSend_374(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSModalSession> session,
  ) {
    return __objc_msgSend_374(
      obj,
      sel,
      session,
    );
  }

  late final __objc_msgSend_374Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSModalSession>)>>('objc_msgSend');
  late final __objc_msgSend_374 = __objc_msgSend_374Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSModalSession>)>();

  late final _sel_endModalSession_1 = _registerName1("endModalSession:");
  void _objc_msgSend_375(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSModalSession> session,
  ) {
    return __objc_msgSend_375(
      obj,
      sel,
      session,
    );
  }

  late final __objc_msgSend_375Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSModalSession>)>>('objc_msgSend');
  late final __objc_msgSend_375 = __objc_msgSend_375Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSModalSession>)>();

  late final _sel_terminate_1 = _registerName1("terminate:");
  late final _sel_requestUserAttention_1 =
      _registerName1("requestUserAttention:");
  int _objc_msgSend_376(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int requestType,
  ) {
    return __objc_msgSend_376(
      obj,
      sel,
      requestType,
    );
  }

  late final __objc_msgSend_376Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_376 = __objc_msgSend_376Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_cancelUserAttentionRequest_1 =
      _registerName1("cancelUserAttentionRequest:");
  late final _sel_enumerateWindowsWithOptions_usingBlock_1 =
      _registerName1("enumerateWindowsWithOptions:usingBlock:");
  void _objc_msgSend_377(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_377(
      obj,
      sel,
      options,
      block,
    );
  }

  late final __objc_msgSend_377Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_377 = __objc_msgSend_377Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_preventWindowOrdering1 =
      _registerName1("preventWindowOrdering");
  late final _sel_windows1 = _registerName1("windows");
  ffi.Pointer<ObjCObject> _objc_msgSend_378(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_378(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_378Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_378 = __objc_msgSend_378Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setWindowsNeedUpdate_1 =
      _registerName1("setWindowsNeedUpdate:");
  late final _sel_updateWindows1 = _registerName1("updateWindows");
  late final _sel_mainMenu1 = _registerName1("mainMenu");
  late final _sel_setMainMenu_1 = _registerName1("setMainMenu:");
  late final _sel_helpMenu1 = _registerName1("helpMenu");
  late final _sel_setHelpMenu_1 = _registerName1("setHelpMenu:");
  late final _sel_applicationIconImage1 =
      _registerName1("applicationIconImage");
  late final _sel_setApplicationIconImage_1 =
      _registerName1("setApplicationIconImage:");
  late final _sel_setActivationPolicy_1 =
      _registerName1("setActivationPolicy:");
  bool _objc_msgSend_379(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int activationPolicy,
  ) {
    return __objc_msgSend_379(
      obj,
      sel,
      activationPolicy,
    );
  }

  late final __objc_msgSend_379Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_379 = __objc_msgSend_379Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_NSException1 = _getClass1("NSException");
  late final _class_NSDictionary1 = _getClass1("NSDictionary");
  late final _sel_objectForKey_1 = _registerName1("objectForKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_380(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aKey,
  ) {
    return __objc_msgSend_380(
      obj,
      sel,
      aKey,
    );
  }

  late final __objc_msgSend_380Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_380 = __objc_msgSend_380Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_keyEnumerator1 = _registerName1("keyEnumerator");
  late final _sel_initWithObjects_forKeys_count_1 =
      _registerName1("initWithObjects:forKeys:count:");
  instancetype _objc_msgSend_381(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_381(
      obj,
      sel,
      objects,
      keys,
      cnt,
    );
  }

  late final __objc_msgSend_381Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_381 = __objc_msgSend_381Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_exceptionWithName_reason_userInfo_1 =
      _registerName1("exceptionWithName:reason:userInfo:");
  ffi.Pointer<ObjCObject> _objc_msgSend_382(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> reason,
    ffi.Pointer<ObjCObject> userInfo,
  ) {
    return __objc_msgSend_382(
      obj,
      sel,
      name,
      reason,
      userInfo,
    );
  }

  late final __objc_msgSend_382Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_382 = __objc_msgSend_382Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithName_reason_userInfo_1 =
      _registerName1("initWithName:reason:userInfo:");
  instancetype _objc_msgSend_383(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aName,
    ffi.Pointer<ObjCObject> aReason,
    ffi.Pointer<ObjCObject> aUserInfo,
  ) {
    return __objc_msgSend_383(
      obj,
      sel,
      aName,
      aReason,
      aUserInfo,
    );
  }

  late final __objc_msgSend_383Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_383 = __objc_msgSend_383Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_reason1 = _registerName1("reason");
  ffi.Pointer<ObjCObject> _objc_msgSend_384(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_384(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_384Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_384 = __objc_msgSend_384Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_callStackReturnAddresses1 =
      _registerName1("callStackReturnAddresses");
  late final _sel_callStackSymbols1 = _registerName1("callStackSymbols");
  late final _sel_raise1 = _registerName1("raise");
  late final _sel_reportException_1 = _registerName1("reportException:");
  void _objc_msgSend_385(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> exception,
  ) {
    return __objc_msgSend_385(
      obj,
      sel,
      exception,
    );
  }

  late final __objc_msgSend_385Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_385 = __objc_msgSend_385Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_detachDrawingThread_toTarget_withObject_1 =
      _registerName1("detachDrawingThread:toTarget:withObject:");
  void _objc_msgSend_386(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> selector,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> argument,
  ) {
    return __objc_msgSend_386(
      obj,
      sel,
      selector,
      target,
      argument,
    );
  }

  late final __objc_msgSend_386Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_386 = __objc_msgSend_386Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_replyToApplicationShouldTerminate_1 =
      _registerName1("replyToApplicationShouldTerminate:");
  late final _sel_replyToOpenOrPrint_1 = _registerName1("replyToOpenOrPrint:");
  void _objc_msgSend_387(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int reply,
  ) {
    return __objc_msgSend_387(
      obj,
      sel,
      reply,
    );
  }

  late final __objc_msgSend_387Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_387 = __objc_msgSend_387Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_orderFrontCharacterPalette_1 =
      _registerName1("orderFrontCharacterPalette:");
  late final _sel_presentationOptions1 = _registerName1("presentationOptions");
  int _objc_msgSend_388(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_388(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_388Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_388 = __objc_msgSend_388Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setPresentationOptions_1 =
      _registerName1("setPresentationOptions:");
  void _objc_msgSend_389(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_389(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_389Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_389 = __objc_msgSend_389Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_currentSystemPresentationOptions1 =
      _registerName1("currentSystemPresentationOptions");
  int _objc_msgSend_390(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_390(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_390Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_390 = __objc_msgSend_390Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_isProtectedDataAvailable1 =
      _registerName1("isProtectedDataAvailable");
  late final _class_NSAppearance1 = _getClass1("NSAppearance");
  late final _sel_currentAppearance1 = _registerName1("currentAppearance");
  ffi.Pointer<ObjCObject> _objc_msgSend_391(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_391(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_391Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_391 = __objc_msgSend_391Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setCurrentAppearance_1 =
      _registerName1("setCurrentAppearance:");
  void _objc_msgSend_392(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_392(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_392Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_392 = __objc_msgSend_392Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_currentDrawingAppearance1 =
      _registerName1("currentDrawingAppearance");
  late final _sel_performAsCurrentDrawingAppearance_1 =
      _registerName1("performAsCurrentDrawingAppearance:");
  void _objc_msgSend_393(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_393(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_393Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_393 = __objc_msgSend_393Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_appearanceNamed_1 = _registerName1("appearanceNamed:");
  ffi.Pointer<ObjCObject> _objc_msgSend_394(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
  ) {
    return __objc_msgSend_394(
      obj,
      sel,
      name,
    );
  }

  late final __objc_msgSend_394Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_394 = __objc_msgSend_394Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_NSBundle1 = _getClass1("NSBundle");
  late final _sel_mainBundle1 = _registerName1("mainBundle");
  ffi.Pointer<ObjCObject> _objc_msgSend_395(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_395(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_395Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_395 = __objc_msgSend_395Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_bundleWithPath_1 = _registerName1("bundleWithPath:");
  late final _sel_initWithPath_1 = _registerName1("initWithPath:");
  late final _sel_bundleWithURL_1 = _registerName1("bundleWithURL:");
  instancetype _objc_msgSend_396(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_396(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_396Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_396 = __objc_msgSend_396Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithURL_1 = _registerName1("initWithURL:");
  late final _sel_bundleForClass_1 = _registerName1("bundleForClass:");
  ffi.Pointer<ObjCObject> _objc_msgSend_397(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return __objc_msgSend_397(
      obj,
      sel,
      aClass,
    );
  }

  late final __objc_msgSend_397Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_397 = __objc_msgSend_397Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_bundleWithIdentifier_1 =
      _registerName1("bundleWithIdentifier:");
  ffi.Pointer<ObjCObject> _objc_msgSend_398(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> identifier,
  ) {
    return __objc_msgSend_398(
      obj,
      sel,
      identifier,
    );
  }

  late final __objc_msgSend_398Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_398 = __objc_msgSend_398Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_allBundles1 = _registerName1("allBundles");
  late final _sel_allFrameworks1 = _registerName1("allFrameworks");
  late final _sel_isLoaded1 = _registerName1("isLoaded");
  late final _sel_unload1 = _registerName1("unload");
  late final _sel_preflightAndReturnError_1 =
      _registerName1("preflightAndReturnError:");
  bool _objc_msgSend_399(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_399(
      obj,
      sel,
      error,
    );
  }

  late final __objc_msgSend_399Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_399 = __objc_msgSend_399Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_loadAndReturnError_1 = _registerName1("loadAndReturnError:");
  ffi.Pointer<ObjCObject> _objc_msgSend_400(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_400(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_400 = __objc_msgSend_400Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_resourceURL1 = _registerName1("resourceURL");
  late final _sel_URLForAuxiliaryExecutable_1 =
      _registerName1("URLForAuxiliaryExecutable:");
  ffi.Pointer<ObjCObject> _objc_msgSend_401(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> executableName,
  ) {
    return __objc_msgSend_401(
      obj,
      sel,
      executableName,
    );
  }

  late final __objc_msgSend_401Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_401 = __objc_msgSend_401Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_privateFrameworksURL1 =
      _registerName1("privateFrameworksURL");
  late final _sel_sharedFrameworksURL1 = _registerName1("sharedFrameworksURL");
  late final _sel_sharedSupportURL1 = _registerName1("sharedSupportURL");
  late final _sel_builtInPlugInsURL1 = _registerName1("builtInPlugInsURL");
  late final _sel_appStoreReceiptURL1 = _registerName1("appStoreReceiptURL");
  late final _sel_bundlePath1 = _registerName1("bundlePath");
  late final _sel_resourcePath1 = _registerName1("resourcePath");
  late final _sel_executablePath1 = _registerName1("executablePath");
  late final _sel_pathForAuxiliaryExecutable_1 =
      _registerName1("pathForAuxiliaryExecutable:");
  late final _sel_privateFrameworksPath1 =
      _registerName1("privateFrameworksPath");
  late final _sel_sharedFrameworksPath1 =
      _registerName1("sharedFrameworksPath");
  late final _sel_sharedSupportPath1 = _registerName1("sharedSupportPath");
  late final _sel_builtInPlugInsPath1 = _registerName1("builtInPlugInsPath");
  late final _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_1 =
      _registerName1(
          "URLForResource:withExtension:subdirectory:inBundleWithURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_402(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> bundleURL,
  ) {
    return __objc_msgSend_402(
      obj,
      sel,
      name,
      ext,
      subpath,
      bundleURL,
    );
  }

  late final __objc_msgSend_402Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_402 = __objc_msgSend_402Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_1 =
      _registerName1(
          "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_403(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> bundleURL,
  ) {
    return __objc_msgSend_403(
      obj,
      sel,
      ext,
      subpath,
      bundleURL,
    );
  }

  late final __objc_msgSend_403Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_403 = __objc_msgSend_403Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLForResource_withExtension_1 =
      _registerName1("URLForResource:withExtension:");
  ffi.Pointer<ObjCObject> _objc_msgSend_404(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
  ) {
    return __objc_msgSend_404(
      obj,
      sel,
      name,
      ext,
    );
  }

  late final __objc_msgSend_404Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_404 = __objc_msgSend_404Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLForResource_withExtension_subdirectory_1 =
      _registerName1("URLForResource:withExtension:subdirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_405(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
  ) {
    return __objc_msgSend_405(
      obj,
      sel,
      name,
      ext,
      subpath,
    );
  }

  late final __objc_msgSend_405Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_405 = __objc_msgSend_405Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLForResource_withExtension_subdirectory_localization_1 =
      _registerName1("URLForResource:withExtension:subdirectory:localization:");
  ffi.Pointer<ObjCObject> _objc_msgSend_406(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> localizationName,
  ) {
    return __objc_msgSend_406(
      obj,
      sel,
      name,
      ext,
      subpath,
      localizationName,
    );
  }

  late final __objc_msgSend_406Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_406 = __objc_msgSend_406Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLsForResourcesWithExtension_subdirectory_1 =
      _registerName1("URLsForResourcesWithExtension:subdirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_407(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
  ) {
    return __objc_msgSend_407(
      obj,
      sel,
      ext,
      subpath,
    );
  }

  late final __objc_msgSend_407Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_407 = __objc_msgSend_407Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLsForResourcesWithExtension_subdirectory_localization_1 =
      _registerName1(
          "URLsForResourcesWithExtension:subdirectory:localization:");
  ffi.Pointer<ObjCObject> _objc_msgSend_408(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> localizationName,
  ) {
    return __objc_msgSend_408(
      obj,
      sel,
      ext,
      subpath,
      localizationName,
    );
  }

  late final __objc_msgSend_408Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_408 = __objc_msgSend_408Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pathForResource_ofType_inDirectory_1 =
      _registerName1("pathForResource:ofType:inDirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_409(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> bundlePath,
  ) {
    return __objc_msgSend_409(
      obj,
      sel,
      name,
      ext,
      bundlePath,
    );
  }

  late final __objc_msgSend_409Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_409 = __objc_msgSend_409Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pathsForResourcesOfType_inDirectory_1 =
      _registerName1("pathsForResourcesOfType:inDirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_410(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> bundlePath,
  ) {
    return __objc_msgSend_410(
      obj,
      sel,
      ext,
      bundlePath,
    );
  }

  late final __objc_msgSend_410Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_410 = __objc_msgSend_410Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pathForResource_ofType_1 =
      _registerName1("pathForResource:ofType:");
  ffi.Pointer<ObjCObject> _objc_msgSend_411(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
  ) {
    return __objc_msgSend_411(
      obj,
      sel,
      name,
      ext,
    );
  }

  late final __objc_msgSend_411Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_411 = __objc_msgSend_411Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pathForResource_ofType_inDirectory_forLocalization_1 =
      _registerName1("pathForResource:ofType:inDirectory:forLocalization:");
  ffi.Pointer<ObjCObject> _objc_msgSend_412(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> localizationName,
  ) {
    return __objc_msgSend_412(
      obj,
      sel,
      name,
      ext,
      subpath,
      localizationName,
    );
  }

  late final __objc_msgSend_412Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_412 = __objc_msgSend_412Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pathsForResourcesOfType_inDirectory_forLocalization_1 =
      _registerName1("pathsForResourcesOfType:inDirectory:forLocalization:");
  ffi.Pointer<ObjCObject> _objc_msgSend_413(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> localizationName,
  ) {
    return __objc_msgSend_413(
      obj,
      sel,
      ext,
      subpath,
      localizationName,
    );
  }

  late final __objc_msgSend_413Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_413 = __objc_msgSend_413Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_localizedStringForKey_value_table_1 =
      _registerName1("localizedStringForKey:value:table:");
  ffi.Pointer<ObjCObject> _objc_msgSend_414(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ObjCObject> value,
    ffi.Pointer<ObjCObject> tableName,
  ) {
    return __objc_msgSend_414(
      obj,
      sel,
      key,
      value,
      tableName,
    );
  }

  late final __objc_msgSend_414Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_414 = __objc_msgSend_414Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_localizedAttributedStringForKey_value_table_1 =
      _registerName1("localizedAttributedStringForKey:value:table:");
  ffi.Pointer<ObjCObject> _objc_msgSend_415(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ObjCObject> value,
    ffi.Pointer<ObjCObject> tableName,
  ) {
    return __objc_msgSend_415(
      obj,
      sel,
      key,
      value,
      tableName,
    );
  }

  late final __objc_msgSend_415Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_415 = __objc_msgSend_415Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_infoDictionary1 = _registerName1("infoDictionary");
  late final _sel_localizedInfoDictionary1 =
      _registerName1("localizedInfoDictionary");
  late final _sel_objectForInfoDictionaryKey_1 =
      _registerName1("objectForInfoDictionaryKey:");
  late final _sel_classNamed_1 = _registerName1("classNamed:");
  late final _sel_principalClass1 = _registerName1("principalClass");
  late final _sel_preferredLocalizations1 =
      _registerName1("preferredLocalizations");
  late final _sel_localizations1 = _registerName1("localizations");
  late final _sel_developmentLocalization1 =
      _registerName1("developmentLocalization");
  late final _sel_preferredLocalizationsFromArray_1 =
      _registerName1("preferredLocalizationsFromArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_416(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> localizationsArray,
  ) {
    return __objc_msgSend_416(
      obj,
      sel,
      localizationsArray,
    );
  }

  late final __objc_msgSend_416Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_416 = __objc_msgSend_416Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_preferredLocalizationsFromArray_forPreferences_1 =
      _registerName1("preferredLocalizationsFromArray:forPreferences:");
  ffi.Pointer<ObjCObject> _objc_msgSend_417(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> localizationsArray,
    ffi.Pointer<ObjCObject> preferencesArray,
  ) {
    return __objc_msgSend_417(
      obj,
      sel,
      localizationsArray,
      preferencesArray,
    );
  }

  late final __objc_msgSend_417Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_417 = __objc_msgSend_417Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_executableArchitectures1 =
      _registerName1("executableArchitectures");
  late final _sel_initWithAppearanceNamed_bundle_1 =
      _registerName1("initWithAppearanceNamed:bundle:");
  instancetype _objc_msgSend_418(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> bundle,
  ) {
    return __objc_msgSend_418(
      obj,
      sel,
      name,
      bundle,
    );
  }

  late final __objc_msgSend_418Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_418 = __objc_msgSend_418Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_bestMatchFromAppearancesWithNames_1 =
      _registerName1("bestMatchFromAppearancesWithNames:");
  late final _sel_appearance1 = _registerName1("appearance");
  ffi.Pointer<ObjCObject> _objc_msgSend_419(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_419(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_419Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_419 = __objc_msgSend_419Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setAppearance_1 = _registerName1("setAppearance:");
  void _objc_msgSend_420(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_420(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_420 = __objc_msgSend_420Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_effectiveAppearance1 = _registerName1("effectiveAppearance");
  late final _sel_sendAction_to_from_1 = _registerName1("sendAction:to:from:");
  bool _objc_msgSend_421(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> action,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> sender,
  ) {
    return __objc_msgSend_421(
      obj,
      sel,
      action,
      target,
      sender,
    );
  }

  late final __objc_msgSend_421Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_421 = __objc_msgSend_421Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_targetForAction_1 = _registerName1("targetForAction:");
  ffi.Pointer<ObjCObject> _objc_msgSend_422(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> action,
  ) {
    return __objc_msgSend_422(
      obj,
      sel,
      action,
    );
  }

  late final __objc_msgSend_422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_422 = __objc_msgSend_422Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_targetForAction_to_from_1 =
      _registerName1("targetForAction:to:from:");
  ffi.Pointer<ObjCObject> _objc_msgSend_423(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> action,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> sender,
  ) {
    return __objc_msgSend_423(
      obj,
      sel,
      action,
      target,
      sender,
    );
  }

  late final __objc_msgSend_423Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_423 = __objc_msgSend_423Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_windowsMenu1 = _registerName1("windowsMenu");
  late final _sel_setWindowsMenu_1 = _registerName1("setWindowsMenu:");
  late final _sel_arrangeInFront_1 = _registerName1("arrangeInFront:");
  late final _sel_removeWindowsItem_1 = _registerName1("removeWindowsItem:");
  late final _sel_addWindowsItem_title_filename_1 =
      _registerName1("addWindowsItem:title:filename:");
  void _objc_msgSend_424(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> win,
    ffi.Pointer<ObjCObject> string,
    bool isFilename,
  ) {
    return __objc_msgSend_424(
      obj,
      sel,
      win,
      string,
      isFilename,
    );
  }

  late final __objc_msgSend_424Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_424 = __objc_msgSend_424Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_changeWindowsItem_title_filename_1 =
      _registerName1("changeWindowsItem:title:filename:");
  late final _sel_updateWindowsItem_1 = _registerName1("updateWindowsItem:");
  late final _sel_miniaturizeAll_1 = _registerName1("miniaturizeAll:");
  late final _sel_isFullKeyboardAccessEnabled1 =
      _registerName1("isFullKeyboardAccessEnabled");
  late final _sel_servicesMenu1 = _registerName1("servicesMenu");
  late final _sel_setServicesMenu_1 = _registerName1("setServicesMenu:");
  late final _sel_registerServicesMenuSendTypes_returnTypes_1 =
      _registerName1("registerServicesMenuSendTypes:returnTypes:");
  void _objc_msgSend_425(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sendTypes,
    ffi.Pointer<ObjCObject> returnTypes,
  ) {
    return __objc_msgSend_425(
      obj,
      sel,
      sendTypes,
      returnTypes,
    );
  }

  late final __objc_msgSend_425Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_425 = __objc_msgSend_425Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_servicesProvider1 = _registerName1("servicesProvider");
  late final _sel_setServicesProvider_1 =
      _registerName1("setServicesProvider:");
  late final _sel_orderFrontStandardAboutPanel_1 =
      _registerName1("orderFrontStandardAboutPanel:");
  late final _sel_orderFrontStandardAboutPanelWithOptions_1 =
      _registerName1("orderFrontStandardAboutPanelWithOptions:");
  void _objc_msgSend_426(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> optionsDictionary,
  ) {
    return __objc_msgSend_426(
      obj,
      sel,
      optionsDictionary,
    );
  }

  late final __objc_msgSend_426Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_426 = __objc_msgSend_426Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_disableRelaunchOnLogin1 =
      _registerName1("disableRelaunchOnLogin");
  late final _sel_enableRelaunchOnLogin1 =
      _registerName1("enableRelaunchOnLogin");
  late final _sel_registerForRemoteNotifications1 =
      _registerName1("registerForRemoteNotifications");
  late final _sel_unregisterForRemoteNotifications1 =
      _registerName1("unregisterForRemoteNotifications");
  late final _sel_isRegisteredForRemoteNotifications1 =
      _registerName1("isRegisteredForRemoteNotifications");
  late final _sel_registerForRemoteNotificationTypes_1 =
      _registerName1("registerForRemoteNotificationTypes:");
  void _objc_msgSend_427(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int types,
  ) {
    return __objc_msgSend_427(
      obj,
      sel,
      types,
    );
  }

  late final __objc_msgSend_427Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_427 = __objc_msgSend_427Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_enabledRemoteNotificationTypes1 =
      _registerName1("enabledRemoteNotificationTypes");
  int _objc_msgSend_428(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_428(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_428Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_428 = __objc_msgSend_428Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_runModalForWindow_relativeToWindow_1 =
      _registerName1("runModalForWindow:relativeToWindow:");
  int _objc_msgSend_429(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> window,
    ffi.Pointer<ObjCObject> docWindow,
  ) {
    return __objc_msgSend_429(
      obj,
      sel,
      window,
      docWindow,
    );
  }

  late final __objc_msgSend_429Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_429 = __objc_msgSend_429Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_beginModalSessionForWindow_relativeToWindow_1 =
      _registerName1("beginModalSessionForWindow:relativeToWindow:");
  ffi.Pointer<_NSModalSession> _objc_msgSend_430(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> window,
    ffi.Pointer<ObjCObject> docWindow,
  ) {
    return __objc_msgSend_430(
      obj,
      sel,
      window,
      docWindow,
    );
  }

  late final __objc_msgSend_430Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_NSModalSession> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_430 = __objc_msgSend_430Ptr.asFunction<
      ffi.Pointer<_NSModalSession> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_application_printFiles_1 =
      _registerName1("application:printFiles:");
  void _objc_msgSend_431(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sender,
    ffi.Pointer<ObjCObject> filenames,
  ) {
    return __objc_msgSend_431(
      obj,
      sel,
      sender,
      filenames,
    );
  }

  late final __objc_msgSend_431Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_431 = __objc_msgSend_431Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo_1 =
      _registerName1(
          "beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:");
  void _objc_msgSend_432(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sheet,
    ffi.Pointer<ObjCObject> docWindow,
    ffi.Pointer<ObjCObject> modalDelegate,
    ffi.Pointer<ObjCSel> didEndSelector,
    ffi.Pointer<ffi.Void> contextInfo,
  ) {
    return __objc_msgSend_432(
      obj,
      sel,
      sheet,
      docWindow,
      modalDelegate,
      didEndSelector,
      contextInfo,
    );
  }

  late final __objc_msgSend_432Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_432 = __objc_msgSend_432Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_makeWindowsPerform_inOrder_1 =
      _registerName1("makeWindowsPerform:inOrder:");
  ffi.Pointer<ObjCObject> _objc_msgSend_433(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> selector,
    bool flag,
  ) {
    return __objc_msgSend_433(
      obj,
      sel,
      selector,
      flag,
    );
  }

  late final __objc_msgSend_433Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_433 = __objc_msgSend_433Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>, bool)>();

  /// Returns the class definition of a specified class.
  ///
  /// @param name The name of the class to look up.
  ///
  /// @return The Class object for the named class, or \c nil
  /// if the class is not registered with the Objective-C runtime.
  ///
  /// @note The implementation of \c objc_getClass is identical to the implementation
  /// of \c objc_lookUpClass.
  NSObject objc_getClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return NSObject._(
        _objc_getClass1(
          name,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getClass');
  late final _objc_getClass1 = _objc_getClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  /// Returns the metaclass definition of a specified class.
  ///
  /// @param name The name of the class to look up.
  ///
  /// @return The \c Class object for the metaclass of the named class, or \c nil if the class
  /// is not registered with the Objective-C runtime.
  ///
  /// @note If the definition for the named class is not registered, this function calls the class handler
  /// callback and then checks a second time to see if the class is registered. However, every class
  /// definition must have a valid metaclass definition, and so the metaclass definition is always returned,
  /// whether it’s valid or not.
  NSObject objc_getMetaClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return NSObject._(
        _objc_getMetaClass(
          name,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _objc_getMetaClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getMetaClass');
  late final _objc_getMetaClass = _objc_getMetaClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  /// Returns the class definition of a specified class.
  ///
  /// @param name The name of the class to look up.
  ///
  /// @return The Class object for the named class, or \c nil if the class
  /// is not registered with the Objective-C runtime.
  ///
  /// @note The implementation of \c objc_lookUpClass is identical to the implementation
  /// of \c objc_getClass.
  NSObject? objc_lookUpClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_lookUpClass(
              name,
            ).address ==
            0
        ? null
        : NSObject._(
            _objc_lookUpClass(
              name,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_lookUpClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_lookUpClass');
  late final _objc_lookUpClass = _objc_lookUpClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  /// Returns the class definition of a specified class.
  ///
  /// @param name The name of the class to look up.
  ///
  /// @return The Class object for the named class.
  ///
  /// @note This function is the same as \c objc_getClass, but kills the process if the class is not found.
  NSObject objc_getRequiredClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return NSObject._(
        _objc_getRequiredClass(
          name,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _objc_getRequiredClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getRequiredClass');
  late final _objc_getRequiredClass = _objc_getRequiredClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  /// Obtains the list of registered class definitions.
  ///
  /// @param buffer An array of \c Class values. On output, each \c Class value points to
  /// one class definition, up to either \e bufferCount or the total number of registered classes,
  /// whichever is less. You can pass \c NULL to obtain the total number of registered class
  /// definitions without actually retrieving any class definitions.
  /// @param bufferCount An integer value. Pass the number of pointers for which you have allocated space
  /// in \e buffer. On return, this function fills in only this number of elements. If this number is less
  /// than the number of registered classes, this function returns an arbitrary subset of the registered classes.
  ///
  /// @return An integer value indicating the total number of registered classes.
  ///
  /// @note The Objective-C runtime library automatically registers all the classes defined in your source code.
  /// You can create class definitions at runtime and register them with the \c objc_addClass function.
  ///
  /// @warning You cannot assume that class objects you get from this function are classes that inherit from \c NSObject,
  /// so you cannot safely call any methods on such classes without detecting that the method is implemented first.
  int objc_getClassList(
    ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
    int bufferCount,
  ) {
    return _objc_getClassList(
      buffer,
      bufferCount,
    );
  }

  late final _objc_getClassListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Int)>>('objc_getClassList');
  late final _objc_getClassList = _objc_getClassListPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  /// Creates and returns a list of pointers to all registered class definitions.
  ///
  /// @param outCount An integer pointer used to store the number of classes returned by
  /// this function in the list. It can be \c nil.
  ///
  /// @return A nil terminated array of classes. It must be freed with \c free().
  ///
  /// @see objc_getClassList
  ffi.Pointer<ffi.Pointer<ObjCObject>> objc_copyClassList(
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _objc_copyClassList(
      outCount,
    );
  }

  late final _objc_copyClassListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ObjCObject>> Function(
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_copyClassList');
  late final _objc_copyClassList = _objc_copyClassListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ObjCObject>> Function(
          ffi.Pointer<ffi.UnsignedInt>)>();

  void objc_enumerateClasses(
    ffi.Pointer<ffi.Void> image,
    ffi.Pointer<ffi.Char> namePrefix,
    Protocol? conformingTo,
    NSObject? subclassing,
    ObjCBlock_ffiVoid_ObjCObject_bool block,
  ) {
    return _objc_enumerateClasses(
      image,
      namePrefix,
      conformingTo?._id ?? ffi.nullptr,
      subclassing?._id ?? ffi.nullptr,
      block._id,
    );
  }

  late final _objc_enumerateClassesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_enumerateClasses');
  late final _objc_enumerateClasses = _objc_enumerateClassesPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  /// Used by CoreFoundation's toll-free bridging.
  /// Return the id of the named class.
  ///
  /// @return The id of the named class, or an uninitialized class
  /// structure that will be used for the class when and if it does
  /// get loaded.
  ///
  /// @warning Do not call this function yourself.
  NSObject objc_getFutureClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return NSObject._(
        _objc_getFutureClass(
          name,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _objc_getFutureClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getFutureClass');
  late final _objc_getFutureClass = _objc_getFutureClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  /// Creates an instance of a class at the specific location provided.
  ///
  /// @param cls The class that you wish to allocate an instance of.
  /// @param bytes The location at which to allocate an instance of \e cls.
  /// Must point to at least \c class_getInstanceSize(cls) bytes of well-aligned,
  /// zero-filled memory.
  ///
  /// @return \e bytes on success, \c nil otherwise. (For example, \e cls or \e bytes
  /// might be \c nil)
  ///
  /// @see class_createInstance
  NSObject? objc_constructInstance(
    NSObject? cls,
    ffi.Pointer<ffi.Void> bytes,
  ) {
    return _objc_constructInstance(
              cls?._id ?? ffi.nullptr,
              bytes,
            ).address ==
            0
        ? null
        : NSObject._(
            _objc_constructInstance(
              cls?._id ?? ffi.nullptr,
              bytes,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_constructInstancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Void>)>>('objc_constructInstance');
  late final _objc_constructInstance = _objc_constructInstancePtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>();

  /// Destroys an instance of a class without freeing memory and removes any
  /// associated references this instance might have had.
  ///
  /// @param obj The class instance to destroy.
  ///
  /// @return \e obj. Does nothing if \e obj is nil.
  ///
  /// @note CF and other clients do call this under GC.
  ffi.Pointer<ffi.Void> objc_destructInstance(
    NSObject? obj,
  ) {
    return _objc_destructInstance(
      obj?._id ?? ffi.nullptr,
    );
  }

  late final _objc_destructInstancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>)>>('objc_destructInstance');
  late final _objc_destructInstance = _objc_destructInstancePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ObjCObject>)>();

  /// Creates a new class and metaclass.
  ///
  /// @param superclass The class to use as the new class's superclass, or \c Nil to create a new root class.
  /// @param name The string to use as the new class's name. The string will be copied.
  /// @param extraBytes The number of bytes to allocate for indexed ivars at the end of
  /// the class and metaclass objects. This should usually be \c 0.
  ///
  /// @return The new class, or Nil if the class could not be created (for example, the desired name is already in use).
  ///
  /// @note You can get a pointer to the new metaclass by calling \c object_getClass(newClass).
  /// @note To create a new class, start by calling \c objc_allocateClassPair.
  /// Then set the class's attributes with functions like \c class_addMethod and \c class_addIvar.
  /// When you are done building the class, call \c objc_registerClassPair. The new class is now ready for use.
  /// @note Instance methods and instance variables should be added to the class itself.
  /// Class methods should be added to the metaclass.
  NSObject? objc_allocateClassPair(
    NSObject? superclass,
    ffi.Pointer<ffi.Char> name,
    int extraBytes,
  ) {
    return _objc_allocateClassPair(
              superclass?._id ?? ffi.nullptr,
              name,
              extraBytes,
            ).address ==
            0
        ? null
        : NSObject._(
            _objc_allocateClassPair(
              superclass?._id ?? ffi.nullptr,
              name,
              extraBytes,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_allocateClassPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('objc_allocateClassPair');
  late final _objc_allocateClassPair = _objc_allocateClassPairPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Char>, int)>();

  /// Registers a class that was allocated using \c objc_allocateClassPair.
  ///
  /// @param cls The class you want to register.
  void objc_registerClassPair(
    NSObject cls,
  ) {
    return _objc_registerClassPair(
      cls._id,
    );
  }

  late final _objc_registerClassPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_registerClassPair');
  late final _objc_registerClassPair = _objc_registerClassPairPtr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  /// Used by Foundation's Key-Value Observing.
  ///
  /// @warning Do not call this function yourself.
  NSObject objc_duplicateClass(
    NSObject original,
    ffi.Pointer<ffi.Char> name,
    int extraBytes,
  ) {
    return NSObject._(
        _objc_duplicateClass(
          original._id,
          name,
          extraBytes,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _objc_duplicateClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('objc_duplicateClass');
  late final _objc_duplicateClass = _objc_duplicateClassPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Char>, int)>();

  /// Destroy a class and its associated metaclass.
  ///
  /// @param cls The class to be destroyed. It must have been allocated with
  /// \c objc_allocateClassPair
  ///
  /// @warning Do not call if instances of this class or a subclass exist.
  void objc_disposeClassPair(
    NSObject cls,
  ) {
    return _objc_disposeClassPair(
      cls._id,
    );
  }

  late final _objc_disposeClassPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_disposeClassPair');
  late final _objc_disposeClassPair = _objc_disposeClassPairPtr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  /// Returns a specified protocol.
  ///
  /// @param name The name of a protocol.
  ///
  /// @return The protocol named \e name, or \c NULL if no protocol named \e name could be found.
  ///
  /// @note This function acquires the runtime lock.
  Protocol? objc_getProtocol(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_getProtocol(
              name,
            ).address ==
            0
        ? null
        : Protocol._(
            _objc_getProtocol(
              name,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_getProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getProtocol');
  late final _objc_getProtocol = _objc_getProtocolPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  /// Returns an array of all the protocols known to the runtime.
  ///
  /// @param outCount Upon return, contains the number of protocols in the returned array.
  ///
  /// @return A C array of all the protocols known to the runtime. The array contains \c *outCount
  /// pointers followed by a \c NULL terminator. You must free the list with \c free().
  ///
  /// @note This function acquires the runtime lock.
  ffi.Pointer<ffi.Pointer<ObjCObject>> objc_copyProtocolList(
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _objc_copyProtocolList(
      outCount,
    );
  }

  late final _objc_copyProtocolListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ObjCObject>> Function(
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_copyProtocolList');
  late final _objc_copyProtocolList = _objc_copyProtocolListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ObjCObject>> Function(
          ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns a Boolean value that indicates whether one protocol conforms to another protocol.
  ///
  /// @param proto A protocol.
  /// @param other A protocol.
  ///
  /// @return \c YES if \e proto conforms to \e other, otherwise \c NO.
  ///
  /// @note One protocol can incorporate other protocols using the same syntax
  /// that classes use to adopt a protocol:
  /// \code
  /// @protocol ProtocolName < protocol list >
  /// \endcode
  /// All the protocols listed between angle brackets are considered part of the ProtocolName protocol.
  bool protocol_conformsToProtocol(
    Protocol? proto,
    Protocol? other,
  ) {
    return _protocol_conformsToProtocol(
      proto?._id ?? ffi.nullptr,
      other?._id ?? ffi.nullptr,
    );
  }

  late final _protocol_conformsToProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('protocol_conformsToProtocol');
  late final _protocol_conformsToProtocol =
      _protocol_conformsToProtocolPtr.asFunction<
          bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  /// Returns a Boolean value that indicates whether two protocols are equal.
  ///
  /// @param proto A protocol.
  /// @param other A protocol.
  ///
  /// @return \c YES if \e proto is the same as \e other, otherwise \c NO.
  bool protocol_isEqual(
    Protocol? proto,
    Protocol? other,
  ) {
    return _protocol_isEqual(
      proto?._id ?? ffi.nullptr,
      other?._id ?? ffi.nullptr,
    );
  }

  late final _protocol_isEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('protocol_isEqual');
  late final _protocol_isEqual = _protocol_isEqualPtr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  /// Returns the name of a protocol.
  ///
  /// @param proto A protocol.
  ///
  /// @return The name of the protocol \e p as a C string.
  ffi.Pointer<ffi.Char> protocol_getName(
    Protocol proto,
  ) {
    return _protocol_getName(
      proto._id,
    );
  }

  late final _protocol_getNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>)>>('protocol_getName');
  late final _protocol_getName = _protocol_getNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>)>();

  /// Returns a method description structure for a specified method of a given protocol.
  ///
  /// @param proto A protocol.
  /// @param aSel A selector.
  /// @param isRequiredMethod A Boolean value that indicates whether aSel is a required method.
  /// @param isInstanceMethod A Boolean value that indicates whether aSel is an instance method.
  ///
  /// @return An \c objc_method_description structure that describes the method specified by \e aSel,
  /// \e isRequiredMethod, and \e isInstanceMethod for the protocol \e p.
  /// If the protocol does not contain the specified method, returns an \c objc_method_description structure
  /// with the value \c {NULL, \c NULL}.
  ///
  /// @note This function recursively searches any protocols that this protocol conforms to.
  objc_method_description protocol_getMethodDescription(
    Protocol proto,
    ffi.Pointer<ObjCSel> aSel,
    bool isRequiredMethod,
    bool isInstanceMethod,
  ) {
    return _protocol_getMethodDescription(
      proto._id,
      aSel,
      isRequiredMethod,
      isInstanceMethod,
    );
  }

  late final _protocol_getMethodDescriptionPtr = _lookup<
      ffi.NativeFunction<
          objc_method_description Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Bool,
              ffi.Bool)>>('protocol_getMethodDescription');
  late final _protocol_getMethodDescription =
      _protocol_getMethodDescriptionPtr.asFunction<
          objc_method_description Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool, bool)>();

  /// Returns an array of method descriptions of methods meeting a given specification for a given protocol.
  ///
  /// @param proto A protocol.
  /// @param isRequiredMethod A Boolean value that indicates whether returned methods should
  /// be required methods (pass YES to specify required methods).
  /// @param isInstanceMethod A Boolean value that indicates whether returned methods should
  /// be instance methods (pass YES to specify instance methods).
  /// @param outCount Upon return, contains the number of method description structures in the returned array.
  ///
  /// @return A C array of \c objc_method_description structures containing the names and types of \e p's methods
  /// specified by \e isRequiredMethod and \e isInstanceMethod. The array contains \c *outCount pointers followed
  /// by a \c NULL terminator. You must free the list with \c free().
  /// If the protocol declares no methods that meet the specification, \c NULL is returned and \c *outCount is 0.
  ///
  /// @note Methods in other protocols adopted by this protocol are not included.
  ffi.Pointer<objc_method_description> protocol_copyMethodDescriptionList(
    Protocol proto,
    bool isRequiredMethod,
    bool isInstanceMethod,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _protocol_copyMethodDescriptionList(
      proto._id,
      isRequiredMethod,
      isInstanceMethod,
      outCount,
    );
  }

  late final _protocol_copyMethodDescriptionListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<objc_method_description> Function(
                  ffi.Pointer<ObjCObject>,
                  ffi.Bool,
                  ffi.Bool,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'protocol_copyMethodDescriptionList');
  late final _protocol_copyMethodDescriptionList =
      _protocol_copyMethodDescriptionListPtr.asFunction<
          ffi.Pointer<objc_method_description> Function(ffi.Pointer<ObjCObject>,
              bool, bool, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns the specified property of a given protocol.
  ///
  /// @param proto A protocol.
  /// @param name The name of a property.
  /// @param isRequiredProperty \c YES searches for a required property, \c NO searches for an optional property.
  /// @param isInstanceProperty \c YES searches for an instance property, \c NO searches for a class property.
  ///
  /// @return The property specified by \e name, \e isRequiredProperty, and \e isInstanceProperty for \e proto,
  /// or \c NULL if none of \e proto's properties meets the specification.
  ffi.Pointer<objc_property> protocol_getProperty(
    Protocol proto,
    ffi.Pointer<ffi.Char> name,
    bool isRequiredProperty,
    bool isInstanceProperty,
  ) {
    return _protocol_getProperty(
      proto._id,
      name,
      isRequiredProperty,
      isInstanceProperty,
    );
  }

  late final _protocol_getPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc_property> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Bool)>>('protocol_getProperty');
  late final _protocol_getProperty = _protocol_getPropertyPtr.asFunction<
      ffi.Pointer<objc_property> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Char>, bool, bool)>();

  /// Returns an array of the required instance properties declared by a protocol.
  ///
  /// @note Identical to
  /// \code
  /// protocol_copyPropertyList2(proto, outCount, YES, YES);
  /// \endcode
  ffi.Pointer<ffi.Pointer<objc_property>> protocol_copyPropertyList(
    Protocol proto,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _protocol_copyPropertyList(
      proto._id,
      outCount,
    );
  }

  late final _protocol_copyPropertyListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<objc_property>> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.UnsignedInt>)>>('protocol_copyPropertyList');
  late final _protocol_copyPropertyList =
      _protocol_copyPropertyListPtr.asFunction<
          ffi.Pointer<ffi.Pointer<objc_property>> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns an array of properties declared by a protocol.
  ///
  /// @param proto A protocol.
  /// @param outCount Upon return, contains the number of elements in the returned array.
  /// @param isRequiredProperty \c YES returns required properties, \c NO returns optional properties.
  /// @param isInstanceProperty \c YES returns instance properties, \c NO returns class properties.
  ///
  /// @return A C array of pointers of type \c objc_property_t describing the properties declared by \e proto.
  /// Any properties declared by other protocols adopted by this protocol are not included. The array contains
  /// \c *outCount pointers followed by a \c NULL terminator. You must free the array with \c free().
  /// If the protocol declares no matching properties, \c NULL is returned and \c *outCount is \c 0.
  ffi.Pointer<ffi.Pointer<objc_property>> protocol_copyPropertyList2(
    Protocol proto,
    ffi.Pointer<ffi.UnsignedInt> outCount,
    bool isRequiredProperty,
    bool isInstanceProperty,
  ) {
    return _protocol_copyPropertyList2(
      proto._id,
      outCount,
      isRequiredProperty,
      isInstanceProperty,
    );
  }

  late final _protocol_copyPropertyList2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<objc_property>> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Bool,
              ffi.Bool)>>('protocol_copyPropertyList2');
  late final _protocol_copyPropertyList2 =
      _protocol_copyPropertyList2Ptr.asFunction<
          ffi.Pointer<ffi.Pointer<objc_property>> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.UnsignedInt>,
              bool,
              bool)>();

  /// Returns an array of the protocols adopted by a protocol.
  ///
  /// @param proto A protocol.
  /// @param outCount Upon return, contains the number of elements in the returned array.
  ///
  /// @return A C array of protocols adopted by \e proto. The array contains \e *outCount pointers
  /// followed by a \c NULL terminator. You must free the array with \c free().
  /// If the protocol adopts no other protocols, \c NULL is returned and \c *outCount is \c 0.
  ffi.Pointer<ffi.Pointer<ObjCObject>> protocol_copyProtocolList(
    Protocol proto,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _protocol_copyProtocolList(
      proto._id,
      outCount,
    );
  }

  late final _protocol_copyProtocolListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ObjCObject>> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.UnsignedInt>)>>('protocol_copyProtocolList');
  late final _protocol_copyProtocolList =
      _protocol_copyProtocolListPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ObjCObject>> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Creates a new protocol instance that cannot be used until registered with
  /// \c objc_registerProtocol()
  ///
  /// @param name The name of the protocol to create.
  ///
  /// @return The Protocol instance on success, \c nil if a protocol
  /// with the same name already exists.
  /// @note There is no dispose method for this.
  Protocol? objc_allocateProtocol(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_allocateProtocol(
              name,
            ).address ==
            0
        ? null
        : Protocol._(
            _objc_allocateProtocol(
              name,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_allocateProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_allocateProtocol');
  late final _objc_allocateProtocol = _objc_allocateProtocolPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  /// Registers a newly constructed protocol with the runtime. The protocol
  /// will be ready for use and is immutable after this.
  ///
  /// @param proto The protocol you want to register.
  void objc_registerProtocol(
    Protocol proto,
  ) {
    return _objc_registerProtocol(
      proto._id,
    );
  }

  late final _objc_registerProtocolPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_registerProtocol');
  late final _objc_registerProtocol = _objc_registerProtocolPtr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  /// Adds a method to a protocol. The protocol must be under construction.
  ///
  /// @param proto The protocol to add a method to.
  /// @param name The name of the method to add.
  /// @param types A C string that represents the method signature.
  /// @param isRequiredMethod YES if the method is not an optional method.
  /// @param isInstanceMethod YES if the method is an instance method.
  void protocol_addMethodDescription(
    Protocol proto,
    ffi.Pointer<ObjCSel> name,
    ffi.Pointer<ffi.Char> types,
    bool isRequiredMethod,
    bool isInstanceMethod,
  ) {
    return _protocol_addMethodDescription(
      proto._id,
      name,
      types,
      isRequiredMethod,
      isInstanceMethod,
    );
  }

  late final _protocol_addMethodDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Bool)>>('protocol_addMethodDescription');
  late final _protocol_addMethodDescription =
      _protocol_addMethodDescriptionPtr.asFunction<
          void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, bool, bool)>();

  /// Adds an incorporated protocol to another protocol. The protocol being
  /// added to must still be under construction, while the additional protocol
  /// must be already constructed.
  ///
  /// @param proto The protocol you want to add to, it must be under construction.
  /// @param addition The protocol you want to incorporate into \e proto, it must be registered.
  void protocol_addProtocol(
    Protocol proto,
    Protocol addition,
  ) {
    return _protocol_addProtocol(
      proto._id,
      addition._id,
    );
  }

  late final _protocol_addProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('protocol_addProtocol');
  late final _protocol_addProtocol = _protocol_addProtocolPtr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  /// Adds a property to a protocol. The protocol must be under construction.
  ///
  /// @param proto The protocol to add a property to.
  /// @param name The name of the property.
  /// @param attributes An array of property attributes.
  /// @param attributeCount The number of attributes in \e attributes.
  /// @param isRequiredProperty YES if the property (accessor methods) is not optional.
  /// @param isInstanceProperty YES if the property (accessor methods) are instance methods.
  /// This is the only case allowed fo a property, as a result, setting this to NO will
  /// not add the property to the protocol at all.
  void protocol_addProperty(
    Protocol proto,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<objc_property_attribute_t> attributes,
    int attributeCount,
    bool isRequiredProperty,
    bool isInstanceProperty,
  ) {
    return _protocol_addProperty(
      proto._id,
      name,
      attributes,
      attributeCount,
      isRequiredProperty,
      isInstanceProperty,
    );
  }

  late final _protocol_addPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<objc_property_attribute_t>,
              ffi.UnsignedInt,
              ffi.Bool,
              ffi.Bool)>>('protocol_addProperty');
  late final _protocol_addProperty = _protocol_addPropertyPtr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<objc_property_attribute_t>, int, bool, bool)>();

  /// Returns the names of all the loaded Objective-C frameworks and dynamic
  /// libraries.
  ///
  /// @param outCount The number of names returned.
  ///
  /// @return An array of C strings of names. Must be free()'d by caller.
  ffi.Pointer<ffi.Pointer<ffi.Char>> objc_copyImageNames(
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _objc_copyImageNames(
      outCount,
    );
  }

  late final _objc_copyImageNamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_copyImageNames');
  late final _objc_copyImageNames = _objc_copyImageNamesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns the names of all the classes within a library.
  ///
  /// @param image The library or framework you are inquiring about.
  /// @param outCount The number of class names returned.
  ///
  /// @return An array of C strings representing the class names.
  ffi.Pointer<ffi.Pointer<ffi.Char>> objc_copyClassNamesForImage(
    ffi.Pointer<ffi.Char> image,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _objc_copyClassNamesForImage(
      image,
      outCount,
    );
  }

  late final _objc_copyClassNamesForImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_copyClassNamesForImage');
  late final _objc_copyClassNamesForImage =
      _objc_copyClassNamesForImagePtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// This function is inserted by the compiler when a mutation
  /// is detected during a foreach iteration. It gets called
  /// when a mutation occurs, and the enumerationMutationHandler
  /// is enacted if it is set up. A fatal error occurs if a handler is not set up.
  ///
  /// @param obj The object being mutated.
  void objc_enumerationMutation(
    NSObject obj,
  ) {
    return _objc_enumerationMutation(
      obj._id,
    );
  }

  late final _objc_enumerationMutationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_enumerationMutation');
  late final _objc_enumerationMutation = _objc_enumerationMutationPtr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  /// Sets the current mutation handler.
  ///
  /// @param handler Function pointer to the new mutation handler.
  void objc_setEnumerationMutationHandler(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>
        handler,
  ) {
    return _objc_setEnumerationMutationHandler(
      handler,
    );
  }

  late final _objc_setEnumerationMutationHandlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ObjCObject>)>>)>>(
      'objc_setEnumerationMutationHandler');
  late final _objc_setEnumerationMutationHandler =
      _objc_setEnumerationMutationHandlerPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ObjCObject>)>>)>();

  /// Set the function to be called by objc_msgForward.
  ///
  /// @param fwd Function to be jumped to by objc_msgForward.
  /// @param fwd_stret Function to be jumped to by objc_msgForward_stret.
  ///
  /// @see message.h::_objc_msgForward
  void objc_setForwardHandler(
    ffi.Pointer<ffi.Void> fwd,
    ffi.Pointer<ffi.Void> fwd_stret,
  ) {
    return _objc_setForwardHandler(
      fwd,
      fwd_stret,
    );
  }

  late final _objc_setForwardHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('objc_setForwardHandler');
  late final _objc_setForwardHandler = _objc_setForwardHandlerPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// This loads the object referenced by a weak pointer and returns it, after
  /// retaining and autoreleasing the object to ensure that it stays alive
  /// long enough for the caller to use it. This function would be used
  /// anywhere a __weak variable is used in an expression.
  ///
  /// @param location The weak pointer address
  ///
  /// @return The object pointed to by \e location, or \c nil if \e *location is \c nil.
  NSObject? objc_loadWeak(
    ffi.Pointer<ffi.Pointer<ObjCObject>> location,
  ) {
    return _objc_loadWeak(
              location,
            ).address ==
            0
        ? null
        : NSObject._(
            _objc_loadWeak(
              location,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_loadWeakPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_loadWeak');
  late final _objc_loadWeak = _objc_loadWeakPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  /// This function stores a new value into a __weak variable. It would
  /// be used anywhere a __weak variable is the target of an assignment.
  ///
  /// @param location The address of the weak pointer itself
  /// @param obj The new object this weak ptr should now point to
  ///
  /// @return The value stored into \e location, i.e. \e obj
  NSObject? objc_storeWeak(
    ffi.Pointer<ffi.Pointer<ObjCObject>> location,
    NSObject? obj,
  ) {
    return _objc_storeWeak(
              location,
              obj?._id ?? ffi.nullptr,
            ).address ==
            0
        ? null
        : NSObject._(
            _objc_storeWeak(
              location,
              obj?._id ?? ffi.nullptr,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_storeWeakPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ObjCObject>)>>('objc_storeWeak');
  late final _objc_storeWeak = _objc_storeWeakPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ffi.Pointer<ObjCObject>>, ffi.Pointer<ObjCObject>)>();

  /// Sets an associated value for a given object using a given key and association policy.
  ///
  /// @param object The source object for the association.
  /// @param key The key for the association.
  /// @param value The value to associate with the key key for object. Pass nil to clear an existing association.
  /// @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”
  ///
  /// @see objc_setAssociatedObject
  /// @see objc_removeAssociatedObjects
  void objc_setAssociatedObject(
    NSObject object,
    ffi.Pointer<ffi.Void> key,
    NSObject? value,
    int policy,
  ) {
    return _objc_setAssociatedObject(
      object._id,
      key,
      value?._id ?? ffi.nullptr,
      policy,
    );
  }

  late final _objc_setAssociatedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_setAssociatedObject');
  late final _objc_setAssociatedObject =
      _objc_setAssociatedObjectPtr.asFunction<
          void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ObjCObject>, int)>();

  /// Returns the value associated with a given object for a given key.
  ///
  /// @param object The source object for the association.
  /// @param key The key for the association.
  ///
  /// @return The value associated with the key \e key for \e object.
  ///
  /// @see objc_setAssociatedObject
  NSObject? objc_getAssociatedObject(
    NSObject object,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _objc_getAssociatedObject(
              object._id,
              key,
            ).address ==
            0
        ? null
        : NSObject._(
            _objc_getAssociatedObject(
              object._id,
              key,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_getAssociatedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Void>)>>('objc_getAssociatedObject');
  late final _objc_getAssociatedObject =
      _objc_getAssociatedObjectPtr.asFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>();

  /// Removes all associations for a given object.
  ///
  /// @param object An object that maintains associated objects.
  ///
  /// @note The main purpose of this function is to make it easy to return an object
  /// to a "pristine state”. You should not use this function for general removal of
  /// associations from objects, since it also removes associations that other clients
  /// may have added to the object. Typically you should use \c objc_setAssociatedObject
  /// with a nil value to clear an association.
  ///
  /// @see objc_setAssociatedObject
  /// @see objc_getAssociatedObject
  void objc_removeAssociatedObjects(
    NSObject object,
  ) {
    return _objc_removeAssociatedObjects(
      object._id,
    );
  }

  late final _objc_removeAssociatedObjectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_removeAssociatedObjects');
  late final _objc_removeAssociatedObjects = _objc_removeAssociatedObjectsPtr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  /// Install a hook for class_getImageName().
  ///
  /// @param newValue The hook function to install.
  /// @param outOldValue The address of a function pointer variable. On return,
  /// the old hook function is stored in the variable.
  ///
  /// @note The store to *outOldValue is thread-safe: the variable will be
  /// updated before class_getImageName() calls your new hook to read it,
  /// even if your new hook is called from another thread before this
  /// setter completes.
  /// @note The first hook in the chain is the native implementation of
  /// class_getImageName(). Your hook should call the previous hook for
  /// classes that you do not recognize.
  ///
  /// @see class_getImageName
  /// @see objc_hook_getImageName
  void objc_setHook_getImageName(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
        newValue,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Bool Function(ffi.Pointer<ObjCObject>,
                        ffi.Pointer<ffi.Pointer<ffi.Char>>)>>>
        outOldValue,
  ) {
    return _objc_setHook_getImageName(
      newValue,
      outOldValue,
    );
  }

  late final _objc_setHook_getImageNamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Bool Function(ffi.Pointer<ObjCObject>,
                              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Bool Function(ffi.Pointer<ObjCObject>,
                                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>>)>>(
      'objc_setHook_getImageName');
  late final _objc_setHook_getImageName =
      _objc_setHook_getImageNamePtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Bool Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ffi.Pointer<ffi.Char>>)>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Bool Function(ffi.Pointer<ObjCObject>,
                              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>>)>();

  void objc_setHook_getClass(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Pointer<ObjCObject>>)>>
        newValue,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Bool Function(ffi.Pointer<ffi.Char>,
                        ffi.Pointer<ffi.Pointer<ObjCObject>>)>>>
        outOldValue,
  ) {
    return _objc_setHook_getClass(
      newValue,
      outOldValue,
    );
  }

  late final _objc_setHook_getClassPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Bool Function(ffi.Pointer<ffi.Char>,
                              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Bool Function(ffi.Pointer<ffi.Char>,
                                  ffi.Pointer<ffi.Pointer<ObjCObject>>)>>>)>>(
      'objc_setHook_getClass');
  late final _objc_setHook_getClass = _objc_setHook_getClassPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Pointer<ObjCObject>>)>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Bool Function(ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Pointer<ObjCObject>>)>>>)>();

  void objc_addLoadImageFunc(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mach_header>)>>
        func,
  ) {
    return _objc_addLoadImageFunc(
      func,
    );
  }

  late final _objc_addLoadImageFuncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<mach_header>)>>)>>(
      'objc_addLoadImageFunc');
  late final _objc_addLoadImageFunc = _objc_addLoadImageFuncPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi
              .NativeFunction<ffi.Void Function(ffi.Pointer<mach_header>)>>)>();

  void objc_setHook_lazyClassNamer(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>)>>
        newValue,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>)>>>
        oldOutValue,
  ) {
    return _objc_setHook_lazyClassNamer(
      newValue,
      oldOutValue,
    );
  }

  late final _objc_setHook_lazyClassNamerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi
                      .Pointer<
                          ffi.NativeFunction<
                              ffi.Pointer<ffi.Char> Function(
                                  ffi.Pointer<ObjCObject>)>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Pointer<ffi.Char> Function(
                                  ffi.Pointer<ObjCObject>)>>>)>>(
      'objc_setHook_lazyClassNamer');
  late final _objc_setHook_lazyClassNamer =
      _objc_setHook_lazyClassNamerPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>)>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Char> Function(
                              ffi.Pointer<ObjCObject>)>>>)>();
}

abstract class ASWebAuthenticationSessionErrorCode {
  static const int ASWebAuthenticationSessionErrorCodeCanceledLogin = 1;
  static const int
      ASWebAuthenticationSessionErrorCodePresentationContextNotProvided = 2;
  static const int
      ASWebAuthenticationSessionErrorCodePresentationContextInvalid = 3;
}

/// !
/// @class ASWebAuthenticationSession
/// An ASWebAuthenticationSession object can be used to authenticate a user with a web service, even if the web service is run
/// by a third party. ASWebAuthenticationSession puts the user in control of whether they want to use their existing logged-in
/// session from Safari. The app provides a URL that points to the authentication webpage. The page will be loaded in a secure
/// view controller. From the webpage, the user can authenticate herself and grant access to the app.
/// On completion, the service will send a callback URL with an authentication token, and this URL will be passed to the app by
/// ASWebAuthenticationSessionCompletionHandler.
///
/// The callback URL usually has a custom URL scheme. For the app to receive the callback URL, it needs to either register the
/// custom URL scheme in its Info.plist, or set the scheme to callbackURLScheme argument in the initializer.
///
/// If the user has already logged into the web service in Safari or other apps via ASWebAuthenticationSession, it is possible to
/// share the existing login information. An alert will be presented to get the user's consent for sharing their existing login
/// information. If the user cancels the alert, the session will be canceled, and the completion handler will be called with
/// the error code ASWebAuthenticationSessionErrorCodeCanceledLogin.
///
/// If the user taps Cancel when showing the login webpage for the web service, the session will be canceled, and the completion
/// handler will be called with the error code ASWebAuthenticationSessionErrorCodeCanceledLogin.
///
/// The app can cancel the session by calling -[ASWebAuthenticationSession cancel]. This will also dismiss the view controller that
/// is showing the web service's login page.
class _ObjCWrapper implements ffi.Finalizable {
  final ffi.Pointer<ObjCObject> _id;
  final AuthenticationServices _lib;
  bool _pendingRelease;

  _ObjCWrapper._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._objc_retain(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer2.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC object held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._objc_release(_id.cast());
      _lib._objc_releaseFinalizer2.detach(this);
    } else {
      throw StateError(
          'Released an ObjC object that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCWrapper && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<ObjCObject> get pointer => _id;

  ffi.Pointer<ObjCObject> _retainAndReturnId() {
    _lib._objc_retain(_id.cast());
    return _id;
  }
}

class ASWebAuthenticationSession extends NSObject {
  ASWebAuthenticationSession._(
      ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [ASWebAuthenticationSession] that points to the same underlying object as [other].
  static ASWebAuthenticationSession castFrom<T extends _ObjCWrapper>(T other) {
    return ASWebAuthenticationSession._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [ASWebAuthenticationSession] that wraps the given raw object pointer.
  static ASWebAuthenticationSession castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return ASWebAuthenticationSession._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [ASWebAuthenticationSession].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_ASWebAuthenticationSession1);
  }

  /// ! @abstract Returns an ASWebAuthenticationSession object.
  /// @param URL the initial URL pointing to the authentication webpage. Only supports URLs with http:// or https:// schemes.
  /// @param callbackURLScheme the custom URL scheme that the app expects in the callback URL.
  /// @param completionHandler the completion handler which is called when the session is completed successfully or canceled by user.
  ASWebAuthenticationSession initWithURL_callbackURLScheme_completionHandler_(
      NSURL URL,
      NSString? callbackURLScheme,
      DartASWebAuthenticationSessionCompletionHandler completionHandler) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_initWithURL_callbackURLScheme_completionHandler_1,
        URL._id,
        callbackURLScheme?._id ?? ffi.nullptr,
        completionHandler._id);
    return ASWebAuthenticationSession._(_ret, _lib,
        retain: true, release: true);
  }

  /// ! @abstract Provides context to target where in an application's UI the authorization view should be shown. A provider
  /// must be set prior to calling -start, otherwise the authorization view cannot be displayed. If deploying to iOS prior to
  /// 13.0, the desired window is inferred by the application's key window.
  NSObject? get presentationContextProvider {
    final _ret =
        _lib._objc_msgSend_16(_id, _lib._sel_presentationContextProvider1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// ! @abstract Provides context to target where in an application's UI the authorization view should be shown. A provider
  /// must be set prior to calling -start, otherwise the authorization view cannot be displayed. If deploying to iOS prior to
  /// 13.0, the desired window is inferred by the application's key window.
  set presentationContextProvider(NSObject? value) {
    return _lib._objc_msgSend_17(_id,
        _lib._sel_setPresentationContextProvider_1, value?._id ?? ffi.nullptr);
  }

  /// ! @abstract Indicates whether this session should ask the browser for an ephemeral session.
  /// @discussion Ephemeral web browser sessions do not not share cookies or other browsing data with a user's normal browser session.
  /// This value is NO by default. Setting this property after calling -[ASWebAuthenticationSession start] has no effect.
  bool get prefersEphemeralWebBrowserSession {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_prefersEphemeralWebBrowserSession1);
  }

  /// ! @abstract Indicates whether this session should ask the browser for an ephemeral session.
  /// @discussion Ephemeral web browser sessions do not not share cookies or other browsing data with a user's normal browser session.
  /// This value is NO by default. Setting this property after calling -[ASWebAuthenticationSession start] has no effect.
  set prefersEphemeralWebBrowserSession(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setPrefersEphemeralWebBrowserSession_1, value);
  }

  /// ! @abstract Returns whether the session can be successfully started. This property returns the same value as calling -start,
  /// but without the side effect of actually starting the session.
  bool get canStart {
    return _lib._objc_msgSend_12(_id, _lib._sel_canStart1);
  }

  /// ! @abstract Starts the ASWebAuthenticationSession instance after it is instantiated.
  /// @discussion start can only be called once for an ASWebAuthenticationSession instance. This also means calling start on a
  /// canceled session will fail.
  /// @result Returns YES if the session starts successfully.
  bool start() {
    return _lib._objc_msgSend_12(_id, _lib._sel_start1);
  }

  /// ! @abstract Cancel an ASWebAuthenticationSession. If the view controller is already presented to load the webpage for
  /// authentication, it will be dismissed. Calling cancel on an already canceled session will have no effect.
  void cancel() {
    _lib._objc_msgSend_1(_id, _lib._sel_cancel1);
  }

  static ASWebAuthenticationSession new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_ASWebAuthenticationSession1, _lib._sel_new1);
    return ASWebAuthenticationSession._(_ret, _lib,
        retain: false, release: true);
  }

  @override
  ASWebAuthenticationSession init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return ASWebAuthenticationSession._(_ret, _lib,
        retain: true, release: true);
  }

  static ASWebAuthenticationSession allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(_lib._class_ASWebAuthenticationSession1,
        _lib._sel_allocWithZone_1, zone);
    return ASWebAuthenticationSession._(_ret, _lib,
        retain: false, release: true);
  }

  static ASWebAuthenticationSession alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_ASWebAuthenticationSession1, _lib._sel_alloc1);
    return ASWebAuthenticationSession._(_ret, _lib,
        retain: false, release: true);
  }
}

final class ObjCSel extends ffi.Opaque {}

final class ObjCObject extends ffi.Opaque {}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSObject] that points to the same underlying object as [other].
  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSObject] that wraps the given raw object pointer.
  static NSObject castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSObject1);
  }

  static void load(AuthenticationServices _lib) {
    _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(AuthenticationServices _lib) {
    _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  void dealloc() {
    _lib._objc_msgSend_1(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    _lib._objc_msgSend_1(_id, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_copy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject copyWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_copyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject mutableCopyWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_mutableCopyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
      AuthenticationServices _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(_lib._class_NSObject1,
        _lib._sel_instancesRespondToSelector_1, aSelector);
  }

  static bool conformsToProtocol_(
      AuthenticationServices _lib, Protocol protocol) {
    return _lib._objc_msgSend_5(
        _lib._class_NSObject1, _lib._sel_conformsToProtocol_1, protocol._id);
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> methodForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_id, _lib._sel_methodForSelector_1, aSelector);
  }

  static ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      instanceMethodForSelector_(
          AuthenticationServices _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_lib._class_NSObject1,
        _lib._sel_instanceMethodForSelector_1, aSelector);
  }

  void doesNotRecognizeSelector_(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_7(_id, _lib._sel_doesNotRecognizeSelector_1, aSelector);
  }

  NSObject forwardingTargetForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_8(
        _id, _lib._sel_forwardingTargetForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation anInvocation) {
    _lib._objc_msgSend_24(_id, _lib._sel_forwardInvocation_1, anInvocation._id);
  }

  NSMethodSignature methodSignatureForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_25(
        _id, _lib._sel_methodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature instanceMethodSignatureForSelector_(
      AuthenticationServices _lib, ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_25(_lib._class_NSObject1,
        _lib._sel_instanceMethodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_12(_id, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass_(AuthenticationServices _lib, NSObject aClass) {
    return _lib._objc_msgSend_0(
        _lib._class_NSObject1, _lib._sel_isSubclassOfClass_1, aClass._id);
  }

  static bool resolveClassMethod_(
      AuthenticationServices _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveClassMethod_1, sel);
  }

  static bool resolveInstanceMethod_(
      AuthenticationServices _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveInstanceMethod_1, sel);
  }

  static int hash(AuthenticationServices _lib) {
    return _lib._objc_msgSend_10(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_superclass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject class1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString description(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_36(_lib._class_NSObject1, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString debugDescription(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_36(
        _lib._class_NSObject1, _lib._sel_debugDescription1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }
}

typedef instancetype = ffi.Pointer<ObjCObject>;
typedef Dartinstancetype = NSObject;

final class _NSZone extends ffi.Opaque {}

class Protocol extends _ObjCWrapper {
  Protocol._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [Protocol] that points to the same underlying object as [other].
  static Protocol castFrom<T extends _ObjCWrapper>(T other) {
    return Protocol._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [Protocol] that wraps the given raw object pointer.
  static Protocol castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return Protocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [Protocol].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_Protocol1);
  }
}

class NSInvocation extends NSObject {
  NSInvocation._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSInvocation] that points to the same underlying object as [other].
  static NSInvocation castFrom<T extends _ObjCWrapper>(T other) {
    return NSInvocation._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSInvocation] that wraps the given raw object pointer.
  static NSInvocation castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSInvocation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInvocation].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSInvocation1);
  }

  static NSInvocation invocationWithMethodSignature_(
      AuthenticationServices _lib, NSMethodSignature sig) {
    final _ret = _lib._objc_msgSend_14(_lib._class_NSInvocation1,
        _lib._sel_invocationWithMethodSignature_1, sig._id);
    return NSInvocation._(_ret, _lib, retain: true, release: true);
  }

  NSMethodSignature get methodSignature {
    final _ret = _lib._objc_msgSend_15(_id, _lib._sel_methodSignature1);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  void retainArguments() {
    _lib._objc_msgSend_1(_id, _lib._sel_retainArguments1);
  }

  bool get argumentsRetained {
    return _lib._objc_msgSend_12(_id, _lib._sel_argumentsRetained1);
  }

  NSObject? get target {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_target1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set target(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setTarget_1, value?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ObjCSel> get selector {
    return _lib._objc_msgSend_18(_id, _lib._sel_selector1);
  }

  set selector(ffi.Pointer<ObjCSel> value) {
    return _lib._objc_msgSend_19(_id, _lib._sel_setSelector_1, value);
  }

  void getReturnValue_(ffi.Pointer<ffi.Void> retLoc) {
    _lib._objc_msgSend_20(_id, _lib._sel_getReturnValue_1, retLoc);
  }

  void setReturnValue_(ffi.Pointer<ffi.Void> retLoc) {
    _lib._objc_msgSend_20(_id, _lib._sel_setReturnValue_1, retLoc);
  }

  void getArgument_atIndex_(ffi.Pointer<ffi.Void> argumentLocation, int idx) {
    _lib._objc_msgSend_21(
        _id, _lib._sel_getArgument_atIndex_1, argumentLocation, idx);
  }

  void setArgument_atIndex_(ffi.Pointer<ffi.Void> argumentLocation, int idx) {
    _lib._objc_msgSend_21(
        _id, _lib._sel_setArgument_atIndex_1, argumentLocation, idx);
  }

  void invoke() {
    _lib._objc_msgSend_1(_id, _lib._sel_invoke1);
  }

  void invokeWithTarget_(NSObject target) {
    _lib._objc_msgSend_22(_id, _lib._sel_invokeWithTarget_1, target._id);
  }

  void invokeUsingIMP_(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> imp) {
    _lib._objc_msgSend_23(_id, _lib._sel_invokeUsingIMP_1, imp);
  }

  @override
  NSInvocation init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSInvocation._(_ret, _lib, retain: true, release: true);
  }

  static NSInvocation new1(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSInvocation1, _lib._sel_new1);
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }

  static NSInvocation allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSInvocation1, _lib._sel_allocWithZone_1, zone);
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }

  static NSInvocation alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSInvocation1, _lib._sel_alloc1);
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }
}

class NSMethodSignature extends NSObject {
  NSMethodSignature._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMethodSignature] that points to the same underlying object as [other].
  static NSMethodSignature castFrom<T extends _ObjCWrapper>(T other) {
    return NSMethodSignature._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMethodSignature] that wraps the given raw object pointer.
  static NSMethodSignature castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMethodSignature._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMethodSignature].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMethodSignature1);
  }

  static NSMethodSignature? signatureWithObjCTypes_(
      AuthenticationServices _lib, ffi.Pointer<ffi.Char> types) {
    final _ret = _lib._objc_msgSend_9(_lib._class_NSMethodSignature1,
        _lib._sel_signatureWithObjCTypes_1, types);
    return _ret.address == 0
        ? null
        : NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  int get numberOfArguments {
    return _lib._objc_msgSend_10(_id, _lib._sel_numberOfArguments1);
  }

  ffi.Pointer<ffi.Char> getArgumentTypeAtIndex_(int idx) {
    return _lib._objc_msgSend_11(_id, _lib._sel_getArgumentTypeAtIndex_1, idx);
  }

  int get frameLength {
    return _lib._objc_msgSend_10(_id, _lib._sel_frameLength1);
  }

  bool isOneway() {
    return _lib._objc_msgSend_12(_id, _lib._sel_isOneway1);
  }

  ffi.Pointer<ffi.Char> get methodReturnType {
    return _lib._objc_msgSend_13(_id, _lib._sel_methodReturnType1);
  }

  int get methodReturnLength {
    return _lib._objc_msgSend_10(_id, _lib._sel_methodReturnLength1);
  }

  @override
  NSMethodSignature init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature new1(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMethodSignature1, _lib._sel_new1);
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }

  static NSMethodSignature allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMethodSignature1, _lib._sel_allocWithZone_1, zone);
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }

  static NSMethodSignature alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMethodSignature1, _lib._sel_alloc1);
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }
}

class NSString extends NSObject {
  NSString._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSString] that points to the same underlying object as [other].
  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSString] that wraps the given raw object pointer.
  static NSString castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSString1);
  }

  factory NSString(AuthenticationServices _lib, String str) {
    final cstr = str.toNativeUtf16();
    final nsstr = stringWithCharacters_length_(_lib, cstr.cast(), str.length);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() {
    final data =
        dataUsingEncoding_(0x94000100 /* NSUTF16LittleEndianStringEncoding */);
    return data!.bytes.cast<pkg_ffi.Utf16>().toDartString(length: length);
  }

  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  int characterAtIndex_(int index) {
    return _lib._objc_msgSend_26(_id, _lib._sel_characterAtIndex_1, index);
  }

  @override
  NSString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithCharacters_length_(AuthenticationServices _lib,
      ffi.Pointer<ffi.WChar> characters, int length) {
    final _ret = _lib._objc_msgSend_34(_lib._class_NSString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSData dataUsingEncoding_(int encoding) {
    final _ret =
        _lib._objc_msgSend_35(_id, _lib._sel_dataUsingEncoding_1, encoding);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSString new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_new1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSString1, _lib._sel_allocWithZone_1, zone);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_alloc1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }
}

extension StringToNSString on String {
  NSString toNSString(AuthenticationServices lib) => NSString(lib, this);
}

class NSCoder extends NSObject {
  NSCoder._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCoder] that points to the same underlying object as [other].
  static NSCoder castFrom<T extends _ObjCWrapper>(T other) {
    return NSCoder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCoder] that wraps the given raw object pointer.
  static NSCoder castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSCoder1);
  }

  void encodeValueOfObjCType_at_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> addr) {
    _lib._objc_msgSend_27(
        _id, _lib._sel_encodeValueOfObjCType_at_1, type, addr);
  }

  void encodeDataObject_(NSData data) {
    _lib._objc_msgSend_29(_id, _lib._sel_encodeDataObject_1, data._id);
  }

  NSData? decodeDataObject() {
    final _ret = _lib._objc_msgSend_30(_id, _lib._sel_decodeDataObject1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_size_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> data, int size) {
    _lib._objc_msgSend_31(
        _id, _lib._sel_decodeValueOfObjCType_at_size_1, type, data, size);
  }

  int versionForClassName_(NSString className) {
    return _lib._objc_msgSend_32(
        _id, _lib._sel_versionForClassName_1, className._id);
  }

  @override
  NSCoder init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSCoder._(_ret, _lib, retain: true, release: true);
  }

  static NSCoder new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_new1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSCoder1, _lib._sel_allocWithZone_1, zone);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_alloc1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }
}

class NSData extends NSObject {
  NSData._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSData] that points to the same underlying object as [other].
  static NSData castFrom<T extends _ObjCWrapper>(T other) {
    return NSData._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSData] that wraps the given raw object pointer.
  static NSData castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSData].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSData1);
  }

  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _lib._objc_msgSend_28(_id, _lib._sel_bytes1);
  }

  @override
  NSData init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_new1);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSData1, _lib._sel_allocWithZone_1, zone);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_alloc1);
    return NSData._(_ret, _lib, retain: false, release: true);
  }
}

class NSURL extends NSObject {
  NSURL._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURL] that points to the same underlying object as [other].
  static NSURL castFrom<T extends _ObjCWrapper>(T other) {
    return NSURL._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURL] that wraps the given raw object pointer.
  static NSURL castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURL._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURL].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURL1);
  }

  NSURL? initWithScheme_host_path_(
      NSString scheme, NSString? host, NSString path) {
    final _ret = _lib._objc_msgSend_37(
        _id,
        _lib._sel_initWithScheme_host_path_1,
        scheme._id,
        host?._id ?? ffi.nullptr,
        path._id);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_isDirectory_relativeToURL_(
      NSString path, bool isDir, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_38(
        _id,
        _lib._sel_initFileURLWithPath_isDirectory_relativeToURL_1,
        path._id,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_relativeToURL_(NSString path, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initFileURLWithPath_relativeToURL_1,
        path._id,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_isDirectory_(NSString path, bool isDir) {
    final _ret = _lib._objc_msgSend_40(
        _id, _lib._sel_initFileURLWithPath_isDirectory_1, path._id, isDir);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_(NSString path) {
    final _ret =
        _lib._objc_msgSend_41(_id, _lib._sel_initFileURLWithPath_1, path._id);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithPath_isDirectory_relativeToURL_(
      AuthenticationServices _lib, NSString path, bool isDir, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_42(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithPath_isDirectory_relativeToURL_1,
        path._id,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithPath_relativeToURL_(
      AuthenticationServices _lib, NSString path, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_43(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithPath_relativeToURL_1,
        path._id,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithPath_isDirectory_(
      AuthenticationServices _lib, NSString path, bool isDir) {
    final _ret = _lib._objc_msgSend_44(_lib._class_NSURL1,
        _lib._sel_fileURLWithPath_isDirectory_1, path._id, isDir);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithPath_(AuthenticationServices _lib, NSString path) {
    final _ret = _lib._objc_msgSend_45(
        _lib._class_NSURL1, _lib._sel_fileURLWithPath_1, path._id);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
      ffi.Pointer<ffi.Char> path, bool isDir, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_46(
        _id,
        _lib._sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1,
        path,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
      AuthenticationServices _lib,
      ffi.Pointer<ffi.Char> path,
      bool isDir,
      NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_47(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1,
        path,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? initWithString_(NSString URLString) {
    final _ret =
        _lib._objc_msgSend_48(_id, _lib._sel_initWithString_1, URLString._id);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? initWithString_relativeToURL_(NSString URLString, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_49(
        _id,
        _lib._sel_initWithString_relativeToURL_1,
        URLString._id,
        baseURL?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLWithString_(
      AuthenticationServices _lib, NSString URLString) {
    final _ret = _lib._objc_msgSend_48(
        _lib._class_NSURL1, _lib._sel_URLWithString_1, URLString._id);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLWithString_relativeToURL_(
      AuthenticationServices _lib, NSString URLString, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_49(
        _lib._class_NSURL1,
        _lib._sel_URLWithString_relativeToURL_1,
        URLString._id,
        baseURL?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? initWithString_encodingInvalidCharacters_(
      NSString URLString, bool encodingInvalidCharacters) {
    final _ret = _lib._objc_msgSend_50(
        _id,
        _lib._sel_initWithString_encodingInvalidCharacters_1,
        URLString._id,
        encodingInvalidCharacters);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLWithString_encodingInvalidCharacters_(
      AuthenticationServices _lib,
      NSString URLString,
      bool encodingInvalidCharacters) {
    final _ret = _lib._objc_msgSend_50(
        _lib._class_NSURL1,
        _lib._sel_URLWithString_encodingInvalidCharacters_1,
        URLString._id,
        encodingInvalidCharacters);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initWithDataRepresentation_relativeToURL_(NSData data, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_51(
        _id,
        _lib._sel_initWithDataRepresentation_relativeToURL_1,
        data._id,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL URLWithDataRepresentation_relativeToURL_(
      AuthenticationServices _lib, NSData data, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_52(
        _lib._class_NSURL1,
        _lib._sel_URLWithDataRepresentation_relativeToURL_1,
        data._id,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initAbsoluteURLWithDataRepresentation_relativeToURL_(
      NSData data, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_51(
        _id,
        _lib._sel_initAbsoluteURLWithDataRepresentation_relativeToURL_1,
        data._id,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL absoluteURLWithDataRepresentation_relativeToURL_(
      AuthenticationServices _lib, NSData data, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_52(
        _lib._class_NSURL1,
        _lib._sel_absoluteURLWithDataRepresentation_relativeToURL_1,
        data._id,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSData get dataRepresentation {
    final _ret = _lib._objc_msgSend_53(_id, _lib._sel_dataRepresentation1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSString? get absoluteString {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_absoluteString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get relativeString {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_relativeString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get baseURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_baseURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get absoluteURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_absoluteURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSString? get scheme {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_scheme1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get resourceSpecifier {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_resourceSpecifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get host {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_host1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSNumber? get port {
    final _ret = _lib._objc_msgSend_85(_id, _lib._sel_port1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSString? get user {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_user1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get password {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_password1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get path {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_path1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get fragment {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_fragment1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get parameterString {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_parameterString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get query {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_query1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get relativePath {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_relativePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get hasDirectoryPath {
    return _lib._objc_msgSend_12(_id, _lib._sel_hasDirectoryPath1);
  }

  bool getFileSystemRepresentation_maxLength_(
      ffi.Pointer<ffi.Char> buffer, int maxBufferLength) {
    return _lib._objc_msgSend_86(
        _id,
        _lib._sel_getFileSystemRepresentation_maxLength_1,
        buffer,
        maxBufferLength);
  }

  ffi.Pointer<ffi.Char> get fileSystemRepresentation {
    return _lib._objc_msgSend_13(_id, _lib._sel_fileSystemRepresentation1);
  }

  bool get fileURL {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFileURL1);
  }

  NSURL? get standardizedURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_standardizedURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool isFileReferenceURL() {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFileReferenceURL1);
  }

  NSURL? fileReferenceURL() {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_fileReferenceURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get filePathURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_filePathURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool getResourceValue_forKey_error_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> value,
      NSString key,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_90(
        _id, _lib._sel_getResourceValue_forKey_error_1, value, key._id, error);
  }

  NSObject? resourceValuesForKeys_error_(
      NSObject keys, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_91(
        _id, _lib._sel_resourceValuesForKeys_error_1, keys._id, error);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setResourceValue_forKey_error_(NSObject? value, NSString key,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_92(_id, _lib._sel_setResourceValue_forKey_error_1,
        value?._id ?? ffi.nullptr, key._id, error);
  }

  bool setResourceValues_error_(
      NSObject keyedValues, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_93(
        _id, _lib._sel_setResourceValues_error_1, keyedValues._id, error);
  }

  void removeCachedResourceValueForKey_(NSString key) {
    _lib._objc_msgSend_94(
        _id, _lib._sel_removeCachedResourceValueForKey_1, key._id);
  }

  void removeAllCachedResourceValues() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllCachedResourceValues1);
  }

  void setTemporaryResourceValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_95(_id, _lib._sel_setTemporaryResourceValue_forKey_1,
        value?._id ?? ffi.nullptr, key._id);
  }

  NSData?
      bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(
          int options,
          NSObject? keys,
          NSURL? relativeURL,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_96(
        _id,
        _lib._sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_1,
        options,
        keys?._id ?? ffi.nullptr,
        relativeURL?._id ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSURL?
      initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
          NSData bookmarkData,
          int options,
          NSURL? relativeURL,
          ffi.Pointer<ffi.Bool> isStale,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_97(
        _id,
        _lib._sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1,
        bookmarkData._id,
        options,
        relativeURL?._id ?? ffi.nullptr,
        isStale,
        error);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL?
      URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
          AuthenticationServices _lib,
          NSData bookmarkData,
          int options,
          NSURL? relativeURL,
          ffi.Pointer<ffi.Bool> isStale,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_97(
        _lib._class_NSURL1,
        _lib._sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1,
        bookmarkData._id,
        options,
        relativeURL?._id ?? ffi.nullptr,
        isStale,
        error);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? resourceValuesForKeys_fromBookmarkData_(
      AuthenticationServices _lib, NSObject keys, NSData bookmarkData) {
    final _ret = _lib._objc_msgSend_98(
        _lib._class_NSURL1,
        _lib._sel_resourceValuesForKeys_fromBookmarkData_1,
        keys._id,
        bookmarkData._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool writeBookmarkData_toURL_options_error_(
      AuthenticationServices _lib,
      NSData bookmarkData,
      NSURL bookmarkFileURL,
      int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_99(
        _lib._class_NSURL1,
        _lib._sel_writeBookmarkData_toURL_options_error_1,
        bookmarkData._id,
        bookmarkFileURL._id,
        options,
        error);
  }

  static NSData? bookmarkDataWithContentsOfURL_error_(
      AuthenticationServices _lib,
      NSURL bookmarkFileURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_100(
        _lib._class_NSURL1,
        _lib._sel_bookmarkDataWithContentsOfURL_error_1,
        bookmarkFileURL._id,
        error);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLByResolvingAliasFileAtURL_options_error_(
      AuthenticationServices _lib,
      NSURL url,
      int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_101(
        _lib._class_NSURL1,
        _lib._sel_URLByResolvingAliasFileAtURL_options_error_1,
        url._id,
        options,
        error);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool startAccessingSecurityScopedResource() {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_startAccessingSecurityScopedResource1);
  }

  void stopAccessingSecurityScopedResource() {
    _lib._objc_msgSend_1(_id, _lib._sel_stopAccessingSecurityScopedResource1);
  }

  @override
  NSURL init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURL1, _lib._sel_new1);
    return NSURL._(_ret, _lib, retain: false, release: true);
  }

  static NSURL allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSURL1, _lib._sel_allocWithZone_1, zone);
    return NSURL._(_ret, _lib, retain: false, release: true);
  }

  static NSURL alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURL1, _lib._sel_alloc1);
    return NSURL._(_ret, _lib, retain: false, release: true);
  }
}

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNumber] that points to the same underlying object as [other].
  static NSNumber castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumber._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNumber] that wraps the given raw object pointer.
  static NSNumber castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNumber._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumber].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSNumber1);
  }

  @override
  NSNumber? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_58(_id, _lib._sel_initWithChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_59(_id, _lib._sel_initWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_60(_id, _lib._sel_initWithShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_61(_id, _lib._sel_initWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_62(_id, _lib._sel_initWithInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_63(_id, _lib._sel_initWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_64(_id, _lib._sel_initWithLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_66(_id, _lib._sel_initWithLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_67(_id, _lib._sel_initWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_68(_id, _lib._sel_initWithFloat_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_69(_id, _lib._sel_initWithDouble_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_70(_id, _lib._sel_initWithBool_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInteger_(int value) {
    final _ret = _lib._objc_msgSend_64(_id, _lib._sel_initWithInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInteger_(int value) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  int get charValue {
    return _lib._objc_msgSend_71(_id, _lib._sel_charValue1);
  }

  int get unsignedCharValue {
    return _lib._objc_msgSend_72(_id, _lib._sel_unsignedCharValue1);
  }

  int get shortValue {
    return _lib._objc_msgSend_73(_id, _lib._sel_shortValue1);
  }

  int get unsignedShortValue {
    return _lib._objc_msgSend_74(_id, _lib._sel_unsignedShortValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_75(_id, _lib._sel_intValue1);
  }

  int get unsignedIntValue {
    return _lib._objc_msgSend_76(_id, _lib._sel_unsignedIntValue1);
  }

  int get longValue {
    return _lib._objc_msgSend_77(_id, _lib._sel_longValue1);
  }

  int get unsignedLongValue {
    return _lib._objc_msgSend_10(_id, _lib._sel_unsignedLongValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_78(_id, _lib._sel_longLongValue1);
  }

  int get unsignedLongLongValue {
    return _lib._objc_msgSend_79(_id, _lib._sel_unsignedLongLongValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_80_fpret(_id, _lib._sel_floatValue1)
        : _lib._objc_msgSend_80(_id, _lib._sel_floatValue1);
  }

  double get doubleValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_doubleValue1)
        : _lib._objc_msgSend_81(_id, _lib._sel_doubleValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_12(_id, _lib._sel_boolValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_77(_id, _lib._sel_integerValue1);
  }

  int get unsignedIntegerValue {
    return _lib._objc_msgSend_10(_id, _lib._sel_unsignedIntegerValue1);
  }

  NSString get stringValue {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_stringValue1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSNumber otherNumber) {
    return _lib._objc_msgSend_82(_id, _lib._sel_compare_1, otherNumber._id);
  }

  bool isEqualToNumber_(NSNumber number) {
    return _lib._objc_msgSend_83(_id, _lib._sel_isEqualToNumber_1, number._id);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_84(
        _id, _lib._sel_descriptionWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNumber initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_57(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNumber init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_new1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSNumber1, _lib._sel_allocWithZone_1, zone);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_alloc1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }
}

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSValue] that points to the same underlying object as [other].
  static NSValue castFrom<T extends _ObjCWrapper>(T other) {
    return NSValue._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSValue] that wraps the given raw object pointer.
  static NSValue castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSValue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSValue].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSValue1);
  }

  void getValue_size_(ffi.Pointer<ffi.Void> value, int size) {
    _lib._objc_msgSend_56(_id, _lib._sel_getValue_size_1, value, size);
  }

  ffi.Pointer<ffi.Char> get objCType {
    return _lib._objc_msgSend_13(_id, _lib._sel_objCType1);
  }

  NSValue initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_57(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSValue? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSValue init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_new1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSValue1, _lib._sel_allocWithZone_1, zone);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_alloc1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

class NSError extends NSObject {
  NSError._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSError] that points to the same underlying object as [other].
  static NSError castFrom<T extends _ObjCWrapper>(T other) {
    return NSError._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSError] that wraps the given raw object pointer.
  static NSError castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSError._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSError].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSError1);
  }

  NSError initWithDomain_code_userInfo_(
      NSString domain, int code, NSObject? dict) {
    final _ret = _lib._objc_msgSend_87(
        _id,
        _lib._sel_initWithDomain_code_userInfo_1,
        domain._id,
        code,
        dict?._id ?? ffi.nullptr);
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  static NSError errorWithDomain_code_userInfo_(
      AuthenticationServices _lib, NSString domain, int code, NSObject? dict) {
    final _ret = _lib._objc_msgSend_87(
        _lib._class_NSError1,
        _lib._sel_errorWithDomain_code_userInfo_1,
        domain._id,
        code,
        dict?._id ?? ffi.nullptr);
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  NSString get domain {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_domain1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get code {
    return _lib._objc_msgSend_77(_id, _lib._sel_code1);
  }

  NSObject get userInfo {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_userInfo1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedDescription {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_localizedDescription1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedFailureReason {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_localizedFailureReason1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedRecoverySuggestion {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_localizedRecoverySuggestion1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get localizedRecoveryOptions {
    final _ret =
        _lib._objc_msgSend_16(_id, _lib._sel_localizedRecoveryOptions1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get recoveryAttempter {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_recoveryAttempter1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString? get helpAnchor {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_helpAnchor1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject get underlyingErrors {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_underlyingErrors1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void setUserInfoValueProviderForDomain_provider_(
      AuthenticationServices _lib,
      NSString errorDomain,
      ObjCBlock_ObjCObject_NSError_NSString? provider) {
    _lib._objc_msgSend_88(
        _lib._class_NSError1,
        _lib._sel_setUserInfoValueProviderForDomain_provider_1,
        errorDomain._id,
        provider?._id ?? ffi.nullptr);
  }

  static ObjCBlock_ObjCObject_NSError_NSString? userInfoValueProviderForDomain_(
      AuthenticationServices _lib,
      NSError err,
      NSString userInfoKey,
      NSString errorDomain) {
    final _ret = _lib._objc_msgSend_89(
        _lib._class_NSError1,
        _lib._sel_userInfoValueProviderForDomain_1,
        err._id,
        userInfoKey._id,
        errorDomain._id);
    return _ret.address == 0
        ? null
        : ObjCBlock_ObjCObject_NSError_NSString._(_ret, _lib,
            retain: true, release: true);
  }

  @override
  NSError init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  static NSError new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSError1, _lib._sel_new1);
    return NSError._(_ret, _lib, retain: false, release: true);
  }

  static NSError allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSError1, _lib._sel_allocWithZone_1, zone);
    return NSError._(_ret, _lib, retain: false, release: true);
  }

  static NSError alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSError1, _lib._sel_alloc1);
    return NSError._(_ret, _lib, retain: false, release: true);
  }
}

class _ObjCBlockBase implements ffi.Finalizable {
  final ffi.Pointer<_ObjCBlock> _id;
  final AuthenticationServices _lib;
  bool _pendingRelease;

  _ObjCBlockBase._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._Block_copy(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer11.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC block held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._Block_release(_id.cast());
      _lib._objc_releaseFinalizer11.detach(this);
    } else {
      throw StateError(
          'Released an ObjC block that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCBlockBase && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<_ObjCBlock> get pointer => _id;

  ffi.Pointer<_ObjCBlock> _retainAndReturnId() {
    _lib._Block_copy(_id.cast());
    return _id;
  }
}

ffi.Pointer<ObjCObject> _ObjCBlock_ObjCObject_NSError_NSString_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
                ffi.Pointer<ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_ObjCObject_NSError_NSString_closureRegistry = <int,
    ffi.Pointer<ObjCObject> Function(
        ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ObjCObject_NSError_NSString_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ObjCObject_NSError_NSString_registerClosure(
    ffi.Pointer<ObjCObject> Function(
            ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)
        fn) {
  final id = ++_ObjCBlock_ObjCObject_NSError_NSString_closureRegistryIndex;
  _ObjCBlock_ObjCObject_NSError_NSString_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_ObjCObject_NSError_NSString_closureTrampoline(
            ffi.Pointer<_ObjCBlock> block,
            ffi.Pointer<ObjCObject> arg0,
            ffi.Pointer<ObjCObject> arg1) =>
        _ObjCBlock_ObjCObject_NSError_NSString_closureRegistry[
            block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ObjCObject_NSError_NSString extends _ObjCBlockBase {
  ObjCBlock_ObjCObject_NSError_NSString._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ObjCObject_NSError_NSString.fromFunctionPointer(
      AuthenticationServices lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ObjCObject_NSError_NSString_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ObjCObject_NSError_NSString.fromFunction(
      AuthenticationServices lib, NSObject? Function(NSError, NSString) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ObjCObject_NSError_NSString_closureTrampoline)
                    .cast(),
                _ObjCBlock_ObjCObject_NSError_NSString_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) =>
                        fn(NSError._(arg0, lib, retain: true, release: true), NSString._(arg1, lib, retain: true, release: true))
                            ?._retainAndReturnId() ??
                        ffi.nullptr)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSObject? call(NSError arg0, NSString arg1) => _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<ObjCObject> Function(
                          ffi.Pointer<_ObjCBlock> block,
                          ffi.Pointer<ObjCObject> arg0,
                          ffi.Pointer<ObjCObject> arg1)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>()
              (_id, arg0._id, arg1._id)
              .address ==
          0
      ? null
      : NSObject._(
          _id.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>()(_id, arg0._id, arg1._id),
          _lib,
          retain: false,
          release: true);
}

final class _ObjCBlockDesc extends ffi.Struct {
  @ffi.UnsignedLong()
  external int reserved;

  @ffi.UnsignedLong()
  external int size;

  external ffi.Pointer<ffi.Void> copy_helper;

  external ffi.Pointer<ffi.Void> dispose_helper;

  external ffi.Pointer<ffi.Char> signature;
}

final class _ObjCBlock extends ffi.Struct {
  external ffi.Pointer<ffi.Void> isa;

  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int reserved;

  external ffi.Pointer<ffi.Void> invoke;

  external ffi.Pointer<_ObjCBlockDesc> descriptor;

  external ffi.Pointer<ffi.Void> target;
}

abstract class NSURLBookmarkCreationOptions {
  static const int NSURLBookmarkCreationPreferFileIDResolution = 256;
  static const int NSURLBookmarkCreationMinimalBookmark = 512;
  static const int NSURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int NSURLBookmarkCreationWithSecurityScope = 2048;
  static const int NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;
  static const int NSURLBookmarkCreationWithoutImplicitSecurityScope =
      536870912;
}

abstract class NSURLBookmarkResolutionOptions {
  static const int NSURLBookmarkResolutionWithoutUI = 256;
  static const int NSURLBookmarkResolutionWithoutMounting = 512;
  static const int NSURLBookmarkResolutionWithSecurityScope = 1024;
  static const int NSURLBookmarkResolutionWithoutImplicitStartAccessing = 32768;
}

typedef ASWebAuthenticationSessionCompletionHandler = ffi.Pointer<_ObjCBlock>;
typedef DartASWebAuthenticationSessionCompletionHandler
    = ObjCBlock_ffiVoid_NSURL_NSError;
void _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ObjCObject>,
                ffi.Pointer<ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSURL_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_ffiVoid_NSURL_NSError extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_NSError._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSError.fromFunctionPointer(
      AuthenticationServices lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSError.fromFunction(
      AuthenticationServices lib, void Function(NSURL?, NSError?) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??=
                    ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>(
                            _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline)
                        .cast(),
                _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0
                            ? null
                            : NSURL._(arg0, lib, retain: true, release: true),
                        arg1.address == 0
                            ? null
                            : NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_NSError.listener(
      AuthenticationServices lib, void Function(NSURL?, NSError?) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>.listener(
                            _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0
                            ? null
                            : NSURL._(arg0, lib, retain: true, release: true),
                        arg1.address == 0
                            ? null
                            : NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURL? arg0, NSError? arg1) => _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
                  ffi.Pointer<ObjCObject>)>()(
      _id, arg0?._id ?? ffi.nullptr, arg1?._id ?? ffi.nullptr);
}

class NSWindow extends NSResponder {
  NSWindow._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSWindow] that points to the same underlying object as [other].
  static NSWindow castFrom<T extends _ObjCWrapper>(T other) {
    return NSWindow._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSWindow] that wraps the given raw object pointer.
  static NSWindow castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSWindow._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSWindow].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSWindow1);
  }

  static void frameRectForContentRect_styleMask_(AuthenticationServices _lib,
      ffi.Pointer<CGRect> stret, CGRect cRect, int style) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_240_stret(stret, _lib._class_NSWindow1,
            _lib._sel_frameRectForContentRect_styleMask_1, cRect, style)
        : stret.ref = _lib._objc_msgSend_240(_lib._class_NSWindow1,
            _lib._sel_frameRectForContentRect_styleMask_1, cRect, style);
  }

  static void contentRectForFrameRect_styleMask_(AuthenticationServices _lib,
      ffi.Pointer<CGRect> stret, CGRect fRect, int style) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_240_stret(stret, _lib._class_NSWindow1,
            _lib._sel_contentRectForFrameRect_styleMask_1, fRect, style)
        : stret.ref = _lib._objc_msgSend_240(_lib._class_NSWindow1,
            _lib._sel_contentRectForFrameRect_styleMask_1, fRect, style);
  }

  static double minFrameWidthWithTitle_styleMask_(
      AuthenticationServices _lib, NSString title, int style) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_241_fpret(_lib._class_NSWindow1,
            _lib._sel_minFrameWidthWithTitle_styleMask_1, title._id, style)
        : _lib._objc_msgSend_241(_lib._class_NSWindow1,
            _lib._sel_minFrameWidthWithTitle_styleMask_1, title._id, style);
  }

  static int getDefaultDepthLimit(AuthenticationServices _lib) {
    return _lib._objc_msgSend_242(
        _lib._class_NSWindow1, _lib._sel_defaultDepthLimit1);
  }

  void frameRectForContentRect_(ffi.Pointer<CGRect> stret, CGRect contentRect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_frameRectForContentRect_1, contentRect)
        : stret.ref = _lib._objc_msgSend_146(
            _id, _lib._sel_frameRectForContentRect_1, contentRect);
  }

  void contentRectForFrameRect_(ffi.Pointer<CGRect> stret, CGRect frameRect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_contentRectForFrameRect_1, frameRect)
        : stret.ref = _lib._objc_msgSend_146(
            _id, _lib._sel_contentRectForFrameRect_1, frameRect);
  }

  NSWindow initWithContentRect_styleMask_backing_defer_(
      CGRect contentRect, int style, int backingStoreType, bool flag) {
    final _ret = _lib._objc_msgSend_243(
        _id,
        _lib._sel_initWithContentRect_styleMask_backing_defer_1,
        contentRect,
        style,
        backingStoreType,
        flag);
    return NSWindow._(_ret, _lib, retain: true, release: true);
  }

  NSWindow initWithContentRect_styleMask_backing_defer_screen_(
      CGRect contentRect,
      int style,
      int backingStoreType,
      bool flag,
      NSScreen? screen) {
    final _ret = _lib._objc_msgSend_244(
        _id,
        _lib._sel_initWithContentRect_styleMask_backing_defer_screen_1,
        contentRect,
        style,
        backingStoreType,
        flag,
        screen?._id ?? ffi.nullptr);
    return NSWindow._(_ret, _lib, retain: true, release: true);
  }

  /// Use initWithContentRect:. This method will throw an exception for coders that support allowsKeyedCoding, and is only available for compatibility with non keyed coding.
  NSWindow initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_172(_id, _lib._sel_initWithCoder_1, coder._id);
    return NSWindow._(_ret, _lib, retain: true, release: true);
  }

  NSString get title {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_title1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set title(NSString value) {
    return _lib._objc_msgSend_173(_id, _lib._sel_setTitle_1, value._id);
  }

  /// !
  /// Secondary text that may be displayed adjacent to or below the primary title depending on the configuration of the window.
  /// A value of empty string will remove the subtitle from the window layout.
  NSString get subtitle {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_subtitle1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  /// !
  /// Secondary text that may be displayed adjacent to or below the primary title depending on the configuration of the window.
  /// A value of empty string will remove the subtitle from the window layout.
  set subtitle(NSString value) {
    return _lib._objc_msgSend_173(_id, _lib._sel_setSubtitle_1, value._id);
  }

  /// Default value is NSWindowTitleVisible
  int get titleVisibility {
    return _lib._objc_msgSend_245(_id, _lib._sel_titleVisibility1);
  }

  /// Default value is NSWindowTitleVisible
  set titleVisibility(int value) {
    return _lib._objc_msgSend_246(_id, _lib._sel_setTitleVisibility_1, value);
  }

  /// When \c YES, the titlebar doesn't draw its background, allowing all buttons to show through, and "click through" to happen. In general, this is only useful when \c NSFullSizeContentViewWindowMask is set.
  bool get titlebarAppearsTransparent {
    return _lib._objc_msgSend_12(_id, _lib._sel_titlebarAppearsTransparent1);
  }

  /// When \c YES, the titlebar doesn't draw its background, allowing all buttons to show through, and "click through" to happen. In general, this is only useful when \c NSFullSizeContentViewWindowMask is set.
  set titlebarAppearsTransparent(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setTitlebarAppearsTransparent_1, value);
  }

  /// Specifies how the titlebar area of the window should appear when the window displays an NSToolbar
  int get toolbarStyle {
    return _lib._objc_msgSend_247(_id, _lib._sel_toolbarStyle1);
  }

  /// Specifies how the titlebar area of the window should appear when the window displays an NSToolbar
  set toolbarStyle(int value) {
    return _lib._objc_msgSend_248(_id, _lib._sel_setToolbarStyle_1, value);
  }

  /// The \c contentLayoutRect will return the area inside the window that is for non-obscured content. Typically, this is the same thing as the `contentView`'s frame. However, for windows with the \c NSFullSizeContentViewWindowMask set, there needs to be a way to determine the portion that is not under the toolbar. The \c contentLayoutRect returns the portion of the layout that is not obscured under the toolbar. \c contentLayoutRect is in window coordinates. It is KVO compliant. */
  void getContentLayoutRect(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_138_stret(stret, _id, _lib._sel_contentLayoutRect1)
        : stret.ref = _lib._objc_msgSend_138(_id, _lib._sel_contentLayoutRect1);
  }

  /// \c contentLayoutGuide is a corollary to \c contentLayoutRect. It can be used by autolayout constraints to automatically bind to the \c contentLayoutRect.
  NSObject? get contentLayoutGuide {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_contentLayoutGuide1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// The following methods allow you to add accessory views to the titlebar/toolbar area of a window. See NSTitlebarAccessoryViewController for more details.
  NSObject get titlebarAccessoryViewControllers {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_titlebarAccessoryViewControllers1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// The following methods allow you to add accessory views to the titlebar/toolbar area of a window. See NSTitlebarAccessoryViewController for more details.
  set titlebarAccessoryViewControllers(NSObject value) {
    return _lib._objc_msgSend_123(
        _id, _lib._sel_setTitlebarAccessoryViewControllers_1, value._id);
  }

  void addTitlebarAccessoryViewController_(
      NSTitlebarAccessoryViewController childViewController) {
    _lib._objc_msgSend_249(_id, _lib._sel_addTitlebarAccessoryViewController_1,
        childViewController._id);
  }

  void insertTitlebarAccessoryViewController_atIndex_(
      NSTitlebarAccessoryViewController childViewController, int index) {
    _lib._objc_msgSend_250(
        _id,
        _lib._sel_insertTitlebarAccessoryViewController_atIndex_1,
        childViewController._id,
        index);
  }

  /// NOTE: you can use this method, or removeFromParentViewController, which ever is easier.
  void removeTitlebarAccessoryViewControllerAtIndex_(int index) {
    _lib._objc_msgSend_200(
        _id, _lib._sel_removeTitlebarAccessoryViewControllerAtIndex_1, index);
  }

  /// !
  /// If url is not nil and its path is not empty, the window will show a document icon in the titlebar.
  /// If the url represents a filename or other resource with a known icon, that icon will be used as the document icon.  Otherwise the default document icon will be used.  The icon can be customized using `-[[NSWindow standardWindowButton:NSWindowDocumentIconButton] setImage:customImage]`.  If url is not nil and its path is not empty, the window will have a pop-up menu which can be shown via command-click on the area containing the document icon and title.  By default, this menu will display the path components of the url.  The presence and contents of this menu can be controlled by the delegate method `-[window:shouldPopUpDocumentPathMenu:]`
  /// If the url is nil or has an empty path, the window will not show a document icon and will not have a pop-up menu available via command-click.
  NSURL? get representedURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_representedURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  /// !
  /// If url is not nil and its path is not empty, the window will show a document icon in the titlebar.
  /// If the url represents a filename or other resource with a known icon, that icon will be used as the document icon.  Otherwise the default document icon will be used.  The icon can be customized using `-[[NSWindow standardWindowButton:NSWindowDocumentIconButton] setImage:customImage]`.  If url is not nil and its path is not empty, the window will have a pop-up menu which can be shown via command-click on the area containing the document icon and title.  By default, this menu will display the path components of the url.  The presence and contents of this menu can be controlled by the delegate method `-[window:shouldPopUpDocumentPathMenu:]`
  /// If the url is nil or has an empty path, the window will not show a document icon and will not have a pop-up menu available via command-click.
  set representedURL(NSURL? value) {
    return _lib._objc_msgSend_251(
        _id, _lib._sel_setRepresentedURL_1, value?._id ?? ffi.nullptr);
  }

  NSString get representedFilename {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_representedFilename1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set representedFilename(NSString value) {
    return _lib._objc_msgSend_173(
        _id, _lib._sel_setRepresentedFilename_1, value._id);
  }

  void setTitleWithRepresentedFilename_(NSString filename) {
    _lib._objc_msgSend_94(
        _id, _lib._sel_setTitleWithRepresentedFilename_1, filename._id);
  }

  bool get excludedFromWindowsMenu {
    return _lib._objc_msgSend_12(_id, _lib._sel_isExcludedFromWindowsMenu1);
  }

  set excludedFromWindowsMenu(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setExcludedFromWindowsMenu_1, value);
  }

  NSView? get contentView {
    final _ret = _lib._objc_msgSend_122(_id, _lib._sel_contentView1);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  set contentView(NSView? value) {
    return _lib._objc_msgSend_190(
        _id, _lib._sel_setContentView_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  int get windowNumber {
    return _lib._objc_msgSend_77(_id, _lib._sel_windowNumber1);
  }

  /// @note The styleMask can only be set on macOS 10.6 and later. Valid \c styleMask settings have the same restrictions as the \c styleMask passed to `-initWithContentRect:styleMask:backing:defer:`.  Some \c styleMask changes will cause the view hierarchy to be rebuilt, since there is a different subclass for the top level view of a borderless window than for the top level view of a titled window.
  int get styleMask {
    return _lib._objc_msgSend_252(_id, _lib._sel_styleMask1);
  }

  /// @note The styleMask can only be set on macOS 10.6 and later. Valid \c styleMask settings have the same restrictions as the \c styleMask passed to `-initWithContentRect:styleMask:backing:defer:`.  Some \c styleMask changes will cause the view hierarchy to be rebuilt, since there is a different subclass for the top level view of a borderless window than for the top level view of a titled window.
  set styleMask(int value) {
    return _lib._objc_msgSend_253(_id, _lib._sel_setStyleMask_1, value);
  }

  NSText? fieldEditor_forObject_(bool createFlag, NSObject? object) {
    final _ret = _lib._objc_msgSend_273(_id, _lib._sel_fieldEditor_forObject_1,
        createFlag, object?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSText._(_ret, _lib, retain: true, release: true);
  }

  void endEditingFor_(NSObject? object) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_endEditingFor_1, object?._id ?? ffi.nullptr);
  }

  void constrainFrameRect_toScreen_(
      ffi.Pointer<CGRect> stret, CGRect frameRect, NSScreen? screen) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_274_stret(
            stret,
            _id,
            _lib._sel_constrainFrameRect_toScreen_1,
            frameRect,
            screen?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_274(
            _id,
            _lib._sel_constrainFrameRect_toScreen_1,
            frameRect,
            screen?._id ?? ffi.nullptr);
  }

  void setFrame_display_(CGRect frameRect, bool flag) {
    _lib._objc_msgSend_275(_id, _lib._sel_setFrame_display_1, frameRect, flag);
  }

  void setContentSize_(CGSize size) {
    _lib._objc_msgSend_134(_id, _lib._sel_setContentSize_1, size);
  }

  void setFrameOrigin_(CGPoint point) {
    _lib._objc_msgSend_137(_id, _lib._sel_setFrameOrigin_1, point);
  }

  void setFrameTopLeftPoint_(CGPoint point) {
    _lib._objc_msgSend_137(_id, _lib._sel_setFrameTopLeftPoint_1, point);
  }

  void cascadeTopLeftFromPoint_(
      ffi.Pointer<CGPoint> stret, CGPoint topLeftPoint) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_cascadeTopLeftFromPoint_1, topLeftPoint)
        : stret.ref = _lib._objc_msgSend_147(
            _id, _lib._sel_cascadeTopLeftFromPoint_1, topLeftPoint);
  }

  void getFrame(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_138_stret(stret, _id, _lib._sel_frame1)
        : stret.ref = _lib._objc_msgSend_138(_id, _lib._sel_frame1);
  }

  /// ! Subclasses can override \c animationResizeTime: to control the total time for the frame change.
  /// \c newFrame is the rect passed into \c setFrame:display:animate:
  double animationResizeTime_(CGRect newFrame) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_276_fpret(
            _id, _lib._sel_animationResizeTime_1, newFrame)
        : _lib._objc_msgSend_276(
            _id, _lib._sel_animationResizeTime_1, newFrame);
  }

  /// ! \c setFrame:display:animate: is equivalent to \c setFrame:display: if the \c animateFlag is NO.
  /// If the \c animationFlag is YES, this method will perform a smooth resize of the window, where the total time for the resize is specified by \c -animationResizeTime:
  void setFrame_display_animate_(
      CGRect frameRect, bool displayFlag, bool animateFlag) {
    _lib._objc_msgSend_277(_id, _lib._sel_setFrame_display_animate_1, frameRect,
        displayFlag, animateFlag);
  }

  bool get inLiveResize {
    return _lib._objc_msgSend_12(_id, _lib._sel_inLiveResize1);
  }

  void getResizeIncrements(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_resizeIncrements1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_resizeIncrements1);
  }

  set resizeIncrements(CGSize value) {
    return _lib._objc_msgSend_272(_id, _lib._sel_setResizeIncrements_1, value);
  }

  void getAspectRatio(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_aspectRatio1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_aspectRatio1);
  }

  set aspectRatio(CGSize value) {
    return _lib._objc_msgSend_272(_id, _lib._sel_setAspectRatio_1, value);
  }

  void getContentResizeIncrements(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(
            stret, _id, _lib._sel_contentResizeIncrements1)
        : stret.ref =
            _lib._objc_msgSend_209(_id, _lib._sel_contentResizeIncrements1);
  }

  set contentResizeIncrements(CGSize value) {
    return _lib._objc_msgSend_272(
        _id, _lib._sel_setContentResizeIncrements_1, value);
  }

  void getContentAspectRatio(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(
            stret, _id, _lib._sel_contentAspectRatio1)
        : stret.ref =
            _lib._objc_msgSend_209(_id, _lib._sel_contentAspectRatio1);
  }

  set contentAspectRatio(CGSize value) {
    return _lib._objc_msgSend_272(
        _id, _lib._sel_setContentAspectRatio_1, value);
  }

  bool get viewsNeedDisplay {
    return _lib._objc_msgSend_12(_id, _lib._sel_viewsNeedDisplay1);
  }

  set viewsNeedDisplay(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setViewsNeedDisplay_1, value);
  }

  void displayIfNeeded() {
    _lib._objc_msgSend_1(_id, _lib._sel_displayIfNeeded1);
  }

  void display() {
    _lib._objc_msgSend_1(_id, _lib._sel_display1);
  }

  bool get preservesContentDuringLiveResize {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_preservesContentDuringLiveResize1);
  }

  set preservesContentDuringLiveResize(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setPreservesContentDuringLiveResize_1, value);
  }

  void update() {
    _lib._objc_msgSend_1(_id, _lib._sel_update1);
  }

  bool makeFirstResponder_(NSResponder? responder) {
    return _lib._objc_msgSend_278(
        _id, _lib._sel_makeFirstResponder_1, responder?._id ?? ffi.nullptr);
  }

  /// firstResponder is Key Value Observing (KVO) compliant.
  NSResponder? get firstResponder {
    final _ret = _lib._objc_msgSend_104(_id, _lib._sel_firstResponder1);
    return _ret.address == 0
        ? null
        : NSResponder._(_ret, _lib, retain: true, release: true);
  }

  int get resizeFlags {
    return _lib._objc_msgSend_108(_id, _lib._sel_resizeFlags1);
  }

  void close() {
    _lib._objc_msgSend_1(_id, _lib._sel_close1);
  }

  bool get releasedWhenClosed {
    return _lib._objc_msgSend_12(_id, _lib._sel_isReleasedWhenClosed1);
  }

  set releasedWhenClosed(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setReleasedWhenClosed_1, value);
  }

  void miniaturize_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_miniaturize_1, sender?._id ?? ffi.nullptr);
  }

  void deminiaturize_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_deminiaturize_1, sender?._id ?? ffi.nullptr);
  }

  bool get zoomed {
    return _lib._objc_msgSend_12(_id, _lib._sel_isZoomed1);
  }

  void zoom_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_zoom_1, sender?._id ?? ffi.nullptr);
  }

  bool get miniaturized {
    return _lib._objc_msgSend_12(_id, _lib._sel_isMiniaturized1);
  }

  @override
  bool tryToPerform_with_(ffi.Pointer<ObjCSel> action, NSObject? object) {
    return _lib._objc_msgSend_106(
        _id, _lib._sel_tryToPerform_with_1, action, object?._id ?? ffi.nullptr);
  }

  @override
  NSObject? validRequestorForSendType_returnType_(
      NSString? sendType, NSString? returnType) {
    final _ret = _lib._objc_msgSend_235(
        _id,
        _lib._sel_validRequestorForSendType_returnType_1,
        sendType?._id ?? ffi.nullptr,
        returnType?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSColor get backgroundColor {
    final _ret = _lib._objc_msgSend_279(_id, _lib._sel_backgroundColor1);
    return NSColor._(_ret, _lib, retain: true, release: true);
  }

  set backgroundColor(NSColor value) {
    return _lib._objc_msgSend_280(
        _id, _lib._sel_setBackgroundColor_1, value._id);
  }

  /// Indicates the thickness of a given border of the window. NSMinYEdge is the bottom edge of the window, while NSMaxYEdge is the top edge of the window. This method may throw an exception for values that don't apply to the current window styleMask; specifically, passing NSMaxYEdge for a non-textured window will always raise. The contentBorder does not include the titlebar or toolbar.
  void setContentBorderThickness_forEdge_(double thickness, int edge) {
    _lib._objc_msgSend_281(
        _id, _lib._sel_setContentBorderThickness_forEdge_1, thickness, edge);
  }

  double contentBorderThicknessForEdge_(int edge) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_282_fpret(
            _id, _lib._sel_contentBorderThicknessForEdge_1, edge)
        : _lib._objc_msgSend_282(
            _id, _lib._sel_contentBorderThicknessForEdge_1, edge);
  }

  void setAutorecalculatesContentBorderThickness_forEdge_(bool flag, int edge) {
    _lib._objc_msgSend_283(
        _id,
        _lib._sel_setAutorecalculatesContentBorderThickness_forEdge_1,
        flag,
        edge);
  }

  bool autorecalculatesContentBorderThicknessForEdge_(int edge) {
    return _lib._objc_msgSend_284(
        _id, _lib._sel_autorecalculatesContentBorderThicknessForEdge_1, edge);
  }

  /// Calling -setMovable with a flag of NO will disable server-side dragging of the window via titlebar or background.  -setMovableByWindowBackground:YES is ignored on a window that returns NO from -isMovable.  When a window returns NO for -isMovable, it can be assigned to a different space with its relative screen position preserved.  Note that a resizable window may still be resized, and the window frame may be changed programmatically.  Applications may choose to enable application-controlled window dragging after disabling server-side dragging (perhaps to achieve snapping or pinning) by handling the mouseDown/mouseDragged/mouseUp sequence in -sendEvent: in an NSWindow subclass.  Note that a non movable window will also not be moved (or resized) by the system in response to a display reconfiguration.
  bool get movable {
    return _lib._objc_msgSend_12(_id, _lib._sel_isMovable1);
  }

  /// Calling -setMovable with a flag of NO will disable server-side dragging of the window via titlebar or background.  -setMovableByWindowBackground:YES is ignored on a window that returns NO from -isMovable.  When a window returns NO for -isMovable, it can be assigned to a different space with its relative screen position preserved.  Note that a resizable window may still be resized, and the window frame may be changed programmatically.  Applications may choose to enable application-controlled window dragging after disabling server-side dragging (perhaps to achieve snapping or pinning) by handling the mouseDown/mouseDragged/mouseUp sequence in -sendEvent: in an NSWindow subclass.  Note that a non movable window will also not be moved (or resized) by the system in response to a display reconfiguration.
  set movable(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setMovable_1, value);
  }

  bool get movableByWindowBackground {
    return _lib._objc_msgSend_12(_id, _lib._sel_isMovableByWindowBackground1);
  }

  set movableByWindowBackground(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setMovableByWindowBackground_1, value);
  }

  bool get hidesOnDeactivate {
    return _lib._objc_msgSend_12(_id, _lib._sel_hidesOnDeactivate1);
  }

  set hidesOnDeactivate(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setHidesOnDeactivate_1, value);
  }

  /// Indicates whether a window can be hidden during `-[NSApplication hide:]`.  Default is \c YES.
  bool get canHide {
    return _lib._objc_msgSend_12(_id, _lib._sel_canHide1);
  }

  /// Indicates whether a window can be hidden during `-[NSApplication hide:]`.  Default is \c YES.
  set canHide(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setCanHide_1, value);
  }

  void center() {
    _lib._objc_msgSend_1(_id, _lib._sel_center1);
  }

  void makeKeyAndOrderFront_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_makeKeyAndOrderFront_1, sender?._id ?? ffi.nullptr);
  }

  void orderFront_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_orderFront_1, sender?._id ?? ffi.nullptr);
  }

  void orderBack_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_orderBack_1, sender?._id ?? ffi.nullptr);
  }

  void orderOut_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_orderOut_1, sender?._id ?? ffi.nullptr);
  }

  void orderWindow_relativeTo_(int place, int otherWin) {
    _lib._objc_msgSend_285(
        _id, _lib._sel_orderWindow_relativeTo_1, place, otherWin);
  }

  void orderFrontRegardless() {
    _lib._objc_msgSend_1(_id, _lib._sel_orderFrontRegardless1);
  }

  NSImage? get miniwindowImage {
    final _ret = _lib._objc_msgSend_185(_id, _lib._sel_miniwindowImage1);
    return _ret.address == 0
        ? null
        : NSImage._(_ret, _lib, retain: true, release: true);
  }

  set miniwindowImage(NSImage? value) {
    return _lib._objc_msgSend_186(
        _id, _lib._sel_setMiniwindowImage_1, value?._id ?? ffi.nullptr);
  }

  NSString get miniwindowTitle {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_miniwindowTitle1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set miniwindowTitle(NSString value) {
    return _lib._objc_msgSend_173(
        _id, _lib._sel_setMiniwindowTitle_1, value._id);
  }

  NSDockTile get dockTile {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_dockTile1);
    return NSDockTile._(_ret, _lib, retain: true, release: true);
  }

  bool get documentEdited {
    return _lib._objc_msgSend_12(_id, _lib._sel_isDocumentEdited1);
  }

  set documentEdited(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setDocumentEdited_1, value);
  }

  bool get visible {
    return _lib._objc_msgSend_12(_id, _lib._sel_isVisible1);
  }

  bool get keyWindow {
    return _lib._objc_msgSend_12(_id, _lib._sel_isKeyWindow1);
  }

  bool get mainWindow {
    return _lib._objc_msgSend_12(_id, _lib._sel_isMainWindow1);
  }

  bool get canBecomeKeyWindow {
    return _lib._objc_msgSend_12(_id, _lib._sel_canBecomeKeyWindow1);
  }

  bool get canBecomeMainWindow {
    return _lib._objc_msgSend_12(_id, _lib._sel_canBecomeMainWindow1);
  }

  /// ! Makes the window key and main if eligible, updating NSAppication's `-keyWindow` and `-mainWindow` properties.
  void makeKeyWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_makeKeyWindow1);
  }

  /// ! Makes the window main if eligible. Updates NSApplication's `-mainWindow` property.
  void makeMainWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_makeMainWindow1);
  }

  /// ! Informs the window that it has become the key window. This method exists as an override point. Do not invoke directly. Instead, invoke `-makeKeyWindow`.
  void becomeKeyWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_becomeKeyWindow1);
  }

  /// ! Informs the window that it has stopped being the key window. This method exists as an override point. Do not invoke directly. Windows automatically receive this message when deactivating or when another window has become key.
  void resignKeyWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_resignKeyWindow1);
  }

  /// ! Informs the window that it has become the main window. This method exists as an override point. Do not invoke directly. Instead, invoke `-makeMainWindow`.
  void becomeMainWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_becomeMainWindow1);
  }

  /// ! Informs the window that it has stopped being the main window. This method exists as an override point. Do not invoke directly. Windows automatically receive this message when deactivating or when another window has become main.
  void resignMainWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_resignMainWindow1);
  }

  bool get worksWhenModal {
    return _lib._objc_msgSend_12(_id, _lib._sel_worksWhenModal1);
  }

  /// ! Normally, application termination is prohibited when a modal window or sheet is open, without consulting the application delegate.  Some windows like the open panel or toolbar customization sheet should not prevent application termination.  `-setPreventsApplicationTerminationWhenModal:NO` on a modal window or sheet will override the default behavior and allow application termination to proceed, either through the sudden termination path if enabled, or on to the next step of consulting the application delegate.  By default, `-preventsApplicationTerminationWhenModal` returns \c YES
  bool get preventsApplicationTerminationWhenModal {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_preventsApplicationTerminationWhenModal1);
  }

  /// ! Normally, application termination is prohibited when a modal window or sheet is open, without consulting the application delegate.  Some windows like the open panel or toolbar customization sheet should not prevent application termination.  `-setPreventsApplicationTerminationWhenModal:NO` on a modal window or sheet will override the default behavior and allow application termination to proceed, either through the sudden termination path if enabled, or on to the next step of consulting the application delegate.  By default, `-preventsApplicationTerminationWhenModal` returns \c YES
  set preventsApplicationTerminationWhenModal(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setPreventsApplicationTerminationWhenModal_1, value);
  }

  /// Methods to convert window coordinates to screen coordinates
  void convertRectToScreen_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_convertRectToScreen_1, rect)
        : stret.ref =
            _lib._objc_msgSend_146(_id, _lib._sel_convertRectToScreen_1, rect);
  }

  void convertRectFromScreen_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_convertRectFromScreen_1, rect)
        : stret.ref = _lib._objc_msgSend_146(
            _id, _lib._sel_convertRectFromScreen_1, rect);
  }

  void convertPointToScreen_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertPointToScreen_1, point)
        : stret.ref = _lib._objc_msgSend_147(
            _id, _lib._sel_convertPointToScreen_1, point);
  }

  void convertPointFromScreen_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertPointFromScreen_1, point)
        : stret.ref = _lib._objc_msgSend_147(
            _id, _lib._sel_convertPointFromScreen_1, point);
  }

  /// Methods to convert to/from a pixel integral backing store space
  void convertRectToBacking_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_convertRectToBacking_1, rect)
        : stret.ref =
            _lib._objc_msgSend_146(_id, _lib._sel_convertRectToBacking_1, rect);
  }

  void convertRectFromBacking_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_convertRectFromBacking_1, rect)
        : stret.ref = _lib._objc_msgSend_146(
            _id, _lib._sel_convertRectFromBacking_1, rect);
  }

  void convertPointToBacking_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertPointToBacking_1, point)
        : stret.ref = _lib._objc_msgSend_147(
            _id, _lib._sel_convertPointToBacking_1, point);
  }

  void convertPointFromBacking_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertPointFromBacking_1, point)
        : stret.ref = _lib._objc_msgSend_147(
            _id, _lib._sel_convertPointFromBacking_1, point);
  }

  /// Use `NSIntegralRectWithOptions()` to produce a backing store pixel aligned rectangle from the given input rectangle in window coordinates.
  void backingAlignedRect_options_(
      ffi.Pointer<CGRect> stret, CGRect rect, int options) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_145_stret(
            stret, _id, _lib._sel_backingAlignedRect_options_1, rect, options)
        : stret.ref = _lib._objc_msgSend_145(
            _id, _lib._sel_backingAlignedRect_options_1, rect, options);
  }

  /// Returns the scale factor representing the number of backing store pixels corresponding to each linear unit in window space on this \c NSWindow. This method is provided for rare cases when the explicit scale factor is needed. Please use `-convert*ToBacking:` methods whenever possible.
  double get backingScaleFactor {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_backingScaleFactor1)
        : _lib._objc_msgSend_81(_id, _lib._sel_backingScaleFactor1);
  }

  void performClose_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_performClose_1, sender?._id ?? ffi.nullptr);
  }

  void performMiniaturize_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_performMiniaturize_1, sender?._id ?? ffi.nullptr);
  }

  void performZoom_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_performZoom_1, sender?._id ?? ffi.nullptr);
  }

  NSData dataWithEPSInsideRect_(CGRect rect) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_dataWithEPSInsideRect_1, rect);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData dataWithPDFInsideRect_(CGRect rect) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_dataWithPDFInsideRect_1, rect);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  void print_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_print_1, sender?._id ?? ffi.nullptr);
  }

  /// !
  /// Default is \c NO. Set to \c YES to allow a window to display tooltips even when the application is in the background.  Note that, enabling tooltips in an inactive application will cause the app to do work any time the mouse passes over the window.  This can degrade system performance.
  /// Returns \c YES if this window displays tooltips even when the application is in the background.  To configure this setting you should call `-setAllowsToolTipsWhenApplicationIsInactive:` instead of overriding `-allowsToolTipsWhenApplicationIsInactive`.
  bool get allowsToolTipsWhenApplicationIsInactive {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_allowsToolTipsWhenApplicationIsInactive1);
  }

  /// !
  /// Default is \c NO. Set to \c YES to allow a window to display tooltips even when the application is in the background.  Note that, enabling tooltips in an inactive application will cause the app to do work any time the mouse passes over the window.  This can degrade system performance.
  /// Returns \c YES if this window displays tooltips even when the application is in the background.  To configure this setting you should call `-setAllowsToolTipsWhenApplicationIsInactive:` instead of overriding `-allowsToolTipsWhenApplicationIsInactive`.
  set allowsToolTipsWhenApplicationIsInactive(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAllowsToolTipsWhenApplicationIsInactive_1, value);
  }

  int get backingType {
    return _lib._objc_msgSend_288(_id, _lib._sel_backingType1);
  }

  set backingType(int value) {
    return _lib._objc_msgSend_289(_id, _lib._sel_setBackingType_1, value);
  }

  int get level {
    return _lib._objc_msgSend_77(_id, _lib._sel_level1);
  }

  set level(int value) {
    return _lib._objc_msgSend_187(_id, _lib._sel_setLevel_1, value);
  }

  int get depthLimit {
    return _lib._objc_msgSend_242(_id, _lib._sel_depthLimit1);
  }

  set depthLimit(int value) {
    return _lib._objc_msgSend_290(_id, _lib._sel_setDepthLimit_1, value);
  }

  void setDynamicDepthLimit_(bool flag) {
    _lib._objc_msgSend_195(_id, _lib._sel_setDynamicDepthLimit_1, flag);
  }

  bool get hasDynamicDepthLimit {
    return _lib._objc_msgSend_12(_id, _lib._sel_hasDynamicDepthLimit1);
  }

  /// ! The screen property returns the best screen for the window. If the window only intersects one screen, it returns that screen. If it intersects more than one screen, then it resolves the tie through based on what space it is mostly on. It may return nil if there are no available screens, or it is completely off screen.
  NSScreen? get screen {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_screen1);
    return _ret.address == 0
        ? null
        : NSScreen._(_ret, _lib, retain: true, release: true);
  }

  NSScreen? get deepestScreen {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_deepestScreen1);
    return _ret.address == 0
        ? null
        : NSScreen._(_ret, _lib, retain: true, release: true);
  }

  bool get hasShadow {
    return _lib._objc_msgSend_12(_id, _lib._sel_hasShadow1);
  }

  set hasShadow(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setHasShadow_1, value);
  }

  void invalidateShadow() {
    _lib._objc_msgSend_1(_id, _lib._sel_invalidateShadow1);
  }

  double get alphaValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_alphaValue1)
        : _lib._objc_msgSend_81(_id, _lib._sel_alphaValue1);
  }

  set alphaValue(double value) {
    return _lib._objc_msgSend_140(_id, _lib._sel_setAlphaValue_1, value);
  }

  bool get opaque {
    return _lib._objc_msgSend_12(_id, _lib._sel_isOpaque1);
  }

  set opaque(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setOpaque_1, value);
  }

  /// ! `-setSharingType:` specifies whether the window content can be read and/or written from another process.  The default sharing type is \c NSWindowSharingReadOnly, which means other processes can read the window content (eg. for window capture) but cannot modify it.  If you set your window sharing type to \c NSWindowSharingNone, so that the content cannot be captured, your window will also not be able to participate in a number of system services, so this setting should be used with caution.  If you set your window sharing type to \c NSWindowSharingReadWrite, other processes can both read and modify the window content.
  int get sharingType {
    return _lib._objc_msgSend_292(_id, _lib._sel_sharingType1);
  }

  /// ! `-setSharingType:` specifies whether the window content can be read and/or written from another process.  The default sharing type is \c NSWindowSharingReadOnly, which means other processes can read the window content (eg. for window capture) but cannot modify it.  If you set your window sharing type to \c NSWindowSharingNone, so that the content cannot be captured, your window will also not be able to participate in a number of system services, so this setting should be used with caution.  If you set your window sharing type to \c NSWindowSharingReadWrite, other processes can both read and modify the window content.
  set sharingType(int value) {
    return _lib._objc_msgSend_293(_id, _lib._sel_setSharingType_1, value);
  }

  /// ! Controls whether threading of view drawing should be enabled for this window.  Defaults to \c YES.  When this is set to \c YES, AppKit's view system is allowed to perform `-drawRect:` activity for the window's views on threads other than the main thread, for views that have `canDrawConcurrently == YES`.  When this is set to \c NO, the window's views will be drawn serially as on 10.5 and earlier, even though some of the views may have `canDrawConcurrently == YES`.
  bool get allowsConcurrentViewDrawing {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsConcurrentViewDrawing1);
  }

  /// ! Controls whether threading of view drawing should be enabled for this window.  Defaults to \c YES.  When this is set to \c YES, AppKit's view system is allowed to perform `-drawRect:` activity for the window's views on threads other than the main thread, for views that have `canDrawConcurrently == YES`.  When this is set to \c NO, the window's views will be drawn serially as on 10.5 and earlier, even though some of the views may have `canDrawConcurrently == YES`.
  set allowsConcurrentViewDrawing(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAllowsConcurrentViewDrawing_1, value);
  }

  bool get displaysWhenScreenProfileChanges {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_displaysWhenScreenProfileChanges1);
  }

  set displaysWhenScreenProfileChanges(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setDisplaysWhenScreenProfileChanges_1, value);
  }

  /// !
  /// In recent macOS versions this method does not do anything and should not be called.
  void disableScreenUpdatesUntilFlush() {
    _lib._objc_msgSend_1(_id, _lib._sel_disableScreenUpdatesUntilFlush1);
  }

  /// ! This API controls whether the receiver is permitted onscreen before the user has logged in.  This property is off by default.  Alert panels and windows presented by input managers are examples of windows which should have this property set.
  bool get canBecomeVisibleWithoutLogin {
    return _lib._objc_msgSend_12(_id, _lib._sel_canBecomeVisibleWithoutLogin1);
  }

  /// ! This API controls whether the receiver is permitted onscreen before the user has logged in.  This property is off by default.  Alert panels and windows presented by input managers are examples of windows which should have this property set.
  set canBecomeVisibleWithoutLogin(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setCanBecomeVisibleWithoutLogin_1, value);
  }

  int get collectionBehavior {
    return _lib._objc_msgSend_294(_id, _lib._sel_collectionBehavior1);
  }

  set collectionBehavior(int value) {
    return _lib._objc_msgSend_295(
        _id, _lib._sel_setCollectionBehavior_1, value);
  }

  /// ! Provides for per-window control over automatic orderFront/orderOut animation behaviors added in 10.7.  Can be set to \c NSWindowAnimationBehaviorNone to disable Appkit's automatic animations for a given window, or to one of the other non-Default \c NSWindowAnimationBehavior values to override AppKit's automatic inference of appropriate animation behavior based on the window's apparent type.
  int get animationBehavior {
    return _lib._objc_msgSend_296(_id, _lib._sel_animationBehavior1);
  }

  /// ! Provides for per-window control over automatic orderFront/orderOut animation behaviors added in 10.7.  Can be set to \c NSWindowAnimationBehaviorNone to disable Appkit's automatic animations for a given window, or to one of the other non-Default \c NSWindowAnimationBehavior values to override AppKit's automatic inference of appropriate animation behavior based on the window's apparent type.
  set animationBehavior(int value) {
    return _lib._objc_msgSend_297(_id, _lib._sel_setAnimationBehavior_1, value);
  }

  /// ! Returns \c YES if this window is associated with the active space.  For visible windows, this API indicates whether the window is currently visible on the active space.  For offscreen windows, it indicates whether ordering the window onscreen would make it bring it onto the active space
  bool get onActiveSpace {
    return _lib._objc_msgSend_12(_id, _lib._sel_isOnActiveSpace1);
  }

  /// ! `-toggleFullScreen:` enters or exits for full screen. A window must have \c NSWindowCollectionBehaviorFullScreenAuxiliary or \c NSWindowCollectionBehaviorFullScreenPrimary included in the \c collectionBehavior property; if it does not, this method may simply do nothing.
  void toggleFullScreen_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_toggleFullScreen_1, sender?._id ?? ffi.nullptr);
  }

  NSString get stringWithSavedFrame {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_stringWithSavedFrame1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void setFrameFromString_(NSString string) {
    _lib._objc_msgSend_94(_id, _lib._sel_setFrameFromString_1, string._id);
  }

  void saveFrameUsingName_(NSString name) {
    _lib._objc_msgSend_94(_id, _lib._sel_saveFrameUsingName_1, name._id);
  }

  /// Set force=YES to use setFrameUsingName on a non-resizable window
  bool setFrameUsingName_force_(NSString name, bool force) {
    return _lib._objc_msgSend_257(
        _id, _lib._sel_setFrameUsingName_force_1, name._id, force);
  }

  bool setFrameUsingName_(NSString name) {
    return _lib._objc_msgSend_258(_id, _lib._sel_setFrameUsingName_1, name._id);
  }

  bool setFrameAutosaveName_(NSString name) {
    return _lib._objc_msgSend_258(
        _id, _lib._sel_setFrameAutosaveName_1, name._id);
  }

  NSString get frameAutosaveName {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_frameAutosaveName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static void removeFrameUsingName_(
      AuthenticationServices _lib, NSString name) {
    _lib._objc_msgSend_94(
        _lib._class_NSWindow1, _lib._sel_removeFrameUsingName_1, name._id);
  }

  /// NOTE: minSize/contentMinSize and maxSize/contentMaxSize are ignored when using autolayout.
  void getMinSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_minSize1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_minSize1);
  }

  /// NOTE: minSize/contentMinSize and maxSize/contentMaxSize are ignored when using autolayout.
  set minSize(CGSize value) {
    return _lib._objc_msgSend_272(_id, _lib._sel_setMinSize_1, value);
  }

  void getMaxSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_maxSize1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_maxSize1);
  }

  set maxSize(CGSize value) {
    return _lib._objc_msgSend_272(_id, _lib._sel_setMaxSize_1, value);
  }

  void getContentMinSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_contentMinSize1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_contentMinSize1);
  }

  set contentMinSize(CGSize value) {
    return _lib._objc_msgSend_272(_id, _lib._sel_setContentMinSize_1, value);
  }

  void getContentMaxSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_contentMaxSize1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_contentMaxSize1);
  }

  set contentMaxSize(CGSize value) {
    return _lib._objc_msgSend_272(_id, _lib._sel_setContentMaxSize_1, value);
  }

  /// These are the min and max values for a full screen tiled window.
  ///
  /// In general, one should not need to explicitly set the min/maxFullScreenContentSize. If an application does not change its window content upon entering full screen, then the normal auto layout min and max size will be sufficient, and one should not set these values. If an application does significantly rework the UI in full screen, then it may be necessary to set a min/maxFullScreenContentSize. This size is what is used to determine if a window can fit when it is in full screen in a tile. This property may be used even if the window does not support full screen, but are implicitly opted into supporting a full screen tile based on resizing behavior and window properties (see the collectionBehavior property). By default, the system uses auto layout to determine the min and max sizes. If auto layout is not used, contentMinSize and contentMaxSize are queried.
  void getMinFullScreenContentSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(
            stret, _id, _lib._sel_minFullScreenContentSize1)
        : stret.ref =
            _lib._objc_msgSend_209(_id, _lib._sel_minFullScreenContentSize1);
  }

  /// These are the min and max values for a full screen tiled window.
  ///
  /// In general, one should not need to explicitly set the min/maxFullScreenContentSize. If an application does not change its window content upon entering full screen, then the normal auto layout min and max size will be sufficient, and one should not set these values. If an application does significantly rework the UI in full screen, then it may be necessary to set a min/maxFullScreenContentSize. This size is what is used to determine if a window can fit when it is in full screen in a tile. This property may be used even if the window does not support full screen, but are implicitly opted into supporting a full screen tile based on resizing behavior and window properties (see the collectionBehavior property). By default, the system uses auto layout to determine the min and max sizes. If auto layout is not used, contentMinSize and contentMaxSize are queried.
  set minFullScreenContentSize(CGSize value) {
    return _lib._objc_msgSend_272(
        _id, _lib._sel_setMinFullScreenContentSize_1, value);
  }

  void getMaxFullScreenContentSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(
            stret, _id, _lib._sel_maxFullScreenContentSize1)
        : stret.ref =
            _lib._objc_msgSend_209(_id, _lib._sel_maxFullScreenContentSize1);
  }

  set maxFullScreenContentSize(CGSize value) {
    return _lib._objc_msgSend_272(
        _id, _lib._sel_setMaxFullScreenContentSize_1, value);
  }

  NSObject get deviceDescription {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_deviceDescription1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSWindowController? get windowController {
    final _ret = _lib._objc_msgSend_298(_id, _lib._sel_windowController1);
    return _ret.address == 0
        ? null
        : NSWindowController._(_ret, _lib, retain: true, release: true);
  }

  set windowController(NSWindowController? value) {
    return _lib._objc_msgSend_299(
        _id, _lib._sel_setWindowController_1, value?._id ?? ffi.nullptr);
  }

  /// This API presents modal-sheets on this window. It replaces NSApp's -beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:.
  ///
  /// If the window already has a presented sheet, it will queue up sheets presented after that. Once the presented sheet is dismissed, the next queued sheet will be presented, and so forth.
  /// Critical sheets will skip this queuing process and be immediately presented on top of existing sheets. The presented sheet will be temporarily disabled and be able to be interacted with after the critical sheet is dismissed, and will then continue as normal. Critical sheets should only be used for time-critical or important events, when the presentation of the sheet needs to be guaranteed (Critical Alerts will automatically use this API).
  void beginSheet_completionHandler_(
      NSWindow sheetWindow, ObjCBlock_ffiVoid_ffiLong? handler) {
    _lib._objc_msgSend_300(_id, _lib._sel_beginSheet_completionHandler_1,
        sheetWindow._id, handler?._id ?? ffi.nullptr);
  }

  void beginCriticalSheet_completionHandler_(
      NSWindow sheetWindow, ObjCBlock_ffiVoid_ffiLong? handler) {
    _lib._objc_msgSend_300(
        _id,
        _lib._sel_beginCriticalSheet_completionHandler_1,
        sheetWindow._id,
        handler?._id ?? ffi.nullptr);
  }

  void endSheet_(NSWindow sheetWindow) {
    _lib._objc_msgSend_301(_id, _lib._sel_endSheet_1, sheetWindow._id);
  }

  void endSheet_returnCode_(NSWindow sheetWindow, int returnCode) {
    _lib._objc_msgSend_302(
        _id, _lib._sel_endSheet_returnCode_1, sheetWindow._id, returnCode);
  }

  /// An ordered array of the sheets on the window. This consists of the presented sheets in top-to-bottom order, followed by queued sheets in the order they were queued. This does not include nested/sub-sheets.
  NSObject get sheets {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_sheets1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// Returns the top-most sheet if there is one or more sheets, or nil if there is no sheet.
  NSWindow? get attachedSheet {
    final _ret = _lib._objc_msgSend_109(_id, _lib._sel_attachedSheet1);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  bool get sheet {
    return _lib._objc_msgSend_12(_id, _lib._sel_isSheet1);
  }

  /// !
  /// Returns the window that the sheet is directly attached to. This is based on the logical attachment of the sheet, not visual attachment.
  /// This relationship exists starting when the sheet is begun (using \c NSApplication's `-beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo: or NSWindow's -beginSheet:completionHandler:`), and ending once it is ordered out.
  /// Returns nil if the window is not a sheet or has no sheet parent.
  NSWindow? get sheetParent {
    final _ret = _lib._objc_msgSend_109(_id, _lib._sel_sheetParent1);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  static NSButton? standardWindowButton_forStyleMask_(
      AuthenticationServices _lib, int b, int styleMask) {
    final _ret = _lib._objc_msgSend_303(_lib._class_NSWindow1,
        _lib._sel_standardWindowButton_forStyleMask_1, b, styleMask);
    return _ret.address == 0
        ? null
        : NSButton._(_ret, _lib, retain: true, release: true);
  }

  NSButton? standardWindowButton_(int b) {
    final _ret =
        _lib._objc_msgSend_304(_id, _lib._sel_standardWindowButton_1, b);
    return _ret.address == 0
        ? null
        : NSButton._(_ret, _lib, retain: true, release: true);
  }

  void addChildWindow_ordered_(NSWindow childWin, int place) {
    _lib._objc_msgSend_305(
        _id, _lib._sel_addChildWindow_ordered_1, childWin._id, place);
  }

  void removeChildWindow_(NSWindow childWin) {
    _lib._objc_msgSend_301(_id, _lib._sel_removeChildWindow_1, childWin._id);
  }

  NSObject? get childWindows {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_childWindows1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSWindow? get parentWindow {
    final _ret = _lib._objc_msgSend_109(_id, _lib._sel_parentWindow1);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  set parentWindow(NSWindow? value) {
    return _lib._objc_msgSend_306(
        _id, _lib._sel_setParentWindow_1, value?._id ?? ffi.nullptr);
  }

  /// If set, the receiver will inherit the appearance of that object, as well as use KVO to observe its effectiveAppearance for changes. Typically this is used for child windows that are shown from a parent window or specific view. Defaults to NSApp.
  NSObject get appearanceSource {
    final _ret = _lib._objc_msgSend_307(_id, _lib._sel_appearanceSource1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// If set, the receiver will inherit the appearance of that object, as well as use KVO to observe its effectiveAppearance for changes. Typically this is used for child windows that are shown from a parent window or specific view. Defaults to NSApp.
  set appearanceSource(NSObject value) {
    return _lib._objc_msgSend_308(
        _id, _lib._sel_setAppearanceSource_1, value._id);
  }

  NSColorSpace? get colorSpace {
    final _ret = _lib._objc_msgSend_309(_id, _lib._sel_colorSpace1);
    return _ret.address == 0
        ? null
        : NSColorSpace._(_ret, _lib, retain: true, release: true);
  }

  set colorSpace(NSColorSpace? value) {
    return _lib._objc_msgSend_310(
        _id, _lib._sel_setColorSpace_1, value?._id ?? ffi.nullptr);
  }

  /// ! `-canRepresentDisplayGamut:` returns \c YES if the colorSpace of the receiving window, and the \c colorSpace of the screen containing that window, are capable of representing the given display gamut
  bool canRepresentDisplayGamut_(int displayGamut) {
    return _lib._objc_msgSend_311(
        _id, _lib._sel_canRepresentDisplayGamut_1, displayGamut);
  }

  /// ! `+windowNumbersWithOptions:` returns an autoreleased array of \c NSNumbers containing windowNumbers for all visible windows satisfying options.  If no options are specified, only visible windows belonging to the calling application and on the active space are included.  If options include \c NSWindowNumberListAllApplications, visible windows belonging to all applications are included.  If options include \c NSWindowNumberListAllSpaces, visible windows on all spaces are included.  Windows on the active space are returned in z-order.
  /// Examples:
  /// To get an array of windowNumbers visible on the current space and belonging to the calling application:
  /// `windowNumbers = [NSWindow windowNumbersWithOptions:0];`
  /// To get an array of windowNumbers visible on any space and belonging to any application:
  /// `windowNumbers = [NSWindow windowNumbersWithOptions:NSWindowNumberListAllApplications|NSWindowNumberListAllSpaces];`
  /// To get an array of windowNumbers visible on any space and belonging to the calling application:
  /// `windowNumbers = [NSWindow windowNumbersWithOptions:NSWindowNumberListAllSpaces];`
  static NSObject? windowNumbersWithOptions_(
      AuthenticationServices _lib, int options) {
    final _ret = _lib._objc_msgSend_312(
        _lib._class_NSWindow1, _lib._sel_windowNumbersWithOptions_1, options);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// ! `+windowNumberAtPoint:belowWindowWithWindowNumber:` returns the number of the frontmost window that would be hit by a mouseDown at the screen location "point".  "windowNum" can be specified to exclude a given window along with all windows above it, and may belong to any application.  If no windows are to be excluded, specify 0 for "windowNum".  The windowNumber returned may correspond to a window in another application.
  static int windowNumberAtPoint_belowWindowWithWindowNumber_(
      AuthenticationServices _lib, CGPoint point, int windowNumber) {
    return _lib._objc_msgSend_313(
        _lib._class_NSWindow1,
        _lib._sel_windowNumberAtPoint_belowWindowWithWindowNumber_1,
        point,
        windowNumber);
  }

  int get occlusionState {
    return _lib._objc_msgSend_314(_id, _lib._sel_occlusionState1);
  }

  /// ! Specifies the style of separator displayed between the window's titlebar and content.
  ///
  /// The default value is NSTitlebarSeparatorStyleAutomatic. Changing this value will override any preference made by `NSSplitViewItem`.
  int get titlebarSeparatorStyle {
    return _lib._objc_msgSend_315(_id, _lib._sel_titlebarSeparatorStyle1);
  }

  /// ! Specifies the style of separator displayed between the window's titlebar and content.
  ///
  /// The default value is NSTitlebarSeparatorStyleAutomatic. Changing this value will override any preference made by `NSSplitViewItem`.
  set titlebarSeparatorStyle(int value) {
    return _lib._objc_msgSend_316(
        _id, _lib._sel_setTitlebarSeparatorStyle_1, value);
  }

  /// ! The main content view controller for the window. This provides the contentView of the window. Assigning this value will remove the existing contentView and will make the contentViewController.view the main contentView for the window. The default value is nil. The contentViewController only controls the contentView, and not the title of the window. The window title can easily be bound to the contentViewController with the following: [window bind:NSTitleBinding toObject:contentViewController withKeyPath:@"title" options:nil]. Setting the contentViewController will cause the window to resize based on the current size of the contentViewController. Autolayout should be used to restrict the size of the window. The value of the contentViewController is encoded in the NIB. Directly assigning a contentView will clear out the contentViewController.
  NSViewController? get contentViewController {
    final _ret = _lib._objc_msgSend_317(_id, _lib._sel_contentViewController1);
    return _ret.address == 0
        ? null
        : NSViewController._(_ret, _lib, retain: true, release: true);
  }

  /// ! The main content view controller for the window. This provides the contentView of the window. Assigning this value will remove the existing contentView and will make the contentViewController.view the main contentView for the window. The default value is nil. The contentViewController only controls the contentView, and not the title of the window. The window title can easily be bound to the contentViewController with the following: [window bind:NSTitleBinding toObject:contentViewController withKeyPath:@"title" options:nil]. Setting the contentViewController will cause the window to resize based on the current size of the contentViewController. Autolayout should be used to restrict the size of the window. The value of the contentViewController is encoded in the NIB. Directly assigning a contentView will clear out the contentViewController.
  set contentViewController(NSViewController? value) {
    return _lib._objc_msgSend_318(
        _id, _lib._sel_setContentViewController_1, value?._id ?? ffi.nullptr);
  }

  /// ! Convenience method for creating an autoreleased titled window with the given contentViewController. A basic NSWindow with the following attributes is made: titled, closable, resizable, miniaturizable. The window's title is automatically bound to the contentViewController's title. The size of the window can easily be controlled by utilizing autolayout and applying size constraints to the view (or its subviews). The window has isReleasedWhenClosed set to NO, and it must be explicitly retained to keep the window instance alive. To have it automatically be freed when it is closed, do the following: [window retain] and [window setReleasedWhenClosed:YES].
  static NSWindow windowWithContentViewController_(
      AuthenticationServices _lib, NSViewController contentViewController) {
    final _ret = _lib._objc_msgSend_319(_lib._class_NSWindow1,
        _lib._sel_windowWithContentViewController_1, contentViewController._id);
    return NSWindow._(_ret, _lib, retain: true, release: true);
  }

  /// ! Call to start a drag (moving the window) in the Window Server process. In general, this can be done after a mouseDown event has come in and been examined by an application or view. The view may determine it wants to allow that portion of the window to start a window drag, and can hand off the work to the Window Server process by calling this method. This allows the window to participate in space switching, and other system features. Pass the original mouseDown event to the method. The method will return right away, and a mouseUp may not get sent.
  void performWindowDragWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(
        _id, _lib._sel_performWindowDragWithEvent_1, event._id);
  }

  NSView? get initialFirstResponder {
    final _ret = _lib._objc_msgSend_122(_id, _lib._sel_initialFirstResponder1);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  set initialFirstResponder(NSView? value) {
    return _lib._objc_msgSend_190(
        _id, _lib._sel_setInitialFirstResponder_1, value?._id ?? ffi.nullptr);
  }

  void selectNextKeyView_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_selectNextKeyView_1, sender?._id ?? ffi.nullptr);
  }

  void selectPreviousKeyView_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_selectPreviousKeyView_1, sender?._id ?? ffi.nullptr);
  }

  void selectKeyViewFollowingView_(NSView view) {
    _lib._objc_msgSend_128(
        _id, _lib._sel_selectKeyViewFollowingView_1, view._id);
  }

  void selectKeyViewPrecedingView_(NSView view) {
    _lib._objc_msgSend_128(
        _id, _lib._sel_selectKeyViewPrecedingView_1, view._id);
  }

  int get keyViewSelectionDirection {
    return _lib._objc_msgSend_320(_id, _lib._sel_keyViewSelectionDirection1);
  }

  NSButtonCell? get defaultButtonCell {
    final _ret = _lib._objc_msgSend_321(_id, _lib._sel_defaultButtonCell1);
    return _ret.address == 0
        ? null
        : NSButtonCell._(_ret, _lib, retain: true, release: true);
  }

  set defaultButtonCell(NSButtonCell? value) {
    return _lib._objc_msgSend_322(
        _id, _lib._sel_setDefaultButtonCell_1, value?._id ?? ffi.nullptr);
  }

  void disableKeyEquivalentForDefaultButtonCell() {
    _lib._objc_msgSend_1(
        _id, _lib._sel_disableKeyEquivalentForDefaultButtonCell1);
  }

  void enableKeyEquivalentForDefaultButtonCell() {
    _lib._objc_msgSend_1(
        _id, _lib._sel_enableKeyEquivalentForDefaultButtonCell1);
  }

  bool get autorecalculatesKeyViewLoop {
    return _lib._objc_msgSend_12(_id, _lib._sel_autorecalculatesKeyViewLoop1);
  }

  set autorecalculatesKeyViewLoop(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAutorecalculatesKeyViewLoop_1, value);
  }

  void recalculateKeyViewLoop() {
    _lib._objc_msgSend_1(_id, _lib._sel_recalculateKeyViewLoop1);
  }

  NSToolbar? get toolbar {
    final _ret = _lib._objc_msgSend_323(_id, _lib._sel_toolbar1);
    return _ret.address == 0
        ? null
        : NSToolbar._(_ret, _lib, retain: true, release: true);
  }

  set toolbar(NSToolbar? value) {
    return _lib._objc_msgSend_324(
        _id, _lib._sel_setToolbar_1, value?._id ?? ffi.nullptr);
  }

  void toggleToolbarShown_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_toggleToolbarShown_1, sender?._id ?? ffi.nullptr);
  }

  void runToolbarCustomizationPalette_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_runToolbarCustomizationPalette_1,
        sender?._id ?? ffi.nullptr);
  }

  bool get showsToolbarButton {
    return _lib._objc_msgSend_12(_id, _lib._sel_showsToolbarButton1);
  }

  set showsToolbarButton(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setShowsToolbarButton_1, value);
  }

  /// ! Allows automatic window tabbing when the value is \c YES. By default, this will be set to \c YES, but applications can explicitly opt out of all automatic tabbing by setting it to NO, and can still adopted explicit window tabbing, if desired.
  static bool getAllowsAutomaticWindowTabbing(AuthenticationServices _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSWindow1, _lib._sel_allowsAutomaticWindowTabbing1);
  }

  /// ! Allows automatic window tabbing when the value is \c YES. By default, this will be set to \c YES, but applications can explicitly opt out of all automatic tabbing by setting it to NO, and can still adopted explicit window tabbing, if desired.
  static void setAllowsAutomaticWindowTabbing(
      AuthenticationServices _lib, bool value) {
    return _lib._objc_msgSend_103(_lib._class_NSWindow1,
        _lib._sel_setAllowsAutomaticWindowTabbing_1, value);
  }

  /// ! Returns the user's tabbing preference as set in System Preferences. This value should be queried anytime a new window is made to see if the user wants to automatically show it in tabs.
  static int getUserTabbingPreference(AuthenticationServices _lib) {
    return _lib._objc_msgSend_325(
        _lib._class_NSWindow1, _lib._sel_userTabbingPreference1);
  }

  /// ! Get and set the tabbing mode for this window. This should be set before a window is shown. The default value is \c NSWindowTabbingModeAutomatic. When the value is \c NSWindowTabbingModeAutomatic, the system will look at the \c userTabbingPreference and automatically tab windows together based on the tabbingIdentifier, when it is appropriate to do so.
  int get tabbingMode {
    return _lib._objc_msgSend_326(_id, _lib._sel_tabbingMode1);
  }

  /// ! Get and set the tabbing mode for this window. This should be set before a window is shown. The default value is \c NSWindowTabbingModeAutomatic. When the value is \c NSWindowTabbingModeAutomatic, the system will look at the \c userTabbingPreference and automatically tab windows together based on the tabbingIdentifier, when it is appropriate to do so.
  set tabbingMode(int value) {
    return _lib._objc_msgSend_327(_id, _lib._sel_setTabbingMode_1, value);
  }

  /// ! Windows with the same \c tabbingIdentifier will have the ability to be tabbed together when a window is being shown. This allows aggregation of similar windows. By default, the \c tabbingIdentifier will be generated based on inherent window properties, such as the window class name, the delegate class name, the window controller class name, and some additional state. Windows can be explicitly made to group together by using the same \c tabbingIdentifier.
  NSString get tabbingIdentifier {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_tabbingIdentifier1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  /// ! Windows with the same \c tabbingIdentifier will have the ability to be tabbed together when a window is being shown. This allows aggregation of similar windows. By default, the \c tabbingIdentifier will be generated based on inherent window properties, such as the window class name, the delegate class name, the window controller class name, and some additional state. Windows can be explicitly made to group together by using the same \c tabbingIdentifier.
  set tabbingIdentifier(NSString value) {
    return _lib._objc_msgSend_173(
        _id, _lib._sel_setTabbingIdentifier_1, value._id);
  }

  /// ! Actions that can be called to perform various tabbed window behaviors. UI that is hooked up to these items can be automatically validated by calling `NSWindow`'s \c validateUserInterfaceItem.
  void selectNextTab_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_selectNextTab_1, sender?._id ?? ffi.nullptr);
  }

  void selectPreviousTab_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_selectPreviousTab_1, sender?._id ?? ffi.nullptr);
  }

  void moveTabToNewWindow_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_moveTabToNewWindow_1, sender?._id ?? ffi.nullptr);
  }

  void mergeAllWindows_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_mergeAllWindows_1, sender?._id ?? ffi.nullptr);
  }

  void toggleTabBar_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_toggleTabBar_1, sender?._id ?? ffi.nullptr);
  }

  /// ! Toggle the Tab Picker / Tab Overview UI which is invoked via "Show All Tabs". Performs the toggle in an animated fashion. Use `tabGroup.isOverviewVisible` to find out if it is visible or not at a given time.
  void toggleTabOverview_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_toggleTabOverview_1, sender?._id ?? ffi.nullptr);
  }

  /// ! This is now a cover for `self.tabGroup.windows`, but will return nil if the window is not showing a tab bar.
  NSObject? get tabbedWindows {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_tabbedWindows1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// ! This is now a cover for `-[self.tabGroup addWindow:]`, which allows more precise placement.
  void addTabbedWindow_ordered_(NSWindow window, int ordered) {
    _lib._objc_msgSend_305(
        _id, _lib._sel_addTabbedWindow_ordered_1, window._id, ordered);
  }

  /// ! Access the properties for this window when it is a tabbed window environment. See the \c NSWindowTab header and comments for more information.
  NSWindowTab get tab {
    final _ret = _lib._objc_msgSend_328(_id, _lib._sel_tab1);
    return NSWindowTab._(_ret, _lib, retain: true, release: true);
  }

  /// ! Represents a tab group of windows. This \c tabGroup is lazily created on demand.
  NSWindowTabGroup? get tabGroup {
    final _ret = _lib._objc_msgSend_329(_id, _lib._sel_tabGroup1);
    return _ret.address == 0
        ? null
        : NSWindowTabGroup._(_ret, _lib, retain: true, release: true);
  }

  /// !
  /// @abstract Attempt to move window sharing (i.e. within a SharePlay session) from the receiver to another window. In response to this request, the user may choose to transfer sharing to the new window, or simply stop sharing the content.
  /// @param window
  /// A window that is replacing the reciever in representing the user's current activity.
  /// @param completionHandler
  /// A completion block that is called after the request finishes.
  /// @param error
  /// In the event of a failed transfer request, a non-nil error contains details about the failure.
  void transferWindowSharingToWindow_completionHandler_(
      NSWindow window, ObjCBlock_ffiVoid_NSError completionHandler) {
    _lib._objc_msgSend_330(
        _id,
        _lib._sel_transferWindowSharingToWindow_completionHandler_1,
        window._id,
        completionHandler._id);
  }

  /// !
  /// @abstract Indicates whether the receiver is the subject of an active SharePlay sharing session.
  bool get hasActiveWindowSharingSession {
    return _lib._objc_msgSend_12(_id, _lib._sel_hasActiveWindowSharingSession1);
  }

  /// ! Retrieve the layout direction of the window titlebar: this includes the standard window buttons (close/minimize/maximize buttons) and the title for this window. In general, this will return "right to left" (RTL) if the primary system language is RTL. The layout direction may be RTL even in applications that do not have a RTL language localization. This value should be utilized if an application uses titlebarAppearsTransparent and places controls underneath the titlebar.
  int get windowTitlebarLayoutDirection {
    return _lib._objc_msgSend_212(
        _id, _lib._sel_windowTitlebarLayoutDirection1);
  }

  /// ! Tracks events matching the supplied mask with the supplied tracking handler until the tracking handler explicitly terminates tracking. Each event is removed from the event queue then passed to the tracking handler. If a matching event does not exist in the event queue, then the main thread blocks in the specified runloop mode until an event of the requested type is received or the timeout expires. If the timeout expires, the tracking handler is called with a nil event. A negative timeout is interpreted as 0. Use \c NSEventDurationForever to never timeout. Tracking continues until `*stop` is set to \c YES. Calls to `-nextEventMatchingMask:…` are allowed inside the trackingHandler block. This method returns once tracking is terminated.
  void trackEventsMatchingMask_timeout_mode_handler_(int mask, double timeout,
      NSString mode, ObjCBlock_ffiVoid_NSEvent_bool trackingHandler) {
    _lib._objc_msgSend_331(
        _id,
        _lib._sel_trackEventsMatchingMask_timeout_mode_handler_1,
        mask,
        timeout,
        mode._id,
        trackingHandler._id);
  }

  NSEvent? nextEventMatchingMask_(int mask) {
    final _ret =
        _lib._objc_msgSend_332(_id, _lib._sel_nextEventMatchingMask_1, mask);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  NSEvent? nextEventMatchingMask_untilDate_inMode_dequeue_(
      int mask, NSDate? expiration, NSString mode, bool deqFlag) {
    final _ret = _lib._objc_msgSend_334(
        _id,
        _lib._sel_nextEventMatchingMask_untilDate_inMode_dequeue_1,
        mask,
        expiration?._id ?? ffi.nullptr,
        mode._id,
        deqFlag);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  void discardEventsMatchingMask_beforeEvent_(int mask, NSEvent? lastEvent) {
    _lib._objc_msgSend_335(
        _id,
        _lib._sel_discardEventsMatchingMask_beforeEvent_1,
        mask,
        lastEvent?._id ?? ffi.nullptr);
  }

  void postEvent_atStart_(NSEvent event, bool flag) {
    _lib._objc_msgSend_336(_id, _lib._sel_postEvent_atStart_1, event._id, flag);
  }

  void sendEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_sendEvent_1, event._id);
  }

  NSEvent? get currentEvent {
    final _ret = _lib._objc_msgSend_337(_id, _lib._sel_currentEvent1);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  bool get acceptsMouseMovedEvents {
    return _lib._objc_msgSend_12(_id, _lib._sel_acceptsMouseMovedEvents1);
  }

  set acceptsMouseMovedEvents(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAcceptsMouseMovedEvents_1, value);
  }

  bool get ignoresMouseEvents {
    return _lib._objc_msgSend_12(_id, _lib._sel_ignoresMouseEvents1);
  }

  set ignoresMouseEvents(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setIgnoresMouseEvents_1, value);
  }

  void getMouseLocationOutsideOfEventStream(ffi.Pointer<CGPoint> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_111_stret(
            stret, _id, _lib._sel_mouseLocationOutsideOfEventStream1)
        : stret.ref = _lib._objc_msgSend_111(
            _id, _lib._sel_mouseLocationOutsideOfEventStream1);
  }

  void disableCursorRects() {
    _lib._objc_msgSend_1(_id, _lib._sel_disableCursorRects1);
  }

  void enableCursorRects() {
    _lib._objc_msgSend_1(_id, _lib._sel_enableCursorRects1);
  }

  void discardCursorRects() {
    _lib._objc_msgSend_1(_id, _lib._sel_discardCursorRects1);
  }

  bool get areCursorRectsEnabled {
    return _lib._objc_msgSend_12(_id, _lib._sel_areCursorRectsEnabled1);
  }

  void invalidateCursorRectsForView_(NSView view) {
    _lib._objc_msgSend_128(
        _id, _lib._sel_invalidateCursorRectsForView_1, view._id);
  }

  void resetCursorRects() {
    _lib._objc_msgSend_1(_id, _lib._sel_resetCursorRects1);
  }

  void dragImage_at_offset_event_pasteboard_source_slideBack_(
      NSImage image,
      CGPoint baseLocation,
      CGSize initialOffset,
      NSEvent event,
      NSPasteboard pboard,
      NSObject sourceObj,
      bool slideFlag) {
    _lib._objc_msgSend_355(
        _id,
        _lib._sel_dragImage_at_offset_event_pasteboard_source_slideBack_1,
        image._id,
        baseLocation,
        initialOffset,
        event._id,
        pboard._id,
        sourceObj._id,
        slideFlag);
  }

  void registerForDraggedTypes_(NSArray newTypes) {
    _lib._objc_msgSend_356(
        _id, _lib._sel_registerForDraggedTypes_1, newTypes._id);
  }

  void unregisterDraggedTypes() {
    _lib._objc_msgSend_1(_id, _lib._sel_unregisterDraggedTypes1);
  }

  /// WindowRef
  NSWindow? initWithWindowRef_(ffi.Pointer<ffi.Void> windowRef) {
    final _ret =
        _lib._objc_msgSend_357(_id, _lib._sel_initWithWindowRef_1, windowRef);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  /// WindowRef
  ffi.Pointer<ffi.Void> get windowRef {
    return _lib._objc_msgSend_28(_id, _lib._sel_windowRef1);
  }

  /// Returns a new display link whose callback will be invoked in-sync with the display the window is on. If the window is not on any display the callback will not be invoked.
  CADisplayLink displayLinkWithTarget_selector_(
      NSObject target, ffi.Pointer<ObjCSel> selector) {
    final _ret = _lib._objc_msgSend_358(
        _id, _lib._sel_displayLinkWithTarget_selector_1, target._id, selector);
    return CADisplayLink._(_ret, _lib, retain: true, release: true);
  }

  void cacheImageInRect_(CGRect rect) {
    _lib._objc_msgSend_149(_id, _lib._sel_cacheImageInRect_1, rect);
  }

  void restoreCachedImage() {
    _lib._objc_msgSend_1(_id, _lib._sel_restoreCachedImage1);
  }

  void discardCachedImage() {
    _lib._objc_msgSend_1(_id, _lib._sel_discardCachedImage1);
  }

  static void menuChanged_(AuthenticationServices _lib, NSMenu menu) {
    _lib._objc_msgSend_359(
        _lib._class_NSWindow1, _lib._sel_menuChanged_1, menu._id);
  }

  /// gState is unused and should not be called.
  int gState() {
    return _lib._objc_msgSend_77(_id, _lib._sel_gState1);
  }

  /// The base/screen conversion methods are deprecated in 10.7 and later. Please use one of convertRectToScreen:, convertRectFromScreen:, convertPointToScreen:, or convertPointFromScreen: instead.
  void convertBaseToScreen_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertBaseToScreen_1, point)
        : stret.ref =
            _lib._objc_msgSend_147(_id, _lib._sel_convertBaseToScreen_1, point);
  }

  void convertScreenToBase_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertScreenToBase_1, point)
        : stret.ref =
            _lib._objc_msgSend_147(_id, _lib._sel_convertScreenToBase_1, point);
  }

  /// This method is deprecated and should not be used by applications targeting Mac OS X 10.7 or later.
  /// The implementation of this method will always return 1.0.  Please use -convertRectToBacking: and -backingScaleFactor instead.
  double userSpaceScaleFactor() {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_userSpaceScaleFactor1)
        : _lib._objc_msgSend_81(_id, _lib._sel_userSpaceScaleFactor1);
  }

  void useOptimizedDrawing_(bool flag) {
    _lib._objc_msgSend_195(_id, _lib._sel_useOptimizedDrawing_1, flag);
  }

  /// canStoreColor has not been needed or used in a while and is deprecated.
  bool canStoreColor() {
    return _lib._objc_msgSend_12(_id, _lib._sel_canStoreColor1);
  }

  void disableFlushWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_disableFlushWindow1);
  }

  void enableFlushWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_enableFlushWindow1);
  }

  bool get flushWindowDisabled {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFlushWindowDisabled1);
  }

  void flushWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_flushWindow1);
  }

  void flushWindowIfNeeded() {
    _lib._objc_msgSend_1(_id, _lib._sel_flushWindowIfNeeded1);
  }

  bool get autodisplay {
    return _lib._objc_msgSend_12(_id, _lib._sel_isAutodisplay1);
  }

  set autodisplay(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setAutodisplay_1, value);
  }

  /// Returns NSGraphicsContext used to render the receiver's content on the screen for the calling thread.
  NSGraphicsContext? get graphicsContext {
    final _ret = _lib._objc_msgSend_110(_id, _lib._sel_graphicsContext1);
    return _ret.address == 0
        ? null
        : NSGraphicsContext._(_ret, _lib, retain: true, release: true);
  }

  bool get oneShot {
    return _lib._objc_msgSend_12(_id, _lib._sel_isOneShot1);
  }

  set oneShot(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setOneShot_1, value);
  }

  int get preferredBackingLocation {
    return _lib._objc_msgSend_360(_id, _lib._sel_preferredBackingLocation1);
  }

  set preferredBackingLocation(int value) {
    return _lib._objc_msgSend_361(
        _id, _lib._sel_setPreferredBackingLocation_1, value);
  }

  int get backingLocation {
    return _lib._objc_msgSend_360(_id, _lib._sel_backingLocation1);
  }

  /// showsResizeIndicator is soft-deprecated in 10.14. It is ignored on 10.7 and newer, and should not be used.
  bool get showsResizeIndicator {
    return _lib._objc_msgSend_12(_id, _lib._sel_showsResizeIndicator1);
  }

  /// showsResizeIndicator is soft-deprecated in 10.14. It is ignored on 10.7 and newer, and should not be used.
  set showsResizeIndicator(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setShowsResizeIndicator_1, value);
  }

  @override
  NSWindow init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSWindow._(_ret, _lib, retain: true, release: true);
  }

  static NSWindow new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSWindow1, _lib._sel_new1);
    return NSWindow._(_ret, _lib, retain: false, release: true);
  }

  static NSWindow allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSWindow1, _lib._sel_allocWithZone_1, zone);
    return NSWindow._(_ret, _lib, retain: false, release: true);
  }

  static NSWindow alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSWindow1, _lib._sel_alloc1);
    return NSWindow._(_ret, _lib, retain: false, release: true);
  }
}

class NSResponder extends NSObject {
  NSResponder._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSResponder] that points to the same underlying object as [other].
  static NSResponder castFrom<T extends _ObjCWrapper>(T other) {
    return NSResponder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSResponder] that wraps the given raw object pointer.
  static NSResponder castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSResponder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSResponder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSResponder1);
  }

  @override
  NSResponder init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSResponder._(_ret, _lib, retain: true, release: true);
  }

  NSResponder? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSResponder._(_ret, _lib, retain: true, release: true);
  }

  NSResponder? get nextResponder {
    final _ret = _lib._objc_msgSend_104(_id, _lib._sel_nextResponder1);
    return _ret.address == 0
        ? null
        : NSResponder._(_ret, _lib, retain: true, release: true);
  }

  set nextResponder(NSResponder? value) {
    return _lib._objc_msgSend_105(
        _id, _lib._sel_setNextResponder_1, value?._id ?? ffi.nullptr);
  }

  bool tryToPerform_with_(ffi.Pointer<ObjCSel> action, NSObject? object) {
    return _lib._objc_msgSend_106(
        _id, _lib._sel_tryToPerform_with_1, action, object?._id ?? ffi.nullptr);
  }

  bool performKeyEquivalent_(NSEvent event) {
    return _lib._objc_msgSend_154(
        _id, _lib._sel_performKeyEquivalent_1, event._id);
  }

  NSObject? validRequestorForSendType_returnType_(
      NSString? sendType, NSString? returnType) {
    final _ret = _lib._objc_msgSend_235(
        _id,
        _lib._sel_validRequestorForSendType_returnType_1,
        sendType?._id ?? ffi.nullptr,
        returnType?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void mouseDown_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_mouseDown_1, event._id);
  }

  void rightMouseDown_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_rightMouseDown_1, event._id);
  }

  void otherMouseDown_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_otherMouseDown_1, event._id);
  }

  void mouseUp_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_mouseUp_1, event._id);
  }

  void rightMouseUp_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_rightMouseUp_1, event._id);
  }

  void otherMouseUp_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_otherMouseUp_1, event._id);
  }

  void mouseMoved_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_mouseMoved_1, event._id);
  }

  void mouseDragged_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_mouseDragged_1, event._id);
  }

  void scrollWheel_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_scrollWheel_1, event._id);
  }

  void rightMouseDragged_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_rightMouseDragged_1, event._id);
  }

  void otherMouseDragged_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_otherMouseDragged_1, event._id);
  }

  void mouseEntered_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_mouseEntered_1, event._id);
  }

  void mouseExited_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_mouseExited_1, event._id);
  }

  void keyDown_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_keyDown_1, event._id);
  }

  void keyUp_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_keyUp_1, event._id);
  }

  void flagsChanged_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_flagsChanged_1, event._id);
  }

  void tabletPoint_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_tabletPoint_1, event._id);
  }

  void tabletProximity_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_tabletProximity_1, event._id);
  }

  void cursorUpdate_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_cursorUpdate_1, event._id);
  }

  void magnifyWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_magnifyWithEvent_1, event._id);
  }

  void rotateWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_rotateWithEvent_1, event._id);
  }

  void swipeWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_swipeWithEvent_1, event._id);
  }

  void beginGestureWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_beginGestureWithEvent_1, event._id);
  }

  void endGestureWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_endGestureWithEvent_1, event._id);
  }

  void smartMagnifyWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_smartMagnifyWithEvent_1, event._id);
  }

  void changeModeWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_changeModeWithEvent_1, event._id);
  }

  void touchesBeganWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_touchesBeganWithEvent_1, event._id);
  }

  void touchesMovedWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_touchesMovedWithEvent_1, event._id);
  }

  void touchesEndedWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_touchesEndedWithEvent_1, event._id);
  }

  void touchesCancelledWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(
        _id, _lib._sel_touchesCancelledWithEvent_1, event._id);
  }

  void quickLookWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_quickLookWithEvent_1, event._id);
  }

  void pressureChangeWithEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_pressureChangeWithEvent_1, event._id);
  }

  void noResponderFor_(ffi.Pointer<ObjCSel> eventSelector) {
    _lib._objc_msgSend_7(_id, _lib._sel_noResponderFor_1, eventSelector);
  }

  bool get acceptsFirstResponder {
    return _lib._objc_msgSend_12(_id, _lib._sel_acceptsFirstResponder1);
  }

  bool becomeFirstResponder() {
    return _lib._objc_msgSend_12(_id, _lib._sel_becomeFirstResponder1);
  }

  bool resignFirstResponder() {
    return _lib._objc_msgSend_12(_id, _lib._sel_resignFirstResponder1);
  }

  void interpretKeyEvents_(NSObject eventArray) {
    _lib._objc_msgSend_22(_id, _lib._sel_interpretKeyEvents_1, eventArray._id);
  }

  void flushBufferedKeyEvents() {
    _lib._objc_msgSend_1(_id, _lib._sel_flushBufferedKeyEvents1);
  }

  NSMenu? get menu {
    final _ret = _lib._objc_msgSend_178(_id, _lib._sel_menu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  set menu(NSMenu? value) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_setMenu_1, value?._id ?? ffi.nullptr);
  }

  void showContextHelp_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_showContextHelp_1, sender?._id ?? ffi.nullptr);
  }

  void helpRequested_(NSEvent eventPtr) {
    _lib._objc_msgSend_236(_id, _lib._sel_helpRequested_1, eventPtr._id);
  }

  bool shouldBeTreatedAsInkEvent_(NSEvent event) {
    return _lib._objc_msgSend_154(
        _id, _lib._sel_shouldBeTreatedAsInkEvent_1, event._id);
  }

  bool wantsScrollEventsForSwipeTrackingOnAxis_(int axis) {
    return _lib._objc_msgSend_238(
        _id, _lib._sel_wantsScrollEventsForSwipeTrackingOnAxis_1, axis);
  }

  bool wantsForwardedScrollEventsForAxis_(int axis) {
    return _lib._objc_msgSend_238(
        _id, _lib._sel_wantsForwardedScrollEventsForAxis_1, axis);
  }

  NSObject? supplementalTargetForAction_sender_(
      ffi.Pointer<ObjCSel> action, NSObject? sender) {
    final _ret = _lib._objc_msgSend_239(
        _id,
        _lib._sel_supplementalTargetForAction_sender_1,
        action,
        sender?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSResponder new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSResponder1, _lib._sel_new1);
    return NSResponder._(_ret, _lib, retain: false, release: true);
  }

  static NSResponder allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSResponder1, _lib._sel_allocWithZone_1, zone);
    return NSResponder._(_ret, _lib, retain: false, release: true);
  }

  static NSResponder alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSResponder1, _lib._sel_alloc1);
    return NSResponder._(_ret, _lib, retain: false, release: true);
  }
}

class NSEvent extends NSObject {
  NSEvent._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSEvent] that points to the same underlying object as [other].
  static NSEvent castFrom<T extends _ObjCWrapper>(T other) {
    return NSEvent._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSEvent] that wraps the given raw object pointer.
  static NSEvent castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSEvent._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSEvent].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSEvent1);
  }

  int get type {
    return _lib._objc_msgSend_107(_id, _lib._sel_type1);
  }

  int get modifierFlags {
    return _lib._objc_msgSend_108(_id, _lib._sel_modifierFlags1);
  }

  double get timestamp {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_timestamp1)
        : _lib._objc_msgSend_81(_id, _lib._sel_timestamp1);
  }

  NSWindow? get window {
    final _ret = _lib._objc_msgSend_109(_id, _lib._sel_window1);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  int get windowNumber {
    return _lib._objc_msgSend_77(_id, _lib._sel_windowNumber1);
  }

  NSGraphicsContext? get context {
    final _ret = _lib._objc_msgSend_110(_id, _lib._sel_context1);
    return _ret.address == 0
        ? null
        : NSGraphicsContext._(_ret, _lib, retain: true, release: true);
  }

  int get clickCount {
    return _lib._objc_msgSend_77(_id, _lib._sel_clickCount1);
  }

  int get buttonNumber {
    return _lib._objc_msgSend_77(_id, _lib._sel_buttonNumber1);
  }

  int get eventNumber {
    return _lib._objc_msgSend_77(_id, _lib._sel_eventNumber1);
  }

  double get pressure {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_80_fpret(_id, _lib._sel_pressure1)
        : _lib._objc_msgSend_80(_id, _lib._sel_pressure1);
  }

  void getLocationInWindow(ffi.Pointer<CGPoint> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_111_stret(stret, _id, _lib._sel_locationInWindow1)
        : stret.ref = _lib._objc_msgSend_111(_id, _lib._sel_locationInWindow1);
  }

  double get deltaX {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_deltaX1)
        : _lib._objc_msgSend_81(_id, _lib._sel_deltaX1);
  }

  double get deltaY {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_deltaY1)
        : _lib._objc_msgSend_81(_id, _lib._sel_deltaY1);
  }

  double get deltaZ {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_deltaZ1)
        : _lib._objc_msgSend_81(_id, _lib._sel_deltaZ1);
  }

  bool get hasPreciseScrollingDeltas {
    return _lib._objc_msgSend_12(_id, _lib._sel_hasPreciseScrollingDeltas1);
  }

  double get scrollingDeltaX {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_scrollingDeltaX1)
        : _lib._objc_msgSend_81(_id, _lib._sel_scrollingDeltaX1);
  }

  double get scrollingDeltaY {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_scrollingDeltaY1)
        : _lib._objc_msgSend_81(_id, _lib._sel_scrollingDeltaY1);
  }

  int get momentumPhase {
    return _lib._objc_msgSend_112(_id, _lib._sel_momentumPhase1);
  }

  bool get directionInvertedFromDevice {
    return _lib._objc_msgSend_12(_id, _lib._sel_isDirectionInvertedFromDevice1);
  }

  NSString? get characters {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_characters1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get charactersIgnoringModifiers {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_charactersIgnoringModifiers1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? charactersByApplyingModifiers_(int modifiers) {
    final _ret = _lib._objc_msgSend_113(
        _id, _lib._sel_charactersByApplyingModifiers_1, modifiers);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get ARepeat {
    return _lib._objc_msgSend_12(_id, _lib._sel_isARepeat1);
  }

  int get keyCode {
    return _lib._objc_msgSend_74(_id, _lib._sel_keyCode1);
  }

  int get trackingNumber {
    return _lib._objc_msgSend_77(_id, _lib._sel_trackingNumber1);
  }

  ffi.Pointer<ffi.Void> get userData {
    return _lib._objc_msgSend_28(_id, _lib._sel_userData1);
  }

  NSTrackingArea? get trackingArea {
    final _ret = _lib._objc_msgSend_114(_id, _lib._sel_trackingArea1);
    return _ret.address == 0
        ? null
        : NSTrackingArea._(_ret, _lib, retain: true, release: true);
  }

  int get subtype {
    return _lib._objc_msgSend_115(_id, _lib._sel_subtype1);
  }

  int get data1 {
    return _lib._objc_msgSend_77(_id, _lib._sel_data11);
  }

  int get data2 {
    return _lib._objc_msgSend_77(_id, _lib._sel_data21);
  }

  ffi.Pointer<ffi.Void> get eventRef {
    return _lib._objc_msgSend_28(_id, _lib._sel_eventRef1);
  }

  static NSEvent? eventWithEventRef_(
      AuthenticationServices _lib, ffi.Pointer<ffi.Void> eventRef) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSEvent1, _lib._sel_eventWithEventRef_1, eventRef);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<__CGEvent> get CGEvent {
    return _lib._objc_msgSend_117(_id, _lib._sel_CGEvent1);
  }

  static NSEvent? eventWithCGEvent_(
      AuthenticationServices _lib, ffi.Pointer<__CGEvent> cgEvent) {
    final _ret = _lib._objc_msgSend_118(
        _lib._class_NSEvent1, _lib._sel_eventWithCGEvent_1, cgEvent);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  static bool getMouseCoalescingEnabled(AuthenticationServices _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSEvent1, _lib._sel_isMouseCoalescingEnabled1);
  }

  static void setMouseCoalescingEnabled(
      AuthenticationServices _lib, bool value) {
    return _lib._objc_msgSend_103(
        _lib._class_NSEvent1, _lib._sel_setMouseCoalescingEnabled_1, value);
  }

  double get magnification {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_magnification1)
        : _lib._objc_msgSend_81(_id, _lib._sel_magnification1);
  }

  int get deviceID {
    return _lib._objc_msgSend_10(_id, _lib._sel_deviceID1);
  }

  double get rotation {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_80_fpret(_id, _lib._sel_rotation1)
        : _lib._objc_msgSend_80(_id, _lib._sel_rotation1);
  }

  int get absoluteX {
    return _lib._objc_msgSend_77(_id, _lib._sel_absoluteX1);
  }

  int get absoluteY {
    return _lib._objc_msgSend_77(_id, _lib._sel_absoluteY1);
  }

  int get absoluteZ {
    return _lib._objc_msgSend_77(_id, _lib._sel_absoluteZ1);
  }

  int get buttonMask {
    return _lib._objc_msgSend_119(_id, _lib._sel_buttonMask1);
  }

  void getTilt(ffi.Pointer<CGPoint> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_111_stret(stret, _id, _lib._sel_tilt1)
        : stret.ref = _lib._objc_msgSend_111(_id, _lib._sel_tilt1);
  }

  double get tangentialPressure {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_80_fpret(_id, _lib._sel_tangentialPressure1)
        : _lib._objc_msgSend_80(_id, _lib._sel_tangentialPressure1);
  }

  NSObject get vendorDefined {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_vendorDefined1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get vendorID {
    return _lib._objc_msgSend_10(_id, _lib._sel_vendorID1);
  }

  int get tabletID {
    return _lib._objc_msgSend_10(_id, _lib._sel_tabletID1);
  }

  int get pointingDeviceID {
    return _lib._objc_msgSend_10(_id, _lib._sel_pointingDeviceID1);
  }

  int get systemTabletID {
    return _lib._objc_msgSend_10(_id, _lib._sel_systemTabletID1);
  }

  int get vendorPointingDeviceType {
    return _lib._objc_msgSend_10(_id, _lib._sel_vendorPointingDeviceType1);
  }

  int get pointingDeviceSerialNumber {
    return _lib._objc_msgSend_10(_id, _lib._sel_pointingDeviceSerialNumber1);
  }

  int get uniqueID {
    return _lib._objc_msgSend_79(_id, _lib._sel_uniqueID1);
  }

  int get capabilityMask {
    return _lib._objc_msgSend_10(_id, _lib._sel_capabilityMask1);
  }

  int get pointingDeviceType {
    return _lib._objc_msgSend_120(_id, _lib._sel_pointingDeviceType1);
  }

  bool get enteringProximity {
    return _lib._objc_msgSend_12(_id, _lib._sel_isEnteringProximity1);
  }

  NSObject touchesMatchingPhase_inView_(int phase, NSView? view) {
    final _ret = _lib._objc_msgSend_221(
        _id,
        _lib._sel_touchesMatchingPhase_inView_1,
        phase,
        view?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject allTouches() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allTouches1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject touchesForView_(NSView view) {
    final _ret =
        _lib._objc_msgSend_222(_id, _lib._sel_touchesForView_1, view._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject coalescedTouchesForTouch_(NSTouch touch) {
    final _ret = _lib._objc_msgSend_224(
        _id, _lib._sel_coalescedTouchesForTouch_1, touch._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get phase {
    return _lib._objc_msgSend_112(_id, _lib._sel_phase1);
  }

  int get stage {
    return _lib._objc_msgSend_77(_id, _lib._sel_stage1);
  }

  double get stageTransition {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_stageTransition1)
        : _lib._objc_msgSend_81(_id, _lib._sel_stageTransition1);
  }

  int get associatedEventsMask {
    return _lib._objc_msgSend_225(_id, _lib._sel_associatedEventsMask1);
  }

  int get pressureBehavior {
    return _lib._objc_msgSend_226(_id, _lib._sel_pressureBehavior1);
  }

  static bool getSwipeTrackingFromScrollEventsEnabled(
      AuthenticationServices _lib) {
    return _lib._objc_msgSend_12(_lib._class_NSEvent1,
        _lib._sel_isSwipeTrackingFromScrollEventsEnabled1);
  }

  void trackSwipeEventWithOptions_dampenAmountThresholdMin_max_usingHandler_(
      int options,
      double minDampenThreshold,
      double maxDampenThreshold,
      ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool trackingHandler) {
    _lib._objc_msgSend_227(
        _id,
        _lib._sel_trackSwipeEventWithOptions_dampenAmountThresholdMin_max_usingHandler_1,
        options,
        minDampenThreshold,
        maxDampenThreshold,
        trackingHandler._id);
  }

  static void startPeriodicEventsAfterDelay_withPeriod_(
      AuthenticationServices _lib, double delay, double period) {
    _lib._objc_msgSend_228(_lib._class_NSEvent1,
        _lib._sel_startPeriodicEventsAfterDelay_withPeriod_1, delay, period);
  }

  static void stopPeriodicEvents(AuthenticationServices _lib) {
    _lib._objc_msgSend_1(_lib._class_NSEvent1, _lib._sel_stopPeriodicEvents1);
  }

  static NSEvent?
      mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_(
          AuthenticationServices _lib,
          int type,
          CGPoint location,
          int flags,
          double time,
          int wNum,
          NSGraphicsContext? unusedPassNil,
          int eNum,
          int cNum,
          double pressure) {
    final _ret = _lib._objc_msgSend_229(
        _lib._class_NSEvent1,
        _lib._sel_mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_1,
        type,
        location,
        flags,
        time,
        wNum,
        unusedPassNil?._id ?? ffi.nullptr,
        eNum,
        cNum,
        pressure);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  static NSEvent?
      keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode_(
          AuthenticationServices _lib,
          int type,
          CGPoint location,
          int flags,
          double time,
          int wNum,
          NSGraphicsContext? unusedPassNil,
          NSString keys,
          NSString ukeys,
          bool flag,
          int code) {
    final _ret = _lib._objc_msgSend_230(
        _lib._class_NSEvent1,
        _lib._sel_keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode_1,
        type,
        location,
        flags,
        time,
        wNum,
        unusedPassNil?._id ?? ffi.nullptr,
        keys._id,
        ukeys._id,
        flag,
        code);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  static NSEvent?
      enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData_(
          AuthenticationServices _lib,
          int type,
          CGPoint location,
          int flags,
          double time,
          int wNum,
          NSGraphicsContext? unusedPassNil,
          int eNum,
          int tNum,
          ffi.Pointer<ffi.Void> data) {
    final _ret = _lib._objc_msgSend_231(
        _lib._class_NSEvent1,
        _lib._sel_enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData_1,
        type,
        location,
        flags,
        time,
        wNum,
        unusedPassNil?._id ?? ffi.nullptr,
        eNum,
        tNum,
        data);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  static NSEvent?
      otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2_(
          AuthenticationServices _lib,
          int type,
          CGPoint location,
          int flags,
          double time,
          int wNum,
          NSGraphicsContext? unusedPassNil,
          int subtype,
          int d1,
          int d2) {
    final _ret = _lib._objc_msgSend_232(
        _lib._class_NSEvent1,
        _lib._sel_otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2_1,
        type,
        location,
        flags,
        time,
        wNum,
        unusedPassNil?._id ?? ffi.nullptr,
        subtype,
        d1,
        d2);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  static void getMouseLocation(
      AuthenticationServices _lib, ffi.Pointer<CGPoint> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_111_stret(
            stret, _lib._class_NSEvent1, _lib._sel_mouseLocation1)
        : stret.ref = _lib._objc_msgSend_111(
            _lib._class_NSEvent1, _lib._sel_mouseLocation1);
  }

  static int getPressedMouseButtons(AuthenticationServices _lib) {
    return _lib._objc_msgSend_10(
        _lib._class_NSEvent1, _lib._sel_pressedMouseButtons1);
  }

  static double getDoubleClickInterval(AuthenticationServices _lib) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(
            _lib._class_NSEvent1, _lib._sel_doubleClickInterval1)
        : _lib._objc_msgSend_81(
            _lib._class_NSEvent1, _lib._sel_doubleClickInterval1);
  }

  static double getKeyRepeatDelay(AuthenticationServices _lib) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(
            _lib._class_NSEvent1, _lib._sel_keyRepeatDelay1)
        : _lib._objc_msgSend_81(
            _lib._class_NSEvent1, _lib._sel_keyRepeatDelay1);
  }

  static double getKeyRepeatInterval(AuthenticationServices _lib) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(
            _lib._class_NSEvent1, _lib._sel_keyRepeatInterval1)
        : _lib._objc_msgSend_81(
            _lib._class_NSEvent1, _lib._sel_keyRepeatInterval1);
  }

  static NSObject? addGlobalMonitorForEventsMatchingMask_handler_(
      AuthenticationServices _lib, int mask, ObjCBlock_ffiVoid_NSEvent block) {
    final _ret = _lib._objc_msgSend_233(
        _lib._class_NSEvent1,
        _lib._sel_addGlobalMonitorForEventsMatchingMask_handler_1,
        mask,
        block._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? addLocalMonitorForEventsMatchingMask_handler_(
      AuthenticationServices _lib, int mask, ObjCBlock_NSEvent_NSEvent block) {
    final _ret = _lib._objc_msgSend_234(
        _lib._class_NSEvent1,
        _lib._sel_addLocalMonitorForEventsMatchingMask_handler_1,
        mask,
        block._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void removeMonitor_(
      AuthenticationServices _lib, NSObject eventMonitor) {
    _lib._objc_msgSend_22(
        _lib._class_NSEvent1, _lib._sel_removeMonitor_1, eventMonitor._id);
  }

  @override
  NSEvent init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSEvent._(_ret, _lib, retain: true, release: true);
  }

  static NSEvent new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSEvent1, _lib._sel_new1);
    return NSEvent._(_ret, _lib, retain: false, release: true);
  }

  static NSEvent allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSEvent1, _lib._sel_allocWithZone_1, zone);
    return NSEvent._(_ret, _lib, retain: false, release: true);
  }

  static NSEvent alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSEvent1, _lib._sel_alloc1);
    return NSEvent._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSEventType {
  static const int NSEventTypeLeftMouseDown = 1;
  static const int NSEventTypeLeftMouseUp = 2;
  static const int NSEventTypeRightMouseDown = 3;
  static const int NSEventTypeRightMouseUp = 4;
  static const int NSEventTypeMouseMoved = 5;
  static const int NSEventTypeLeftMouseDragged = 6;
  static const int NSEventTypeRightMouseDragged = 7;
  static const int NSEventTypeMouseEntered = 8;
  static const int NSEventTypeMouseExited = 9;
  static const int NSEventTypeKeyDown = 10;
  static const int NSEventTypeKeyUp = 11;
  static const int NSEventTypeFlagsChanged = 12;
  static const int NSEventTypeAppKitDefined = 13;
  static const int NSEventTypeSystemDefined = 14;
  static const int NSEventTypeApplicationDefined = 15;
  static const int NSEventTypePeriodic = 16;
  static const int NSEventTypeCursorUpdate = 17;
  static const int NSEventTypeScrollWheel = 22;
  static const int NSEventTypeTabletPoint = 23;
  static const int NSEventTypeTabletProximity = 24;
  static const int NSEventTypeOtherMouseDown = 25;
  static const int NSEventTypeOtherMouseUp = 26;
  static const int NSEventTypeOtherMouseDragged = 27;
  static const int NSEventTypeGesture = 29;
  static const int NSEventTypeMagnify = 30;
  static const int NSEventTypeSwipe = 31;
  static const int NSEventTypeRotate = 18;
  static const int NSEventTypeBeginGesture = 19;
  static const int NSEventTypeEndGesture = 20;
  static const int NSEventTypeSmartMagnify = 32;
  static const int NSEventTypeQuickLook = 33;
  static const int NSEventTypePressure = 34;
  static const int NSEventTypeDirectTouch = 37;
  static const int NSEventTypeChangeMode = 38;
}

abstract class NSEventModifierFlags {
  static const int NSEventModifierFlagCapsLock = 65536;
  static const int NSEventModifierFlagShift = 131072;
  static const int NSEventModifierFlagControl = 262144;
  static const int NSEventModifierFlagOption = 524288;
  static const int NSEventModifierFlagCommand = 1048576;
  static const int NSEventModifierFlagNumericPad = 2097152;
  static const int NSEventModifierFlagHelp = 4194304;
  static const int NSEventModifierFlagFunction = 8388608;
  static const int NSEventModifierFlagDeviceIndependentFlagsMask = 4294901760;
}

class NSGraphicsContext extends _ObjCWrapper {
  NSGraphicsContext._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSGraphicsContext] that points to the same underlying object as [other].
  static NSGraphicsContext castFrom<T extends _ObjCWrapper>(T other) {
    return NSGraphicsContext._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSGraphicsContext] that wraps the given raw object pointer.
  static NSGraphicsContext castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSGraphicsContext._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSGraphicsContext].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSGraphicsContext1);
  }
}

final class CGPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

abstract class NSEventPhase {
  static const int NSEventPhaseNone = 0;
  static const int NSEventPhaseBegan = 1;
  static const int NSEventPhaseStationary = 2;
  static const int NSEventPhaseChanged = 4;
  static const int NSEventPhaseEnded = 8;
  static const int NSEventPhaseCancelled = 16;
  static const int NSEventPhaseMayBegin = 32;
}

class NSTrackingArea extends _ObjCWrapper {
  NSTrackingArea._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSTrackingArea] that points to the same underlying object as [other].
  static NSTrackingArea castFrom<T extends _ObjCWrapper>(T other) {
    return NSTrackingArea._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSTrackingArea] that wraps the given raw object pointer.
  static NSTrackingArea castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSTrackingArea._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTrackingArea].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSTrackingArea1);
  }
}

abstract class NSEventSubtype {
  static const int NSEventSubtypeWindowExposed = 0;
  static const int NSEventSubtypeApplicationActivated = 1;
  static const int NSEventSubtypeApplicationDeactivated = 2;
  static const int NSEventSubtypeWindowMoved = 4;
  static const int NSEventSubtypeScreenChanged = 8;
  static const int NSEventSubtypePowerOff = 1;
  static const int NSEventSubtypeMouseEvent = 0;
  static const int NSEventSubtypeTabletPoint = 1;
  static const int NSEventSubtypeTabletProximity = 2;
  static const int NSEventSubtypeTouch = 3;
}

final class __CGEvent extends ffi.Opaque {}

abstract class NSEventButtonMask {
  static const int NSEventButtonMaskPenTip = 1;
  static const int NSEventButtonMaskPenLowerSide = 2;
  static const int NSEventButtonMaskPenUpperSide = 4;
}

abstract class NSPointingDeviceType {
  static const int NSPointingDeviceTypeUnknown = 0;
  static const int NSPointingDeviceTypePen = 1;
  static const int NSPointingDeviceTypeCursor = 2;
  static const int NSPointingDeviceTypeEraser = 3;
}

abstract class NSTouchPhase {
  static const int NSTouchPhaseBegan = 1;
  static const int NSTouchPhaseMoved = 2;
  static const int NSTouchPhaseStationary = 4;
  static const int NSTouchPhaseEnded = 8;
  static const int NSTouchPhaseCancelled = 16;
  static const int NSTouchPhaseTouching = 7;
  static const int NSTouchPhaseAny = -1;
}

class NSView extends NSResponder {
  NSView._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSView] that points to the same underlying object as [other].
  static NSView castFrom<T extends _ObjCWrapper>(T other) {
    return NSView._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSView] that wraps the given raw object pointer.
  static NSView castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSView._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSView].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSView1);
  }

  NSView initWithFrame_(CGRect frameRect) {
    final _ret =
        _lib._objc_msgSend_121(_id, _lib._sel_initWithFrame_1, frameRect);
    return NSView._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSView? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  NSWindow? get window {
    final _ret = _lib._objc_msgSend_109(_id, _lib._sel_window1);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  NSView? get superview {
    final _ret = _lib._objc_msgSend_122(_id, _lib._sel_superview1);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  NSObject get subviews {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_subviews1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set subviews(NSObject value) {
    return _lib._objc_msgSend_123(_id, _lib._sel_setSubviews_1, value._id);
  }

  bool isDescendantOf_(NSView view) {
    return _lib._objc_msgSend_124(_id, _lib._sel_isDescendantOf_1, view._id);
  }

  NSView? ancestorSharedWithView_(NSView view) {
    final _ret = _lib._objc_msgSend_125(
        _id, _lib._sel_ancestorSharedWithView_1, view._id);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  NSView? get opaqueAncestor {
    final _ret = _lib._objc_msgSend_122(_id, _lib._sel_opaqueAncestor1);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  bool get hidden {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHidden1);
  }

  set hidden(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setHidden_1, value);
  }

  bool get hiddenOrHasHiddenAncestor {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHiddenOrHasHiddenAncestor1);
  }

  void getRectsBeingDrawn_count_(
      ffi.Pointer<ffi.Pointer<CGRect>> rects, ffi.Pointer<ffi.Long> count) {
    _lib._objc_msgSend_126(
        _id, _lib._sel_getRectsBeingDrawn_count_1, rects, count);
  }

  bool needsToDrawRect_(CGRect rect) {
    return _lib._objc_msgSend_127(_id, _lib._sel_needsToDrawRect_1, rect);
  }

  bool get wantsDefaultClipping {
    return _lib._objc_msgSend_12(_id, _lib._sel_wantsDefaultClipping1);
  }

  void viewDidHide() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewDidHide1);
  }

  void viewDidUnhide() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewDidUnhide1);
  }

  void addSubview_(NSView view) {
    _lib._objc_msgSend_128(_id, _lib._sel_addSubview_1, view._id);
  }

  void addSubview_positioned_relativeTo_(
      NSView view, int place, NSView? otherView) {
    _lib._objc_msgSend_129(_id, _lib._sel_addSubview_positioned_relativeTo_1,
        view._id, place, otherView?._id ?? ffi.nullptr);
  }

  void sortSubviewsUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    _lib._objc_msgSend_130(
        _id, _lib._sel_sortSubviewsUsingFunction_context_1, compare, context);
  }

  void viewWillMoveToWindow_(NSWindow? newWindow) {
    _lib._objc_msgSend_131(
        _id, _lib._sel_viewWillMoveToWindow_1, newWindow?._id ?? ffi.nullptr);
  }

  void viewDidMoveToWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewDidMoveToWindow1);
  }

  void viewWillMoveToSuperview_(NSView? newSuperview) {
    _lib._objc_msgSend_132(_id, _lib._sel_viewWillMoveToSuperview_1,
        newSuperview?._id ?? ffi.nullptr);
  }

  void viewDidMoveToSuperview() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewDidMoveToSuperview1);
  }

  void didAddSubview_(NSView subview) {
    _lib._objc_msgSend_128(_id, _lib._sel_didAddSubview_1, subview._id);
  }

  void willRemoveSubview_(NSView subview) {
    _lib._objc_msgSend_128(_id, _lib._sel_willRemoveSubview_1, subview._id);
  }

  void removeFromSuperview() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeFromSuperview1);
  }

  void replaceSubview_with_(NSView oldView, NSView newView) {
    _lib._objc_msgSend_133(
        _id, _lib._sel_replaceSubview_with_1, oldView._id, newView._id);
  }

  void removeFromSuperviewWithoutNeedingDisplay() {
    _lib._objc_msgSend_1(
        _id, _lib._sel_removeFromSuperviewWithoutNeedingDisplay1);
  }

  void viewDidChangeBackingProperties() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewDidChangeBackingProperties1);
  }

  bool get postsFrameChangedNotifications {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_postsFrameChangedNotifications1);
  }

  set postsFrameChangedNotifications(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setPostsFrameChangedNotifications_1, value);
  }

  void resizeSubviewsWithOldSize_(CGSize oldSize) {
    _lib._objc_msgSend_134(_id, _lib._sel_resizeSubviewsWithOldSize_1, oldSize);
  }

  void resizeWithOldSuperviewSize_(CGSize oldSize) {
    _lib._objc_msgSend_134(
        _id, _lib._sel_resizeWithOldSuperviewSize_1, oldSize);
  }

  bool get autoresizesSubviews {
    return _lib._objc_msgSend_12(_id, _lib._sel_autoresizesSubviews1);
  }

  set autoresizesSubviews(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAutoresizesSubviews_1, value);
  }

  int get autoresizingMask {
    return _lib._objc_msgSend_135(_id, _lib._sel_autoresizingMask1);
  }

  set autoresizingMask(int value) {
    return _lib._objc_msgSend_136(_id, _lib._sel_setAutoresizingMask_1, value);
  }

  void setFrameOrigin_(CGPoint newOrigin) {
    _lib._objc_msgSend_137(_id, _lib._sel_setFrameOrigin_1, newOrigin);
  }

  void setFrameSize_(CGSize newSize) {
    _lib._objc_msgSend_134(_id, _lib._sel_setFrameSize_1, newSize);
  }

  void getFrame(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_138_stret(stret, _id, _lib._sel_frame1)
        : stret.ref = _lib._objc_msgSend_138(_id, _lib._sel_frame1);
  }

  set frame(CGRect value) {
    return _lib._objc_msgSend_139(_id, _lib._sel_setFrame_1, value);
  }

  double get frameRotation {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_frameRotation1)
        : _lib._objc_msgSend_81(_id, _lib._sel_frameRotation1);
  }

  set frameRotation(double value) {
    return _lib._objc_msgSend_140(_id, _lib._sel_setFrameRotation_1, value);
  }

  double get frameCenterRotation {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_frameCenterRotation1)
        : _lib._objc_msgSend_81(_id, _lib._sel_frameCenterRotation1);
  }

  set frameCenterRotation(double value) {
    return _lib._objc_msgSend_140(
        _id, _lib._sel_setFrameCenterRotation_1, value);
  }

  void setBoundsOrigin_(CGPoint newOrigin) {
    _lib._objc_msgSend_137(_id, _lib._sel_setBoundsOrigin_1, newOrigin);
  }

  void setBoundsSize_(CGSize newSize) {
    _lib._objc_msgSend_134(_id, _lib._sel_setBoundsSize_1, newSize);
  }

  double get boundsRotation {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_boundsRotation1)
        : _lib._objc_msgSend_81(_id, _lib._sel_boundsRotation1);
  }

  set boundsRotation(double value) {
    return _lib._objc_msgSend_140(_id, _lib._sel_setBoundsRotation_1, value);
  }

  void translateOriginToPoint_(CGPoint translation) {
    _lib._objc_msgSend_137(
        _id, _lib._sel_translateOriginToPoint_1, translation);
  }

  void scaleUnitSquareToSize_(CGSize newUnitSize) {
    _lib._objc_msgSend_134(_id, _lib._sel_scaleUnitSquareToSize_1, newUnitSize);
  }

  void rotateByAngle_(double angle) {
    _lib._objc_msgSend_141(_id, _lib._sel_rotateByAngle_1, angle);
  }

  void getBounds(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_138_stret(stret, _id, _lib._sel_bounds1)
        : stret.ref = _lib._objc_msgSend_138(_id, _lib._sel_bounds1);
  }

  set bounds(CGRect value) {
    return _lib._objc_msgSend_139(_id, _lib._sel_setBounds_1, value);
  }

  bool get flipped {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFlipped1);
  }

  bool get rotatedFromBase {
    return _lib._objc_msgSend_12(_id, _lib._sel_isRotatedFromBase1);
  }

  bool get rotatedOrScaledFromBase {
    return _lib._objc_msgSend_12(_id, _lib._sel_isRotatedOrScaledFromBase1);
  }

  bool get opaque {
    return _lib._objc_msgSend_12(_id, _lib._sel_isOpaque1);
  }

  void convertPoint_fromView_(
      ffi.Pointer<CGPoint> stret, CGPoint point, NSView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_142_stret(stret, _id,
            _lib._sel_convertPoint_fromView_1, point, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_142(_id,
            _lib._sel_convertPoint_fromView_1, point, view?._id ?? ffi.nullptr);
  }

  void convertPoint_toView_(
      ffi.Pointer<CGPoint> stret, CGPoint point, NSView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_142_stret(stret, _id,
            _lib._sel_convertPoint_toView_1, point, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_142(_id,
            _lib._sel_convertPoint_toView_1, point, view?._id ?? ffi.nullptr);
  }

  void convertSize_fromView_(
      ffi.Pointer<CGSize> stret, CGSize size, NSView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_143_stret(stret, _id,
            _lib._sel_convertSize_fromView_1, size, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_143(_id,
            _lib._sel_convertSize_fromView_1, size, view?._id ?? ffi.nullptr);
  }

  void convertSize_toView_(
      ffi.Pointer<CGSize> stret, CGSize size, NSView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_143_stret(stret, _id,
            _lib._sel_convertSize_toView_1, size, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_143(_id,
            _lib._sel_convertSize_toView_1, size, view?._id ?? ffi.nullptr);
  }

  void convertRect_fromView_(
      ffi.Pointer<CGRect> stret, CGRect rect, NSView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_144_stret(stret, _id,
            _lib._sel_convertRect_fromView_1, rect, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_144(_id,
            _lib._sel_convertRect_fromView_1, rect, view?._id ?? ffi.nullptr);
  }

  void convertRect_toView_(
      ffi.Pointer<CGRect> stret, CGRect rect, NSView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_144_stret(stret, _id,
            _lib._sel_convertRect_toView_1, rect, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_144(_id,
            _lib._sel_convertRect_toView_1, rect, view?._id ?? ffi.nullptr);
  }

  void backingAlignedRect_options_(
      ffi.Pointer<CGRect> stret, CGRect rect, int options) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_145_stret(
            stret, _id, _lib._sel_backingAlignedRect_options_1, rect, options)
        : stret.ref = _lib._objc_msgSend_145(
            _id, _lib._sel_backingAlignedRect_options_1, rect, options);
  }

  void centerScanRect_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_centerScanRect_1, rect)
        : stret.ref =
            _lib._objc_msgSend_146(_id, _lib._sel_centerScanRect_1, rect);
  }

  void convertPointToBacking_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertPointToBacking_1, point)
        : stret.ref = _lib._objc_msgSend_147(
            _id, _lib._sel_convertPointToBacking_1, point);
  }

  void convertPointFromBacking_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertPointFromBacking_1, point)
        : stret.ref = _lib._objc_msgSend_147(
            _id, _lib._sel_convertPointFromBacking_1, point);
  }

  void convertSizeToBacking_(ffi.Pointer<CGSize> stret, CGSize size) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_148_stret(
            stret, _id, _lib._sel_convertSizeToBacking_1, size)
        : stret.ref =
            _lib._objc_msgSend_148(_id, _lib._sel_convertSizeToBacking_1, size);
  }

  void convertSizeFromBacking_(ffi.Pointer<CGSize> stret, CGSize size) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_148_stret(
            stret, _id, _lib._sel_convertSizeFromBacking_1, size)
        : stret.ref = _lib._objc_msgSend_148(
            _id, _lib._sel_convertSizeFromBacking_1, size);
  }

  void convertRectToBacking_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_convertRectToBacking_1, rect)
        : stret.ref =
            _lib._objc_msgSend_146(_id, _lib._sel_convertRectToBacking_1, rect);
  }

  void convertRectFromBacking_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_convertRectFromBacking_1, rect)
        : stret.ref = _lib._objc_msgSend_146(
            _id, _lib._sel_convertRectFromBacking_1, rect);
  }

  void convertPointToLayer_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertPointToLayer_1, point)
        : stret.ref =
            _lib._objc_msgSend_147(_id, _lib._sel_convertPointToLayer_1, point);
  }

  void convertPointFromLayer_(ffi.Pointer<CGPoint> stret, CGPoint point) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_147_stret(
            stret, _id, _lib._sel_convertPointFromLayer_1, point)
        : stret.ref = _lib._objc_msgSend_147(
            _id, _lib._sel_convertPointFromLayer_1, point);
  }

  void convertSizeToLayer_(ffi.Pointer<CGSize> stret, CGSize size) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_148_stret(
            stret, _id, _lib._sel_convertSizeToLayer_1, size)
        : stret.ref =
            _lib._objc_msgSend_148(_id, _lib._sel_convertSizeToLayer_1, size);
  }

  void convertSizeFromLayer_(ffi.Pointer<CGSize> stret, CGSize size) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_148_stret(
            stret, _id, _lib._sel_convertSizeFromLayer_1, size)
        : stret.ref =
            _lib._objc_msgSend_148(_id, _lib._sel_convertSizeFromLayer_1, size);
  }

  void convertRectToLayer_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_convertRectToLayer_1, rect)
        : stret.ref =
            _lib._objc_msgSend_146(_id, _lib._sel_convertRectToLayer_1, rect);
  }

  void convertRectFromLayer_(ffi.Pointer<CGRect> stret, CGRect rect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_convertRectFromLayer_1, rect)
        : stret.ref =
            _lib._objc_msgSend_146(_id, _lib._sel_convertRectFromLayer_1, rect);
  }

  bool get canDrawConcurrently {
    return _lib._objc_msgSend_12(_id, _lib._sel_canDrawConcurrently1);
  }

  set canDrawConcurrently(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setCanDrawConcurrently_1, value);
  }

  bool get canDraw {
    return _lib._objc_msgSend_12(_id, _lib._sel_canDraw1);
  }

  void setNeedsDisplayInRect_(CGRect invalidRect) {
    _lib._objc_msgSend_149(_id, _lib._sel_setNeedsDisplayInRect_1, invalidRect);
  }

  bool get needsDisplay {
    return _lib._objc_msgSend_12(_id, _lib._sel_needsDisplay1);
  }

  set needsDisplay(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setNeedsDisplay_1, value);
  }

  void lockFocus() {
    _lib._objc_msgSend_1(_id, _lib._sel_lockFocus1);
  }

  void unlockFocus() {
    _lib._objc_msgSend_1(_id, _lib._sel_unlockFocus1);
  }

  bool lockFocusIfCanDraw() {
    return _lib._objc_msgSend_12(_id, _lib._sel_lockFocusIfCanDraw1);
  }

  bool lockFocusIfCanDrawInContext_(NSGraphicsContext context) {
    return _lib._objc_msgSend_150(
        _id, _lib._sel_lockFocusIfCanDrawInContext_1, context._id);
  }

  static NSView? getFocusView(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_122(_lib._class_NSView1, _lib._sel_focusView1);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  void getVisibleRect(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_138_stret(stret, _id, _lib._sel_visibleRect1)
        : stret.ref = _lib._objc_msgSend_138(_id, _lib._sel_visibleRect1);
  }

  void display() {
    _lib._objc_msgSend_1(_id, _lib._sel_display1);
  }

  void displayIfNeeded() {
    _lib._objc_msgSend_1(_id, _lib._sel_displayIfNeeded1);
  }

  void displayIfNeededIgnoringOpacity() {
    _lib._objc_msgSend_1(_id, _lib._sel_displayIfNeededIgnoringOpacity1);
  }

  void displayRect_(CGRect rect) {
    _lib._objc_msgSend_149(_id, _lib._sel_displayRect_1, rect);
  }

  void displayIfNeededInRect_(CGRect rect) {
    _lib._objc_msgSend_149(_id, _lib._sel_displayIfNeededInRect_1, rect);
  }

  void displayRectIgnoringOpacity_(CGRect rect) {
    _lib._objc_msgSend_149(_id, _lib._sel_displayRectIgnoringOpacity_1, rect);
  }

  void displayIfNeededInRectIgnoringOpacity_(CGRect rect) {
    _lib._objc_msgSend_149(
        _id, _lib._sel_displayIfNeededInRectIgnoringOpacity_1, rect);
  }

  void drawRect_(CGRect dirtyRect) {
    _lib._objc_msgSend_149(_id, _lib._sel_drawRect_1, dirtyRect);
  }

  void displayRectIgnoringOpacity_inContext_(
      CGRect rect, NSGraphicsContext context) {
    _lib._objc_msgSend_151(_id,
        _lib._sel_displayRectIgnoringOpacity_inContext_1, rect, context._id);
  }

  NSBitmapImageRep? bitmapImageRepForCachingDisplayInRect_(CGRect rect) {
    final _ret = _lib._objc_msgSend_152(
        _id, _lib._sel_bitmapImageRepForCachingDisplayInRect_1, rect);
    return _ret.address == 0
        ? null
        : NSBitmapImageRep._(_ret, _lib, retain: true, release: true);
  }

  void cacheDisplayInRect_toBitmapImageRep_(
      CGRect rect, NSBitmapImageRep bitmapImageRep) {
    _lib._objc_msgSend_153(_id, _lib._sel_cacheDisplayInRect_toBitmapImageRep_1,
        rect, bitmapImageRep._id);
  }

  void viewWillDraw() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewWillDraw1);
  }

  void scrollPoint_(CGPoint point) {
    _lib._objc_msgSend_137(_id, _lib._sel_scrollPoint_1, point);
  }

  bool scrollRectToVisible_(CGRect rect) {
    return _lib._objc_msgSend_127(_id, _lib._sel_scrollRectToVisible_1, rect);
  }

  bool autoscroll_(NSEvent event) {
    return _lib._objc_msgSend_154(_id, _lib._sel_autoscroll_1, event._id);
  }

  void adjustScroll_(ffi.Pointer<CGRect> stret, CGRect newVisible) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_stret(
            stret, _id, _lib._sel_adjustScroll_1, newVisible)
        : stret.ref =
            _lib._objc_msgSend_146(_id, _lib._sel_adjustScroll_1, newVisible);
  }

  void scrollRect_by_(CGRect rect, CGSize delta) {
    _lib._objc_msgSend_155(_id, _lib._sel_scrollRect_by_1, rect, delta);
  }

  void translateRectsNeedingDisplayInRect_by_(CGRect clipRect, CGSize delta) {
    _lib._objc_msgSend_155(_id,
        _lib._sel_translateRectsNeedingDisplayInRect_by_1, clipRect, delta);
  }

  NSView? hitTest_(CGPoint point) {
    final _ret = _lib._objc_msgSend_156(_id, _lib._sel_hitTest_1, point);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  bool mouse_inRect_(CGPoint point, CGRect rect) {
    return _lib._objc_msgSend_157(_id, _lib._sel_mouse_inRect_1, point, rect);
  }

  NSView? viewWithTag_(int tag) {
    final _ret = _lib._objc_msgSend_158(_id, _lib._sel_viewWithTag_1, tag);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  int get tag {
    return _lib._objc_msgSend_77(_id, _lib._sel_tag1);
  }

  @override
  bool performKeyEquivalent_(NSEvent event) {
    return _lib._objc_msgSend_154(
        _id, _lib._sel_performKeyEquivalent_1, event._id);
  }

  bool acceptsFirstMouse_(NSEvent? event) {
    return _lib._objc_msgSend_159(
        _id, _lib._sel_acceptsFirstMouse_1, event?._id ?? ffi.nullptr);
  }

  bool shouldDelayWindowOrderingForEvent_(NSEvent event) {
    return _lib._objc_msgSend_154(
        _id, _lib._sel_shouldDelayWindowOrderingForEvent_1, event._id);
  }

  bool get needsPanelToBecomeKey {
    return _lib._objc_msgSend_12(_id, _lib._sel_needsPanelToBecomeKey1);
  }

  bool get mouseDownCanMoveWindow {
    return _lib._objc_msgSend_12(_id, _lib._sel_mouseDownCanMoveWindow1);
  }

  bool get acceptsTouchEvents {
    return _lib._objc_msgSend_12(_id, _lib._sel_acceptsTouchEvents1);
  }

  set acceptsTouchEvents(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAcceptsTouchEvents_1, value);
  }

  bool get wantsRestingTouches {
    return _lib._objc_msgSend_12(_id, _lib._sel_wantsRestingTouches1);
  }

  set wantsRestingTouches(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setWantsRestingTouches_1, value);
  }

  CALayer makeBackingLayer() {
    final _ret = _lib._objc_msgSend_160(_id, _lib._sel_makeBackingLayer1);
    return CALayer._(_ret, _lib, retain: true, release: true);
  }

  int get layerContentsRedrawPolicy {
    return _lib._objc_msgSend_161(_id, _lib._sel_layerContentsRedrawPolicy1);
  }

  set layerContentsRedrawPolicy(int value) {
    return _lib._objc_msgSend_162(
        _id, _lib._sel_setLayerContentsRedrawPolicy_1, value);
  }

  int get layerContentsPlacement {
    return _lib._objc_msgSend_163(_id, _lib._sel_layerContentsPlacement1);
  }

  set layerContentsPlacement(int value) {
    return _lib._objc_msgSend_164(
        _id, _lib._sel_setLayerContentsPlacement_1, value);
  }

  bool get wantsLayer {
    return _lib._objc_msgSend_12(_id, _lib._sel_wantsLayer1);
  }

  set wantsLayer(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setWantsLayer_1, value);
  }

  CALayer? get layer {
    final _ret = _lib._objc_msgSend_165(_id, _lib._sel_layer1);
    return _ret.address == 0
        ? null
        : CALayer._(_ret, _lib, retain: true, release: true);
  }

  set layer(CALayer? value) {
    return _lib._objc_msgSend_166(
        _id, _lib._sel_setLayer_1, value?._id ?? ffi.nullptr);
  }

  bool get wantsUpdateLayer {
    return _lib._objc_msgSend_12(_id, _lib._sel_wantsUpdateLayer1);
  }

  void updateLayer() {
    _lib._objc_msgSend_1(_id, _lib._sel_updateLayer1);
  }

  bool get canDrawSubviewsIntoLayer {
    return _lib._objc_msgSend_12(_id, _lib._sel_canDrawSubviewsIntoLayer1);
  }

  set canDrawSubviewsIntoLayer(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setCanDrawSubviewsIntoLayer_1, value);
  }

  void layoutSubtreeIfNeeded() {
    _lib._objc_msgSend_1(_id, _lib._sel_layoutSubtreeIfNeeded1);
  }

  void layout() {
    _lib._objc_msgSend_1(_id, _lib._sel_layout1);
  }

  bool get needsLayout {
    return _lib._objc_msgSend_12(_id, _lib._sel_needsLayout1);
  }

  set needsLayout(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setNeedsLayout_1, value);
  }

  double get alphaValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_alphaValue1)
        : _lib._objc_msgSend_81(_id, _lib._sel_alphaValue1);
  }

  set alphaValue(double value) {
    return _lib._objc_msgSend_140(_id, _lib._sel_setAlphaValue_1, value);
  }

  bool get layerUsesCoreImageFilters {
    return _lib._objc_msgSend_12(_id, _lib._sel_layerUsesCoreImageFilters1);
  }

  set layerUsesCoreImageFilters(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setLayerUsesCoreImageFilters_1, value);
  }

  NSObject get backgroundFilters {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_backgroundFilters1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set backgroundFilters(NSObject value) {
    return _lib._objc_msgSend_123(
        _id, _lib._sel_setBackgroundFilters_1, value._id);
  }

  CIFilter? get compositingFilter {
    final _ret = _lib._objc_msgSend_167(_id, _lib._sel_compositingFilter1);
    return _ret.address == 0
        ? null
        : CIFilter._(_ret, _lib, retain: true, release: true);
  }

  set compositingFilter(CIFilter? value) {
    return _lib._objc_msgSend_168(
        _id, _lib._sel_setCompositingFilter_1, value?._id ?? ffi.nullptr);
  }

  NSObject get contentFilters {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_contentFilters1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set contentFilters(NSObject value) {
    return _lib._objc_msgSend_123(
        _id, _lib._sel_setContentFilters_1, value._id);
  }

  NSShadow? get shadow {
    final _ret = _lib._objc_msgSend_169(_id, _lib._sel_shadow1);
    return _ret.address == 0
        ? null
        : NSShadow._(_ret, _lib, retain: true, release: true);
  }

  set shadow(NSShadow? value) {
    return _lib._objc_msgSend_170(
        _id, _lib._sel_setShadow_1, value?._id ?? ffi.nullptr);
  }

  bool get clipsToBounds {
    return _lib._objc_msgSend_12(_id, _lib._sel_clipsToBounds1);
  }

  set clipsToBounds(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setClipsToBounds_1, value);
  }

  bool get postsBoundsChangedNotifications {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_postsBoundsChangedNotifications1);
  }

  set postsBoundsChangedNotifications(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setPostsBoundsChangedNotifications_1, value);
  }

  NSScrollView? get enclosingScrollView {
    final _ret = _lib._objc_msgSend_171(_id, _lib._sel_enclosingScrollView1);
    return _ret.address == 0
        ? null
        : NSScrollView._(_ret, _lib, retain: true, release: true);
  }

  NSMenu? menuForEvent_(NSEvent event) {
    final _ret =
        _lib._objc_msgSend_214(_id, _lib._sel_menuForEvent_1, event._id);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  static NSMenu? getDefaultMenu(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_178(_lib._class_NSView1, _lib._sel_defaultMenu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  void willOpenMenu_withEvent_(NSMenu menu, NSEvent event) {
    _lib._objc_msgSend_215(
        _id, _lib._sel_willOpenMenu_withEvent_1, menu._id, event._id);
  }

  void didCloseMenu_withEvent_(NSMenu menu, NSEvent? event) {
    _lib._objc_msgSend_216(_id, _lib._sel_didCloseMenu_withEvent_1, menu._id,
        event?._id ?? ffi.nullptr);
  }

  NSString? get toolTip {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_toolTip1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set toolTip(NSString? value) {
    return _lib._objc_msgSend_191(
        _id, _lib._sel_setToolTip_1, value?._id ?? ffi.nullptr);
  }

  int addToolTipRect_owner_userData_(
      CGRect rect, NSObject owner, ffi.Pointer<ffi.Void> data) {
    return _lib._objc_msgSend_217(
        _id, _lib._sel_addToolTipRect_owner_userData_1, rect, owner._id, data);
  }

  void removeToolTip_(int tag) {
    _lib._objc_msgSend_200(_id, _lib._sel_removeToolTip_1, tag);
  }

  void removeAllToolTips() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllToolTips1);
  }

  void viewWillStartLiveResize() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewWillStartLiveResize1);
  }

  void viewDidEndLiveResize() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewDidEndLiveResize1);
  }

  bool get inLiveResize {
    return _lib._objc_msgSend_12(_id, _lib._sel_inLiveResize1);
  }

  bool get preservesContentDuringLiveResize {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_preservesContentDuringLiveResize1);
  }

  void getRectPreservedDuringLiveResize(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_138_stret(
            stret, _id, _lib._sel_rectPreservedDuringLiveResize1)
        : stret.ref = _lib._objc_msgSend_138(
            _id, _lib._sel_rectPreservedDuringLiveResize1);
  }

  void getRectsExposedDuringLiveResize_count_(
      ffi.Pointer<CGRect> exposedRects, ffi.Pointer<ffi.Long> count) {
    _lib._objc_msgSend_218(_id,
        _lib._sel_getRectsExposedDuringLiveResize_count_1, exposedRects, count);
  }

  NSTextInputContext? get inputContext {
    final _ret = _lib._objc_msgSend_219(_id, _lib._sel_inputContext1);
    return _ret.address == 0
        ? null
        : NSTextInputContext._(_ret, _lib, retain: true, release: true);
  }

  void rectForSmartMagnificationAtPoint_inRect_(
      ffi.Pointer<CGRect> stret, CGPoint location, CGRect visibleRect) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_220_stret(
            stret,
            _id,
            _lib._sel_rectForSmartMagnificationAtPoint_inRect_1,
            location,
            visibleRect)
        : stret.ref = _lib._objc_msgSend_220(
            _id,
            _lib._sel_rectForSmartMagnificationAtPoint_inRect_1,
            location,
            visibleRect);
  }

  int get userInterfaceLayoutDirection {
    return _lib._objc_msgSend_212(_id, _lib._sel_userInterfaceLayoutDirection1);
  }

  set userInterfaceLayoutDirection(int value) {
    return _lib._objc_msgSend_213(
        _id, _lib._sel_setUserInterfaceLayoutDirection_1, value);
  }

  void prepareForReuse() {
    _lib._objc_msgSend_1(_id, _lib._sel_prepareForReuse1);
  }

  static bool getCompatibleWithResponsiveScrolling(
      AuthenticationServices _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSView1, _lib._sel_isCompatibleWithResponsiveScrolling1);
  }

  void prepareContentInRect_(CGRect rect) {
    _lib._objc_msgSend_149(_id, _lib._sel_prepareContentInRect_1, rect);
  }

  void getPreparedContentRect(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_138_stret(
            stret, _id, _lib._sel_preparedContentRect1)
        : stret.ref =
            _lib._objc_msgSend_138(_id, _lib._sel_preparedContentRect1);
  }

  set preparedContentRect(CGRect value) {
    return _lib._objc_msgSend_139(
        _id, _lib._sel_setPreparedContentRect_1, value);
  }

  bool get allowsVibrancy {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsVibrancy1);
  }

  void viewDidChangeEffectiveAppearance() {
    _lib._objc_msgSend_1(_id, _lib._sel_viewDidChangeEffectiveAppearance1);
  }

  @override
  NSView init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSView._(_ret, _lib, retain: true, release: true);
  }

  static NSView new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSView1, _lib._sel_new1);
    return NSView._(_ret, _lib, retain: false, release: true);
  }

  static NSView allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSView1, _lib._sel_allocWithZone_1, zone);
    return NSView._(_ret, _lib, retain: false, release: true);
  }

  static NSView alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSView1, _lib._sel_alloc1);
    return NSView._(_ret, _lib, retain: false, release: true);
  }
}

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

final class CGSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

abstract class NSWindowOrderingMode {
  static const int NSWindowAbove = 1;
  static const int NSWindowBelow = -1;
  static const int NSWindowOut = 0;
}

abstract class NSAutoresizingMaskOptions {
  static const int NSViewNotSizable = 0;
  static const int NSViewMinXMargin = 1;
  static const int NSViewWidthSizable = 2;
  static const int NSViewMaxXMargin = 4;
  static const int NSViewMinYMargin = 8;
  static const int NSViewHeightSizable = 16;
  static const int NSViewMaxYMargin = 32;
}

abstract class NSAlignmentOptions {
  static const int NSAlignMinXInward = 1;
  static const int NSAlignMinYInward = 2;
  static const int NSAlignMaxXInward = 4;
  static const int NSAlignMaxYInward = 8;
  static const int NSAlignWidthInward = 16;
  static const int NSAlignHeightInward = 32;
  static const int NSAlignMinXOutward = 256;
  static const int NSAlignMinYOutward = 512;
  static const int NSAlignMaxXOutward = 1024;
  static const int NSAlignMaxYOutward = 2048;
  static const int NSAlignWidthOutward = 4096;
  static const int NSAlignHeightOutward = 8192;
  static const int NSAlignMinXNearest = 65536;
  static const int NSAlignMinYNearest = 131072;
  static const int NSAlignMaxXNearest = 262144;
  static const int NSAlignMaxYNearest = 524288;
  static const int NSAlignWidthNearest = 1048576;
  static const int NSAlignHeightNearest = 2097152;
  static const int NSAlignRectFlipped = -9223372036854775808;
  static const int NSAlignAllEdgesInward = 15;
  static const int NSAlignAllEdgesOutward = 3840;
  static const int NSAlignAllEdgesNearest = 983040;
}

class NSBitmapImageRep extends _ObjCWrapper {
  NSBitmapImageRep._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSBitmapImageRep] that points to the same underlying object as [other].
  static NSBitmapImageRep castFrom<T extends _ObjCWrapper>(T other) {
    return NSBitmapImageRep._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSBitmapImageRep] that wraps the given raw object pointer.
  static NSBitmapImageRep castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSBitmapImageRep._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSBitmapImageRep].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSBitmapImageRep1);
  }
}

class CALayer extends _ObjCWrapper {
  CALayer._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [CALayer] that points to the same underlying object as [other].
  static CALayer castFrom<T extends _ObjCWrapper>(T other) {
    return CALayer._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [CALayer] that wraps the given raw object pointer.
  static CALayer castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return CALayer._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [CALayer].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_CALayer1);
  }
}

abstract class NSViewLayerContentsRedrawPolicy {
  static const int NSViewLayerContentsRedrawNever = 0;
  static const int NSViewLayerContentsRedrawOnSetNeedsDisplay = 1;
  static const int NSViewLayerContentsRedrawDuringViewResize = 2;
  static const int NSViewLayerContentsRedrawBeforeViewResize = 3;
  static const int NSViewLayerContentsRedrawCrossfade = 4;
}

abstract class NSViewLayerContentsPlacement {
  static const int NSViewLayerContentsPlacementScaleAxesIndependently = 0;
  static const int NSViewLayerContentsPlacementScaleProportionallyToFit = 1;
  static const int NSViewLayerContentsPlacementScaleProportionallyToFill = 2;
  static const int NSViewLayerContentsPlacementCenter = 3;
  static const int NSViewLayerContentsPlacementTop = 4;
  static const int NSViewLayerContentsPlacementTopRight = 5;
  static const int NSViewLayerContentsPlacementRight = 6;
  static const int NSViewLayerContentsPlacementBottomRight = 7;
  static const int NSViewLayerContentsPlacementBottom = 8;
  static const int NSViewLayerContentsPlacementBottomLeft = 9;
  static const int NSViewLayerContentsPlacementLeft = 10;
  static const int NSViewLayerContentsPlacementTopLeft = 11;
}

class CIFilter extends _ObjCWrapper {
  CIFilter._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [CIFilter] that points to the same underlying object as [other].
  static CIFilter castFrom<T extends _ObjCWrapper>(T other) {
    return CIFilter._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [CIFilter] that wraps the given raw object pointer.
  static CIFilter castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return CIFilter._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [CIFilter].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_CIFilter1);
  }
}

class NSShadow extends _ObjCWrapper {
  NSShadow._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSShadow] that points to the same underlying object as [other].
  static NSShadow castFrom<T extends _ObjCWrapper>(T other) {
    return NSShadow._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSShadow] that wraps the given raw object pointer.
  static NSShadow castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSShadow._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSShadow].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSShadow1);
  }
}

class NSScrollView extends _ObjCWrapper {
  NSScrollView._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSScrollView] that points to the same underlying object as [other].
  static NSScrollView castFrom<T extends _ObjCWrapper>(T other) {
    return NSScrollView._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSScrollView] that wraps the given raw object pointer.
  static NSScrollView castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSScrollView._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSScrollView].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSScrollView1);
  }
}

class NSMenu extends NSObject {
  NSMenu._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMenu] that points to the same underlying object as [other].
  static NSMenu castFrom<T extends _ObjCWrapper>(T other) {
    return NSMenu._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMenu] that wraps the given raw object pointer.
  static NSMenu castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMenu._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMenu].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSMenu1);
  }

  NSMenu initWithTitle_(NSString title) {
    final _ret =
        _lib._objc_msgSend_41(_id, _lib._sel_initWithTitle_1, title._id);
    return NSMenu._(_ret, _lib, retain: true, release: true);
  }

  NSMenu initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_172(_id, _lib._sel_initWithCoder_1, coder._id);
    return NSMenu._(_ret, _lib, retain: true, release: true);
  }

  NSString get title {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_title1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set title(NSString value) {
    return _lib._objc_msgSend_173(_id, _lib._sel_setTitle_1, value._id);
  }

  static void popUpContextMenu_withEvent_forView_(
      AuthenticationServices _lib, NSMenu menu, NSEvent event, NSView view) {
    _lib._objc_msgSend_174(
        _lib._class_NSMenu1,
        _lib._sel_popUpContextMenu_withEvent_forView_1,
        menu._id,
        event._id,
        view._id);
  }

  static void popUpContextMenu_withEvent_forView_withFont_(
      AuthenticationServices _lib,
      NSMenu menu,
      NSEvent event,
      NSView view,
      NSFont? font) {
    _lib._objc_msgSend_175(
        _lib._class_NSMenu1,
        _lib._sel_popUpContextMenu_withEvent_forView_withFont_1,
        menu._id,
        event._id,
        view._id,
        font?._id ?? ffi.nullptr);
  }

  bool popUpMenuPositioningItem_atLocation_inView_(
      NSMenuItem? item, CGPoint location, NSView? view) {
    return _lib._objc_msgSend_194(
        _id,
        _lib._sel_popUpMenuPositioningItem_atLocation_inView_1,
        item?._id ?? ffi.nullptr,
        location,
        view?._id ?? ffi.nullptr);
  }

  static void setMenuBarVisible_(AuthenticationServices _lib, bool visible) {
    _lib._objc_msgSend_195(
        _lib._class_NSMenu1, _lib._sel_setMenuBarVisible_1, visible);
  }

  static bool menuBarVisible(AuthenticationServices _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSMenu1, _lib._sel_menuBarVisible1);
  }

  NSMenu? get supermenu {
    final _ret = _lib._objc_msgSend_178(_id, _lib._sel_supermenu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  set supermenu(NSMenu? value) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_setSupermenu_1, value?._id ?? ffi.nullptr);
  }

  void insertItem_atIndex_(NSMenuItem newItem, int index) {
    _lib._objc_msgSend_196(
        _id, _lib._sel_insertItem_atIndex_1, newItem._id, index);
  }

  void addItem_(NSMenuItem newItem) {
    _lib._objc_msgSend_197(_id, _lib._sel_addItem_1, newItem._id);
  }

  NSMenuItem insertItemWithTitle_action_keyEquivalent_atIndex_(NSString string,
      ffi.Pointer<ObjCSel> selector, NSString charCode, int index) {
    final _ret = _lib._objc_msgSend_198(
        _id,
        _lib._sel_insertItemWithTitle_action_keyEquivalent_atIndex_1,
        string._id,
        selector,
        charCode._id,
        index);
    return NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  NSMenuItem addItemWithTitle_action_keyEquivalent_(
      NSString string, ffi.Pointer<ObjCSel> selector, NSString charCode) {
    final _ret = _lib._objc_msgSend_199(
        _id,
        _lib._sel_addItemWithTitle_action_keyEquivalent_1,
        string._id,
        selector,
        charCode._id);
    return NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  void removeItemAtIndex_(int index) {
    _lib._objc_msgSend_200(_id, _lib._sel_removeItemAtIndex_1, index);
  }

  void removeItem_(NSMenuItem item) {
    _lib._objc_msgSend_197(_id, _lib._sel_removeItem_1, item._id);
  }

  void setSubmenu_forItem_(NSMenu? menu, NSMenuItem item) {
    _lib._objc_msgSend_201(_id, _lib._sel_setSubmenu_forItem_1,
        menu?._id ?? ffi.nullptr, item._id);
  }

  void removeAllItems() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllItems1);
  }

  NSObject get itemArray {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_itemArray1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set itemArray(NSObject value) {
    return _lib._objc_msgSend_123(_id, _lib._sel_setItemArray_1, value._id);
  }

  int get numberOfItems {
    return _lib._objc_msgSend_77(_id, _lib._sel_numberOfItems1);
  }

  NSMenuItem? itemAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_202(_id, _lib._sel_itemAtIndex_1, index);
    return _ret.address == 0
        ? null
        : NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  int indexOfItem_(NSMenuItem item) {
    return _lib._objc_msgSend_203(_id, _lib._sel_indexOfItem_1, item._id);
  }

  int indexOfItemWithTitle_(NSString title) {
    return _lib._objc_msgSend_32(
        _id, _lib._sel_indexOfItemWithTitle_1, title._id);
  }

  int indexOfItemWithTag_(int tag) {
    return _lib._objc_msgSend_204(_id, _lib._sel_indexOfItemWithTag_1, tag);
  }

  int indexOfItemWithRepresentedObject_(NSObject? object) {
    return _lib._objc_msgSend_205(
        _id,
        _lib._sel_indexOfItemWithRepresentedObject_1,
        object?._id ?? ffi.nullptr);
  }

  int indexOfItemWithSubmenu_(NSMenu? submenu) {
    return _lib._objc_msgSend_206(
        _id, _lib._sel_indexOfItemWithSubmenu_1, submenu?._id ?? ffi.nullptr);
  }

  int indexOfItemWithTarget_andAction_(
      NSObject? target, ffi.Pointer<ObjCSel> actionSelector) {
    return _lib._objc_msgSend_207(
        _id,
        _lib._sel_indexOfItemWithTarget_andAction_1,
        target?._id ?? ffi.nullptr,
        actionSelector);
  }

  NSMenuItem? itemWithTitle_(NSString title) {
    final _ret =
        _lib._objc_msgSend_208(_id, _lib._sel_itemWithTitle_1, title._id);
    return _ret.address == 0
        ? null
        : NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  NSMenuItem? itemWithTag_(int tag) {
    final _ret = _lib._objc_msgSend_202(_id, _lib._sel_itemWithTag_1, tag);
    return _ret.address == 0
        ? null
        : NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  bool get autoenablesItems {
    return _lib._objc_msgSend_12(_id, _lib._sel_autoenablesItems1);
  }

  set autoenablesItems(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setAutoenablesItems_1, value);
  }

  void update() {
    _lib._objc_msgSend_1(_id, _lib._sel_update1);
  }

  bool performKeyEquivalent_(NSEvent event) {
    return _lib._objc_msgSend_154(
        _id, _lib._sel_performKeyEquivalent_1, event._id);
  }

  void itemChanged_(NSMenuItem item) {
    _lib._objc_msgSend_197(_id, _lib._sel_itemChanged_1, item._id);
  }

  void performActionForItemAtIndex_(int index) {
    _lib._objc_msgSend_200(_id, _lib._sel_performActionForItemAtIndex_1, index);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  double get menuBarHeight {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_menuBarHeight1)
        : _lib._objc_msgSend_81(_id, _lib._sel_menuBarHeight1);
  }

  void cancelTracking() {
    _lib._objc_msgSend_1(_id, _lib._sel_cancelTracking1);
  }

  void cancelTrackingWithoutAnimation() {
    _lib._objc_msgSend_1(_id, _lib._sel_cancelTrackingWithoutAnimation1);
  }

  NSMenuItem? get highlightedItem {
    final _ret = _lib._objc_msgSend_180(_id, _lib._sel_highlightedItem1);
    return _ret.address == 0
        ? null
        : NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  double get minimumWidth {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(_id, _lib._sel_minimumWidth1)
        : _lib._objc_msgSend_81(_id, _lib._sel_minimumWidth1);
  }

  set minimumWidth(double value) {
    return _lib._objc_msgSend_140(_id, _lib._sel_setMinimumWidth_1, value);
  }

  void getSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_size1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_size1);
  }

  NSFont get font {
    final _ret = _lib._objc_msgSend_210(_id, _lib._sel_font1);
    return NSFont._(_ret, _lib, retain: true, release: true);
  }

  set font(NSFont value) {
    return _lib._objc_msgSend_211(_id, _lib._sel_setFont_1, value._id);
  }

  bool get allowsContextMenuPlugIns {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsContextMenuPlugIns1);
  }

  set allowsContextMenuPlugIns(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAllowsContextMenuPlugIns_1, value);
  }

  bool get showsStateColumn {
    return _lib._objc_msgSend_12(_id, _lib._sel_showsStateColumn1);
  }

  set showsStateColumn(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setShowsStateColumn_1, value);
  }

  int get userInterfaceLayoutDirection {
    return _lib._objc_msgSend_212(_id, _lib._sel_userInterfaceLayoutDirection1);
  }

  set userInterfaceLayoutDirection(int value) {
    return _lib._objc_msgSend_213(
        _id, _lib._sel_setUserInterfaceLayoutDirection_1, value);
  }

  @override
  NSMenu init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMenu._(_ret, _lib, retain: true, release: true);
  }

  static NSMenu new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMenu1, _lib._sel_new1);
    return NSMenu._(_ret, _lib, retain: false, release: true);
  }

  static NSMenu allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMenu1, _lib._sel_allocWithZone_1, zone);
    return NSMenu._(_ret, _lib, retain: false, release: true);
  }

  static NSMenu alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMenu1, _lib._sel_alloc1);
    return NSMenu._(_ret, _lib, retain: false, release: true);
  }
}

class NSFont extends _ObjCWrapper {
  NSFont._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSFont] that points to the same underlying object as [other].
  static NSFont castFrom<T extends _ObjCWrapper>(T other) {
    return NSFont._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSFont] that wraps the given raw object pointer.
  static NSFont castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSFont._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFont].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSFont1);
  }
}

class NSMenuItem extends NSObject {
  NSMenuItem._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMenuItem] that points to the same underlying object as [other].
  static NSMenuItem castFrom<T extends _ObjCWrapper>(T other) {
    return NSMenuItem._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMenuItem] that wraps the given raw object pointer.
  static NSMenuItem castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMenuItem._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMenuItem].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSMenuItem1);
  }

  static bool getUsesUserKeyEquivalents(AuthenticationServices _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSMenuItem1, _lib._sel_usesUserKeyEquivalents1);
  }

  static void setUsesUserKeyEquivalents(
      AuthenticationServices _lib, bool value) {
    return _lib._objc_msgSend_103(
        _lib._class_NSMenuItem1, _lib._sel_setUsesUserKeyEquivalents_1, value);
  }

  static NSMenuItem separatorItem(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_176(
        _lib._class_NSMenuItem1, _lib._sel_separatorItem1);
    return NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  static NSMenuItem sectionHeaderWithTitle_(
      AuthenticationServices _lib, NSString title) {
    final _ret = _lib._objc_msgSend_41(
        _lib._class_NSMenuItem1, _lib._sel_sectionHeaderWithTitle_1, title._id);
    return NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  NSMenuItem initWithTitle_action_keyEquivalent_(
      NSString string, ffi.Pointer<ObjCSel> selector, NSString charCode) {
    final _ret = _lib._objc_msgSend_177(
        _id,
        _lib._sel_initWithTitle_action_keyEquivalent_1,
        string._id,
        selector,
        charCode._id);
    return NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  NSMenuItem initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_172(_id, _lib._sel_initWithCoder_1, coder._id);
    return NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  NSMenu? get menu {
    final _ret = _lib._objc_msgSend_178(_id, _lib._sel_menu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  set menu(NSMenu? value) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_setMenu_1, value?._id ?? ffi.nullptr);
  }

  bool get hasSubmenu {
    return _lib._objc_msgSend_12(_id, _lib._sel_hasSubmenu1);
  }

  NSMenu? get submenu {
    final _ret = _lib._objc_msgSend_178(_id, _lib._sel_submenu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  set submenu(NSMenu? value) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_setSubmenu_1, value?._id ?? ffi.nullptr);
  }

  NSMenuItem? get parentItem {
    final _ret = _lib._objc_msgSend_180(_id, _lib._sel_parentItem1);
    return _ret.address == 0
        ? null
        : NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  NSString get title {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_title1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set title(NSString value) {
    return _lib._objc_msgSend_173(_id, _lib._sel_setTitle_1, value._id);
  }

  NSAttributedString? get attributedTitle {
    final _ret = _lib._objc_msgSend_182(_id, _lib._sel_attributedTitle1);
    return _ret.address == 0
        ? null
        : NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  set attributedTitle(NSAttributedString? value) {
    return _lib._objc_msgSend_183(
        _id, _lib._sel_setAttributedTitle_1, value?._id ?? ffi.nullptr);
  }

  bool get separatorItem1 {
    return _lib._objc_msgSend_12(_id, _lib._sel_isSeparatorItem1);
  }

  bool get sectionHeader {
    return _lib._objc_msgSend_12(_id, _lib._sel_isSectionHeader1);
  }

  NSString get keyEquivalent {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_keyEquivalent1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set keyEquivalent(NSString value) {
    return _lib._objc_msgSend_173(_id, _lib._sel_setKeyEquivalent_1, value._id);
  }

  int get keyEquivalentModifierMask {
    return _lib._objc_msgSend_108(_id, _lib._sel_keyEquivalentModifierMask1);
  }

  set keyEquivalentModifierMask(int value) {
    return _lib._objc_msgSend_184(
        _id, _lib._sel_setKeyEquivalentModifierMask_1, value);
  }

  NSString get userKeyEquivalent {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_userKeyEquivalent1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get allowsKeyEquivalentWhenHidden {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsKeyEquivalentWhenHidden1);
  }

  set allowsKeyEquivalentWhenHidden(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAllowsKeyEquivalentWhenHidden_1, value);
  }

  bool get allowsAutomaticKeyEquivalentLocalization {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_allowsAutomaticKeyEquivalentLocalization1);
  }

  set allowsAutomaticKeyEquivalentLocalization(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAllowsAutomaticKeyEquivalentLocalization_1, value);
  }

  bool get allowsAutomaticKeyEquivalentMirroring {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_allowsAutomaticKeyEquivalentMirroring1);
  }

  set allowsAutomaticKeyEquivalentMirroring(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setAllowsAutomaticKeyEquivalentMirroring_1, value);
  }

  NSImage? get image {
    final _ret = _lib._objc_msgSend_185(_id, _lib._sel_image1);
    return _ret.address == 0
        ? null
        : NSImage._(_ret, _lib, retain: true, release: true);
  }

  set image(NSImage? value) {
    return _lib._objc_msgSend_186(
        _id, _lib._sel_setImage_1, value?._id ?? ffi.nullptr);
  }

  int get state {
    return _lib._objc_msgSend_77(_id, _lib._sel_state1);
  }

  set state(int value) {
    return _lib._objc_msgSend_187(_id, _lib._sel_setState_1, value);
  }

  NSImage get onStateImage {
    final _ret = _lib._objc_msgSend_188(_id, _lib._sel_onStateImage1);
    return NSImage._(_ret, _lib, retain: true, release: true);
  }

  set onStateImage(NSImage value) {
    return _lib._objc_msgSend_189(_id, _lib._sel_setOnStateImage_1, value._id);
  }

  NSImage? get offStateImage {
    final _ret = _lib._objc_msgSend_185(_id, _lib._sel_offStateImage1);
    return _ret.address == 0
        ? null
        : NSImage._(_ret, _lib, retain: true, release: true);
  }

  set offStateImage(NSImage? value) {
    return _lib._objc_msgSend_186(
        _id, _lib._sel_setOffStateImage_1, value?._id ?? ffi.nullptr);
  }

  NSImage get mixedStateImage {
    final _ret = _lib._objc_msgSend_188(_id, _lib._sel_mixedStateImage1);
    return NSImage._(_ret, _lib, retain: true, release: true);
  }

  set mixedStateImage(NSImage value) {
    return _lib._objc_msgSend_189(
        _id, _lib._sel_setMixedStateImage_1, value._id);
  }

  bool get enabled {
    return _lib._objc_msgSend_12(_id, _lib._sel_isEnabled1);
  }

  set enabled(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setEnabled_1, value);
  }

  bool get alternate {
    return _lib._objc_msgSend_12(_id, _lib._sel_isAlternate1);
  }

  set alternate(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setAlternate_1, value);
  }

  int get indentationLevel {
    return _lib._objc_msgSend_77(_id, _lib._sel_indentationLevel1);
  }

  set indentationLevel(int value) {
    return _lib._objc_msgSend_187(_id, _lib._sel_setIndentationLevel_1, value);
  }

  NSObject? get target {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_target1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set target(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setTarget_1, value?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ObjCSel> get action {
    return _lib._objc_msgSend_18(_id, _lib._sel_action1);
  }

  set action(ffi.Pointer<ObjCSel> value) {
    return _lib._objc_msgSend_19(_id, _lib._sel_setAction_1, value);
  }

  int get tag {
    return _lib._objc_msgSend_77(_id, _lib._sel_tag1);
  }

  set tag(int value) {
    return _lib._objc_msgSend_187(_id, _lib._sel_setTag_1, value);
  }

  NSObject? get representedObject {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_representedObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set representedObject(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setRepresentedObject_1, value?._id ?? ffi.nullptr);
  }

  NSView? get view {
    final _ret = _lib._objc_msgSend_122(_id, _lib._sel_view1);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  set view(NSView? value) {
    return _lib._objc_msgSend_190(
        _id, _lib._sel_setView_1, value?._id ?? ffi.nullptr);
  }

  bool get highlighted {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHighlighted1);
  }

  bool get hidden {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHidden1);
  }

  set hidden(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setHidden_1, value);
  }

  bool get hiddenOrHasHiddenAncestor {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHiddenOrHasHiddenAncestor1);
  }

  NSString? get toolTip {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_toolTip1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set toolTip(NSString? value) {
    return _lib._objc_msgSend_191(
        _id, _lib._sel_setToolTip_1, value?._id ?? ffi.nullptr);
  }

  NSMenuItemBadge? get badge {
    final _ret = _lib._objc_msgSend_192(_id, _lib._sel_badge1);
    return _ret.address == 0
        ? null
        : NSMenuItemBadge._(_ret, _lib, retain: true, release: true);
  }

  set badge(NSMenuItemBadge? value) {
    return _lib._objc_msgSend_193(
        _id, _lib._sel_setBadge_1, value?._id ?? ffi.nullptr);
  }

  @override
  NSMenuItem init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMenuItem._(_ret, _lib, retain: true, release: true);
  }

  static NSMenuItem new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMenuItem1, _lib._sel_new1);
    return NSMenuItem._(_ret, _lib, retain: false, release: true);
  }

  static NSMenuItem allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMenuItem1, _lib._sel_allocWithZone_1, zone);
    return NSMenuItem._(_ret, _lib, retain: false, release: true);
  }

  static NSMenuItem alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMenuItem1, _lib._sel_alloc1);
    return NSMenuItem._(_ret, _lib, retain: false, release: true);
  }
}

class NSAttributedString extends NSObject {
  NSAttributedString._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSAttributedString] that points to the same underlying object as [other].
  static NSAttributedString castFrom<T extends _ObjCWrapper>(T other) {
    return NSAttributedString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSAttributedString] that wraps the given raw object pointer.
  static NSAttributedString castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSAttributedString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSAttributedString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSAttributedString1);
  }

  NSString get string {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_string1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributesAtIndex_effectiveRange_(
      int location, ffi.Pointer<_NSRange> range) {
    final _ret = _lib._objc_msgSend_181(
        _id, _lib._sel_attributesAtIndex_effectiveRange_1, location, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSAttributedString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString new1(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSAttributedString1, _lib._sel_new1);
    return NSAttributedString._(_ret, _lib, retain: false, release: true);
  }

  static NSAttributedString allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSAttributedString1, _lib._sel_allocWithZone_1, zone);
    return NSAttributedString._(_ret, _lib, retain: false, release: true);
  }

  static NSAttributedString alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSAttributedString1, _lib._sel_alloc1);
    return NSAttributedString._(_ret, _lib, retain: false, release: true);
  }
}

final class _NSRange extends ffi.Struct {
  @ffi.UnsignedLong()
  external int location;

  @ffi.UnsignedLong()
  external int length;
}

class NSImage extends _ObjCWrapper {
  NSImage._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSImage] that points to the same underlying object as [other].
  static NSImage castFrom<T extends _ObjCWrapper>(T other) {
    return NSImage._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSImage] that wraps the given raw object pointer.
  static NSImage castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSImage._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSImage].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSImage1);
  }
}

class NSMenuItemBadge extends _ObjCWrapper {
  NSMenuItemBadge._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMenuItemBadge] that points to the same underlying object as [other].
  static NSMenuItemBadge castFrom<T extends _ObjCWrapper>(T other) {
    return NSMenuItemBadge._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMenuItemBadge] that wraps the given raw object pointer.
  static NSMenuItemBadge castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMenuItemBadge._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMenuItemBadge].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMenuItemBadge1);
  }
}

abstract class NSUserInterfaceLayoutDirection {
  static const int NSUserInterfaceLayoutDirectionLeftToRight = 0;
  static const int NSUserInterfaceLayoutDirectionRightToLeft = 1;
}

class NSTextInputContext extends _ObjCWrapper {
  NSTextInputContext._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSTextInputContext] that points to the same underlying object as [other].
  static NSTextInputContext castFrom<T extends _ObjCWrapper>(T other) {
    return NSTextInputContext._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSTextInputContext] that wraps the given raw object pointer.
  static NSTextInputContext castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSTextInputContext._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTextInputContext].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSTextInputContext1);
  }
}

class NSTouch extends NSObject {
  NSTouch._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSTouch] that points to the same underlying object as [other].
  static NSTouch castFrom<T extends _ObjCWrapper>(T other) {
    return NSTouch._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSTouch] that wraps the given raw object pointer.
  static NSTouch castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSTouch._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTouch].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSTouch1);
  }

  NSObject get identity {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_identity1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get phase {
    return _lib._objc_msgSend_223(_id, _lib._sel_phase1);
  }

  void getNormalizedPosition(ffi.Pointer<CGPoint> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_111_stret(
            stret, _id, _lib._sel_normalizedPosition1)
        : stret.ref =
            _lib._objc_msgSend_111(_id, _lib._sel_normalizedPosition1);
  }

  bool get resting {
    return _lib._objc_msgSend_12(_id, _lib._sel_isResting1);
  }

  NSObject? get device {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_device1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getDeviceSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_deviceSize1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_deviceSize1);
  }

  @override
  NSTouch init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSTouch._(_ret, _lib, retain: true, release: true);
  }

  static NSTouch new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTouch1, _lib._sel_new1);
    return NSTouch._(_ret, _lib, retain: false, release: true);
  }

  static NSTouch allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSTouch1, _lib._sel_allocWithZone_1, zone);
    return NSTouch._(_ret, _lib, retain: false, release: true);
  }

  static NSTouch alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTouch1, _lib._sel_alloc1);
    return NSTouch._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSEventMask {
  static const int NSEventMaskLeftMouseDown = 2;
  static const int NSEventMaskLeftMouseUp = 4;
  static const int NSEventMaskRightMouseDown = 8;
  static const int NSEventMaskRightMouseUp = 16;
  static const int NSEventMaskMouseMoved = 32;
  static const int NSEventMaskLeftMouseDragged = 64;
  static const int NSEventMaskRightMouseDragged = 128;
  static const int NSEventMaskMouseEntered = 256;
  static const int NSEventMaskMouseExited = 512;
  static const int NSEventMaskKeyDown = 1024;
  static const int NSEventMaskKeyUp = 2048;
  static const int NSEventMaskFlagsChanged = 4096;
  static const int NSEventMaskAppKitDefined = 8192;
  static const int NSEventMaskSystemDefined = 16384;
  static const int NSEventMaskApplicationDefined = 32768;
  static const int NSEventMaskPeriodic = 65536;
  static const int NSEventMaskCursorUpdate = 131072;
  static const int NSEventMaskScrollWheel = 4194304;
  static const int NSEventMaskTabletPoint = 8388608;
  static const int NSEventMaskTabletProximity = 16777216;
  static const int NSEventMaskOtherMouseDown = 33554432;
  static const int NSEventMaskOtherMouseUp = 67108864;
  static const int NSEventMaskOtherMouseDragged = 134217728;
  static const int NSEventMaskGesture = 536870912;
  static const int NSEventMaskMagnify = 1073741824;
  static const int NSEventMaskSwipe = 2147483648;
  static const int NSEventMaskRotate = 262144;
  static const int NSEventMaskBeginGesture = 524288;
  static const int NSEventMaskEndGesture = 1048576;
  static const int NSEventMaskSmartMagnify = 4294967296;
  static const int NSEventMaskPressure = 17179869184;
  static const int NSEventMaskDirectTouch = 137438953472;
  static const int NSEventMaskChangeMode = 274877906944;
  static const int NSEventMaskAny = -1;
}

abstract class NSPressureBehavior {
  static const int NSPressureBehaviorUnknown = -1;
  static const int NSPressureBehaviorPrimaryDefault = 0;
  static const int NSPressureBehaviorPrimaryClick = 1;
  static const int NSPressureBehaviorPrimaryGeneric = 2;
  static const int NSPressureBehaviorPrimaryAccelerator = 3;
  static const int NSPressureBehaviorPrimaryDeepClick = 5;
  static const int NSPressureBehaviorPrimaryDeepDrag = 6;
}

abstract class NSEventSwipeTrackingOptions {
  static const int NSEventSwipeTrackingLockDirection = 1;
  static const int NSEventSwipeTrackingClampGestureAmount = 2;
}

void _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        double arg0,
        int arg1,
        bool arg2,
        ffi.Pointer<ffi.Bool> arg3) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Double arg0, ffi.Int32 arg1,
                        ffi.Bool arg2, ffi.Pointer<ffi.Bool> arg3)>>()
            .asFunction<
                void Function(double, int, bool, ffi.Pointer<ffi.Bool>)>()(
        arg0, arg1, arg2, arg3);
final _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_closureRegistry =
    <int, void Function(double, int, bool, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_registerClosure(
        void Function(double, int, bool, ffi.Pointer<ffi.Bool>) fn) {
  final id =
      ++_ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        double arg0,
        int arg1,
        bool arg2,
        ffi.Pointer<ffi.Bool> arg3) =>
    _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool
    extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool.fromFunctionPointer(
      AuthenticationServices lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Double arg0, ffi.Int32 arg1,
                      ffi.Bool arg2, ffi.Pointer<ffi.Bool> arg3)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Double,
                                ffi.Int32,
                                ffi.Bool,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool.fromFunction(
      AuthenticationServices lib,
      void Function(double, int, bool, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Double,
                                ffi.Int32,
                                ffi.Bool,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_registerClosure(
                    (double arg0, int arg1, bool arg2,
                            ffi.Pointer<ffi.Bool> arg3) =>
                        fn(arg0, arg1, arg2, arg3))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool.listener(
      AuthenticationServices lib,
      void Function(double, int, bool, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Double,
                                ffi.Int32,
                                ffi.Bool,
                                ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ffiDouble_NSEventPhase_bool_bool_registerClosure(
                    (double arg0, int arg1, bool arg2,
                            ffi.Pointer<ffi.Bool> arg3) =>
                        fn(arg0, arg1, arg2, arg3))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Double, ffi.Int32,
          ffi.Bool, ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(double arg0, int arg1, bool arg2, ffi.Pointer<ffi.Bool> arg3) =>
      _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ffi.Double arg0,
                      ffi.Int32 arg1,
                      ffi.Bool arg2,
                      ffi.Pointer<ffi.Bool> arg3)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, double, int, bool,
                  ffi.Pointer<ffi.Bool>)>()(_id, arg0, arg1, arg2, arg3);
}

void _ObjCBlock_ffiVoid_NSEvent_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi
            .NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSEvent_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSEvent_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSEvent_registerClosure(
    void Function(ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSEvent_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSEvent_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSEvent_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSEvent_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSEvent extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSEvent._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSEvent.fromFunctionPointer(
      AuthenticationServices lib,
      ffi
          .Pointer<
              ffi
              .NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSEvent_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSEvent.fromFunction(
      AuthenticationServices lib, void Function(NSEvent) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSEvent_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSEvent_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0) =>
                        fn(NSEvent._(arg0, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSEvent.listener(
      AuthenticationServices lib, void Function(NSEvent) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSEvent_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSEvent_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0) =>
                        fn(NSEvent._(arg0, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSEvent arg0) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>,
              ffi.Pointer<ObjCObject>)>()(_id, arg0._id);
}

ffi.Pointer<ObjCObject> _ObjCBlock_NSEvent_NSEvent_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<ObjCObject> Function(
                    ffi.Pointer<ObjCObject> arg0)>>()
        .asFunction<
            ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>()(arg0);
final _ObjCBlock_NSEvent_NSEvent_closureRegistry =
    <int, ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_NSEvent_NSEvent_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_NSEvent_NSEvent_registerClosure(
    ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_NSEvent_NSEvent_closureRegistryIndex;
  _ObjCBlock_NSEvent_NSEvent_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject> _ObjCBlock_NSEvent_NSEvent_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
    _ObjCBlock_NSEvent_NSEvent_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_NSEvent_NSEvent extends _ObjCBlockBase {
  ObjCBlock_NSEvent_NSEvent._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSEvent_NSEvent.fromFunctionPointer(
      AuthenticationServices lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_NSEvent_NSEvent_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSEvent_NSEvent.fromFunction(
      AuthenticationServices lib, NSEvent? Function(NSEvent) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_NSEvent_NSEvent_closureTrampoline)
                    .cast(),
                _ObjCBlock_NSEvent_NSEvent_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0) =>
                        fn(NSEvent._(arg0, lib, retain: true, release: true))
                            ?._retainAndReturnId() ??
                        ffi.nullptr)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSEvent? call(NSEvent arg0) => _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<ObjCObject> Function(
                          ffi.Pointer<_ObjCBlock> block,
                          ffi.Pointer<ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>)>()
              (_id, arg0._id)
              .address ==
          0
      ? null
      : NSEvent._(
          _id.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>)>()(_id, arg0._id),
          _lib,
          retain: false,
          release: true);
}

abstract class NSEventGestureAxis {
  static const int NSEventGestureAxisNone = 0;
  static const int NSEventGestureAxisHorizontal = 1;
  static const int NSEventGestureAxisVertical = 2;
}

/// !
/// @typedef NSWindowStyleMask
///
/// @const NSWindowStyleMaskBorderless
/// @const NSWindowStyleMaskTitled
/// @const NSWindowStyleMaskClosable
/// @const NSWindowStyleMaskMiniaturizable
/// @const NSWindowStyleMaskResizable
/// @const NSWindowStyleMaskTexturedBackground  Textured window style is deprecated and should no longer be used. Specifies a window with textured background. Textured windows generally don't draw a top border line under the titlebar/toolbar. To get that line, use the \c NSUnifiedTitleAndToolbarWindowMask mask.
/// @const NSWindowStyleMaskUnifiedTitleAndToolbar  Specifies a window whose titlebar and toolbar have a unified look - that is, a continuous background. Under the titlebar and toolbar a horizontal separator line will appear.
/// @const NSWindowStyleMaskFullScreen  When present, the window will appear full screen. This mask is automatically toggled when \c -toggleFullScreen: is called.
/// @const NSWindowStyleMaskFullSizeContentView If set, the \c contentView will consume the full size of the window; it can be combined with other window style masks, but is only respected for windows with a titlebar. Utilizing this mask opts-in to layer-backing. Utilize the \c contentLayoutRect or auto-layout \c contentLayoutGuide to layout views underneath the titlebar/toolbar area.
/// @const NSWindowStyleMaskUtilityWindow Only applicable for \c NSPanel (or a subclass thereof).
/// @const NSWindowStyleMaskDocModalWindow Only applicable for \c NSPanel (or a subclass thereof).
/// @const NSWindowStyleMaskNonactivatingPanel  Specifies that a panel that does not activate the owning application. Only applicable for \c NSPanel (or a subclass thereof).
/// @const NSWindowStyleMaskHUDWindow Specifies a heads up display panel.  Only applicable for \c NSPanel (or a subclass thereof).
abstract class NSWindowStyleMask {
  static const int NSWindowStyleMaskBorderless = 0;
  static const int NSWindowStyleMaskTitled = 1;
  static const int NSWindowStyleMaskClosable = 2;
  static const int NSWindowStyleMaskMiniaturizable = 4;
  static const int NSWindowStyleMaskResizable = 8;
  static const int NSWindowStyleMaskTexturedBackground = 256;
  static const int NSWindowStyleMaskUnifiedTitleAndToolbar = 4096;
  static const int NSWindowStyleMaskFullScreen = 16384;
  static const int NSWindowStyleMaskFullSizeContentView = 32768;
  static const int NSWindowStyleMaskUtilityWindow = 16;
  static const int NSWindowStyleMaskDocModalWindow = 64;
  static const int NSWindowStyleMaskNonactivatingPanel = 128;
  static const int NSWindowStyleMaskHUDWindow = 8192;
}

abstract class NSWindowDepth {
  static const int NSWindowDepthTwentyfourBitRGB = 520;
  static const int NSWindowDepthSixtyfourBitRGB = 528;
  static const int NSWindowDepthOnehundredtwentyeightBitRGB = 544;
}

abstract class NSBackingStoreType {
  static const int NSBackingStoreRetained = 0;
  static const int NSBackingStoreNonretained = 1;
  static const int NSBackingStoreBuffered = 2;
}

class NSScreen extends _ObjCWrapper {
  NSScreen._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSScreen] that points to the same underlying object as [other].
  static NSScreen castFrom<T extends _ObjCWrapper>(T other) {
    return NSScreen._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSScreen] that wraps the given raw object pointer.
  static NSScreen castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSScreen._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSScreen].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSScreen1);
  }
}

/// !
/// @typedef NSWindowTitleVisibility
///
/// @const NSWindowTitleVisible  The default mode has a normal window title and titlebar buttons.
/// @const NSWindowTitleHidden The always hidden mode hides the title and moves the toolbar up into the area previously occupied by the title.
abstract class NSWindowTitleVisibility {
  static const int NSWindowTitleVisible = 0;
  static const int NSWindowTitleHidden = 1;
}

/// !
/// @typedef NSWindowToolbarStyle
///
/// @const NSWindowToolbarStyleAutomatic The default value. The style will be determined by the window's given configuration.
/// @const NSWindowToolbarStyleExpanded The toolbar will appear below the window title.
/// @const NSWindowToolbarStylePreference The toolbar will appear below the window title and the items in the toolbar will attempt to have equal widths when possible.
/// @const NSWindowToolbarStyleUnified The window title will appear inline with the toolbar when visible.
/// @const NSWindowToolbarStyleUnifiedCompact Same as \c NSWindowToolbarStyleUnified, but with reduced margins in the toolbar allowing more focus to be on the contents of the window.
abstract class NSWindowToolbarStyle {
  static const int NSWindowToolbarStyleAutomatic = 0;
  static const int NSWindowToolbarStyleExpanded = 1;
  static const int NSWindowToolbarStylePreference = 2;
  static const int NSWindowToolbarStyleUnified = 3;
  static const int NSWindowToolbarStyleUnifiedCompact = 4;
}

class NSTitlebarAccessoryViewController extends _ObjCWrapper {
  NSTitlebarAccessoryViewController._(
      ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSTitlebarAccessoryViewController] that points to the same underlying object as [other].
  static NSTitlebarAccessoryViewController castFrom<T extends _ObjCWrapper>(
      T other) {
    return NSTitlebarAccessoryViewController._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSTitlebarAccessoryViewController] that wraps the given raw object pointer.
  static NSTitlebarAccessoryViewController castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSTitlebarAccessoryViewController._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTitlebarAccessoryViewController].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSTitlebarAccessoryViewController1);
  }
}

class NSText extends NSView {
  NSText._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSText] that points to the same underlying object as [other].
  static NSText castFrom<T extends _ObjCWrapper>(T other) {
    return NSText._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSText] that wraps the given raw object pointer.
  static NSText castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSText._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSText].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSText1);
  }

  @override
  NSText initWithFrame_(CGRect frameRect) {
    final _ret =
        _lib._objc_msgSend_121(_id, _lib._sel_initWithFrame_1, frameRect);
    return NSText._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSText? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSText._(_ret, _lib, retain: true, release: true);
  }

  NSString get string {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_string1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set string(NSString value) {
    return _lib._objc_msgSend_173(_id, _lib._sel_setString_1, value._id);
  }

  void replaceCharactersInRange_withString_(_NSRange range, NSString string) {
    _lib._objc_msgSend_254(_id, _lib._sel_replaceCharactersInRange_withString_1,
        range, string._id);
  }

  void replaceCharactersInRange_withRTF_(_NSRange range, NSData rtfData) {
    _lib._objc_msgSend_255(
        _id, _lib._sel_replaceCharactersInRange_withRTF_1, range, rtfData._id);
  }

  void replaceCharactersInRange_withRTFD_(_NSRange range, NSData rtfdData) {
    _lib._objc_msgSend_255(_id, _lib._sel_replaceCharactersInRange_withRTFD_1,
        range, rtfdData._id);
  }

  NSData? RTFFromRange_(_NSRange range) {
    final _ret = _lib._objc_msgSend_256(_id, _lib._sel_RTFFromRange_1, range);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? RTFDFromRange_(_NSRange range) {
    final _ret = _lib._objc_msgSend_256(_id, _lib._sel_RTFDFromRange_1, range);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  bool writeRTFDToFile_atomically_(NSString path, bool flag) {
    return _lib._objc_msgSend_257(
        _id, _lib._sel_writeRTFDToFile_atomically_1, path._id, flag);
  }

  bool readRTFDFromFile_(NSString path) {
    return _lib._objc_msgSend_258(_id, _lib._sel_readRTFDFromFile_1, path._id);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  bool get editable {
    return _lib._objc_msgSend_12(_id, _lib._sel_isEditable1);
  }

  set editable(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setEditable_1, value);
  }

  bool get selectable {
    return _lib._objc_msgSend_12(_id, _lib._sel_isSelectable1);
  }

  set selectable(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setSelectable_1, value);
  }

  bool get richText {
    return _lib._objc_msgSend_12(_id, _lib._sel_isRichText1);
  }

  set richText(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setRichText_1, value);
  }

  bool get importsGraphics {
    return _lib._objc_msgSend_12(_id, _lib._sel_importsGraphics1);
  }

  set importsGraphics(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setImportsGraphics_1, value);
  }

  bool get fieldEditor {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFieldEditor1);
  }

  set fieldEditor(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setFieldEditor_1, value);
  }

  bool get usesFontPanel {
    return _lib._objc_msgSend_12(_id, _lib._sel_usesFontPanel1);
  }

  set usesFontPanel(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setUsesFontPanel_1, value);
  }

  bool get drawsBackground {
    return _lib._objc_msgSend_12(_id, _lib._sel_drawsBackground1);
  }

  set drawsBackground(bool value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setDrawsBackground_1, value);
  }

  NSColor? get backgroundColor {
    final _ret = _lib._objc_msgSend_259(_id, _lib._sel_backgroundColor1);
    return _ret.address == 0
        ? null
        : NSColor._(_ret, _lib, retain: true, release: true);
  }

  set backgroundColor(NSColor? value) {
    return _lib._objc_msgSend_260(
        _id, _lib._sel_setBackgroundColor_1, value?._id ?? ffi.nullptr);
  }

  bool get rulerVisible {
    return _lib._objc_msgSend_12(_id, _lib._sel_isRulerVisible1);
  }

  void getSelectedRange(ffi.Pointer<_NSRange> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_261_stret(stret, _id, _lib._sel_selectedRange1)
        : stret.ref = _lib._objc_msgSend_261(_id, _lib._sel_selectedRange1);
  }

  set selectedRange(_NSRange value) {
    return _lib._objc_msgSend_262(_id, _lib._sel_setSelectedRange_1, value);
  }

  void scrollRangeToVisible_(_NSRange range) {
    _lib._objc_msgSend_263(_id, _lib._sel_scrollRangeToVisible_1, range);
  }

  NSFont? get font {
    final _ret = _lib._objc_msgSend_264(_id, _lib._sel_font1);
    return _ret.address == 0
        ? null
        : NSFont._(_ret, _lib, retain: true, release: true);
  }

  set font(NSFont? value) {
    return _lib._objc_msgSend_265(
        _id, _lib._sel_setFont_1, value?._id ?? ffi.nullptr);
  }

  NSColor? get textColor {
    final _ret = _lib._objc_msgSend_259(_id, _lib._sel_textColor1);
    return _ret.address == 0
        ? null
        : NSColor._(_ret, _lib, retain: true, release: true);
  }

  set textColor(NSColor? value) {
    return _lib._objc_msgSend_260(
        _id, _lib._sel_setTextColor_1, value?._id ?? ffi.nullptr);
  }

  int get alignment {
    return _lib._objc_msgSend_266(_id, _lib._sel_alignment1);
  }

  set alignment(int value) {
    return _lib._objc_msgSend_267(_id, _lib._sel_setAlignment_1, value);
  }

  int get baseWritingDirection {
    return _lib._objc_msgSend_268(_id, _lib._sel_baseWritingDirection1);
  }

  set baseWritingDirection(int value) {
    return _lib._objc_msgSend_269(
        _id, _lib._sel_setBaseWritingDirection_1, value);
  }

  void setTextColor_range_(NSColor? color, _NSRange range) {
    _lib._objc_msgSend_270(
        _id, _lib._sel_setTextColor_range_1, color?._id ?? ffi.nullptr, range);
  }

  void setFont_range_(NSFont font, _NSRange range) {
    _lib._objc_msgSend_271(_id, _lib._sel_setFont_range_1, font._id, range);
  }

  void getMaxSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_maxSize1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_maxSize1);
  }

  set maxSize(CGSize value) {
    return _lib._objc_msgSend_272(_id, _lib._sel_setMaxSize_1, value);
  }

  void getMinSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_209_stret(stret, _id, _lib._sel_minSize1)
        : stret.ref = _lib._objc_msgSend_209(_id, _lib._sel_minSize1);
  }

  set minSize(CGSize value) {
    return _lib._objc_msgSend_272(_id, _lib._sel_setMinSize_1, value);
  }

  bool get horizontallyResizable {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHorizontallyResizable1);
  }

  set horizontallyResizable(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setHorizontallyResizable_1, value);
  }

  bool get verticallyResizable {
    return _lib._objc_msgSend_12(_id, _lib._sel_isVerticallyResizable1);
  }

  set verticallyResizable(bool value) {
    return _lib._objc_msgSend_103(
        _id, _lib._sel_setVerticallyResizable_1, value);
  }

  void sizeToFit() {
    _lib._objc_msgSend_1(_id, _lib._sel_sizeToFit1);
  }

  void copy_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_copy_1, sender?._id ?? ffi.nullptr);
  }

  void copyFont_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_copyFont_1, sender?._id ?? ffi.nullptr);
  }

  void copyRuler_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_copyRuler_1, sender?._id ?? ffi.nullptr);
  }

  void cut_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_cut_1, sender?._id ?? ffi.nullptr);
  }

  void delete_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_delete_1, sender?._id ?? ffi.nullptr);
  }

  void paste_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_paste_1, sender?._id ?? ffi.nullptr);
  }

  void pasteFont_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_pasteFont_1, sender?._id ?? ffi.nullptr);
  }

  void pasteRuler_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_pasteRuler_1, sender?._id ?? ffi.nullptr);
  }

  void selectAll_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_selectAll_1, sender?._id ?? ffi.nullptr);
  }

  void changeFont_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_changeFont_1, sender?._id ?? ffi.nullptr);
  }

  void alignLeft_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_alignLeft_1, sender?._id ?? ffi.nullptr);
  }

  void alignRight_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_alignRight_1, sender?._id ?? ffi.nullptr);
  }

  void alignCenter_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_alignCenter_1, sender?._id ?? ffi.nullptr);
  }

  void subscript_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_subscript_1, sender?._id ?? ffi.nullptr);
  }

  void superscript_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_superscript_1, sender?._id ?? ffi.nullptr);
  }

  void underline_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_underline_1, sender?._id ?? ffi.nullptr);
  }

  void unscript_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_unscript_1, sender?._id ?? ffi.nullptr);
  }

  void showGuessPanel_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_showGuessPanel_1, sender?._id ?? ffi.nullptr);
  }

  void checkSpelling_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_checkSpelling_1, sender?._id ?? ffi.nullptr);
  }

  void toggleRuler_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_toggleRuler_1, sender?._id ?? ffi.nullptr);
  }

  static NSView? getFocusView(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_122(_lib._class_NSText1, _lib._sel_focusView1);
    return _ret.address == 0
        ? null
        : NSView._(_ret, _lib, retain: true, release: true);
  }

  static NSMenu? getDefaultMenu(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_178(_lib._class_NSText1, _lib._sel_defaultMenu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  static bool getCompatibleWithResponsiveScrolling(
      AuthenticationServices _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSText1, _lib._sel_isCompatibleWithResponsiveScrolling1);
  }

  @override
  NSText init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSText._(_ret, _lib, retain: true, release: true);
  }

  static NSText new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSText1, _lib._sel_new1);
    return NSText._(_ret, _lib, retain: false, release: true);
  }

  static NSText allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSText1, _lib._sel_allocWithZone_1, zone);
    return NSText._(_ret, _lib, retain: false, release: true);
  }

  static NSText alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSText1, _lib._sel_alloc1);
    return NSText._(_ret, _lib, retain: false, release: true);
  }
}

class NSColor extends _ObjCWrapper {
  NSColor._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSColor] that points to the same underlying object as [other].
  static NSColor castFrom<T extends _ObjCWrapper>(T other) {
    return NSColor._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSColor] that wraps the given raw object pointer.
  static NSColor castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSColor._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSColor].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSColor1);
  }
}

abstract class NSTextAlignment {
  static const int NSTextAlignmentLeft = 0;
  static const int NSTextAlignmentCenter = 1;
  static const int NSTextAlignmentRight = 2;
  static const int NSTextAlignmentJustified = 3;
  static const int NSTextAlignmentNatural = 4;
}

abstract class NSWritingDirection {
  static const int NSWritingDirectionNatural = -1;
  static const int NSWritingDirectionLeftToRight = 0;
  static const int NSWritingDirectionRightToLeft = 1;
}

abstract class NSRectEdge {
  static const int NSRectEdgeMinX = 0;
  static const int NSRectEdgeMinY = 1;
  static const int NSRectEdgeMaxX = 2;
  static const int NSRectEdgeMaxY = 3;
  static const int NSMinXEdge = 0;
  static const int NSMinYEdge = 1;
  static const int NSMaxXEdge = 2;
  static const int NSMaxYEdge = 3;
}

class NSDockTile extends _ObjCWrapper {
  NSDockTile._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDockTile] that points to the same underlying object as [other].
  static NSDockTile castFrom<T extends _ObjCWrapper>(T other) {
    return NSDockTile._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDockTile] that wraps the given raw object pointer.
  static NSDockTile castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDockTile._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDockTile].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDockTile1);
  }
}

/// !
/// @typedef NSWindowSharingType
///
/// @const NSWindowSharingNone          Window contents may not be read by another process.
/// @const NSWindowSharingReadOnly   Window contents may be read but not modified by another process.
/// @const NSWindowSharingReadWrite  Window contents may be read or modified by another process.
abstract class NSWindowSharingType {
  static const int NSWindowSharingNone = 0;
  static const int NSWindowSharingReadOnly = 1;
  static const int NSWindowSharingReadWrite = 2;
}

/// !
/// @typedef NSWindowCollectionBehavior
///
/// @const NSWindowCollectionBehaviorPrimary Marks a window as primary. This collection behavior should commonly be used for document or viewer windows.
/// @const NSWindowCollectionBehaviorAuxiliary Marks a window as auxiliary. This collection behavior should commonly be used for About or Settings windows, as well as utility panes.
/// @const NSWindowCollectionBehaviorCanJoinAllApplications Marks a window as able to join all applications, allowing it to join other apps' sets and full screen spaces when eligible. This collection behavior should commonly be used for floating windows and system overlays.
///
/// @discussion You may specify at most one of @c NSWindowCollectionBehaviorPrimary, @c NSWindowCollectionBehaviorAuxiliary, or @c NSWindowCollectionBehaviorCanJoinAllApplications. If unspecified, the window gets the default treatment determined by its other collection behaviors.
///
/// @const NSWindowCollectionBehaviorDefault
/// @const NSWindowCollectionBehaviorCanJoinAllSpaces
/// @const NSWindowCollectionBehaviorMoveToActiveSpace
///
/// @discussion You may specify at most one of \c NSWindowCollectionBehaviorManaged, \c NSWindowCollectionBehaviorTransient, or \c NSWindowCollectionBehaviorStationary.  If neither is specified, the window gets the default behavior determined by its window level.
///
/// @const NSWindowCollectionBehaviorManaged Participates in spaces, exposé.  Default behavior if `windowLevel == NSNormalWindowLevel`.
/// @const NSWindowCollectionBehaviorTransient Floats in spaces, hidden by exposé.  Default behavior if `windowLevel != NSNormalWindowLevel`.
/// @const NSWindowCollectionBehaviorStationary Unaffected by exposé.  Stays visible and stationary, like desktop window.
///
/// @discussion You may specify at most one of \c NSWindowCollectionBehaviorParticipatesInCycle or \c NSWindowCollectionBehaviorIgnoresCycle.  If unspecified, the window gets the default behavior determined by its window level.
///
/// @const NSWindowCollectionBehaviorParticipatesInCycle Default behavior if `windowLevel != NSNormalWindowLevel`.
/// @const NSWindowCollectionBehaviorIgnoresCycle Default behavior if `windowLevel != NSNormalWindowLevel`.
///
/// @discussion You may specify at most one of \c NSWindowCollectionBehaviorFullScreenPrimary, \c NSWindowCollectionBehaviorFullScreenAuxiliary, or \c NSWindowCollectionBehaviorFullScreenNone.
///
/// @const NSWindowCollectionBehaviorFullScreenPrimary The frontmost window with this collection behavior will be the fullscreen window.
/// @const NSWindowCollectionBehaviorFullScreenAuxiliary Windows with this collection behavior can be shown with the fullscreen window.
/// @const NSWindowCollectionBehaviorFullScreenNone The window can not be made fullscreen when this bit is set.
///
/// @discussion You may specify at most one of \c NSWindowCollectionBehaviorFullScreenAllowsTiling or \c NSWindowCollectionBehaviorFullScreenDisallowsTiling, or an assertion will be raised.
///
/// The default behavior is to allow any window to participate in full screen tiling, as long as it meets certain requirements, such as being resizable and not a panel or sheet. Windows which are not full screen capable can still become a secondary tile in full screen. A window can explicitly allow itself to be placed into a full screen tile by including \c NSWindowCollectionBehaviorFullScreenAllowsTiling. Even if a window allows itself to be placed in a tile, it still may not be put in the tile if its \c minFullScreenContentSize is too large to fit. A window can explicitly disallow itself from being placed in a full screen tile by including \c NSWindowCollectionBehaviorFullScreenDisallowsTiling. This is useful for non-full screen capable windows to explicitly prevent themselves from being tiled. It can also be used by a full screen window to prevent any other windows from being placed in its full screen tile.
///
/// @const NSWindowCollectionBehaviorFullScreenAllowsTiling This window can be a full screen tile window. It does not have to have \c NSWindowCollectionBehaviorFullScreenPrimary set.
/// @const NSWindowCollectionBehaviorFullScreenDisallowsTiling This window can NOT be made a full screen tile window; it still may be allowed to be a regular \c NSWindowCollectionBehaviorFullScreenPrimary window.
abstract class NSWindowCollectionBehavior {
  static const int NSWindowCollectionBehaviorDefault = 0;
  static const int NSWindowCollectionBehaviorCanJoinAllSpaces = 1;
  static const int NSWindowCollectionBehaviorMoveToActiveSpace = 2;
  static const int NSWindowCollectionBehaviorManaged = 4;
  static const int NSWindowCollectionBehaviorTransient = 8;
  static const int NSWindowCollectionBehaviorStationary = 16;
  static const int NSWindowCollectionBehaviorParticipatesInCycle = 32;
  static const int NSWindowCollectionBehaviorIgnoresCycle = 64;
  static const int NSWindowCollectionBehaviorFullScreenPrimary = 128;
  static const int NSWindowCollectionBehaviorFullScreenAuxiliary = 256;
  static const int NSWindowCollectionBehaviorFullScreenNone = 512;
  static const int NSWindowCollectionBehaviorFullScreenAllowsTiling = 2048;
  static const int NSWindowCollectionBehaviorFullScreenDisallowsTiling = 4096;
  static const int NSWindowCollectionBehaviorPrimary = 65536;
  static const int NSWindowCollectionBehaviorAuxiliary = 131072;
  static const int NSWindowCollectionBehaviorCanJoinAllApplications = 262144;
}

/// !
/// @typedef NSWindowAnimationBehavior
///
/// @const NSWindowAnimationBehaviorDefault  Let AppKit infer animation behavior for this window.
/// @const NSWindowAnimationBehaviorNone     Suppress inferred animations (don't animate).
/// @const NSWindowAnimationBehaviorDocumentWindow
/// @const NSWindowAnimationBehaviorUtilityWindow
/// @const NSWindowAnimationBehaviorAlertPanel
abstract class NSWindowAnimationBehavior {
  static const int NSWindowAnimationBehaviorDefault = 0;
  static const int NSWindowAnimationBehaviorNone = 2;
  static const int NSWindowAnimationBehaviorDocumentWindow = 3;
  static const int NSWindowAnimationBehaviorUtilityWindow = 4;
  static const int NSWindowAnimationBehaviorAlertPanel = 5;
}

class NSWindowController extends _ObjCWrapper {
  NSWindowController._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSWindowController] that points to the same underlying object as [other].
  static NSWindowController castFrom<T extends _ObjCWrapper>(T other) {
    return NSWindowController._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSWindowController] that wraps the given raw object pointer.
  static NSWindowController castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSWindowController._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSWindowController].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSWindowController1);
  }
}

void _ObjCBlock_ffiVoid_ffiLong_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, int arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Long arg0)>>()
        .asFunction<void Function(int)>()(arg0);
final _ObjCBlock_ffiVoid_ffiLong_closureRegistry = <int, void Function(int)>{};
int _ObjCBlock_ffiVoid_ffiLong_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiLong_registerClosure(
    void Function(int) fn) {
  final id = ++_ObjCBlock_ffiVoid_ffiLong_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ffiLong_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ffiLong_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, int arg0) =>
    _ObjCBlock_ffiVoid_ffiLong_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_ffiLong extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiLong._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiLong.fromFunctionPointer(AuthenticationServices lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Long arg0)>> ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>, ffi.Long)>(
                        _ObjCBlock_ffiVoid_ffiLong_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiLong.fromFunction(
      AuthenticationServices lib, void Function(int) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>, ffi.Long)>(
                        _ObjCBlock_ffiVoid_ffiLong_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ffiLong_registerClosure(
                    (int arg0) => fn(arg0))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiLong.listener(
      AuthenticationServices lib, void Function(int) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>, ffi.Long)>.listener(
                        _ObjCBlock_ffiVoid_ffiLong_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ffiLong_registerClosure(
                    (int arg0) => fn(arg0))),
            lib);
  static ffi
      .NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Long)>?
      _dartFuncListenerTrampoline;

  void call(int arg0) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<_ObjCBlock> block, ffi.Long arg0)>>()
      .asFunction<void Function(ffi.Pointer<_ObjCBlock>, int)>()(_id, arg0);
}

class NSButton extends _ObjCWrapper {
  NSButton._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSButton] that points to the same underlying object as [other].
  static NSButton castFrom<T extends _ObjCWrapper>(T other) {
    return NSButton._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSButton] that wraps the given raw object pointer.
  static NSButton castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSButton._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSButton].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSButton1);
  }
}

/// !
/// @typedef NSWindowButton
///
/// Standard window buttons.
abstract class NSWindowButton {
  static const int NSWindowCloseButton = 0;
  static const int NSWindowMiniaturizeButton = 1;
  static const int NSWindowZoomButton = 2;
  static const int NSWindowToolbarButton = 3;
  static const int NSWindowDocumentIconButton = 4;
  static const int NSWindowDocumentVersionsButton = 6;
}

class NSColorSpace extends _ObjCWrapper {
  NSColorSpace._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSColorSpace] that points to the same underlying object as [other].
  static NSColorSpace castFrom<T extends _ObjCWrapper>(T other) {
    return NSColorSpace._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSColorSpace] that wraps the given raw object pointer.
  static NSColorSpace castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSColorSpace._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSColorSpace].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSColorSpace1);
  }
}

abstract class NSDisplayGamut {
  static const int NSDisplayGamutSRGB = 1;
  static const int NSDisplayGamutP3 = 2;
}

/// !
/// @typedef NSWindowNumberListOptions
///
/// Options used in `+windowNumbersWithOptions:`.  If no options are specified, the returned list contains window numbers for visible windows on the active space belonging to the calling application.
///
/// @const NSWindowNumberListAllApplications
/// @const NSWindowNumberListAllSpaces
abstract class NSWindowNumberListOptions {
  static const int NSWindowNumberListAllApplications = 1;
  static const int NSWindowNumberListAllSpaces = 16;
}

/// !
/// @typedef NSWindowOcclusionState
///
/// @const NSWindowOcclusionStateVisible If set, at least part of the window is visible. If not set, the entire window is occluded. Windows with non-rectangular shapes may be completely occluded on screen but still count as visible, if their bounding box falls into a visible region. Windows that are completely transparent may also still count as visible.
abstract class NSWindowOcclusionState {
  static const int NSWindowOcclusionStateVisible = 2;
}

abstract class NSTitlebarSeparatorStyle {
  static const int NSTitlebarSeparatorStyleAutomatic = 0;
  static const int NSTitlebarSeparatorStyleNone = 1;
  static const int NSTitlebarSeparatorStyleLine = 2;
  static const int NSTitlebarSeparatorStyleShadow = 3;
}

class NSViewController extends _ObjCWrapper {
  NSViewController._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSViewController] that points to the same underlying object as [other].
  static NSViewController castFrom<T extends _ObjCWrapper>(T other) {
    return NSViewController._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSViewController] that wraps the given raw object pointer.
  static NSViewController castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSViewController._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSViewController].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSViewController1);
  }
}

abstract class NSSelectionDirection {
  static const int NSDirectSelection = 0;
  static const int NSSelectingNext = 1;
  static const int NSSelectingPrevious = 2;
}

class NSButtonCell extends _ObjCWrapper {
  NSButtonCell._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSButtonCell] that points to the same underlying object as [other].
  static NSButtonCell castFrom<T extends _ObjCWrapper>(T other) {
    return NSButtonCell._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSButtonCell] that wraps the given raw object pointer.
  static NSButtonCell castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSButtonCell._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSButtonCell].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSButtonCell1);
  }
}

class NSToolbar extends _ObjCWrapper {
  NSToolbar._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSToolbar] that points to the same underlying object as [other].
  static NSToolbar castFrom<T extends _ObjCWrapper>(T other) {
    return NSToolbar._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSToolbar] that wraps the given raw object pointer.
  static NSToolbar castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSToolbar._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSToolbar].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSToolbar1);
  }
}

abstract class NSWindowUserTabbingPreference {
  static const int NSWindowUserTabbingPreferenceManual = 0;
  static const int NSWindowUserTabbingPreferenceAlways = 1;
  static const int NSWindowUserTabbingPreferenceInFullScreen = 2;
}

/// !
/// @typedef NSWindowTabbingMode
///
/// @const NSWindowTabbingModeAutomatic The system automatically prefers to tab this window when appropriate.
/// @const NSWindowTabbingModePreferred The window explicitly should prefer to tab when shown.
/// @const NSWindowTabbingModeDisallowed The window explicitly should not prefer to tab when shown.
abstract class NSWindowTabbingMode {
  static const int NSWindowTabbingModeAutomatic = 0;
  static const int NSWindowTabbingModePreferred = 1;
  static const int NSWindowTabbingModeDisallowed = 2;
}

class NSWindowTab extends _ObjCWrapper {
  NSWindowTab._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSWindowTab] that points to the same underlying object as [other].
  static NSWindowTab castFrom<T extends _ObjCWrapper>(T other) {
    return NSWindowTab._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSWindowTab] that wraps the given raw object pointer.
  static NSWindowTab castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSWindowTab._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSWindowTab].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSWindowTab1);
  }
}

class NSWindowTabGroup extends _ObjCWrapper {
  NSWindowTabGroup._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSWindowTabGroup] that points to the same underlying object as [other].
  static NSWindowTabGroup castFrom<T extends _ObjCWrapper>(T other) {
    return NSWindowTabGroup._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSWindowTabGroup] that wraps the given raw object pointer.
  static NSWindowTabGroup castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSWindowTabGroup._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSWindowTabGroup].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSWindowTabGroup1);
  }
}

void _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi
            .NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSError_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSError_registerClosure(
    void Function(ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSError_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSError_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSError extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSError._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSError.fromFunctionPointer(
      AuthenticationServices lib,
      ffi
          .Pointer<
              ffi
              .NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSError.fromFunction(
      AuthenticationServices lib, void Function(NSError?) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSError_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0) => fn(arg0.address == 0
                        ? null
                        : NSError._(arg0, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSError.listener(
      AuthenticationServices lib, void Function(NSError?) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0) => fn(arg0.address == 0
                        ? null
                        : NSError._(arg0, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSError? arg0) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>,
              ffi.Pointer<ObjCObject>)>()(_id, arg0?._id ?? ffi.nullptr);
}

void _ObjCBlock_ffiVoid_NSEvent_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSEvent_bool_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSEvent_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSEvent_bool_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSEvent_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSEvent_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSEvent_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_ffiVoid_NSEvent_bool_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_ffiVoid_NSEvent_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSEvent_bool._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSEvent_bool.fromFunctionPointer(
      AuthenticationServices lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSEvent_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSEvent_bool.fromFunction(AuthenticationServices lib,
      void Function(NSEvent?, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSEvent_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSEvent_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) => fn(
                        arg0.address == 0 ? null : NSEvent._(arg0, lib, retain: true, release: true),
                        arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSEvent_bool.listener(AuthenticationServices lib,
      void Function(NSEvent?, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_NSEvent_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSEvent_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                        fn(arg0.address == 0 ? null : NSEvent._(arg0, lib, retain: true, release: true),
                            arg1))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(NSEvent? arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0?._id ?? ffi.nullptr, arg1);
}

class NSDate extends NSObject {
  NSDate._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDate] that points to the same underlying object as [other].
  static NSDate castFrom<T extends _ObjCWrapper>(T other) {
    return NSDate._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDate] that wraps the given raw object pointer.
  static NSDate castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDate].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDate1);
  }

  double get timeIntervalSinceReferenceDate {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_81_fpret(
            _id, _lib._sel_timeIntervalSinceReferenceDate1)
        : _lib._objc_msgSend_81(_id, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  @override
  NSDate init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _lib._objc_msgSend_333(
        _id, _lib._sel_initWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_new1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static NSDate allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSDate1, _lib._sel_allocWithZone_1, zone);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static NSDate alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_alloc1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }
}

class NSPasteboard extends NSObject {
  NSPasteboard._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSPasteboard] that points to the same underlying object as [other].
  static NSPasteboard castFrom<T extends _ObjCWrapper>(T other) {
    return NSPasteboard._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSPasteboard] that wraps the given raw object pointer.
  static NSPasteboard castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSPasteboard._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPasteboard].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSPasteboard1);
  }

  static NSPasteboard getGeneralPasteboard(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_338(
        _lib._class_NSPasteboard1, _lib._sel_generalPasteboard1);
    return NSPasteboard._(_ret, _lib, retain: true, release: true);
  }

  static NSPasteboard pasteboardWithName_(
      AuthenticationServices _lib, NSString name) {
    final _ret = _lib._objc_msgSend_339(
        _lib._class_NSPasteboard1, _lib._sel_pasteboardWithName_1, name._id);
    return NSPasteboard._(_ret, _lib, retain: true, release: true);
  }

  static NSPasteboard pasteboardWithUniqueName(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_338(
        _lib._class_NSPasteboard1, _lib._sel_pasteboardWithUniqueName1);
    return NSPasteboard._(_ret, _lib, retain: true, release: true);
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get changeCount {
    return _lib._objc_msgSend_77(_id, _lib._sel_changeCount1);
  }

  void releaseGlobally() {
    _lib._objc_msgSend_1(_id, _lib._sel_releaseGlobally1);
  }

  int prepareForNewContentsWithOptions_(int options) {
    return _lib._objc_msgSend_340(
        _id, _lib._sel_prepareForNewContentsWithOptions_1, options);
  }

  int clearContents() {
    return _lib._objc_msgSend_77(_id, _lib._sel_clearContents1);
  }

  bool writeObjects_(NSObject objects) {
    return _lib._objc_msgSend_0(_id, _lib._sel_writeObjects_1, objects._id);
  }

  NSArray? readObjectsForClasses_options_(
      NSArray classArray, NSObject? options) {
    final _ret = _lib._objc_msgSend_343(
        _id,
        _lib._sel_readObjectsForClasses_options_1,
        classArray._id,
        options?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get pasteboardItems {
    final _ret = _lib._objc_msgSend_344(_id, _lib._sel_pasteboardItems1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  int indexOfPasteboardItem_(NSPasteboardItem pasteboardItem) {
    return _lib._objc_msgSend_345(
        _id, _lib._sel_indexOfPasteboardItem_1, pasteboardItem._id);
  }

  bool canReadItemWithDataConformingToTypes_(NSArray types) {
    return _lib._objc_msgSend_346(
        _id, _lib._sel_canReadItemWithDataConformingToTypes_1, types._id);
  }

  bool canReadObjectForClasses_options_(NSArray classArray, NSObject? options) {
    return _lib._objc_msgSend_347(
        _id,
        _lib._sel_canReadObjectForClasses_options_1,
        classArray._id,
        options?._id ?? ffi.nullptr);
  }

  int declareTypes_owner_(NSArray newTypes, NSObject? newOwner) {
    return _lib._objc_msgSend_348(_id, _lib._sel_declareTypes_owner_1,
        newTypes._id, newOwner?._id ?? ffi.nullptr);
  }

  int addTypes_owner_(NSArray newTypes, NSObject? newOwner) {
    return _lib._objc_msgSend_348(_id, _lib._sel_addTypes_owner_1, newTypes._id,
        newOwner?._id ?? ffi.nullptr);
  }

  NSArray? get types {
    final _ret = _lib._objc_msgSend_344(_id, _lib._sel_types1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? availableTypeFromArray_(NSArray types) {
    final _ret = _lib._objc_msgSend_349(
        _id, _lib._sel_availableTypeFromArray_1, types._id);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool setData_forType_(NSData? data, NSString dataType) {
    return _lib._objc_msgSend_350(_id, _lib._sel_setData_forType_1,
        data?._id ?? ffi.nullptr, dataType._id);
  }

  bool setPropertyList_forType_(NSObject plist, NSString dataType) {
    return _lib._objc_msgSend_351(
        _id, _lib._sel_setPropertyList_forType_1, plist._id, dataType._id);
  }

  bool setString_forType_(NSString string, NSString dataType) {
    return _lib._objc_msgSend_352(
        _id, _lib._sel_setString_forType_1, string._id, dataType._id);
  }

  NSData? dataForType_(NSString dataType) {
    final _ret =
        _lib._objc_msgSend_353(_id, _lib._sel_dataForType_1, dataType._id);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSObject? propertyListForType_(NSString dataType) {
    final _ret = _lib._objc_msgSend_48(
        _id, _lib._sel_propertyListForType_1, dataType._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString? stringForType_(NSString dataType) {
    final _ret =
        _lib._objc_msgSend_354(_id, _lib._sel_stringForType_1, dataType._id);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSPasteboard init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSPasteboard._(_ret, _lib, retain: true, release: true);
  }

  static NSPasteboard new1(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSPasteboard1, _lib._sel_new1);
    return NSPasteboard._(_ret, _lib, retain: false, release: true);
  }

  static NSPasteboard allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSPasteboard1, _lib._sel_allocWithZone_1, zone);
    return NSPasteboard._(_ret, _lib, retain: false, release: true);
  }

  static NSPasteboard alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSPasteboard1, _lib._sel_alloc1);
    return NSPasteboard._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSPasteboardContentsOptions {
  static const int NSPasteboardContentsCurrentHostOnly = 1;
}

class NSArray extends NSObject {
  NSArray._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSArray] that points to the same underlying object as [other].
  static NSArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSArray] that wraps the given raw object pointer.
  static NSArray castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSArray1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  NSObject objectAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_341(_id, _lib._sel_objectAtIndex_1, index);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_342(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_new1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSArray1, _lib._sel_allocWithZone_1, zone);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_alloc1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }
}

class NSPasteboardItem extends _ObjCWrapper {
  NSPasteboardItem._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSPasteboardItem] that points to the same underlying object as [other].
  static NSPasteboardItem castFrom<T extends _ObjCWrapper>(T other) {
    return NSPasteboardItem._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSPasteboardItem] that wraps the given raw object pointer.
  static NSPasteboardItem castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSPasteboardItem._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPasteboardItem].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSPasteboardItem1);
  }
}

class CADisplayLink extends _ObjCWrapper {
  CADisplayLink._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [CADisplayLink] that points to the same underlying object as [other].
  static CADisplayLink castFrom<T extends _ObjCWrapper>(T other) {
    return CADisplayLink._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [CADisplayLink] that wraps the given raw object pointer.
  static CADisplayLink castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return CADisplayLink._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [CADisplayLink].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_CADisplayLink1);
  }
}

abstract class NSWindowBackingLocation {
  /// System determines if window backing store is in VRAM or main memory
  static const int NSWindowBackingLocationDefault = 0;

  /// Window backing store is in VRAM
  static const int NSWindowBackingLocationVideoMemory = 1;

  /// Window backing store is in main memory
  static const int NSWindowBackingLocationMainMemory = 2;
}

class NSApplication extends NSResponder {
  NSApplication._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSApplication] that points to the same underlying object as [other].
  static NSApplication castFrom<T extends _ObjCWrapper>(T other) {
    return NSApplication._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSApplication] that wraps the given raw object pointer.
  static NSApplication castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSApplication._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSApplication].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSApplication1);
  }

  static NSApplication getSharedApplication(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_362(
        _lib._class_NSApplication1, _lib._sel_sharedApplication1);
    return NSApplication._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  void hide_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_hide_1, sender?._id ?? ffi.nullptr);
  }

  void unhide_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_unhide_1, sender?._id ?? ffi.nullptr);
  }

  void unhideWithoutActivation() {
    _lib._objc_msgSend_1(_id, _lib._sel_unhideWithoutActivation1);
  }

  NSWindow? windowWithWindowNumber_(int windowNum) {
    final _ret = _lib._objc_msgSend_363(
        _id, _lib._sel_windowWithWindowNumber_1, windowNum);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  NSWindow? get mainWindow {
    final _ret = _lib._objc_msgSend_109(_id, _lib._sel_mainWindow1);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  NSWindow? get keyWindow {
    final _ret = _lib._objc_msgSend_109(_id, _lib._sel_keyWindow1);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  bool get active {
    return _lib._objc_msgSend_12(_id, _lib._sel_isActive1);
  }

  bool get hidden {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHidden1);
  }

  bool get running {
    return _lib._objc_msgSend_12(_id, _lib._sel_isRunning1);
  }

  void deactivate() {
    _lib._objc_msgSend_1(_id, _lib._sel_deactivate1);
  }

  /// Makes the receiver the active app.
  void activateIgnoringOtherApps_(bool flag) {
    _lib._objc_msgSend_195(_id, _lib._sel_activateIgnoringOtherApps_1, flag);
  }

  /// Makes the receiver the active app, if possible.
  ///
  /// You shouldn’t assume the app will be active immediately
  /// after sending this message. The framework also does not
  /// guarantee that the app will be activated at all.
  ///
  /// For cooperative activation, the other application should
  /// call `-yieldActivationToApplication:` or equivalent prior
  /// to the target application invoking `-activate`.
  ///
  /// Invoking `-activate` on an already-active application
  /// cancels any pending activation yields by the receiver.
  void activate() {
    _lib._objc_msgSend_1(_id, _lib._sel_activate1);
  }

  /// Explicitly allows another application to make itself active.
  ///
  /// Calling this method will not deactivate the current app, nor
  /// will it activate the other app. For cooperative or coordinated
  /// activation, the other app should request to be activated at
  /// some point in the future by calling `activate` or equivalent.
  void yieldActivationToApplication_(NSRunningApplication application) {
    _lib._objc_msgSend_371(
        _id, _lib._sel_yieldActivationToApplication_1, application._id);
  }

  /// Same as `-yieldActivationToApplication:`, but the provided
  /// bundle identifier does not have to correspond to a currently
  /// running application.
  ///
  /// This method should be used to yield activation to apps that
  /// may not be running at the time of invoking it. If it is known
  /// that the target application is currently running, use
  /// `-yieldActivationToApplication:` instead.
  void yieldActivationToApplicationWithBundleIdentifier_(
      NSString bundleIdentifier) {
    _lib._objc_msgSend_94(
        _id,
        _lib._sel_yieldActivationToApplicationWithBundleIdentifier_1,
        bundleIdentifier._id);
  }

  void hideOtherApplications_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_hideOtherApplications_1, sender?._id ?? ffi.nullptr);
  }

  void unhideAllApplications_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_unhideAllApplications_1, sender?._id ?? ffi.nullptr);
  }

  void finishLaunching() {
    _lib._objc_msgSend_1(_id, _lib._sel_finishLaunching1);
  }

  void run() {
    _lib._objc_msgSend_1(_id, _lib._sel_run1);
  }

  int runModalForWindow_(NSWindow window) {
    return _lib._objc_msgSend_372(
        _id, _lib._sel_runModalForWindow_1, window._id);
  }

  void stop_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_stop_1, sender?._id ?? ffi.nullptr);
  }

  void stopModal() {
    _lib._objc_msgSend_1(_id, _lib._sel_stopModal1);
  }

  void stopModalWithCode_(int returnCode) {
    _lib._objc_msgSend_200(_id, _lib._sel_stopModalWithCode_1, returnCode);
  }

  void abortModal() {
    _lib._objc_msgSend_1(_id, _lib._sel_abortModal1);
  }

  NSWindow? get modalWindow {
    final _ret = _lib._objc_msgSend_109(_id, _lib._sel_modalWindow1);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<_NSModalSession> beginModalSessionForWindow_(NSWindow window) {
    return _lib._objc_msgSend_373(
        _id, _lib._sel_beginModalSessionForWindow_1, window._id);
  }

  int runModalSession_(ffi.Pointer<_NSModalSession> session) {
    return _lib._objc_msgSend_374(_id, _lib._sel_runModalSession_1, session);
  }

  void endModalSession_(ffi.Pointer<_NSModalSession> session) {
    _lib._objc_msgSend_375(_id, _lib._sel_endModalSession_1, session);
  }

  void terminate_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_terminate_1, sender?._id ?? ffi.nullptr);
  }

  /// Inform the user that this application needs attention - call this method only if your application is not already active.
  int requestUserAttention_(int requestType) {
    return _lib._objc_msgSend_376(
        _id, _lib._sel_requestUserAttention_1, requestType);
  }

  void cancelUserAttentionRequest_(int request) {
    _lib._objc_msgSend_200(
        _id, _lib._sel_cancelUserAttentionRequest_1, request);
  }

  /// Execute a block for each of the app's windows. Set `*stop = YES` if desired, to halt the enumeration early.
  void enumerateWindowsWithOptions_usingBlock_(
      int options, ObjCBlock_ffiVoid_NSWindow_bool block) {
    _lib._objc_msgSend_377(_id,
        _lib._sel_enumerateWindowsWithOptions_usingBlock_1, options, block._id);
  }

  void preventWindowOrdering() {
    _lib._objc_msgSend_1(_id, _lib._sel_preventWindowOrdering1);
  }

  NSArray get windows {
    final _ret = _lib._objc_msgSend_378(_id, _lib._sel_windows1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void setWindowsNeedUpdate_(bool needUpdate) {
    _lib._objc_msgSend_195(_id, _lib._sel_setWindowsNeedUpdate_1, needUpdate);
  }

  void updateWindows() {
    _lib._objc_msgSend_1(_id, _lib._sel_updateWindows1);
  }

  NSMenu? get mainMenu {
    final _ret = _lib._objc_msgSend_178(_id, _lib._sel_mainMenu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  set mainMenu(NSMenu? value) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_setMainMenu_1, value?._id ?? ffi.nullptr);
  }

  /// Set or get the Help menu for the app.  If a non-nil menu is set as the Help menu, Spotlight for Help will be installed in it; otherwise AppKit will install Spotlight for Help into a menu of its choosing (and that menu is not returned from `-helpMenu`).  If you wish to completely suppress Spotlight for Help, you can set a menu that does not appear in the menu bar.  @c NSApplication retains its Help menu and releases it when a different menu is set.
  NSMenu? get helpMenu {
    final _ret = _lib._objc_msgSend_178(_id, _lib._sel_helpMenu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  /// Set or get the Help menu for the app.  If a non-nil menu is set as the Help menu, Spotlight for Help will be installed in it; otherwise AppKit will install Spotlight for Help into a menu of its choosing (and that menu is not returned from `-helpMenu`).  If you wish to completely suppress Spotlight for Help, you can set a menu that does not appear in the menu bar.  @c NSApplication retains its Help menu and releases it when a different menu is set.
  set helpMenu(NSMenu? value) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_setHelpMenu_1, value?._id ?? ffi.nullptr);
  }

  NSImage get applicationIconImage {
    final _ret = _lib._objc_msgSend_188(_id, _lib._sel_applicationIconImage1);
    return NSImage._(_ret, _lib, retain: true, release: true);
  }

  set applicationIconImage(NSImage value) {
    return _lib._objc_msgSend_189(
        _id, _lib._sel_setApplicationIconImage_1, value._id);
  }

  /// @return The activation policy of the application.
  int activationPolicy() {
    return _lib._objc_msgSend_364(_id, _lib._sel_activationPolicy1);
  }

  /// Attempts to modify the application's activation policy.  In OS X 10.9, any policy may be set; prior to 10.9, the activation policy may be changed to @c NSApplicationActivationPolicyProhibited or @c NSApplicationActivationPolicyRegular, but may not be changed to @c NSApplicationActivationPolicyAccessory.  This returns @c YES if setting the activation policy is successful, and @c NO if not.
  bool setActivationPolicy_(int activationPolicy) {
    return _lib._objc_msgSend_379(
        _id, _lib._sel_setActivationPolicy_1, activationPolicy);
  }

  NSDockTile get dockTile {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_dockTile1);
    return NSDockTile._(_ret, _lib, retain: true, release: true);
  }

  void reportException_(NSException exception) {
    _lib._objc_msgSend_385(_id, _lib._sel_reportException_1, exception._id);
  }

  static void detachDrawingThread_toTarget_withObject_(
      AuthenticationServices _lib,
      ffi.Pointer<ObjCSel> selector,
      NSObject target,
      NSObject? argument) {
    _lib._objc_msgSend_386(
        _lib._class_NSApplication1,
        _lib._sel_detachDrawingThread_toTarget_withObject_1,
        selector,
        target._id,
        argument?._id ?? ffi.nullptr);
  }

  /// If an application delegate returns NSTerminateLater from -applicationShouldTerminate:, -replyToApplicationShouldTerminate: must be called with YES or NO once the application decides if it can terminate.
  void replyToApplicationShouldTerminate_(bool shouldTerminate) {
    _lib._objc_msgSend_195(
        _id, _lib._sel_replyToApplicationShouldTerminate_1, shouldTerminate);
  }

  /// If an application delegate encounters an error while handling `-application:openFiles:` or` -application:printFiles:`, `-replyToOpenOrPrint:` should be called with @c NSApplicationDelegateReplyFailure.  If the user cancels the operation, @c NSApplicationDelegateReplyCancel should be used, and if the operation succeeds, @c NSApplicationDelegateReplySuccess should be used .
  void replyToOpenOrPrint_(int reply) {
    _lib._objc_msgSend_387(_id, _lib._sel_replyToOpenOrPrint_1, reply);
  }

  /// Opens the character palette.
  void orderFrontCharacterPalette_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_orderFrontCharacterPalette_1,
        sender?._id ?? ffi.nullptr);
  }

  /// Gets or sets the @c presentationOptions that should be in effect for the system when this application is the active application.  Only certain combinations of @c NSApplicationPresentationOptions flags are allowed, as detailed in the AppKit Release Notes and the reference documentation for `-setPresentationOptions:`.  When given an invalid combination of option flags, `-setPresentationOptions:` raises an exception.
  int get presentationOptions {
    return _lib._objc_msgSend_388(_id, _lib._sel_presentationOptions1);
  }

  /// Gets or sets the @c presentationOptions that should be in effect for the system when this application is the active application.  Only certain combinations of @c NSApplicationPresentationOptions flags are allowed, as detailed in the AppKit Release Notes and the reference documentation for `-setPresentationOptions:`.  When given an invalid combination of option flags, `-setPresentationOptions:` raises an exception.
  set presentationOptions(int value) {
    return _lib._objc_msgSend_389(
        _id, _lib._sel_setPresentationOptions_1, value);
  }

  /// @return The set of application presentation options that are currently in effect for the system.
  /// These are the presentation options that have been put into effect by the currently active application.
  int get currentSystemPresentationOptions {
    return _lib._objc_msgSend_388(
        _id, _lib._sel_currentSystemPresentationOptions1);
  }

  int get occlusionState {
    return _lib._objc_msgSend_390(_id, _lib._sel_occlusionState1);
  }

  bool get protectedDataAvailable {
    return _lib._objc_msgSend_12(_id, _lib._sel_isProtectedDataAvailable1);
  }

  NSAppearance? get appearance {
    final _ret = _lib._objc_msgSend_419(_id, _lib._sel_appearance1);
    return _ret.address == 0
        ? null
        : NSAppearance._(_ret, _lib, retain: true, release: true);
  }

  set appearance(NSAppearance? value) {
    return _lib._objc_msgSend_420(
        _id, _lib._sel_setAppearance_1, value?._id ?? ffi.nullptr);
  }

  NSAppearance get effectiveAppearance {
    final _ret = _lib._objc_msgSend_391(_id, _lib._sel_effectiveAppearance1);
    return NSAppearance._(_ret, _lib, retain: true, release: true);
  }

  void sendEvent_(NSEvent event) {
    _lib._objc_msgSend_236(_id, _lib._sel_sendEvent_1, event._id);
  }

  void postEvent_atStart_(NSEvent event, bool flag) {
    _lib._objc_msgSend_336(_id, _lib._sel_postEvent_atStart_1, event._id, flag);
  }

  NSEvent? get currentEvent {
    final _ret = _lib._objc_msgSend_337(_id, _lib._sel_currentEvent1);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  NSEvent? nextEventMatchingMask_untilDate_inMode_dequeue_(
      int mask, NSDate? expiration, NSString mode, bool deqFlag) {
    final _ret = _lib._objc_msgSend_334(
        _id,
        _lib._sel_nextEventMatchingMask_untilDate_inMode_dequeue_1,
        mask,
        expiration?._id ?? ffi.nullptr,
        mode._id,
        deqFlag);
    return _ret.address == 0
        ? null
        : NSEvent._(_ret, _lib, retain: true, release: true);
  }

  void discardEventsMatchingMask_beforeEvent_(int mask, NSEvent? lastEvent) {
    _lib._objc_msgSend_335(
        _id,
        _lib._sel_discardEventsMatchingMask_beforeEvent_1,
        mask,
        lastEvent?._id ?? ffi.nullptr);
  }

  bool sendAction_to_from_(
      ffi.Pointer<ObjCSel> action, NSObject? target, NSObject? sender) {
    return _lib._objc_msgSend_421(_id, _lib._sel_sendAction_to_from_1, action,
        target?._id ?? ffi.nullptr, sender?._id ?? ffi.nullptr);
  }

  NSObject? targetForAction_(ffi.Pointer<ObjCSel> action) {
    final _ret =
        _lib._objc_msgSend_422(_id, _lib._sel_targetForAction_1, action);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? targetForAction_to_from_(
      ffi.Pointer<ObjCSel> action, NSObject? target, NSObject? sender) {
    final _ret = _lib._objc_msgSend_423(
        _id,
        _lib._sel_targetForAction_to_from_1,
        action,
        target?._id ?? ffi.nullptr,
        sender?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  bool tryToPerform_with_(ffi.Pointer<ObjCSel> action, NSObject? object) {
    return _lib._objc_msgSend_106(
        _id, _lib._sel_tryToPerform_with_1, action, object?._id ?? ffi.nullptr);
  }

  @override
  NSObject? validRequestorForSendType_returnType_(
      NSString? sendType, NSString? returnType) {
    final _ret = _lib._objc_msgSend_235(
        _id,
        _lib._sel_validRequestorForSendType_returnType_1,
        sendType?._id ?? ffi.nullptr,
        returnType?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSMenu? get windowsMenu {
    final _ret = _lib._objc_msgSend_178(_id, _lib._sel_windowsMenu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  set windowsMenu(NSMenu? value) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_setWindowsMenu_1, value?._id ?? ffi.nullptr);
  }

  void arrangeInFront_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_arrangeInFront_1, sender?._id ?? ffi.nullptr);
  }

  void removeWindowsItem_(NSWindow win) {
    _lib._objc_msgSend_301(_id, _lib._sel_removeWindowsItem_1, win._id);
  }

  void addWindowsItem_title_filename_(
      NSWindow win, NSString string, bool isFilename) {
    _lib._objc_msgSend_424(_id, _lib._sel_addWindowsItem_title_filename_1,
        win._id, string._id, isFilename);
  }

  void changeWindowsItem_title_filename_(
      NSWindow win, NSString string, bool isFilename) {
    _lib._objc_msgSend_424(_id, _lib._sel_changeWindowsItem_title_filename_1,
        win._id, string._id, isFilename);
  }

  void updateWindowsItem_(NSWindow win) {
    _lib._objc_msgSend_301(_id, _lib._sel_updateWindowsItem_1, win._id);
  }

  void miniaturizeAll_(NSObject? sender) {
    _lib._objc_msgSend_237(
        _id, _lib._sel_miniaturizeAll_1, sender?._id ?? ffi.nullptr);
  }

  /// Use this method to get the status of Full Keyboard Access, as configured in the Keyboard preference pane. You may use this status to implement your own key loop or to implement in-control tabbing behavior similar to @c NSTableView. Because of the nature of the preference storage, you will not be notified of changes to the key if you attempt to observe it via key-value observing; however, calling this method is fairly inexpensive, so you should always call it when you need the underlying value instead of caching it.
  bool get fullKeyboardAccessEnabled {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFullKeyboardAccessEnabled1);
  }

  NSMenu? get servicesMenu {
    final _ret = _lib._objc_msgSend_178(_id, _lib._sel_servicesMenu1);
    return _ret.address == 0
        ? null
        : NSMenu._(_ret, _lib, retain: true, release: true);
  }

  set servicesMenu(NSMenu? value) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_setServicesMenu_1, value?._id ?? ffi.nullptr);
  }

  void registerServicesMenuSendTypes_returnTypes_(
      NSArray sendTypes, NSArray returnTypes) {
    _lib._objc_msgSend_425(
        _id,
        _lib._sel_registerServicesMenuSendTypes_returnTypes_1,
        sendTypes._id,
        returnTypes._id);
  }

  NSObject? get servicesProvider {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_servicesProvider1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set servicesProvider(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setServicesProvider_1, value?._id ?? ffi.nullptr);
  }

  void orderFrontStandardAboutPanel_(NSObject? sender) {
    _lib._objc_msgSend_237(_id, _lib._sel_orderFrontStandardAboutPanel_1,
        sender?._id ?? ffi.nullptr);
  }

  void orderFrontStandardAboutPanelWithOptions_(
      NSDictionary optionsDictionary) {
    _lib._objc_msgSend_426(
        _id,
        _lib._sel_orderFrontStandardAboutPanelWithOptions_1,
        optionsDictionary._id);
  }

  /// Returns the application-wide user interface layout direction.
  int get userInterfaceLayoutDirection {
    return _lib._objc_msgSend_212(_id, _lib._sel_userInterfaceLayoutDirection1);
  }

  /// Disable or reenable relaunching this app on login, if the app was running at the time the user logged out.  These methods increment and decrement a counter respectively; if the counter is 0 at the time the user logs out, then the app may be relaunched when the user logs back in.  The counter is initially zero, so by default apps are relaunched.
  ///
  /// If your app should not be relaunched because it launches via some other mechanism (e.g. launchd), then the recommended usage is to call `-[NSApp disableRelaunchOnLogin]` once, and never pair it with an -enable call.
  ///
  /// If your app should not be relaunched because it triggers a restart (e.g. an installer), then the recommended usage is to call `-[NSApp disableRelaunchOnLogin]` immediately before you attempt to trigger a restart, and `-[NSApp enableRelaunchOnLogin]` immediately after.  This is because the user may cancel restarting; if the user later restarts for another reason, then your app should be brought back.
  ///
  /// These methods are thread safe.
  void disableRelaunchOnLogin() {
    _lib._objc_msgSend_1(_id, _lib._sel_disableRelaunchOnLogin1);
  }

  void enableRelaunchOnLogin() {
    _lib._objc_msgSend_1(_id, _lib._sel_enableRelaunchOnLogin1);
  }

  void registerForRemoteNotifications() {
    _lib._objc_msgSend_1(_id, _lib._sel_registerForRemoteNotifications1);
  }

  void unregisterForRemoteNotifications() {
    _lib._objc_msgSend_1(_id, _lib._sel_unregisterForRemoteNotifications1);
  }

  /// @return @c YES if the application is currently registered for remote notifications, taking into account any systemwide settings; doesn't relate to connectivity.
  bool get registeredForRemoteNotifications {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_isRegisteredForRemoteNotifications1);
  }

  /// The following are soft deprecated.
  /// Please use the `-registerForRemoteNotifications` above and `-requestAuthorizationWithOptions:` from `UserNotifications.framework`.
  void registerForRemoteNotificationTypes_(int types) {
    _lib._objc_msgSend_427(
        _id, _lib._sel_registerForRemoteNotificationTypes_1, types);
  }

  int get enabledRemoteNotificationTypes {
    return _lib._objc_msgSend_428(
        _id, _lib._sel_enabledRemoteNotificationTypes1);
  }

  /// `-runModalForWindow:relativeToWindow:` was deprecated in Mac OS X 10.0. Please use `-[NSWindow beginSheet:completionHandler:]` instead.
  int runModalForWindow_relativeToWindow_(NSWindow window, NSWindow docWindow) {
    return _lib._objc_msgSend_429(
        _id,
        _lib._sel_runModalForWindow_relativeToWindow_1,
        window._id,
        docWindow._id);
  }

  /// `-beginModalSessionForWindow:relativeToWindow:` was deprecated in Mac OS X 10.0. Please use `-[NSWindow beginSheet:completionHandler:]` instead.
  ffi.Pointer<_NSModalSession> beginModalSessionForWindow_relativeToWindow_(
      NSWindow window, NSWindow docWindow) {
    return _lib._objc_msgSend_430(
        _id,
        _lib._sel_beginModalSessionForWindow_relativeToWindow_1,
        window._id,
        docWindow._id);
  }

  /// `-application:printFiles:` was deprecated in Mac OS X 10.4.
  /// Implement `-application:printFiles:withSettings:showPrintPanels:` in your application delegate instead.
  void application_printFiles_(NSApplication sender, NSArray filenames) {
    _lib._objc_msgSend_431(
        _id, _lib._sel_application_printFiles_1, sender._id, filenames._id);
  }

  /// `NSWindow`'s `-beginSheet:completionHandler:` and `-endSheet:returnCode:` should be used instead.  `NSApplication`'s `-beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:` will continue to work as it previously did, leaking contextInfo and failing when there is already an existing sheet.
  void beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo_(
      NSWindow sheet,
      NSWindow docWindow,
      NSObject? modalDelegate,
      ffi.Pointer<ObjCSel> didEndSelector,
      ffi.Pointer<ffi.Void> contextInfo) {
    _lib._objc_msgSend_432(
        _id,
        _lib._sel_beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo_1,
        sheet._id,
        docWindow._id,
        modalDelegate?._id ?? ffi.nullptr,
        didEndSelector,
        contextInfo);
  }

  void endSheet_(NSWindow sheet) {
    _lib._objc_msgSend_301(_id, _lib._sel_endSheet_1, sheet._id);
  }

  void endSheet_returnCode_(NSWindow sheet, int returnCode) {
    _lib._objc_msgSend_302(
        _id, _lib._sel_endSheet_returnCode_1, sheet._id, returnCode);
  }

  NSWindow? makeWindowsPerform_inOrder_(
      ffi.Pointer<ObjCSel> selector, bool flag) {
    final _ret = _lib._objc_msgSend_433(
        _id, _lib._sel_makeWindowsPerform_inOrder_1, selector, flag);
    return _ret.address == 0
        ? null
        : NSWindow._(_ret, _lib, retain: true, release: true);
  }

  /// This method is deprecated as of macOS 10.12. Beginning in OS X 10.11 it would always return nil. Prior to this it would return an undefined graphics context that was not generally suitable for drawing.
  NSGraphicsContext? get context {
    final _ret = _lib._objc_msgSend_110(_id, _lib._sel_context1);
    return _ret.address == 0
        ? null
        : NSGraphicsContext._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSApplication init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSApplication._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSApplication? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSApplication._(_ret, _lib, retain: true, release: true);
  }

  static NSApplication new1(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSApplication1, _lib._sel_new1);
    return NSApplication._(_ret, _lib, retain: false, release: true);
  }

  static NSApplication allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSApplication1, _lib._sel_allocWithZone_1, zone);
    return NSApplication._(_ret, _lib, retain: false, release: true);
  }

  static NSApplication alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSApplication1, _lib._sel_alloc1);
    return NSApplication._(_ret, _lib, retain: false, release: true);
  }
}

class NSRunningApplication extends NSObject {
  NSRunningApplication._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSRunningApplication] that points to the same underlying object as [other].
  static NSRunningApplication castFrom<T extends _ObjCWrapper>(T other) {
    return NSRunningApplication._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSRunningApplication] that wraps the given raw object pointer.
  static NSRunningApplication castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSRunningApplication._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSRunningApplication].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSRunningApplication1);
  }

  bool get terminated {
    return _lib._objc_msgSend_12(_id, _lib._sel_isTerminated1);
  }

  bool get finishedLaunching {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFinishedLaunching1);
  }

  bool get hidden {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHidden1);
  }

  bool get active {
    return _lib._objc_msgSend_12(_id, _lib._sel_isActive1);
  }

  bool get ownsMenuBar {
    return _lib._objc_msgSend_12(_id, _lib._sel_ownsMenuBar1);
  }

  int get activationPolicy {
    return _lib._objc_msgSend_364(_id, _lib._sel_activationPolicy1);
  }

  NSString? get localizedName {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_localizedName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get bundleIdentifier {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_bundleIdentifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get bundleURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_bundleURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get executableURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_executableURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  int get processIdentifier {
    return _lib._objc_msgSend_75(_id, _lib._sel_processIdentifier1);
  }

  NSDate? get launchDate {
    final _ret = _lib._objc_msgSend_365(_id, _lib._sel_launchDate1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSImage? get icon {
    final _ret = _lib._objc_msgSend_185(_id, _lib._sel_icon1);
    return _ret.address == 0
        ? null
        : NSImage._(_ret, _lib, retain: true, release: true);
  }

  int get executableArchitecture {
    return _lib._objc_msgSend_77(_id, _lib._sel_executableArchitecture1);
  }

  bool hide1() {
    return _lib._objc_msgSend_12(_id, _lib._sel_hide1);
  }

  bool unhide() {
    return _lib._objc_msgSend_12(_id, _lib._sel_unhide1);
  }

  bool activateFromApplication_options_(
      NSRunningApplication application, int options) {
    return _lib._objc_msgSend_366(_id,
        _lib._sel_activateFromApplication_options_1, application._id, options);
  }

  bool activateWithOptions_(int options) {
    return _lib._objc_msgSend_367(
        _id, _lib._sel_activateWithOptions_1, options);
  }

  bool terminate() {
    return _lib._objc_msgSend_12(_id, _lib._sel_terminate1);
  }

  bool forceTerminate() {
    return _lib._objc_msgSend_12(_id, _lib._sel_forceTerminate1);
  }

  static NSArray runningApplicationsWithBundleIdentifier_(
      AuthenticationServices _lib, NSString bundleIdentifier) {
    final _ret = _lib._objc_msgSend_368(
        _lib._class_NSRunningApplication1,
        _lib._sel_runningApplicationsWithBundleIdentifier_1,
        bundleIdentifier._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSRunningApplication? runningApplicationWithProcessIdentifier_(
      AuthenticationServices _lib, int pid) {
    final _ret = _lib._objc_msgSend_369(_lib._class_NSRunningApplication1,
        _lib._sel_runningApplicationWithProcessIdentifier_1, pid);
    return _ret.address == 0
        ? null
        : NSRunningApplication._(_ret, _lib, retain: true, release: true);
  }

  static NSRunningApplication getCurrentApplication(
      AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_370(
        _lib._class_NSRunningApplication1, _lib._sel_currentApplication1);
    return NSRunningApplication._(_ret, _lib, retain: true, release: true);
  }

  static void terminateAutomaticallyTerminableApplications(
      AuthenticationServices _lib) {
    _lib._objc_msgSend_1(_lib._class_NSRunningApplication1,
        _lib._sel_terminateAutomaticallyTerminableApplications1);
  }

  @override
  NSRunningApplication init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSRunningApplication._(_ret, _lib, retain: true, release: true);
  }

  static NSRunningApplication new1(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSRunningApplication1, _lib._sel_new1);
    return NSRunningApplication._(_ret, _lib, retain: false, release: true);
  }

  static NSRunningApplication allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSRunningApplication1, _lib._sel_allocWithZone_1, zone);
    return NSRunningApplication._(_ret, _lib, retain: false, release: true);
  }

  static NSRunningApplication alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSRunningApplication1, _lib._sel_alloc1);
    return NSRunningApplication._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSApplicationActivationPolicy {
  static const int NSApplicationActivationPolicyRegular = 0;
  static const int NSApplicationActivationPolicyAccessory = 1;
  static const int NSApplicationActivationPolicyProhibited = 2;
}

abstract class NSApplicationActivationOptions {
  static const int NSApplicationActivateAllWindows = 1;
  static const int NSApplicationActivateIgnoringOtherApps = 2;
}

final class _NSModalSession extends ffi.Opaque {}

abstract class NSRequestUserAttentionType {
  static const int NSCriticalRequest = 0;
  static const int NSInformationalRequest = 10;
}

abstract class NSWindowListOptions {
  /// Onscreen application windows in front to back order. By default, -[NSApp windows] is used.
  static const int NSWindowListOrderedFrontToBack = 1;
}

void _ObjCBlock_ffiVoid_NSWindow_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSWindow_bool_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSWindow_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSWindow_bool_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSWindow_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSWindow_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSWindow_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_ffiVoid_NSWindow_bool_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_ffiVoid_NSWindow_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSWindow_bool._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSWindow_bool.fromFunctionPointer(
      AuthenticationServices lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSWindow_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSWindow_bool.fromFunction(AuthenticationServices lib,
      void Function(NSWindow, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSWindow_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSWindow_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                        fn(NSWindow._(arg0, lib, retain: true, release: true),
                            arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSWindow_bool.listener(AuthenticationServices lib,
      void Function(NSWindow, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_NSWindow_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSWindow_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ffi.Bool> arg1) =>
                        fn(NSWindow._(arg0, lib, retain: true, release: true),
                            arg1))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(NSWindow arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1);
}

class NSException extends NSObject {
  NSException._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSException] that points to the same underlying object as [other].
  static NSException castFrom<T extends _ObjCWrapper>(T other) {
    return NSException._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSException] that wraps the given raw object pointer.
  static NSException castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSException._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSException].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSException1);
  }

  static NSException exceptionWithName_reason_userInfo_(
      AuthenticationServices _lib,
      NSString name,
      NSString? reason,
      NSDictionary? userInfo) {
    final _ret = _lib._objc_msgSend_382(
        _lib._class_NSException1,
        _lib._sel_exceptionWithName_reason_userInfo_1,
        name._id,
        reason?._id ?? ffi.nullptr,
        userInfo?._id ?? ffi.nullptr);
    return NSException._(_ret, _lib, retain: true, release: true);
  }

  NSException initWithName_reason_userInfo_(
      NSString aName, NSString? aReason, NSDictionary? aUserInfo) {
    final _ret = _lib._objc_msgSend_383(
        _id,
        _lib._sel_initWithName_reason_userInfo_1,
        aName._id,
        aReason?._id ?? ffi.nullptr,
        aUserInfo?._id ?? ffi.nullptr);
    return NSException._(_ret, _lib, retain: true, release: true);
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get reason {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_reason1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get userInfo {
    final _ret = _lib._objc_msgSend_384(_id, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSArray get callStackReturnAddresses {
    final _ret =
        _lib._objc_msgSend_378(_id, _lib._sel_callStackReturnAddresses1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get callStackSymbols {
    final _ret = _lib._objc_msgSend_378(_id, _lib._sel_callStackSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void raise() {
    _lib._objc_msgSend_1(_id, _lib._sel_raise1);
  }

  @override
  NSException init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSException._(_ret, _lib, retain: true, release: true);
  }

  static NSException new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSException1, _lib._sel_new1);
    return NSException._(_ret, _lib, retain: false, release: true);
  }

  static NSException allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSException1, _lib._sel_allocWithZone_1, zone);
    return NSException._(_ret, _lib, retain: false, release: true);
  }

  static NSException alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSException1, _lib._sel_alloc1);
    return NSException._(_ret, _lib, retain: false, release: true);
  }
}

class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDictionary] that points to the same underlying object as [other].
  static NSDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSDictionary._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDictionary] that wraps the given raw object pointer.
  static NSDictionary castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDictionary1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  NSObject? objectForKey_(NSObject aKey) {
    final _ret =
        _lib._objc_msgSend_380(_id, _lib._sel_objectForKey_1, aKey._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keyEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_keyEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_381(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary new1(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_new1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSDictionary1, _lib._sel_allocWithZone_1, zone);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_alloc1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSApplicationDelegateReply {
  static const int NSApplicationDelegateReplySuccess = 0;
  static const int NSApplicationDelegateReplyCancel = 1;
  static const int NSApplicationDelegateReplyFailure = 2;
}

/// Flags that comprise an application's @c presentationOptions.
abstract class NSApplicationPresentationOptions {
  static const int NSApplicationPresentationDefault = 0;

  /// Dock appears when moused to.
  static const int NSApplicationPresentationAutoHideDock = 1;

  /// Dock is entirely unavailable.
  static const int NSApplicationPresentationHideDock = 2;

  /// Menu Bar appears when moused to.
  static const int NSApplicationPresentationAutoHideMenuBar = 4;

  /// Menu Bar is entirely unavailable.
  static const int NSApplicationPresentationHideMenuBar = 8;

  /// All Apple menu items are disabled.
  static const int NSApplicationPresentationDisableAppleMenu = 16;

  /// Cmd+Tab UI is disabled.
  static const int NSApplicationPresentationDisableProcessSwitching = 32;

  /// Cmd+Opt+Esc panel is disabled.
  static const int NSApplicationPresentationDisableForceQuit = 64;

  /// PowerKey panel and Restart/Shut Down/Log Out disabled.
  static const int NSApplicationPresentationDisableSessionTermination = 128;

  /// Application "Hide" menu item is disabled.
  static const int NSApplicationPresentationDisableHideApplication = 256;

  /// Menu Bar's transparent appearance is disabled.
  static const int NSApplicationPresentationDisableMenuBarTransparency = 512;

  /// Application is in fullscreen mode.
  static const int NSApplicationPresentationFullScreen = 1024;

  /// Fullscreen window toolbar is detached from window and hides/shows on rollover.
  /// May be used only when both @c NSApplicationPresentationFullScreen is also set.
  static const int NSApplicationPresentationAutoHideToolbar = 2048;

  /// "Shake mouse pointer to locate" is disabled for this application.
  static const int NSApplicationPresentationDisableCursorLocationAssistance =
      4096;
}

abstract class NSApplicationOcclusionState {
  /// If set, at least part of any window owned by this application is visible. If not set, all parts of all windows owned by this application are completely occluded. The menu bar does not count as a window owned by this application, so if only the menu bar is showing then the application is considered not visible. Status items, however, have windows owned by your application. If the status item is present in the menu bar, your application will be considered visible as long as the menu bar is visible.
  static const int NSApplicationOcclusionStateVisible = 2;
}

class NSAppearance extends NSObject {
  NSAppearance._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSAppearance] that points to the same underlying object as [other].
  static NSAppearance castFrom<T extends _ObjCWrapper>(T other) {
    return NSAppearance._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSAppearance] that wraps the given raw object pointer.
  static NSAppearance castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSAppearance._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSAppearance].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSAppearance1);
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSAppearance getCurrentAppearance(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_391(
        _lib._class_NSAppearance1, _lib._sel_currentAppearance1);
    return NSAppearance._(_ret, _lib, retain: true, release: true);
  }

  static void setCurrentAppearance(
      AuthenticationServices _lib, NSAppearance value) {
    return _lib._objc_msgSend_392(
        _lib._class_NSAppearance1, _lib._sel_setCurrentAppearance_1, value._id);
  }

  static NSAppearance getCurrentDrawingAppearance(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_391(
        _lib._class_NSAppearance1, _lib._sel_currentDrawingAppearance1);
    return NSAppearance._(_ret, _lib, retain: true, release: true);
  }

  void performAsCurrentDrawingAppearance_(ObjCBlock_ffiVoid block) {
    _lib._objc_msgSend_393(
        _id, _lib._sel_performAsCurrentDrawingAppearance_1, block._id);
  }

  static NSAppearance? appearanceNamed_(
      AuthenticationServices _lib, NSString name) {
    final _ret = _lib._objc_msgSend_394(
        _lib._class_NSAppearance1, _lib._sel_appearanceNamed_1, name._id);
    return _ret.address == 0
        ? null
        : NSAppearance._(_ret, _lib, retain: true, release: true);
  }

  NSAppearance? initWithAppearanceNamed_bundle_(
      NSString name, NSBundle? bundle) {
    final _ret = _lib._objc_msgSend_418(
        _id,
        _lib._sel_initWithAppearanceNamed_bundle_1,
        name._id,
        bundle?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSAppearance._(_ret, _lib, retain: true, release: true);
  }

  NSAppearance? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSAppearance._(_ret, _lib, retain: true, release: true);
  }

  bool get allowsVibrancy {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsVibrancy1);
  }

  NSString? bestMatchFromAppearancesWithNames_(NSArray appearances) {
    final _ret = _lib._objc_msgSend_349(
        _id, _lib._sel_bestMatchFromAppearancesWithNames_1, appearances._id);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSAppearance init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSAppearance._(_ret, _lib, retain: true, release: true);
  }

  static NSAppearance new1(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSAppearance1, _lib._sel_new1);
    return NSAppearance._(_ret, _lib, retain: false, release: true);
  }

  static NSAppearance allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSAppearance1, _lib._sel_allocWithZone_1, zone);
    return NSAppearance._(_ret, _lib, retain: false, release: true);
  }

  static NSAppearance alloc(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSAppearance1, _lib._sel_alloc1);
    return NSAppearance._(_ret, _lib, retain: false, release: true);
  }
}

void _ObjCBlock_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<_ObjCBlock> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
final _ObjCBlock_ffiVoid_closureRegistry = <int, void Function()>{};
int _ObjCBlock_ffiVoid_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_registerClosure(void Function() fn) {
  final id = ++_ObjCBlock_ffiVoid_closureRegistryIndex;
  _ObjCBlock_ffiVoid_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<_ObjCBlock> block,
) =>
    _ObjCBlock_ffiVoid_closureRegistry[block.ref.target.address]!();

class ObjCBlock_ffiVoid extends _ObjCBlockBase {
  ObjCBlock_ffiVoid._(ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunctionPointer(AuthenticationServices lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_ffiVoid_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunction(AuthenticationServices lib, void Function() fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_ffiVoid_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_registerClosure(() => fn())),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid.listener(AuthenticationServices lib, void Function() fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>)>.listener(
                        _ObjCBlock_ffiVoid_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_registerClosure(() => fn())),
            lib);
  static ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>)>?
      _dartFuncListenerTrampoline;

  void call() => _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>>()
          .asFunction<void Function(ffi.Pointer<_ObjCBlock>)>()(
        _id,
      );
}

class NSBundle extends NSObject {
  NSBundle._(ffi.Pointer<ObjCObject> id, AuthenticationServices lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSBundle] that points to the same underlying object as [other].
  static NSBundle castFrom<T extends _ObjCWrapper>(T other) {
    return NSBundle._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSBundle] that wraps the given raw object pointer.
  static NSBundle castFromPointer(
      AuthenticationServices lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSBundle._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSBundle].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSBundle1);
  }

  static NSBundle getMainBundle(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_395(_lib._class_NSBundle1, _lib._sel_mainBundle1);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle? bundleWithPath_(AuthenticationServices _lib, NSString path) {
    final _ret = _lib._objc_msgSend_48(
        _lib._class_NSBundle1, _lib._sel_bundleWithPath_1, path._id);
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  NSBundle? initWithPath_(NSString path) {
    final _ret = _lib._objc_msgSend_48(_id, _lib._sel_initWithPath_1, path._id);
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle? bundleWithURL_(AuthenticationServices _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_396(
        _lib._class_NSBundle1, _lib._sel_bundleWithURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  NSBundle? initWithURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_396(_id, _lib._sel_initWithURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle bundleForClass_(
      AuthenticationServices _lib, NSObject aClass) {
    final _ret = _lib._objc_msgSend_397(
        _lib._class_NSBundle1, _lib._sel_bundleForClass_1, aClass._id);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle? bundleWithIdentifier_(
      AuthenticationServices _lib, NSString identifier) {
    final _ret = _lib._objc_msgSend_398(_lib._class_NSBundle1,
        _lib._sel_bundleWithIdentifier_1, identifier._id);
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getAllBundles(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_378(_lib._class_NSBundle1, _lib._sel_allBundles1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getAllFrameworks(AuthenticationServices _lib) {
    final _ret =
        _lib._objc_msgSend_378(_lib._class_NSBundle1, _lib._sel_allFrameworks1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool load() {
    return _lib._objc_msgSend_12(_id, _lib._sel_load1);
  }

  bool get loaded {
    return _lib._objc_msgSend_12(_id, _lib._sel_isLoaded1);
  }

  bool unload() {
    return _lib._objc_msgSend_12(_id, _lib._sel_unload1);
  }

  bool preflightAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_399(
        _id, _lib._sel_preflightAndReturnError_1, error);
  }

  bool loadAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_399(_id, _lib._sel_loadAndReturnError_1, error);
  }

  NSURL get bundleURL {
    final _ret = _lib._objc_msgSend_400(_id, _lib._sel_bundleURL1);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get resourceURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_resourceURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get executableURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_executableURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForAuxiliaryExecutable_(NSString executableName) {
    final _ret = _lib._objc_msgSend_401(
        _id, _lib._sel_URLForAuxiliaryExecutable_1, executableName._id);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get privateFrameworksURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_privateFrameworksURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get sharedFrameworksURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_sharedFrameworksURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get sharedSupportURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_sharedSupportURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get builtInPlugInsURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_builtInPlugInsURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get appStoreReceiptURL {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_appStoreReceiptURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSString get bundlePath {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_bundlePath1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get resourcePath {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_resourcePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get executablePath {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_executablePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? pathForAuxiliaryExecutable_(NSString executableName) {
    final _ret = _lib._objc_msgSend_354(
        _id, _lib._sel_pathForAuxiliaryExecutable_1, executableName._id);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get privateFrameworksPath {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_privateFrameworksPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get sharedFrameworksPath {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_sharedFrameworksPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get sharedSupportPath {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_sharedSupportPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get builtInPlugInsPath {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_builtInPlugInsPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLForResource_withExtension_subdirectory_inBundleWithURL_(
      AuthenticationServices _lib,
      NSString? name,
      NSString? ext,
      NSString? subpath,
      NSURL bundleURL) {
    final _ret = _lib._objc_msgSend_402(
        _lib._class_NSBundle1,
        _lib._sel_URLForResource_withExtension_subdirectory_inBundleWithURL_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        bundleURL._id);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(
      AuthenticationServices _lib,
      NSString? ext,
      NSString? subpath,
      NSURL bundleURL) {
    final _ret = _lib._objc_msgSend_403(
        _lib._class_NSBundle1,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        bundleURL._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForResource_withExtension_(NSString? name, NSString? ext) {
    final _ret = _lib._objc_msgSend_404(
        _id,
        _lib._sel_URLForResource_withExtension_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForResource_withExtension_subdirectory_(
      NSString? name, NSString? ext, NSString? subpath) {
    final _ret = _lib._objc_msgSend_405(
        _id,
        _lib._sel_URLForResource_withExtension_subdirectory_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForResource_withExtension_subdirectory_localization_(NSString? name,
      NSString? ext, NSString? subpath, NSString? localizationName) {
    final _ret = _lib._objc_msgSend_406(
        _id,
        _lib._sel_URLForResource_withExtension_subdirectory_localization_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSArray? URLsForResourcesWithExtension_subdirectory_(
      NSString? ext, NSString? subpath) {
    final _ret = _lib._objc_msgSend_407(
        _id,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? URLsForResourcesWithExtension_subdirectory_localization_(
      NSString? ext, NSString? subpath, NSString? localizationName) {
    final _ret = _lib._objc_msgSend_408(
        _id,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_localization_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSString? pathForResource_ofType_inDirectory_(
      AuthenticationServices _lib,
      NSString? name,
      NSString? ext,
      NSString bundlePath) {
    final _ret = _lib._objc_msgSend_409(
        _lib._class_NSBundle1,
        _lib._sel_pathForResource_ofType_inDirectory_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        bundlePath._id);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSArray pathsForResourcesOfType_inDirectory_(
      AuthenticationServices _lib, NSString? ext, NSString bundlePath) {
    final _ret = _lib._objc_msgSend_410(
        _lib._class_NSBundle1,
        _lib._sel_pathsForResourcesOfType_inDirectory_1,
        ext?._id ?? ffi.nullptr,
        bundlePath._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? pathForResource_ofType_(NSString? name, NSString? ext) {
    final _ret = _lib._objc_msgSend_411(_id, _lib._sel_pathForResource_ofType_1,
        name?._id ?? ffi.nullptr, ext?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? pathForResource_ofType_inDirectory_forLocalization_(NSString? name,
      NSString? ext, NSString? subpath, NSString? localizationName) {
    final _ret = _lib._objc_msgSend_412(
        _id,
        _lib._sel_pathForResource_ofType_inDirectory_forLocalization_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray pathsForResourcesOfType_inDirectory_forLocalization_(
      NSString? ext, NSString? subpath, NSString? localizationName) {
    final _ret = _lib._objc_msgSend_413(
        _id,
        _lib._sel_pathsForResourcesOfType_inDirectory_forLocalization_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForKey_value_table_(
      NSString key, NSString? value, NSString? tableName) {
    final _ret = _lib._objc_msgSend_414(
        _id,
        _lib._sel_localizedStringForKey_value_table_1,
        key._id,
        value?._id ?? ffi.nullptr,
        tableName?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString localizedAttributedStringForKey_value_table_(
      NSString key, NSString? value, NSString? tableName) {
    final _ret = _lib._objc_msgSend_415(
        _id,
        _lib._sel_localizedAttributedStringForKey_value_table_1,
        key._id,
        value?._id ?? ffi.nullptr,
        tableName?._id ?? ffi.nullptr);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get bundleIdentifier {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_bundleIdentifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get infoDictionary {
    final _ret = _lib._objc_msgSend_384(_id, _lib._sel_infoDictionary1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get localizedInfoDictionary {
    final _ret =
        _lib._objc_msgSend_384(_id, _lib._sel_localizedInfoDictionary1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject? objectForInfoDictionaryKey_(NSString key) {
    final _ret = _lib._objc_msgSend_48(
        _id, _lib._sel_objectForInfoDictionaryKey_1, key._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? classNamed_(NSString className) {
    final _ret =
        _lib._objc_msgSend_48(_id, _lib._sel_classNamed_1, className._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get principalClass {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_principalClass1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray get preferredLocalizations {
    final _ret = _lib._objc_msgSend_378(_id, _lib._sel_preferredLocalizations1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get localizations {
    final _ret = _lib._objc_msgSend_378(_id, _lib._sel_localizations1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get developmentLocalization {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_developmentLocalization1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSArray preferredLocalizationsFromArray_(
      AuthenticationServices _lib, NSArray localizationsArray) {
    final _ret = _lib._objc_msgSend_416(_lib._class_NSBundle1,
        _lib._sel_preferredLocalizationsFromArray_1, localizationsArray._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray preferredLocalizationsFromArray_forPreferences_(
      AuthenticationServices _lib,
      NSArray localizationsArray,
      NSArray? preferencesArray) {
    final _ret = _lib._objc_msgSend_417(
        _lib._class_NSBundle1,
        _lib._sel_preferredLocalizationsFromArray_forPreferences_1,
        localizationsArray._id,
        preferencesArray?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get executableArchitectures {
    final _ret =
        _lib._objc_msgSend_344(_id, _lib._sel_executableArchitectures1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSBundle init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle new1(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_new1);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }

  static NSBundle allocWithZone_(
      AuthenticationServices _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSBundle1, _lib._sel_allocWithZone_1, zone);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }

  static NSBundle alloc(AuthenticationServices _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_alloc1);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }
}

/// Soft deprecated.
/// Please use `NSApplication`'s `-registerForRemoteNotifications` along with `-requestAuthorizationWithOptions:` from the `UserNotifications.framework` to specify allowable notification types.
abstract class NSRemoteNotificationType {
  static const int NSRemoteNotificationTypeNone = 0;
  static const int NSRemoteNotificationTypeBadge = 1;
  static const int NSRemoteNotificationTypeSound = 2;
  static const int NSRemoteNotificationTypeAlert = 4;
}

final class objc_method extends ffi.Opaque {}

final class objc_ivar extends ffi.Opaque {}

final class objc_category extends ffi.Opaque {}

final class objc_property extends ffi.Opaque {}

/// Defines a method
final class objc_method_description extends ffi.Struct {
  /// < The name of the method
  external ffi.Pointer<ObjCSel> name;

  /// < The types of the method arguments
  external ffi.Pointer<ffi.Char> types;
}

/// Defines a property attribute
final class objc_property_attribute_t extends ffi.Struct {
  /// < The name of the attribute
  external ffi.Pointer<ffi.Char> name;

  /// < The value of the attribute (usually empty)
  external ffi.Pointer<ffi.Char> value;
}

void _ObjCBlock_ffiVoid_ObjCObject_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_ObjCObject_bool_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_ObjCObject_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ObjCObject_bool_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_ffiVoid_ObjCObject_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ObjCObject_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ObjCObject_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_ffiVoid_ObjCObject_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_ObjCObject_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ObjCObject_bool._(
      ffi.Pointer<_ObjCBlock> id, AuthenticationServices lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjCObject_bool.fromFunctionPointer(
      AuthenticationServices lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_ObjCObject_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjCObject_bool.fromFunction(AuthenticationServices lib,
      void Function(NSObject, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_ObjCObject_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ObjCObject_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                        fn(NSObject._(arg0, lib, retain: true, release: true),
                            arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ObjCObject_bool.listener(AuthenticationServices lib,
      void Function(NSObject, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_ObjCObject_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ObjCObject_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ffi.Bool> arg1) =>
                        fn(NSObject._(arg0, lib, retain: true, release: true),
                            arg1))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(NSObject arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1);
}

abstract class objc_AssociationPolicy {
  /// < Specifies an unsafe unretained reference to the associated object.
  static const int OBJC_ASSOCIATION_ASSIGN = 0;

  /// < Specifies a strong reference to the associated object.
  /// The association is not made atomically.
  static const int OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1;

  /// < Specifies that the associated object is copied.
  /// The association is not made atomically.
  static const int OBJC_ASSOCIATION_COPY_NONATOMIC = 3;

  /// < Specifies a strong reference to the associated object.
  /// The association is made atomically.
  static const int OBJC_ASSOCIATION_RETAIN = 769;

  /// < Specifies that the associated object is copied.
  /// The association is made atomically.
  static const int OBJC_ASSOCIATION_COPY = 771;
}

/// Used by objc_func_loadImage
final class mach_header extends ffi.Opaque {}

final class objc_method_list extends ffi.Opaque {}
