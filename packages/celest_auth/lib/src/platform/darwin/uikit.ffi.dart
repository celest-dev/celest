// ignore_for_file: type=lint
// ignore_for_file: return_of_invalid_type
// ignore_for_file: unnecessary_non_null_assertion

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;
import 'package:celest_auth/src/platform/darwin/foundation.ffi.dart' as imp1;

/// Bindings for UIKit on iOS.
///
/// Regenerate bindings with `dart run ffigen --config=ffigen.uikit.yaml`.
///
class UIKit {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  UIKit(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  UIKit.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ObjCSel> _registerName1(String name) {
    final cstr = name.toNativeUtf8();
    final sel = _sel_registerName(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return sel;
  }

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _getClass1(String name) {
    final cstr = name.toNativeUtf8();
    final clazz = _objc_getClass(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    if (clazz == ffi.nullptr) {
      throw Exception('Failed to load Objective-C class: $name');
    }
    return clazz;
  }

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _objc_retain(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_retain(
      value,
    );
  }

  late final __objc_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('objc_retain');
  late final __objc_retain = __objc_retainPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  void _objc_release(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_release(
      value,
    );
  }

  late final __objc_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_release');
  late final __objc_release =
      __objc_releasePtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  late final _objc_releaseFinalizer2 =
      ffi.NativeFinalizer(__objc_releasePtr.cast());
  late final _class_UIWindow1 = _getClass1("UIWindow");
  bool _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> clazz,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
      clazz,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isKindOfClass_1 = _registerName1("isKindOfClass:");
  late final _class_UIView1 = _getClass1("UIView");
  late final _class_UIResponder1 = _getClass1("UIResponder");
  late final _class_NSObject1 = _getClass1("NSObject");
  late final _sel_load1 = _registerName1("load");
  void _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initialize1 = _registerName1("initialize");
  late final _sel_init1 = _registerName1("init");
  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_new1 = _registerName1("new");
  late final _sel_allocWithZone_1 = _registerName1("allocWithZone:");
  instancetype _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<imp1.NSZone> zone,
  ) {
    return __objc_msgSend_3(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<imp1.NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<imp1.NSZone>)>();

  late final _sel_alloc1 = _registerName1("alloc");
  late final _sel_dealloc1 = _registerName1("dealloc");
  late final _sel_finalize1 = _registerName1("finalize");
  late final _sel_copy1 = _registerName1("copy");
  late final _sel_mutableCopy1 = _registerName1("mutableCopy");
  late final _sel_copyWithZone_1 = _registerName1("copyWithZone:");
  late final _sel_mutableCopyWithZone_1 =
      _registerName1("mutableCopyWithZone:");
  late final _sel_instancesRespondToSelector_1 =
      _registerName1("instancesRespondToSelector:");
  bool _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_4(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _class_Protocol1 = _getClass1("Protocol");
  late final _sel_conformsToProtocol_1 = _registerName1("conformsToProtocol:");
  bool _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protocol,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      protocol,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodForSelector_1 = _registerName1("methodForSelector:");
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodForSelector_1 =
      _registerName1("instanceMethodForSelector:");
  late final _sel_doesNotRecognizeSelector_1 =
      _registerName1("doesNotRecognizeSelector:");
  void _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_forwardingTargetForSelector_1 =
      _registerName1("forwardingTargetForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_8(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSInvocation1 = _getClass1("NSInvocation");
  late final _class_NSMethodSignature1 = _getClass1("NSMethodSignature");
  late final _sel_signatureWithObjCTypes_1 =
      _registerName1("signatureWithObjCTypes:");
  ffi.Pointer<ObjCObject> _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> types,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
      types,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Char>)>();

  late final _sel_numberOfArguments1 = _registerName1("numberOfArguments");
  int _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_10(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_getArgumentTypeAtIndex_1 =
      _registerName1("getArgumentTypeAtIndex:");
  ffi.Pointer<ffi.Char> _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int idx,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
      idx,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_frameLength1 = _registerName1("frameLength");
  late final _sel_isOneway1 = _registerName1("isOneway");
  bool _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_methodReturnType1 = _registerName1("methodReturnType");
  ffi.Pointer<ffi.Char> _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_methodReturnLength1 = _registerName1("methodReturnLength");
  late final _sel_invocationWithMethodSignature_1 =
      _registerName1("invocationWithMethodSignature:");
  ffi.Pointer<ObjCObject> _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sig,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
      sig,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_methodSignature1 = _registerName1("methodSignature");
  ffi.Pointer<ObjCObject> _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_retainArguments1 = _registerName1("retainArguments");
  late final _sel_argumentsRetained1 = _registerName1("argumentsRetained");
  late final _sel_target1 = _registerName1("target");
  ffi.Pointer<ObjCObject> _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_16(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTarget_1 = _registerName1("setTarget:");
  void _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_17(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_selector1 = _registerName1("selector");
  ffi.Pointer<ObjCSel> _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_18(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setSelector_1 = _registerName1("setSelector:");
  void _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> value,
  ) {
    return __objc_msgSend_19(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_getReturnValue_1 = _registerName1("getReturnValue:");
  void _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> retLoc,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
      retLoc,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_setReturnValue_1 = _registerName1("setReturnValue:");
  late final _sel_getArgument_atIndex_1 =
      _registerName1("getArgument:atIndex:");
  void _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> argumentLocation,
    int idx,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
      argumentLocation,
      idx,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_setArgument_atIndex_1 =
      _registerName1("setArgument:atIndex:");
  late final _sel_invoke1 = _registerName1("invoke");
  late final _sel_invokeWithTarget_1 = _registerName1("invokeWithTarget:");
  void _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
      target,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_invokeUsingIMP_1 = _registerName1("invokeUsingIMP:");
  void _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> imp,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      imp,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  late final _sel_forwardInvocation_1 = _registerName1("forwardInvocation:");
  void _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodSignatureForSelector_1 =
      _registerName1("methodSignatureForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodSignatureForSelector_1 =
      _registerName1("instanceMethodSignatureForSelector:");
  late final _sel_allowsWeakReference1 = _registerName1("allowsWeakReference");
  late final _sel_retainWeakReference1 = _registerName1("retainWeakReference");
  late final _sel_isSubclassOfClass_1 = _registerName1("isSubclassOfClass:");
  late final _sel_resolveClassMethod_1 = _registerName1("resolveClassMethod:");
  late final _sel_resolveInstanceMethod_1 =
      _registerName1("resolveInstanceMethod:");
  late final _sel_hash1 = _registerName1("hash");
  late final _sel_superclass1 = _registerName1("superclass");
  late final _sel_class1 = _registerName1("class");
  late final _class_NSString1 = _getClass1("NSString");
  late final _sel_length1 = _registerName1("length");
  late final _sel_characterAtIndex_1 = _registerName1("characterAtIndex:");
  int _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_NSCoder1 = _getClass1("NSCoder");
  late final _sel_encodeValueOfObjCType_at_1 =
      _registerName1("encodeValueOfObjCType:at:");
  void _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> addr,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
      type,
      addr,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  late final _class_NSData1 = _getClass1("NSData");
  late final _sel_bytes1 = _registerName1("bytes");
  ffi.Pointer<ffi.Void> _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeDataObject_1 = _registerName1("encodeDataObject:");
  void _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
      data,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeDataObject1 = _registerName1("decodeDataObject");
  ffi.Pointer<ObjCObject> _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_decodeValueOfObjCType_at_size_1 =
      _registerName1("decodeValueOfObjCType:at:size:");
  void _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
      type,
      data,
      size,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  late final _sel_versionForClassName_1 =
      _registerName1("versionForClassName:");
  int _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> className,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
      className,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithCoder_1 = _registerName1("initWithCoder:");
  instancetype _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_stringWithCharacters_length_1 =
      _registerName1("stringWithCharacters:length:");
  ffi.Pointer<ObjCObject> _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.WChar> characters,
    int length,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
      characters,
      length,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.WChar>, int)>();

  late final _sel_dataUsingEncoding_1 = _registerName1("dataUsingEncoding:");
  ffi.Pointer<ObjCObject> _objc_msgSend_35(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_35(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_35 = __objc_msgSend_35Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_description1 = _registerName1("description");
  ffi.Pointer<ObjCObject> _objc_msgSend_36(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_36(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_36 = __objc_msgSend_36Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_debugDescription1 = _registerName1("debugDescription");
  late final _sel_nextResponder1 = _registerName1("nextResponder");
  ffi.Pointer<ObjCObject> _objc_msgSend_37(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_37(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_37 = __objc_msgSend_37Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_canBecomeFirstResponder1 =
      _registerName1("canBecomeFirstResponder");
  late final _sel_becomeFirstResponder1 =
      _registerName1("becomeFirstResponder");
  late final _sel_canResignFirstResponder1 =
      _registerName1("canResignFirstResponder");
  late final _sel_resignFirstResponder1 =
      _registerName1("resignFirstResponder");
  late final _sel_isFirstResponder1 = _registerName1("isFirstResponder");
  late final _class_UIEvent1 = _getClass1("UIEvent");
  late final _sel_type1 = _registerName1("type");
  int _objc_msgSend_38(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_38(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_38 = __objc_msgSend_38Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_subtype1 = _registerName1("subtype");
  int _objc_msgSend_39(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_39(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_39 = __objc_msgSend_39Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_timestamp1 = _registerName1("timestamp");
  late final _objc_msgSend_useVariants1 = ffi.Abi.current() == ffi.Abi.iosX64 ||
      ffi.Abi.current() == ffi.Abi.macosX64;
  double _objc_msgSend_40(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_40(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_40 = __objc_msgSend_40Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  double _objc_msgSend_40_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_40_fpret(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_40_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_40_fpret = __objc_msgSend_40_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_modifierFlags1 = _registerName1("modifierFlags");
  int _objc_msgSend_41(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_41(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_41 = __objc_msgSend_41Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_buttonMask1 = _registerName1("buttonMask");
  int _objc_msgSend_42(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_42(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_42 = __objc_msgSend_42Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_allTouches1 = _registerName1("allTouches");
  late final _sel_touchesForWindow_1 = _registerName1("touchesForWindow:");
  ffi.Pointer<ObjCObject> _objc_msgSend_43(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> window,
  ) {
    return __objc_msgSend_43(
      obj,
      sel,
      window,
    );
  }

  late final __objc_msgSend_43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_43 = __objc_msgSend_43Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_touchesForView_1 = _registerName1("touchesForView:");
  ffi.Pointer<ObjCObject> _objc_msgSend_44(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_44(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_44 = __objc_msgSend_44Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_UIGestureRecognizer1 = _getClass1("UIGestureRecognizer");
  late final _sel_touchesForGestureRecognizer_1 =
      _registerName1("touchesForGestureRecognizer:");
  ffi.Pointer<ObjCObject> _objc_msgSend_45(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> gesture,
  ) {
    return __objc_msgSend_45(
      obj,
      sel,
      gesture,
    );
  }

  late final __objc_msgSend_45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_45 = __objc_msgSend_45Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_UITouch1 = _getClass1("UITouch");
  late final _sel_phase1 = _registerName1("phase");
  int _objc_msgSend_46(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_46(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_46 = __objc_msgSend_46Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_tapCount1 = _registerName1("tapCount");
  int _objc_msgSend_47(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_47(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_47 = __objc_msgSend_47Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_majorRadius1 = _registerName1("majorRadius");
  late final _sel_majorRadiusTolerance1 =
      _registerName1("majorRadiusTolerance");
  late final _sel_window1 = _registerName1("window");
  ffi.Pointer<ObjCObject> _objc_msgSend_48(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_48(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_48 = __objc_msgSend_48Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_view1 = _registerName1("view");
  ffi.Pointer<ObjCObject> _objc_msgSend_49(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_49(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_49 = __objc_msgSend_49Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_gestureRecognizers1 = _registerName1("gestureRecognizers");
  late final _sel_locationInView_1 = _registerName1("locationInView:");
  CGPoint _objc_msgSend_50(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_50(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_50Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_50 = __objc_msgSend_50Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_50_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_50_stret(
      stret,
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_50_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGPoint>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_50_stret = __objc_msgSend_50_stretPtr.asFunction<
      void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_previousLocationInView_1 =
      _registerName1("previousLocationInView:");
  late final _sel_preciseLocationInView_1 =
      _registerName1("preciseLocationInView:");
  late final _sel_precisePreviousLocationInView_1 =
      _registerName1("precisePreviousLocationInView:");
  late final _sel_force1 = _registerName1("force");
  late final _sel_maximumPossibleForce1 =
      _registerName1("maximumPossibleForce");
  late final _sel_azimuthAngleInView_1 = _registerName1("azimuthAngleInView:");
  double _objc_msgSend_51(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_51(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_51 = __objc_msgSend_51Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  double _objc_msgSend_51_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_51_fpret(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_51_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_51_fpret = __objc_msgSend_51_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_azimuthUnitVectorInView_1 =
      _registerName1("azimuthUnitVectorInView:");
  CGVector _objc_msgSend_52(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_52(
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_52Ptr = _lookup<
      ffi.NativeFunction<
          CGVector Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_52 = __objc_msgSend_52Ptr.asFunction<
      CGVector Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_52_stret(
    ffi.Pointer<CGVector> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> view,
  ) {
    return __objc_msgSend_52_stret(
      stret,
      obj,
      sel,
      view,
    );
  }

  late final __objc_msgSend_52_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGVector>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_52_stret = __objc_msgSend_52_stretPtr.asFunction<
      void Function(ffi.Pointer<CGVector>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_altitudeAngle1 = _registerName1("altitudeAngle");
  late final _class_NSNumber1 = _getClass1("NSNumber");
  late final _class_NSValue1 = _getClass1("NSValue");
  late final _sel_getValue_size_1 = _registerName1("getValue:size:");
  void _objc_msgSend_53(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    return __objc_msgSend_53(
      obj,
      sel,
      value,
      size,
    );
  }

  late final __objc_msgSend_53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_53 = __objc_msgSend_53Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_objCType1 = _registerName1("objCType");
  late final _sel_initWithBytes_objCType_1 =
      _registerName1("initWithBytes:objCType:");
  instancetype _objc_msgSend_54(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_54(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_54Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_54 = __objc_msgSend_54Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  late final _sel_initWithChar_1 = _registerName1("initWithChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_55(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_55(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_55 = __objc_msgSend_55Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedChar_1 =
      _registerName1("initWithUnsignedChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_56(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_56(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_56 = __objc_msgSend_56Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithShort_1 = _registerName1("initWithShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_57(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_57(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_57 = __objc_msgSend_57Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedShort_1 =
      _registerName1("initWithUnsignedShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_58(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_58(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_58 = __objc_msgSend_58Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithInt_1 = _registerName1("initWithInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_59(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_59(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_59 = __objc_msgSend_59Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedInt_1 =
      _registerName1("initWithUnsignedInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_60(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_60(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_60 = __objc_msgSend_60Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLong_1 = _registerName1("initWithLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_61(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_61(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_61 = __objc_msgSend_61Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLong_1 =
      _registerName1("initWithUnsignedLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_62(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_62(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_62 = __objc_msgSend_62Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLongLong_1 = _registerName1("initWithLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_63(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_63(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_63Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_63 = __objc_msgSend_63Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLongLong_1 =
      _registerName1("initWithUnsignedLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_64(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_64(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_64 = __objc_msgSend_64Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithFloat_1 = _registerName1("initWithFloat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_65(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_65(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_65 = __objc_msgSend_65Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithDouble_1 = _registerName1("initWithDouble:");
  ffi.Pointer<ObjCObject> _objc_msgSend_66(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_66(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_66Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_66 = __objc_msgSend_66Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithBool_1 = _registerName1("initWithBool:");
  ffi.Pointer<ObjCObject> _objc_msgSend_67(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_67(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_67 = __objc_msgSend_67Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_initWithInteger_1 = _registerName1("initWithInteger:");
  late final _sel_initWithUnsignedInteger_1 =
      _registerName1("initWithUnsignedInteger:");
  late final _sel_charValue1 = _registerName1("charValue");
  int _objc_msgSend_68(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_68(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_68Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Char Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_68 = __objc_msgSend_68Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedCharValue1 = _registerName1("unsignedCharValue");
  int _objc_msgSend_69(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_69(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_69 = __objc_msgSend_69Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_shortValue1 = _registerName1("shortValue");
  int _objc_msgSend_70(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_70(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_70Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_70 = __objc_msgSend_70Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedShortValue1 = _registerName1("unsignedShortValue");
  int _objc_msgSend_71(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_71(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_71Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_71 = __objc_msgSend_71Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_intValue1 = _registerName1("intValue");
  int _objc_msgSend_72(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_72(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_72Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_72 = __objc_msgSend_72Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedIntValue1 = _registerName1("unsignedIntValue");
  int _objc_msgSend_73(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_73(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_73Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_73 = __objc_msgSend_73Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_longValue1 = _registerName1("longValue");
  int _objc_msgSend_74(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_74(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_74Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_74 = __objc_msgSend_74Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedLongValue1 = _registerName1("unsignedLongValue");
  late final _sel_longLongValue1 = _registerName1("longLongValue");
  int _objc_msgSend_75(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_75(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_75Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_75 = __objc_msgSend_75Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedLongLongValue1 =
      _registerName1("unsignedLongLongValue");
  int _objc_msgSend_76(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_76(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_76Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_76 = __objc_msgSend_76Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_floatValue1 = _registerName1("floatValue");
  double _objc_msgSend_77(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_77(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_77Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_77 = __objc_msgSend_77Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  double _objc_msgSend_77_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_77_fpret(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_77_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_77_fpret = __objc_msgSend_77_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_doubleValue1 = _registerName1("doubleValue");
  late final _sel_boolValue1 = _registerName1("boolValue");
  late final _sel_integerValue1 = _registerName1("integerValue");
  late final _sel_unsignedIntegerValue1 =
      _registerName1("unsignedIntegerValue");
  late final _sel_stringValue1 = _registerName1("stringValue");
  late final _sel_compare_1 = _registerName1("compare:");
  int _objc_msgSend_78(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherNumber,
  ) {
    return __objc_msgSend_78(
      obj,
      sel,
      otherNumber,
    );
  }

  late final __objc_msgSend_78Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_78 = __objc_msgSend_78Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToNumber_1 = _registerName1("isEqualToNumber:");
  bool _objc_msgSend_79(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> number,
  ) {
    return __objc_msgSend_79(
      obj,
      sel,
      number,
    );
  }

  late final __objc_msgSend_79Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_79 = __objc_msgSend_79Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_descriptionWithLocale_1 =
      _registerName1("descriptionWithLocale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_80(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_80(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_80Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_80 = __objc_msgSend_80Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_estimationUpdateIndex1 =
      _registerName1("estimationUpdateIndex");
  ffi.Pointer<ObjCObject> _objc_msgSend_81(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_81(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_81Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_81 = __objc_msgSend_81Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_estimatedProperties1 = _registerName1("estimatedProperties");
  int _objc_msgSend_82(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_82(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_82Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_82 = __objc_msgSend_82Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_estimatedPropertiesExpectingUpdates1 =
      _registerName1("estimatedPropertiesExpectingUpdates");
  late final _sel_coalescedTouchesForTouch_1 =
      _registerName1("coalescedTouchesForTouch:");
  ffi.Pointer<ObjCObject> _objc_msgSend_83(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> touch,
  ) {
    return __objc_msgSend_83(
      obj,
      sel,
      touch,
    );
  }

  late final __objc_msgSend_83Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_83 = __objc_msgSend_83Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_predictedTouchesForTouch_1 =
      _registerName1("predictedTouchesForTouch:");
  late final _sel_touchesBegan_withEvent_1 =
      _registerName1("touchesBegan:withEvent:");
  void _objc_msgSend_84(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> touches,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_84(
      obj,
      sel,
      touches,
      event,
    );
  }

  late final __objc_msgSend_84Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_84 = __objc_msgSend_84Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_touchesMoved_withEvent_1 =
      _registerName1("touchesMoved:withEvent:");
  late final _sel_touchesEnded_withEvent_1 =
      _registerName1("touchesEnded:withEvent:");
  late final _sel_touchesCancelled_withEvent_1 =
      _registerName1("touchesCancelled:withEvent:");
  late final _sel_touchesEstimatedPropertiesUpdated_1 =
      _registerName1("touchesEstimatedPropertiesUpdated:");
  late final _class_UIPressesEvent1 = _getClass1("UIPressesEvent");
  late final _sel_pressesBegan_withEvent_1 =
      _registerName1("pressesBegan:withEvent:");
  void _objc_msgSend_85(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> presses,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_85(
      obj,
      sel,
      presses,
      event,
    );
  }

  late final __objc_msgSend_85Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_85 = __objc_msgSend_85Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_pressesChanged_withEvent_1 =
      _registerName1("pressesChanged:withEvent:");
  late final _sel_pressesEnded_withEvent_1 =
      _registerName1("pressesEnded:withEvent:");
  late final _sel_pressesCancelled_withEvent_1 =
      _registerName1("pressesCancelled:withEvent:");
  late final _sel_motionBegan_withEvent_1 =
      _registerName1("motionBegan:withEvent:");
  void _objc_msgSend_86(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int motion,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_86(
      obj,
      sel,
      motion,
      event,
    );
  }

  late final __objc_msgSend_86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_86 = __objc_msgSend_86Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_motionEnded_withEvent_1 =
      _registerName1("motionEnded:withEvent:");
  late final _sel_motionCancelled_withEvent_1 =
      _registerName1("motionCancelled:withEvent:");
  late final _sel_remoteControlReceivedWithEvent_1 =
      _registerName1("remoteControlReceivedWithEvent:");
  void _objc_msgSend_87(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_87(
      obj,
      sel,
      event,
    );
  }

  late final __objc_msgSend_87Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_87 = __objc_msgSend_87Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_canPerformAction_withSender_1 =
      _registerName1("canPerformAction:withSender:");
  bool _objc_msgSend_88(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> action,
    ffi.Pointer<ObjCObject> sender,
  ) {
    return __objc_msgSend_88(
      obj,
      sel,
      action,
      sender,
    );
  }

  late final __objc_msgSend_88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_88 = __objc_msgSend_88Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_targetForAction_withSender_1 =
      _registerName1("targetForAction:withSender:");
  ffi.Pointer<ObjCObject> _objc_msgSend_89(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> action,
    ffi.Pointer<ObjCObject> sender,
  ) {
    return __objc_msgSend_89(
      obj,
      sel,
      action,
      sender,
    );
  }

  late final __objc_msgSend_89Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_89 = __objc_msgSend_89Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_buildMenuWithBuilder_1 =
      _registerName1("buildMenuWithBuilder:");
  late final _class_UICommand1 = _getClass1("UICommand");
  late final _class_UIMenuElement1 = _getClass1("UIMenuElement");
  late final _sel_title1 = _registerName1("title");
  late final _sel_subtitle1 = _registerName1("subtitle");
  ffi.Pointer<ObjCObject> _objc_msgSend_90(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_90(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_90 = __objc_msgSend_90Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setSubtitle_1 = _registerName1("setSubtitle:");
  void _objc_msgSend_91(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_91(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_91Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_91 = __objc_msgSend_91Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_UIImage1 = _getClass1("UIImage");
  late final _sel_image1 = _registerName1("image");
  ffi.Pointer<ObjCObject> _objc_msgSend_92(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_92(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_92Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_92 = __objc_msgSend_92Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTitle_1 = _registerName1("setTitle:");
  void _objc_msgSend_93(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_93(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_93Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_93 = __objc_msgSend_93Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setImage_1 = _registerName1("setImage:");
  void _objc_msgSend_94(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_94(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_94Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_94 = __objc_msgSend_94Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_discoverabilityTitle1 =
      _registerName1("discoverabilityTitle");
  late final _sel_setDiscoverabilityTitle_1 =
      _registerName1("setDiscoverabilityTitle:");
  late final _sel_action1 = _registerName1("action");
  late final _sel_propertyList1 = _registerName1("propertyList");
  late final _sel_attributes1 = _registerName1("attributes");
  int _objc_msgSend_95(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_95(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_95Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_95 = __objc_msgSend_95Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setAttributes_1 = _registerName1("setAttributes:");
  void _objc_msgSend_96(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_96(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_96 = __objc_msgSend_96Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_state1 = _registerName1("state");
  int _objc_msgSend_97(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_97(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_97Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_97 = __objc_msgSend_97Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setState_1 = _registerName1("setState:");
  void _objc_msgSend_98(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_98(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_98Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_98 = __objc_msgSend_98Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_alternates1 = _registerName1("alternates");
  late final _sel_commandWithTitle_image_action_propertyList_1 =
      _registerName1("commandWithTitle:image:action:propertyList:");
  instancetype _objc_msgSend_99(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> title,
    ffi.Pointer<ObjCObject> image,
    ffi.Pointer<ObjCSel> action,
    ffi.Pointer<ObjCObject> propertyList,
  ) {
    return __objc_msgSend_99(
      obj,
      sel,
      title,
      image,
      action,
      propertyList,
    );
  }

  late final __objc_msgSend_99Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_99 = __objc_msgSend_99Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_commandWithTitle_image_action_propertyList_alternates_1 =
      _registerName1("commandWithTitle:image:action:propertyList:alternates:");
  instancetype _objc_msgSend_100(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> title,
    ffi.Pointer<ObjCObject> image,
    ffi.Pointer<ObjCSel> action,
    ffi.Pointer<ObjCObject> propertyList,
    ffi.Pointer<ObjCObject> alternates,
  ) {
    return __objc_msgSend_100(
      obj,
      sel,
      title,
      image,
      action,
      propertyList,
      alternates,
    );
  }

  late final __objc_msgSend_100Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_100 = __objc_msgSend_100Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_validateCommand_1 = _registerName1("validateCommand:");
  void _objc_msgSend_101(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> command,
  ) {
    return __objc_msgSend_101(
      obj,
      sel,
      command,
    );
  }

  late final __objc_msgSend_101Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_101 = __objc_msgSend_101Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSUndoManager1 = _getClass1("NSUndoManager");
  late final _sel_beginUndoGrouping1 = _registerName1("beginUndoGrouping");
  late final _sel_endUndoGrouping1 = _registerName1("endUndoGrouping");
  late final _sel_groupingLevel1 = _registerName1("groupingLevel");
  late final _sel_disableUndoRegistration1 =
      _registerName1("disableUndoRegistration");
  late final _sel_enableUndoRegistration1 =
      _registerName1("enableUndoRegistration");
  late final _sel_isUndoRegistrationEnabled1 =
      _registerName1("isUndoRegistrationEnabled");
  late final _sel_groupsByEvent1 = _registerName1("groupsByEvent");
  late final _sel_setGroupsByEvent_1 = _registerName1("setGroupsByEvent:");
  void _objc_msgSend_102(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_102(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_102Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_102 = __objc_msgSend_102Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_levelsOfUndo1 = _registerName1("levelsOfUndo");
  late final _sel_setLevelsOfUndo_1 = _registerName1("setLevelsOfUndo:");
  void _objc_msgSend_103(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_103(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_103Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_103 = __objc_msgSend_103Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_runLoopModes1 = _registerName1("runLoopModes");
  late final _sel_setRunLoopModes_1 = _registerName1("setRunLoopModes:");
  void _objc_msgSend_104(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_104(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_104Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_104 = __objc_msgSend_104Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_undo1 = _registerName1("undo");
  late final _sel_redo1 = _registerName1("redo");
  late final _sel_undoNestedGroup1 = _registerName1("undoNestedGroup");
  late final _sel_canUndo1 = _registerName1("canUndo");
  late final _sel_canRedo1 = _registerName1("canRedo");
  late final _sel_isUndoing1 = _registerName1("isUndoing");
  late final _sel_isRedoing1 = _registerName1("isRedoing");
  late final _sel_removeAllActions1 = _registerName1("removeAllActions");
  late final _sel_removeAllActionsWithTarget_1 =
      _registerName1("removeAllActionsWithTarget:");
  late final _sel_registerUndoWithTarget_selector_object_1 =
      _registerName1("registerUndoWithTarget:selector:object:");
  void _objc_msgSend_105(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCSel> selector,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_105(
      obj,
      sel,
      target,
      selector,
      anObject,
    );
  }

  late final __objc_msgSend_105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_105 = __objc_msgSend_105Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_prepareWithInvocationTarget_1 =
      _registerName1("prepareWithInvocationTarget:");
  ffi.Pointer<ObjCObject> _objc_msgSend_106(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
  ) {
    return __objc_msgSend_106(
      obj,
      sel,
      target,
    );
  }

  late final __objc_msgSend_106Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_106 = __objc_msgSend_106Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<_ObjCBlockDesc> _newBlockDesc1() {
    final d =
        pkg_ffi.calloc.allocate<_ObjCBlockDesc>(ffi.sizeOf<_ObjCBlockDesc>());
    d.ref.reserved = 0;
    d.ref.size = ffi.sizeOf<_ObjCBlock>();
    d.ref.copy_helper = ffi.nullptr;
    d.ref.dispose_helper = ffi.nullptr;
    d.ref.signature = ffi.nullptr;
    return d;
  }

  late final _objc_block_desc1 = _newBlockDesc1();
  late final _objc_concrete_global_block1 =
      _lookup<ffi.Void>('_NSConcreteGlobalBlock');
  ffi.Pointer<_ObjCBlock> _newBlock1(
      ffi.Pointer<ffi.Void> invoke, ffi.Pointer<ffi.Void> target) {
    final b = pkg_ffi.calloc.allocate<_ObjCBlock>(ffi.sizeOf<_ObjCBlock>());
    b.ref.isa = _objc_concrete_global_block1;
    b.ref.flags = 0;
    b.ref.reserved = 0;
    b.ref.invoke = invoke;
    b.ref.target = target;
    b.ref.descriptor = _objc_block_desc1;
    final copy = _Block_copy(b.cast()).cast<_ObjCBlock>();
    pkg_ffi.calloc.free(b);
    return copy;
  }

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_copy(
      value,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_release(
      value,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  late final _objc_releaseFinalizer11 =
      ffi.NativeFinalizer(__Block_releasePtr.cast());
  late final _sel_registerUndoWithTarget_handler_1 =
      _registerName1("registerUndoWithTarget:handler:");
  void _objc_msgSend_107(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<_ObjCBlock> undoHandler,
  ) {
    return __objc_msgSend_107(
      obj,
      sel,
      target,
      undoHandler,
    );
  }

  late final __objc_msgSend_107Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_107 = __objc_msgSend_107Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_setActionIsDiscardable_1 =
      _registerName1("setActionIsDiscardable:");
  void _objc_msgSend_108(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool discardable,
  ) {
    return __objc_msgSend_108(
      obj,
      sel,
      discardable,
    );
  }

  late final __objc_msgSend_108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_108 = __objc_msgSend_108Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_undoActionIsDiscardable1 =
      _registerName1("undoActionIsDiscardable");
  late final _sel_redoActionIsDiscardable1 =
      _registerName1("redoActionIsDiscardable");
  late final _sel_undoActionName1 = _registerName1("undoActionName");
  late final _sel_redoActionName1 = _registerName1("redoActionName");
  late final _sel_setActionName_1 = _registerName1("setActionName:");
  void _objc_msgSend_109(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> actionName,
  ) {
    return __objc_msgSend_109(
      obj,
      sel,
      actionName,
    );
  }

  late final __objc_msgSend_109Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_109 = __objc_msgSend_109Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_undoMenuItemTitle1 = _registerName1("undoMenuItemTitle");
  late final _sel_redoMenuItemTitle1 = _registerName1("redoMenuItemTitle");
  late final _sel_undoMenuTitleForUndoActionName_1 =
      _registerName1("undoMenuTitleForUndoActionName:");
  ffi.Pointer<ObjCObject> _objc_msgSend_110(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> actionName,
  ) {
    return __objc_msgSend_110(
      obj,
      sel,
      actionName,
    );
  }

  late final __objc_msgSend_110Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_110 = __objc_msgSend_110Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_redoMenuTitleForUndoActionName_1 =
      _registerName1("redoMenuTitleForUndoActionName:");
  late final _sel_undoManager1 = _registerName1("undoManager");
  ffi.Pointer<ObjCObject> _objc_msgSend_111(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_111(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_111Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_111 = __objc_msgSend_111Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_editingInteractionConfiguration1 =
      _registerName1("editingInteractionConfiguration");
  int _objc_msgSend_112(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_112(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_112Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_112 = __objc_msgSend_112Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_layerClass1 = _registerName1("layerClass");
  late final _sel_initWithFrame_1 = _registerName1("initWithFrame:");
  instancetype _objc_msgSend_113(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect frame,
  ) {
    return __objc_msgSend_113(
      obj,
      sel,
      frame,
    );
  }

  late final __objc_msgSend_113Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_113 = __objc_msgSend_113Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_isUserInteractionEnabled1 =
      _registerName1("isUserInteractionEnabled");
  late final _sel_setUserInteractionEnabled_1 =
      _registerName1("setUserInteractionEnabled:");
  late final _sel_tag1 = _registerName1("tag");
  late final _sel_setTag_1 = _registerName1("setTag:");
  void _objc_msgSend_114(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_114(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_114Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_114 = __objc_msgSend_114Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_CALayer1 = _getClass1("CALayer");
  late final _sel_layer1 = _registerName1("layer");
  late final _sel_initWithLayer_1 = _registerName1("initWithLayer:");
  late final _sel_presentationLayer1 = _registerName1("presentationLayer");
  late final _sel_modelLayer1 = _registerName1("modelLayer");
  late final _sel_defaultValueForKey_1 = _registerName1("defaultValueForKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_115(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_115(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_115Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_115 = __objc_msgSend_115Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_needsDisplayForKey_1 = _registerName1("needsDisplayForKey:");
  bool _objc_msgSend_116(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_116(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_116 = __objc_msgSend_116Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_shouldArchiveValueForKey_1 =
      _registerName1("shouldArchiveValueForKey:");
  late final _sel_bounds1 = _registerName1("bounds");
  CGRect _objc_msgSend_117(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_117(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_117Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_117 = __objc_msgSend_117Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_117_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_117_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_117_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_117_stret = __objc_msgSend_117_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_setBounds_1 = _registerName1("setBounds:");
  void _objc_msgSend_118(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect value,
  ) {
    return __objc_msgSend_118(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_118 = __objc_msgSend_118Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_position1 = _registerName1("position");
  CGPoint _objc_msgSend_119(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_119(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_119Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_119 = __objc_msgSend_119Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_119_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_119_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_119_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_119_stret = __objc_msgSend_119_stretPtr.asFunction<
      void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_setPosition_1 = _registerName1("setPosition:");
  void _objc_msgSend_120(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint value,
  ) {
    return __objc_msgSend_120(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_120Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_120 = __objc_msgSend_120Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_zPosition1 = _registerName1("zPosition");
  late final _sel_setZPosition_1 = _registerName1("setZPosition:");
  void _objc_msgSend_121(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_121(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_121Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_121 = __objc_msgSend_121Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_anchorPoint1 = _registerName1("anchorPoint");
  late final _sel_setAnchorPoint_1 = _registerName1("setAnchorPoint:");
  late final _sel_anchorPointZ1 = _registerName1("anchorPointZ");
  late final _sel_setAnchorPointZ_1 = _registerName1("setAnchorPointZ:");
  late final _sel_transform1 = _registerName1("transform");
  CATransform3D _objc_msgSend_122(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_122(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_122Ptr = _lookup<
      ffi.NativeFunction<
          CATransform3D Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_122 = __objc_msgSend_122Ptr.asFunction<
      CATransform3D Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_122_stret(
    ffi.Pointer<CATransform3D> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_122_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_122_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CATransform3D>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_122_stret = __objc_msgSend_122_stretPtr.asFunction<
      void Function(ffi.Pointer<CATransform3D>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_setTransform_1 = _registerName1("setTransform:");
  void _objc_msgSend_123(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CATransform3D value,
  ) {
    return __objc_msgSend_123(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_123Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CATransform3D)>>('objc_msgSend');
  late final __objc_msgSend_123 = __objc_msgSend_123Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CATransform3D)>();

  late final _sel_affineTransform1 = _registerName1("affineTransform");
  CGAffineTransform _objc_msgSend_124(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_124(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_124Ptr = _lookup<
      ffi.NativeFunction<
          CGAffineTransform Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_124 = __objc_msgSend_124Ptr.asFunction<
      CGAffineTransform Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_124_stret(
    ffi.Pointer<CGAffineTransform> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_124_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_124_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGAffineTransform>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_124_stret = __objc_msgSend_124_stretPtr.asFunction<
      void Function(ffi.Pointer<CGAffineTransform>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_setAffineTransform_1 = _registerName1("setAffineTransform:");
  void _objc_msgSend_125(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGAffineTransform m,
  ) {
    return __objc_msgSend_125(
      obj,
      sel,
      m,
    );
  }

  late final __objc_msgSend_125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGAffineTransform)>>('objc_msgSend');
  late final __objc_msgSend_125 = __objc_msgSend_125Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGAffineTransform)>();

  late final _sel_frame1 = _registerName1("frame");
  late final _sel_setFrame_1 = _registerName1("setFrame:");
  late final _sel_isHidden1 = _registerName1("isHidden");
  late final _sel_setHidden_1 = _registerName1("setHidden:");
  late final _sel_isDoubleSided1 = _registerName1("isDoubleSided");
  late final _sel_setDoubleSided_1 = _registerName1("setDoubleSided:");
  late final _sel_isGeometryFlipped1 = _registerName1("isGeometryFlipped");
  late final _sel_setGeometryFlipped_1 = _registerName1("setGeometryFlipped:");
  late final _sel_contentsAreFlipped1 = _registerName1("contentsAreFlipped");
  late final _sel_superlayer1 = _registerName1("superlayer");
  ffi.Pointer<ObjCObject> _objc_msgSend_126(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_126(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_126Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_126 = __objc_msgSend_126Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_removeFromSuperlayer1 =
      _registerName1("removeFromSuperlayer");
  late final _sel_sublayers1 = _registerName1("sublayers");
  late final _sel_setSublayers_1 = _registerName1("setSublayers:");
  late final _sel_addSublayer_1 = _registerName1("addSublayer:");
  void _objc_msgSend_127(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> layer,
  ) {
    return __objc_msgSend_127(
      obj,
      sel,
      layer,
    );
  }

  late final __objc_msgSend_127Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_127 = __objc_msgSend_127Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_insertSublayer_atIndex_1 =
      _registerName1("insertSublayer:atIndex:");
  void _objc_msgSend_128(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> layer,
    int idx,
  ) {
    return __objc_msgSend_128(
      obj,
      sel,
      layer,
      idx,
    );
  }

  late final __objc_msgSend_128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_128 = __objc_msgSend_128Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_insertSublayer_below_1 =
      _registerName1("insertSublayer:below:");
  void _objc_msgSend_129(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> layer,
    ffi.Pointer<ObjCObject> sibling,
  ) {
    return __objc_msgSend_129(
      obj,
      sel,
      layer,
      sibling,
    );
  }

  late final __objc_msgSend_129Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_129 = __objc_msgSend_129Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_insertSublayer_above_1 =
      _registerName1("insertSublayer:above:");
  late final _sel_replaceSublayer_with_1 =
      _registerName1("replaceSublayer:with:");
  void _objc_msgSend_130(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> oldLayer,
    ffi.Pointer<ObjCObject> newLayer,
  ) {
    return __objc_msgSend_130(
      obj,
      sel,
      oldLayer,
      newLayer,
    );
  }

  late final __objc_msgSend_130Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_130 = __objc_msgSend_130Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_sublayerTransform1 = _registerName1("sublayerTransform");
  late final _sel_setSublayerTransform_1 =
      _registerName1("setSublayerTransform:");
  late final _sel_mask1 = _registerName1("mask");
  late final _sel_setMask_1 = _registerName1("setMask:");
  void _objc_msgSend_131(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_131(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_131Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_131 = __objc_msgSend_131Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_masksToBounds1 = _registerName1("masksToBounds");
  late final _sel_setMasksToBounds_1 = _registerName1("setMasksToBounds:");
  late final _sel_convertPoint_fromLayer_1 =
      _registerName1("convertPoint:fromLayer:");
  CGPoint _objc_msgSend_132(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint p,
    ffi.Pointer<ObjCObject> l,
  ) {
    return __objc_msgSend_132(
      obj,
      sel,
      p,
      l,
    );
  }

  late final __objc_msgSend_132Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_132 = __objc_msgSend_132Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_132_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint p,
    ffi.Pointer<ObjCObject> l,
  ) {
    return __objc_msgSend_132_stret(
      stret,
      obj,
      sel,
      p,
      l,
    );
  }

  late final __objc_msgSend_132_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGPoint>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGPoint,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_132_stret = __objc_msgSend_132_stretPtr.asFunction<
      void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGPoint, ffi.Pointer<ObjCObject>)>();

  late final _sel_convertPoint_toLayer_1 =
      _registerName1("convertPoint:toLayer:");
  late final _sel_convertRect_fromLayer_1 =
      _registerName1("convertRect:fromLayer:");
  CGRect _objc_msgSend_133(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect r,
    ffi.Pointer<ObjCObject> l,
  ) {
    return __objc_msgSend_133(
      obj,
      sel,
      r,
      l,
    );
  }

  late final __objc_msgSend_133Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_133 = __objc_msgSend_133Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_133_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect r,
    ffi.Pointer<ObjCObject> l,
  ) {
    return __objc_msgSend_133_stret(
      stret,
      obj,
      sel,
      r,
      l,
    );
  }

  late final __objc_msgSend_133_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGRect>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGRect,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_133_stret = __objc_msgSend_133_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGRect, ffi.Pointer<ObjCObject>)>();

  late final _sel_convertRect_toLayer_1 =
      _registerName1("convertRect:toLayer:");
  late final _sel_convertTime_fromLayer_1 =
      _registerName1("convertTime:fromLayer:");
  double _objc_msgSend_134(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double t,
    ffi.Pointer<ObjCObject> l,
  ) {
    return __objc_msgSend_134(
      obj,
      sel,
      t,
      l,
    );
  }

  late final __objc_msgSend_134Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_134 = __objc_msgSend_134Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  double _objc_msgSend_134_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double t,
    ffi.Pointer<ObjCObject> l,
  ) {
    return __objc_msgSend_134_fpret(
      obj,
      sel,
      t,
      l,
    );
  }

  late final __objc_msgSend_134_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Pointer<ObjCObject>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_134_fpret = __objc_msgSend_134_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_convertTime_toLayer_1 =
      _registerName1("convertTime:toLayer:");
  late final _sel_hitTest_1 = _registerName1("hitTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_135(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint p,
  ) {
    return __objc_msgSend_135(
      obj,
      sel,
      p,
    );
  }

  late final __objc_msgSend_135Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_135 = __objc_msgSend_135Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_containsPoint_1 = _registerName1("containsPoint:");
  bool _objc_msgSend_136(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint p,
  ) {
    return __objc_msgSend_136(
      obj,
      sel,
      p,
    );
  }

  late final __objc_msgSend_136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_136 = __objc_msgSend_136Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_contents1 = _registerName1("contents");
  late final _sel_setContents_1 = _registerName1("setContents:");
  late final _sel_contentsRect1 = _registerName1("contentsRect");
  late final _sel_setContentsRect_1 = _registerName1("setContentsRect:");
  late final _sel_contentsGravity1 = _registerName1("contentsGravity");
  late final _sel_setContentsGravity_1 = _registerName1("setContentsGravity:");
  late final _sel_contentsScale1 = _registerName1("contentsScale");
  late final _sel_setContentsScale_1 = _registerName1("setContentsScale:");
  late final _sel_contentsCenter1 = _registerName1("contentsCenter");
  late final _sel_setContentsCenter_1 = _registerName1("setContentsCenter:");
  late final _sel_contentsFormat1 = _registerName1("contentsFormat");
  late final _sel_setContentsFormat_1 = _registerName1("setContentsFormat:");
  late final _sel_wantsExtendedDynamicRangeContent1 =
      _registerName1("wantsExtendedDynamicRangeContent");
  late final _sel_setWantsExtendedDynamicRangeContent_1 =
      _registerName1("setWantsExtendedDynamicRangeContent:");
  late final _sel_minificationFilter1 = _registerName1("minificationFilter");
  late final _sel_setMinificationFilter_1 =
      _registerName1("setMinificationFilter:");
  late final _sel_magnificationFilter1 = _registerName1("magnificationFilter");
  late final _sel_setMagnificationFilter_1 =
      _registerName1("setMagnificationFilter:");
  late final _sel_minificationFilterBias1 =
      _registerName1("minificationFilterBias");
  late final _sel_setMinificationFilterBias_1 =
      _registerName1("setMinificationFilterBias:");
  void _objc_msgSend_137(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_137(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_137 = __objc_msgSend_137Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_isOpaque1 = _registerName1("isOpaque");
  late final _sel_setOpaque_1 = _registerName1("setOpaque:");
  late final _sel_display1 = _registerName1("display");
  late final _sel_setNeedsDisplay1 = _registerName1("setNeedsDisplay");
  late final _sel_setNeedsDisplayInRect_1 =
      _registerName1("setNeedsDisplayInRect:");
  void _objc_msgSend_138(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect r,
  ) {
    return __objc_msgSend_138(
      obj,
      sel,
      r,
    );
  }

  late final __objc_msgSend_138Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_138 = __objc_msgSend_138Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_needsDisplay1 = _registerName1("needsDisplay");
  late final _sel_displayIfNeeded1 = _registerName1("displayIfNeeded");
  late final _sel_needsDisplayOnBoundsChange1 =
      _registerName1("needsDisplayOnBoundsChange");
  late final _sel_setNeedsDisplayOnBoundsChange_1 =
      _registerName1("setNeedsDisplayOnBoundsChange:");
  late final _sel_drawsAsynchronously1 = _registerName1("drawsAsynchronously");
  late final _sel_setDrawsAsynchronously_1 =
      _registerName1("setDrawsAsynchronously:");
  late final _sel_drawInContext_1 = _registerName1("drawInContext:");
  void _objc_msgSend_139(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<CGContext> ctx,
  ) {
    return __objc_msgSend_139(
      obj,
      sel,
      ctx,
    );
  }

  late final __objc_msgSend_139Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<CGContext>)>>('objc_msgSend');
  late final __objc_msgSend_139 = __objc_msgSend_139Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<CGContext>)>();

  late final _sel_renderInContext_1 = _registerName1("renderInContext:");
  late final _sel_edgeAntialiasingMask1 =
      _registerName1("edgeAntialiasingMask");
  int _objc_msgSend_140(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_140(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_140Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_140 = __objc_msgSend_140Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setEdgeAntialiasingMask_1 =
      _registerName1("setEdgeAntialiasingMask:");
  void _objc_msgSend_141(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_141(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_141Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_141 = __objc_msgSend_141Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_allowsEdgeAntialiasing1 =
      _registerName1("allowsEdgeAntialiasing");
  late final _sel_setAllowsEdgeAntialiasing_1 =
      _registerName1("setAllowsEdgeAntialiasing:");
  late final _sel_backgroundColor1 = _registerName1("backgroundColor");
  ffi.Pointer<CGColor> _objc_msgSend_142(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_142(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_142Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CGColor> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_142 = __objc_msgSend_142Ptr.asFunction<
      ffi.Pointer<CGColor> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setBackgroundColor_1 = _registerName1("setBackgroundColor:");
  void _objc_msgSend_143(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<CGColor> value,
  ) {
    return __objc_msgSend_143(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_143Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<CGColor>)>>('objc_msgSend');
  late final __objc_msgSend_143 = __objc_msgSend_143Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<CGColor>)>();

  late final _sel_cornerRadius1 = _registerName1("cornerRadius");
  late final _sel_setCornerRadius_1 = _registerName1("setCornerRadius:");
  late final _sel_maskedCorners1 = _registerName1("maskedCorners");
  int _objc_msgSend_144(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_144(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_144Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_144 = __objc_msgSend_144Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setMaskedCorners_1 = _registerName1("setMaskedCorners:");
  void _objc_msgSend_145(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_145(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_145Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_145 = __objc_msgSend_145Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_cornerCurve1 = _registerName1("cornerCurve");
  late final _sel_setCornerCurve_1 = _registerName1("setCornerCurve:");
  late final _sel_cornerCurveExpansionFactor_1 =
      _registerName1("cornerCurveExpansionFactor:");
  double _objc_msgSend_146(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> curve,
  ) {
    return __objc_msgSend_146(
      obj,
      sel,
      curve,
    );
  }

  late final __objc_msgSend_146Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_146 = __objc_msgSend_146Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  double _objc_msgSend_146_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> curve,
  ) {
    return __objc_msgSend_146_fpret(
      obj,
      sel,
      curve,
    );
  }

  late final __objc_msgSend_146_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_146_fpret = __objc_msgSend_146_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_borderWidth1 = _registerName1("borderWidth");
  late final _sel_setBorderWidth_1 = _registerName1("setBorderWidth:");
  late final _sel_borderColor1 = _registerName1("borderColor");
  late final _sel_setBorderColor_1 = _registerName1("setBorderColor:");
  late final _sel_opacity1 = _registerName1("opacity");
  late final _sel_setOpacity_1 = _registerName1("setOpacity:");
  late final _sel_allowsGroupOpacity1 = _registerName1("allowsGroupOpacity");
  late final _sel_setAllowsGroupOpacity_1 =
      _registerName1("setAllowsGroupOpacity:");
  late final _sel_compositingFilter1 = _registerName1("compositingFilter");
  late final _sel_setCompositingFilter_1 =
      _registerName1("setCompositingFilter:");
  late final _class_NSArray1 = _getClass1("NSArray");
  late final _sel_count1 = _registerName1("count");
  late final _sel_objectAtIndex_1 = _registerName1("objectAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_147(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_147(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_147Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_147 = __objc_msgSend_147Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithObjects_count_1 =
      _registerName1("initWithObjects:count:");
  instancetype _objc_msgSend_148(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    int cnt,
  ) {
    return __objc_msgSend_148(
      obj,
      sel,
      objects,
      cnt,
    );
  }

  late final __objc_msgSend_148Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_148 = __objc_msgSend_148Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  late final _sel_filters1 = _registerName1("filters");
  ffi.Pointer<ObjCObject> _objc_msgSend_149(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_149(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_149Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_149 = __objc_msgSend_149Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setFilters_1 = _registerName1("setFilters:");
  void _objc_msgSend_150(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_150(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_150Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_150 = __objc_msgSend_150Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_backgroundFilters1 = _registerName1("backgroundFilters");
  late final _sel_setBackgroundFilters_1 =
      _registerName1("setBackgroundFilters:");
  late final _sel_shouldRasterize1 = _registerName1("shouldRasterize");
  late final _sel_setShouldRasterize_1 = _registerName1("setShouldRasterize:");
  late final _sel_rasterizationScale1 = _registerName1("rasterizationScale");
  late final _sel_setRasterizationScale_1 =
      _registerName1("setRasterizationScale:");
  late final _sel_shadowColor1 = _registerName1("shadowColor");
  late final _sel_setShadowColor_1 = _registerName1("setShadowColor:");
  late final _sel_shadowOpacity1 = _registerName1("shadowOpacity");
  late final _sel_setShadowOpacity_1 = _registerName1("setShadowOpacity:");
  late final _sel_shadowOffset1 = _registerName1("shadowOffset");
  CGSize _objc_msgSend_151(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_151(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_151Ptr = _lookup<
      ffi.NativeFunction<
          CGSize Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_151 = __objc_msgSend_151Ptr.asFunction<
      CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_151_stret(
    ffi.Pointer<CGSize> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_151_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_151_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGSize>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_151_stret = __objc_msgSend_151_stretPtr.asFunction<
      void Function(ffi.Pointer<CGSize>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_setShadowOffset_1 = _registerName1("setShadowOffset:");
  void _objc_msgSend_152(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize value,
  ) {
    return __objc_msgSend_152(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_152Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGSize)>>('objc_msgSend');
  late final __objc_msgSend_152 = __objc_msgSend_152Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize)>();

  late final _sel_shadowRadius1 = _registerName1("shadowRadius");
  late final _sel_setShadowRadius_1 = _registerName1("setShadowRadius:");
  late final _sel_shadowPath1 = _registerName1("shadowPath");
  ffi.Pointer<CGPath> _objc_msgSend_153(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_153(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_153Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CGPath> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_153 = __objc_msgSend_153Ptr.asFunction<
      ffi.Pointer<CGPath> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setShadowPath_1 = _registerName1("setShadowPath:");
  void _objc_msgSend_154(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<CGPath> value,
  ) {
    return __objc_msgSend_154(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_154Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<CGPath>)>>('objc_msgSend');
  late final __objc_msgSend_154 = __objc_msgSend_154Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<CGPath>)>();

  late final _sel_preferredFrameSize1 = _registerName1("preferredFrameSize");
  late final _sel_setNeedsLayout1 = _registerName1("setNeedsLayout");
  late final _sel_needsLayout1 = _registerName1("needsLayout");
  late final _sel_layoutIfNeeded1 = _registerName1("layoutIfNeeded");
  late final _sel_layoutSublayers1 = _registerName1("layoutSublayers");
  late final _sel_defaultActionForKey_1 =
      _registerName1("defaultActionForKey:");
  late final _sel_actionForKey_1 = _registerName1("actionForKey:");
  late final _sel_actions1 = _registerName1("actions");
  late final _sel_setActions_1 = _registerName1("setActions:");
  late final _class_CAAnimation1 = _getClass1("CAAnimation");
  late final _sel_animation1 = _registerName1("animation");
  late final _class_CAMediaTimingFunction1 =
      _getClass1("CAMediaTimingFunction");
  late final _sel_functionWithName_1 = _registerName1("functionWithName:");
  instancetype _objc_msgSend_155(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
  ) {
    return __objc_msgSend_155(
      obj,
      sel,
      name,
    );
  }

  late final __objc_msgSend_155Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_155 = __objc_msgSend_155Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_functionWithControlPoints____1 =
      _registerName1("functionWithControlPoints::::");
  instancetype _objc_msgSend_156(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double c1x,
    double c1y,
    double c2x,
    double c2y,
  ) {
    return __objc_msgSend_156(
      obj,
      sel,
      c1x,
      c1y,
      c2x,
      c2y,
    );
  }

  late final __objc_msgSend_156Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float, ffi.Float, ffi.Float, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_156 = __objc_msgSend_156Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          double, double, double, double)>();

  late final _sel_initWithControlPoints____1 =
      _registerName1("initWithControlPoints::::");
  late final _sel_getControlPointAtIndex_values_1 =
      _registerName1("getControlPointAtIndex:values:");
  void _objc_msgSend_157(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int idx,
    ffi.Pointer<ffi.Float> ptr,
  ) {
    return __objc_msgSend_157(
      obj,
      sel,
      idx,
      ptr,
    );
  }

  late final __objc_msgSend_157Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Size, ffi.Pointer<ffi.Float>)>>('objc_msgSend');
  late final __objc_msgSend_157 = __objc_msgSend_157Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Float>)>();

  late final _sel_timingFunction1 = _registerName1("timingFunction");
  ffi.Pointer<ObjCObject> _objc_msgSend_158(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_158(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_158Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_158 = __objc_msgSend_158Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTimingFunction_1 = _registerName1("setTimingFunction:");
  void _objc_msgSend_159(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_159(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_159Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_159 = __objc_msgSend_159Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_delegate1 = _registerName1("delegate");
  late final _sel_setDelegate_1 = _registerName1("setDelegate:");
  late final _sel_isRemovedOnCompletion1 =
      _registerName1("isRemovedOnCompletion");
  late final _sel_setRemovedOnCompletion_1 =
      _registerName1("setRemovedOnCompletion:");
  late final _sel_preferredFrameRateRange1 =
      _registerName1("preferredFrameRateRange");
  CAFrameRateRange _objc_msgSend_160(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_160(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_160Ptr = _lookup<
      ffi.NativeFunction<
          CAFrameRateRange Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_160 = __objc_msgSend_160Ptr.asFunction<
      CAFrameRateRange Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_160_stret(
    ffi.Pointer<CAFrameRateRange> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_160_stret(
      stret,
      obj,
      sel,
    );
  }

  late final __objc_msgSend_160_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CAFrameRateRange>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_stret');
  late final __objc_msgSend_160_stret = __objc_msgSend_160_stretPtr.asFunction<
      void Function(ffi.Pointer<CAFrameRateRange>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_setPreferredFrameRateRange_1 =
      _registerName1("setPreferredFrameRateRange:");
  void _objc_msgSend_161(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CAFrameRateRange value,
  ) {
    return __objc_msgSend_161(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_161Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CAFrameRateRange)>>('objc_msgSend');
  late final __objc_msgSend_161 = __objc_msgSend_161Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CAFrameRateRange)>();

  late final _sel_addAnimation_forKey_1 =
      _registerName1("addAnimation:forKey:");
  void _objc_msgSend_162(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anim,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_162(
      obj,
      sel,
      anim,
      key,
    );
  }

  late final __objc_msgSend_162Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_162 = __objc_msgSend_162Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_removeAllAnimations1 = _registerName1("removeAllAnimations");
  late final _sel_removeAnimationForKey_1 =
      _registerName1("removeAnimationForKey:");
  late final _sel_animationKeys1 = _registerName1("animationKeys");
  late final _sel_animationForKey_1 = _registerName1("animationForKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_163(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_163(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_163Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_163 = __objc_msgSend_163Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_name1 = _registerName1("name");
  late final _sel_setName_1 = _registerName1("setName:");
  late final _class_NSDictionary1 = _getClass1("NSDictionary");
  late final _sel_objectForKey_1 = _registerName1("objectForKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_164(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aKey,
  ) {
    return __objc_msgSend_164(
      obj,
      sel,
      aKey,
    );
  }

  late final __objc_msgSend_164Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_164 = __objc_msgSend_164Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_keyEnumerator1 = _registerName1("keyEnumerator");
  late final _sel_initWithObjects_forKeys_count_1 =
      _registerName1("initWithObjects:forKeys:count:");
  instancetype _objc_msgSend_165(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_165(
      obj,
      sel,
      objects,
      keys,
      cnt,
    );
  }

  late final __objc_msgSend_165Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_165 = __objc_msgSend_165Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_style1 = _registerName1("style");
  ffi.Pointer<ObjCObject> _objc_msgSend_166(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_166(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_166Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_166 = __objc_msgSend_166Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setStyle_1 = _registerName1("setStyle:");
  void _objc_msgSend_167(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_167(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_167Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_167 = __objc_msgSend_167Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_168(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_168(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_168Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_168 = __objc_msgSend_168Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_canBecomeFocused1 = _registerName1("canBecomeFocused");
  late final _sel_isFocused1 = _registerName1("isFocused");
  late final _sel_focusGroupIdentifier1 =
      _registerName1("focusGroupIdentifier");
  late final _sel_setFocusGroupIdentifier_1 =
      _registerName1("setFocusGroupIdentifier:");
  late final _sel_focusGroupPriority1 = _registerName1("focusGroupPriority");
  late final _sel_setFocusGroupPriority_1 =
      _registerName1("setFocusGroupPriority:");
  late final _class_UIFocusEffect1 = _getClass1("UIFocusEffect");
  late final _sel_focusEffect1 = _registerName1("focusEffect");
  ffi.Pointer<ObjCObject> _objc_msgSend_169(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_169(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_169Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_169 = __objc_msgSend_169Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setFocusEffect_1 = _registerName1("setFocusEffect:");
  void _objc_msgSend_170(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_170(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_170Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_170 = __objc_msgSend_170Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_semanticContentAttribute1 =
      _registerName1("semanticContentAttribute");
  int _objc_msgSend_171(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_171(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_171Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_171 = __objc_msgSend_171Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setSemanticContentAttribute_1 =
      _registerName1("setSemanticContentAttribute:");
  void _objc_msgSend_172(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_172(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_172Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_172 = __objc_msgSend_172Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_1 =
      _registerName1(
          "userInterfaceLayoutDirectionForSemanticContentAttribute:");
  int _objc_msgSend_173(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int attribute,
  ) {
    return __objc_msgSend_173(
      obj,
      sel,
      attribute,
    );
  }

  late final __objc_msgSend_173Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_173 = __objc_msgSend_173Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_1 =
      _registerName1(
          "userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:");
  int _objc_msgSend_174(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int semanticContentAttribute,
    int layoutDirection,
  ) {
    return __objc_msgSend_174(
      obj,
      sel,
      semanticContentAttribute,
      layoutDirection,
    );
  }

  late final __objc_msgSend_174Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_174 = __objc_msgSend_174Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_effectiveUserInterfaceLayoutDirection1 =
      _registerName1("effectiveUserInterfaceLayoutDirection");
  int _objc_msgSend_175(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_175(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_175Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_175 = __objc_msgSend_175Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_UIWindowScene1 = _getClass1("UIWindowScene");
  late final _sel_initWithWindowScene_1 =
      _registerName1("initWithWindowScene:");
  instancetype _objc_msgSend_176(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> windowScene,
  ) {
    return __objc_msgSend_176(
      obj,
      sel,
      windowScene,
    );
  }

  late final __objc_msgSend_176Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_176 = __objc_msgSend_176Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_windowScene1 = _registerName1("windowScene");
  ffi.Pointer<ObjCObject> _objc_msgSend_177(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_177(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_177Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_177 = __objc_msgSend_177Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setWindowScene_1 = _registerName1("setWindowScene:");
  void _objc_msgSend_178(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_178(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_178Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_178 = __objc_msgSend_178Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_canResizeToFitContent1 =
      _registerName1("canResizeToFitContent");
  late final _sel_setCanResizeToFitContent_1 =
      _registerName1("setCanResizeToFitContent:");
  late final _class_UIScreen1 = _getClass1("UIScreen");
  late final _sel_screen1 = _registerName1("screen");
  ffi.Pointer<ObjCObject> _objc_msgSend_179(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_179(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_179Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_179 = __objc_msgSend_179Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setScreen_1 = _registerName1("setScreen:");
  void _objc_msgSend_180(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_180(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_180 = __objc_msgSend_180Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_windowLevel1 = _registerName1("windowLevel");
  late final _sel_setWindowLevel_1 = _registerName1("setWindowLevel:");
  late final _sel_isKeyWindow1 = _registerName1("isKeyWindow");
  late final _sel_canBecomeKeyWindow1 = _registerName1("canBecomeKeyWindow");
  late final _sel_becomeKeyWindow1 = _registerName1("becomeKeyWindow");
  late final _sel_resignKeyWindow1 = _registerName1("resignKeyWindow");
  late final _sel_makeKeyWindow1 = _registerName1("makeKeyWindow");
  late final _sel_makeKeyAndVisible1 = _registerName1("makeKeyAndVisible");
  late final _class_UIViewController1 = _getClass1("UIViewController");
  late final _sel_rootViewController1 = _registerName1("rootViewController");
  ffi.Pointer<ObjCObject> _objc_msgSend_181(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_181(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_181Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_181 = __objc_msgSend_181Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setRootViewController_1 =
      _registerName1("setRootViewController:");
  void _objc_msgSend_182(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_182(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_182Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_182 = __objc_msgSend_182Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_sendEvent_1 = _registerName1("sendEvent:");
  void _objc_msgSend_183(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> event,
  ) {
    return __objc_msgSend_183(
      obj,
      sel,
      event,
    );
  }

  late final __objc_msgSend_183Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_183 = __objc_msgSend_183Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_convertPoint_toWindow_1 =
      _registerName1("convertPoint:toWindow:");
  CGPoint _objc_msgSend_184(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
    ffi.Pointer<ObjCObject> window,
  ) {
    return __objc_msgSend_184(
      obj,
      sel,
      point,
      window,
    );
  }

  late final __objc_msgSend_184Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_184 = __objc_msgSend_184Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_184_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
    ffi.Pointer<ObjCObject> window,
  ) {
    return __objc_msgSend_184_stret(
      stret,
      obj,
      sel,
      point,
      window,
    );
  }

  late final __objc_msgSend_184_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGPoint>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGPoint,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_184_stret = __objc_msgSend_184_stretPtr.asFunction<
      void Function(ffi.Pointer<CGPoint>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGPoint, ffi.Pointer<ObjCObject>)>();

  late final _sel_convertPoint_fromWindow_1 =
      _registerName1("convertPoint:fromWindow:");
  late final _sel_convertRect_toWindow_1 =
      _registerName1("convertRect:toWindow:");
  CGRect _objc_msgSend_185(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> window,
  ) {
    return __objc_msgSend_185(
      obj,
      sel,
      rect,
      window,
    );
  }

  late final __objc_msgSend_185Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_185 = __objc_msgSend_185Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_185_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> window,
  ) {
    return __objc_msgSend_185_stret(
      stret,
      obj,
      sel,
      rect,
      window,
    );
  }

  late final __objc_msgSend_185_stretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGRect>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              CGRect,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend_stret');
  late final __objc_msgSend_185_stret = __objc_msgSend_185_stretPtr.asFunction<
      void Function(ffi.Pointer<CGRect>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, CGRect, ffi.Pointer<ObjCObject>)>();

  late final _sel_convertRect_fromWindow_1 =
      _registerName1("convertRect:fromWindow:");
  late final _sel_safeAreaAspectFitLayoutGuide1 =
      _registerName1("safeAreaAspectFitLayoutGuide");
}

class _ObjCWrapper implements ffi.Finalizable {
  final ffi.Pointer<ObjCObject> _id;
  final UIKit _lib;
  bool _pendingRelease;

  _ObjCWrapper._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._objc_retain(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer2.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC object held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._objc_release(_id.cast());
      _lib._objc_releaseFinalizer2.detach(this);
    } else {
      throw StateError(
          'Released an ObjC object that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCWrapper && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<ObjCObject> get pointer => _id;

  ffi.Pointer<ObjCObject> _retainAndReturnId() {
    _lib._objc_retain(_id.cast());
    return _id;
  }
}

class UIWindow extends UIView {
  UIWindow._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIWindow] that points to the same underlying object as [other].
  static UIWindow castFrom<T extends _ObjCWrapper>(T other) {
    return UIWindow._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIWindow] that wraps the given raw object pointer.
  static UIWindow castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIWindow._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIWindow].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIWindow1);
  }

  /// instantiate a UIWindow already associated with a given UIWindowScene instance, with matching frame & interface orientations.
  UIWindow initWithWindowScene_(UIWindowScene windowScene) {
    final _ret = _lib._objc_msgSend_176(
        _id, _lib._sel_initWithWindowScene_1, windowScene._id);
    return UIWindow._(_ret, _lib, retain: true, release: true);
  }

  /// If nil, window will not appear on any screen.
  /// changing the UIWindowScene may be an expensive operation and should not be done in performance-sensitive code
  UIWindowScene? get windowScene {
    final _ret = _lib._objc_msgSend_177(_id, _lib._sel_windowScene1);
    return _ret.address == 0
        ? null
        : UIWindowScene._(_ret, _lib, retain: true, release: true);
  }

  /// If nil, window will not appear on any screen.
  /// changing the UIWindowScene may be an expensive operation and should not be done in performance-sensitive code
  set windowScene(UIWindowScene? value) {
    return _lib._objc_msgSend_178(
        _id, _lib._sel_setWindowScene_1, value?._id ?? ffi.nullptr);
  }

  /// Indicates whether content should drive the size of arbitrarily resizable windows (which are currently present only on macOS).
  bool get canResizeToFitContent {
    return _lib._objc_msgSend_12(_id, _lib._sel_canResizeToFitContent1);
  }

  /// Indicates whether content should drive the size of arbitrarily resizable windows (which are currently present only on macOS).
  set canResizeToFitContent(bool value) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_setCanResizeToFitContent_1, value);
  }

  /// default is [UIScreen mainScreen]. changing the screen may be an expensive operation and should not be done in performance-sensitive code
  UIScreen get screen {
    final _ret = _lib._objc_msgSend_179(_id, _lib._sel_screen1);
    return UIScreen._(_ret, _lib, retain: true, release: true);
  }

  /// default is [UIScreen mainScreen]. changing the screen may be an expensive operation and should not be done in performance-sensitive code
  set screen(UIScreen value) {
    return _lib._objc_msgSend_180(_id, _lib._sel_setScreen_1, value._id);
  }

  /// default = 0.0
  double get windowLevel {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_windowLevel1)
        : _lib._objc_msgSend_40(_id, _lib._sel_windowLevel1);
  }

  /// default = 0.0
  set windowLevel(double value) {
    return _lib._objc_msgSend_121(_id, _lib._sel_setWindowLevel_1, value);
  }

  /// In apps built against the iOS 15 or tvOS 15 SDK (or later), this property returns YES if
  /// the window is its scene's key window. For apps built against earlier SDKs, this property
  /// returns YES if the window is the application's key window.
  bool get keyWindow {
    return _lib._objc_msgSend_12(_id, _lib._sel_isKeyWindow1);
  }

  /// Default is YES. Return NO to indicate the window cannot become the key window.
  bool get canBecomeKeyWindow {
    return _lib._objc_msgSend_12(_id, _lib._sel_canBecomeKeyWindow1);
  }

  /// Override point for subclasses. Do not call directly. Informs the window it has become the
  /// key window. In apps built against the iOS 15 or tvOS 15 SDK (or later), this method will
  /// be called when the window becomes its scene's key window. For apps built against earlier
  /// SDKs, this method will be called when the window becomes the application's key window.
  void becomeKeyWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_becomeKeyWindow1);
  }

  /// Override point for subclasses. Do not call directly. Informs the window it has resigned key
  /// window status. In apps built against the iOS 15 or tvOS 15 SDK (or later), this method will
  /// be called when the window resigns key in its scene. For apps built against earlier SDKs,
  /// this method will be called when the window resigns key in the application.
  void resignKeyWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_resignKeyWindow1);
  }

  /// Make the window key without changing visibility.
  void makeKeyWindow() {
    _lib._objc_msgSend_1(_id, _lib._sel_makeKeyWindow1);
  }

  /// Convenience. Most apps call this to show a window and also make it key.
  /// To make the window visible without becoming key, just use UIView's hidden property.
  void makeKeyAndVisible() {
    _lib._objc_msgSend_1(_id, _lib._sel_makeKeyAndVisible1);
  }

  /// default is nil
  UIViewController? get rootViewController {
    final _ret = _lib._objc_msgSend_181(_id, _lib._sel_rootViewController1);
    return _ret.address == 0
        ? null
        : UIViewController._(_ret, _lib, retain: true, release: true);
  }

  /// default is nil
  set rootViewController(UIViewController? value) {
    return _lib._objc_msgSend_182(
        _id, _lib._sel_setRootViewController_1, value?._id ?? ffi.nullptr);
  }

  /// called by UIApplication to dispatch events to views inside the window
  void sendEvent_(UIEvent event) {
    _lib._objc_msgSend_183(_id, _lib._sel_sendEvent_1, event._id);
  }

  /// can be used to convert to another window
  void convertPoint_toWindow_(
      ffi.Pointer<CGPoint> stret, CGPoint point, UIWindow? window) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_184_stret(
            stret,
            _id,
            _lib._sel_convertPoint_toWindow_1,
            point,
            window?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_184(
            _id,
            _lib._sel_convertPoint_toWindow_1,
            point,
            window?._id ?? ffi.nullptr);
  }

  /// pass in nil to mean screen
  void convertPoint_fromWindow_(
      ffi.Pointer<CGPoint> stret, CGPoint point, UIWindow? window) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_184_stret(
            stret,
            _id,
            _lib._sel_convertPoint_fromWindow_1,
            point,
            window?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_184(
            _id,
            _lib._sel_convertPoint_fromWindow_1,
            point,
            window?._id ?? ffi.nullptr);
  }

  void convertRect_toWindow_(
      ffi.Pointer<CGRect> stret, CGRect rect, UIWindow? window) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_185_stret(stret, _id,
            _lib._sel_convertRect_toWindow_1, rect, window?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_185(_id,
            _lib._sel_convertRect_toWindow_1, rect, window?._id ?? ffi.nullptr);
  }

  void convertRect_fromWindow_(
      ffi.Pointer<CGRect> stret, CGRect rect, UIWindow? window) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_185_stret(
            stret,
            _id,
            _lib._sel_convertRect_fromWindow_1,
            rect,
            window?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_185(
            _id,
            _lib._sel_convertRect_fromWindow_1,
            rect,
            window?._id ?? ffi.nullptr);
  }

  /// This layout guide is designed specifically for full-screen media content, and attaching constraints from deep in the window's view hierarchy will raise an exception.
  ///
  /// This guide provides a layout area for placing media content of a given aspect ratio (width over height) such that the content will be completely visible within the window.
  /// Compared to the standard `safeAreaLayoutGuide` on a view, this guide takes into account the aspect ratio of the content, allowing it the maximum size within the window's
  /// true safe area, including the actual shape of the screen when that is the only factor contributing to the safe area. The rect defined by this guide will be centered within the
  /// window.
  ///
  /// This layout guide should only be used for fixed aspect ratio content that is intended to fill the window (such as image or video content) and is not a replacement for the
  /// standard `safeAreaLayoutGuide` on each UIView which should be used for most content layout. The `safeAreaAspectFitLayoutGuide` should only be used with views
  /// that are direct subviews of, or very close descendants of, the guide's window. Creating constraints from this layout guide to views deeper in the view hierarchy or across
  /// views owned by child view controllers can significantly degrade performance and possibly raise an exception. Additionally, the safe area insets added by child view
  /// controllers will not be reflected in these cases. For anything other than full-screen/window media content, the standard `safeAreaLayoutGuide` on UIView should be used.
  NSObject get safeAreaAspectFitLayoutGuide {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_safeAreaAspectFitLayoutGuide1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject getLayerClass(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_UIWindow1, _lib._sel_layerClass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  UIWindow initWithFrame_(CGRect frame) {
    final _ret = _lib._objc_msgSend_113(_id, _lib._sel_initWithFrame_1, frame);
    return UIWindow._(_ret, _lib, retain: true, release: true);
  }

  @override
  UIWindow? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : UIWindow._(_ret, _lib, retain: true, release: true);
  }

  static int userInterfaceLayoutDirectionForSemanticContentAttribute_(
      UIKit _lib, int attribute) {
    return _lib._objc_msgSend_173(
        _lib._class_UIWindow1,
        _lib._sel_userInterfaceLayoutDirectionForSemanticContentAttribute_1,
        attribute);
  }

  static int
      userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_(
          UIKit _lib, int semanticContentAttribute, int layoutDirection) {
    return _lib._objc_msgSend_174(
        _lib._class_UIWindow1,
        _lib._sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_1,
        semanticContentAttribute,
        layoutDirection);
  }

  @override
  UIWindow init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return UIWindow._(_ret, _lib, retain: true, release: true);
  }

  static UIWindow new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UIWindow1, _lib._sel_new1);
    return UIWindow._(_ret, _lib, retain: false, release: true);
  }

  static UIWindow allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_UIWindow1, _lib._sel_allocWithZone_1, zone);
    return UIWindow._(_ret, _lib, retain: false, release: true);
  }

  static UIWindow alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UIWindow1, _lib._sel_alloc1);
    return UIWindow._(_ret, _lib, retain: false, release: true);
  }
}

final class ObjCSel extends ffi.Opaque {}

final class ObjCObject extends ffi.Opaque {}

class UIView extends UIResponder {
  UIView._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIView] that points to the same underlying object as [other].
  static UIView castFrom<T extends _ObjCWrapper>(T other) {
    return UIView._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIView] that wraps the given raw object pointer.
  static UIView castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIView._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIView].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIView1);
  }

  static NSObject getLayerClass(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_UIView1, _lib._sel_layerClass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  UIView initWithFrame_(CGRect frame) {
    final _ret = _lib._objc_msgSend_113(_id, _lib._sel_initWithFrame_1, frame);
    return UIView._(_ret, _lib, retain: true, release: true);
  }

  UIView? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : UIView._(_ret, _lib, retain: true, release: true);
  }

  bool get userInteractionEnabled {
    return _lib._objc_msgSend_12(_id, _lib._sel_isUserInteractionEnabled1);
  }

  set userInteractionEnabled(bool value) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_setUserInteractionEnabled_1, value);
  }

  int get tag {
    return _lib._objc_msgSend_74(_id, _lib._sel_tag1);
  }

  set tag(int value) {
    return _lib._objc_msgSend_114(_id, _lib._sel_setTag_1, value);
  }

  CALayer get layer {
    final _ret = _lib._objc_msgSend_168(_id, _lib._sel_layer1);
    return CALayer._(_ret, _lib, retain: true, release: true);
  }

  bool get canBecomeFocused {
    return _lib._objc_msgSend_12(_id, _lib._sel_canBecomeFocused1);
  }

  bool get focused {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFocused1);
  }

  NSString? get focusGroupIdentifier {
    final _ret = _lib._objc_msgSend_90(_id, _lib._sel_focusGroupIdentifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set focusGroupIdentifier(NSString? value) {
    return _lib._objc_msgSend_91(
        _id, _lib._sel_setFocusGroupIdentifier_1, value?._id ?? ffi.nullptr);
  }

  int get focusGroupPriority {
    return _lib._objc_msgSend_74(_id, _lib._sel_focusGroupPriority1);
  }

  set focusGroupPriority(int value) {
    return _lib._objc_msgSend_114(
        _id, _lib._sel_setFocusGroupPriority_1, value);
  }

  UIFocusEffect? get focusEffect {
    final _ret = _lib._objc_msgSend_169(_id, _lib._sel_focusEffect1);
    return _ret.address == 0
        ? null
        : UIFocusEffect._(_ret, _lib, retain: true, release: true);
  }

  set focusEffect(UIFocusEffect? value) {
    return _lib._objc_msgSend_170(
        _id, _lib._sel_setFocusEffect_1, value?._id ?? ffi.nullptr);
  }

  int get semanticContentAttribute {
    return _lib._objc_msgSend_171(_id, _lib._sel_semanticContentAttribute1);
  }

  set semanticContentAttribute(int value) {
    return _lib._objc_msgSend_172(
        _id, _lib._sel_setSemanticContentAttribute_1, value);
  }

  static int userInterfaceLayoutDirectionForSemanticContentAttribute_(
      UIKit _lib, int attribute) {
    return _lib._objc_msgSend_173(
        _lib._class_UIView1,
        _lib._sel_userInterfaceLayoutDirectionForSemanticContentAttribute_1,
        attribute);
  }

  static int
      userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_(
          UIKit _lib, int semanticContentAttribute, int layoutDirection) {
    return _lib._objc_msgSend_174(
        _lib._class_UIView1,
        _lib._sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_1,
        semanticContentAttribute,
        layoutDirection);
  }

  int get effectiveUserInterfaceLayoutDirection {
    return _lib._objc_msgSend_175(
        _id, _lib._sel_effectiveUserInterfaceLayoutDirection1);
  }

  @override
  UIView init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return UIView._(_ret, _lib, retain: true, release: true);
  }

  static UIView new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UIView1, _lib._sel_new1);
    return UIView._(_ret, _lib, retain: false, release: true);
  }

  static UIView allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_UIView1, _lib._sel_allocWithZone_1, zone);
    return UIView._(_ret, _lib, retain: false, release: true);
  }

  static UIView alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UIView1, _lib._sel_alloc1);
    return UIView._(_ret, _lib, retain: false, release: true);
  }
}

class UIResponder extends NSObject {
  UIResponder._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIResponder] that points to the same underlying object as [other].
  static UIResponder castFrom<T extends _ObjCWrapper>(T other) {
    return UIResponder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIResponder] that wraps the given raw object pointer.
  static UIResponder castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIResponder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIResponder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIResponder1);
  }

  UIResponder? get nextResponder {
    final _ret = _lib._objc_msgSend_37(_id, _lib._sel_nextResponder1);
    return _ret.address == 0
        ? null
        : UIResponder._(_ret, _lib, retain: true, release: true);
  }

  bool get canBecomeFirstResponder {
    return _lib._objc_msgSend_12(_id, _lib._sel_canBecomeFirstResponder1);
  }

  bool becomeFirstResponder() {
    return _lib._objc_msgSend_12(_id, _lib._sel_becomeFirstResponder1);
  }

  bool get canResignFirstResponder {
    return _lib._objc_msgSend_12(_id, _lib._sel_canResignFirstResponder1);
  }

  bool resignFirstResponder() {
    return _lib._objc_msgSend_12(_id, _lib._sel_resignFirstResponder1);
  }

  bool get isFirstResponder {
    return _lib._objc_msgSend_12(_id, _lib._sel_isFirstResponder1);
  }

  void touchesBegan_withEvent_(NSObject touches, UIEvent? event) {
    _lib._objc_msgSend_84(_id, _lib._sel_touchesBegan_withEvent_1, touches._id,
        event?._id ?? ffi.nullptr);
  }

  void touchesMoved_withEvent_(NSObject touches, UIEvent? event) {
    _lib._objc_msgSend_84(_id, _lib._sel_touchesMoved_withEvent_1, touches._id,
        event?._id ?? ffi.nullptr);
  }

  void touchesEnded_withEvent_(NSObject touches, UIEvent? event) {
    _lib._objc_msgSend_84(_id, _lib._sel_touchesEnded_withEvent_1, touches._id,
        event?._id ?? ffi.nullptr);
  }

  void touchesCancelled_withEvent_(NSObject touches, UIEvent? event) {
    _lib._objc_msgSend_84(_id, _lib._sel_touchesCancelled_withEvent_1,
        touches._id, event?._id ?? ffi.nullptr);
  }

  void touchesEstimatedPropertiesUpdated_(NSObject touches) {
    _lib._objc_msgSend_22(
        _id, _lib._sel_touchesEstimatedPropertiesUpdated_1, touches._id);
  }

  void pressesBegan_withEvent_(NSObject presses, UIPressesEvent? event) {
    _lib._objc_msgSend_85(_id, _lib._sel_pressesBegan_withEvent_1, presses._id,
        event?._id ?? ffi.nullptr);
  }

  void pressesChanged_withEvent_(NSObject presses, UIPressesEvent? event) {
    _lib._objc_msgSend_85(_id, _lib._sel_pressesChanged_withEvent_1,
        presses._id, event?._id ?? ffi.nullptr);
  }

  void pressesEnded_withEvent_(NSObject presses, UIPressesEvent? event) {
    _lib._objc_msgSend_85(_id, _lib._sel_pressesEnded_withEvent_1, presses._id,
        event?._id ?? ffi.nullptr);
  }

  void pressesCancelled_withEvent_(NSObject presses, UIPressesEvent? event) {
    _lib._objc_msgSend_85(_id, _lib._sel_pressesCancelled_withEvent_1,
        presses._id, event?._id ?? ffi.nullptr);
  }

  void motionBegan_withEvent_(int motion, UIEvent? event) {
    _lib._objc_msgSend_86(_id, _lib._sel_motionBegan_withEvent_1, motion,
        event?._id ?? ffi.nullptr);
  }

  void motionEnded_withEvent_(int motion, UIEvent? event) {
    _lib._objc_msgSend_86(_id, _lib._sel_motionEnded_withEvent_1, motion,
        event?._id ?? ffi.nullptr);
  }

  void motionCancelled_withEvent_(int motion, UIEvent? event) {
    _lib._objc_msgSend_86(_id, _lib._sel_motionCancelled_withEvent_1, motion,
        event?._id ?? ffi.nullptr);
  }

  void remoteControlReceivedWithEvent_(UIEvent? event) {
    _lib._objc_msgSend_87(_id, _lib._sel_remoteControlReceivedWithEvent_1,
        event?._id ?? ffi.nullptr);
  }

  bool canPerformAction_withSender_(
      ffi.Pointer<ObjCSel> action, NSObject? sender) {
    return _lib._objc_msgSend_88(_id, _lib._sel_canPerformAction_withSender_1,
        action, sender?._id ?? ffi.nullptr);
  }

  NSObject? targetForAction_withSender_(
      ffi.Pointer<ObjCSel> action, NSObject? sender) {
    final _ret = _lib._objc_msgSend_89(
        _id,
        _lib._sel_targetForAction_withSender_1,
        action,
        sender?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void buildMenuWithBuilder_(NSObject builder) {
    _lib._objc_msgSend_22(_id, _lib._sel_buildMenuWithBuilder_1, builder._id);
  }

  void validateCommand_(UICommand command) {
    _lib._objc_msgSend_101(_id, _lib._sel_validateCommand_1, command._id);
  }

  NSUndoManager? get undoManager {
    final _ret = _lib._objc_msgSend_111(_id, _lib._sel_undoManager1);
    return _ret.address == 0
        ? null
        : NSUndoManager._(_ret, _lib, retain: true, release: true);
  }

  int get editingInteractionConfiguration {
    return _lib._objc_msgSend_112(
        _id, _lib._sel_editingInteractionConfiguration1);
  }

  @override
  UIResponder init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return UIResponder._(_ret, _lib, retain: true, release: true);
  }

  static UIResponder new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UIResponder1, _lib._sel_new1);
    return UIResponder._(_ret, _lib, retain: false, release: true);
  }

  static UIResponder allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_UIResponder1, _lib._sel_allocWithZone_1, zone);
    return UIResponder._(_ret, _lib, retain: false, release: true);
  }

  static UIResponder alloc(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_UIResponder1, _lib._sel_alloc1);
    return UIResponder._(_ret, _lib, retain: false, release: true);
  }
}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSObject] that points to the same underlying object as [other].
  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSObject] that wraps the given raw object pointer.
  static NSObject castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSObject1);
  }

  static void load(UIKit _lib) {
    _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(UIKit _lib) {
    _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  void dealloc() {
    _lib._objc_msgSend_1(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    _lib._objc_msgSend_1(_id, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_copy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject copyWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_copyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject mutableCopyWithZone_(
      UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_mutableCopyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
      UIKit _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(_lib._class_NSObject1,
        _lib._sel_instancesRespondToSelector_1, aSelector);
  }

  static bool conformsToProtocol_(UIKit _lib, Protocol protocol) {
    return _lib._objc_msgSend_5(
        _lib._class_NSObject1, _lib._sel_conformsToProtocol_1, protocol._id);
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> methodForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_id, _lib._sel_methodForSelector_1, aSelector);
  }

  static ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      instanceMethodForSelector_(UIKit _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_lib._class_NSObject1,
        _lib._sel_instanceMethodForSelector_1, aSelector);
  }

  void doesNotRecognizeSelector_(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_7(_id, _lib._sel_doesNotRecognizeSelector_1, aSelector);
  }

  NSObject forwardingTargetForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_8(
        _id, _lib._sel_forwardingTargetForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation anInvocation) {
    _lib._objc_msgSend_24(_id, _lib._sel_forwardInvocation_1, anInvocation._id);
  }

  NSMethodSignature methodSignatureForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_25(
        _id, _lib._sel_methodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature instanceMethodSignatureForSelector_(
      UIKit _lib, ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_25(_lib._class_NSObject1,
        _lib._sel_instanceMethodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_12(_id, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass_(UIKit _lib, NSObject aClass) {
    return _lib._objc_msgSend_0(
        _lib._class_NSObject1, _lib._sel_isSubclassOfClass_1, aClass._id);
  }

  static bool resolveClassMethod_(UIKit _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveClassMethod_1, sel);
  }

  static bool resolveInstanceMethod_(UIKit _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveInstanceMethod_1, sel);
  }

  static int hash(UIKit _lib) {
    return _lib._objc_msgSend_10(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_superclass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject class1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString description(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_36(_lib._class_NSObject1, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString debugDescription(UIKit _lib) {
    final _ret = _lib._objc_msgSend_36(
        _lib._class_NSObject1, _lib._sel_debugDescription1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }
}

typedef instancetype = ffi.Pointer<ObjCObject>;
typedef Dartinstancetype = NSObject;

class Protocol extends _ObjCWrapper {
  Protocol._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [Protocol] that points to the same underlying object as [other].
  static Protocol castFrom<T extends _ObjCWrapper>(T other) {
    return Protocol._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [Protocol] that wraps the given raw object pointer.
  static Protocol castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return Protocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [Protocol].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_Protocol1);
  }
}

class NSInvocation extends NSObject {
  NSInvocation._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSInvocation] that points to the same underlying object as [other].
  static NSInvocation castFrom<T extends _ObjCWrapper>(T other) {
    return NSInvocation._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSInvocation] that wraps the given raw object pointer.
  static NSInvocation castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSInvocation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInvocation].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSInvocation1);
  }

  static NSInvocation invocationWithMethodSignature_(
      UIKit _lib, NSMethodSignature sig) {
    final _ret = _lib._objc_msgSend_14(_lib._class_NSInvocation1,
        _lib._sel_invocationWithMethodSignature_1, sig._id);
    return NSInvocation._(_ret, _lib, retain: true, release: true);
  }

  NSMethodSignature get methodSignature {
    final _ret = _lib._objc_msgSend_15(_id, _lib._sel_methodSignature1);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  void retainArguments() {
    _lib._objc_msgSend_1(_id, _lib._sel_retainArguments1);
  }

  bool get argumentsRetained {
    return _lib._objc_msgSend_12(_id, _lib._sel_argumentsRetained1);
  }

  NSObject? get target {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_target1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set target(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setTarget_1, value?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ObjCSel> get selector {
    return _lib._objc_msgSend_18(_id, _lib._sel_selector1);
  }

  set selector(ffi.Pointer<ObjCSel> value) {
    return _lib._objc_msgSend_19(_id, _lib._sel_setSelector_1, value);
  }

  void getReturnValue_(ffi.Pointer<ffi.Void> retLoc) {
    _lib._objc_msgSend_20(_id, _lib._sel_getReturnValue_1, retLoc);
  }

  void setReturnValue_(ffi.Pointer<ffi.Void> retLoc) {
    _lib._objc_msgSend_20(_id, _lib._sel_setReturnValue_1, retLoc);
  }

  void getArgument_atIndex_(ffi.Pointer<ffi.Void> argumentLocation, int idx) {
    _lib._objc_msgSend_21(
        _id, _lib._sel_getArgument_atIndex_1, argumentLocation, idx);
  }

  void setArgument_atIndex_(ffi.Pointer<ffi.Void> argumentLocation, int idx) {
    _lib._objc_msgSend_21(
        _id, _lib._sel_setArgument_atIndex_1, argumentLocation, idx);
  }

  void invoke() {
    _lib._objc_msgSend_1(_id, _lib._sel_invoke1);
  }

  void invokeWithTarget_(NSObject target) {
    _lib._objc_msgSend_22(_id, _lib._sel_invokeWithTarget_1, target._id);
  }

  void invokeUsingIMP_(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> imp) {
    _lib._objc_msgSend_23(_id, _lib._sel_invokeUsingIMP_1, imp);
  }

  @override
  NSInvocation init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSInvocation._(_ret, _lib, retain: true, release: true);
  }

  static NSInvocation new1(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSInvocation1, _lib._sel_new1);
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }

  static NSInvocation allocWithZone_(
      UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSInvocation1, _lib._sel_allocWithZone_1, zone);
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }

  static NSInvocation alloc(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSInvocation1, _lib._sel_alloc1);
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }
}

class NSMethodSignature extends NSObject {
  NSMethodSignature._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMethodSignature] that points to the same underlying object as [other].
  static NSMethodSignature castFrom<T extends _ObjCWrapper>(T other) {
    return NSMethodSignature._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMethodSignature] that wraps the given raw object pointer.
  static NSMethodSignature castFromPointer(
      UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMethodSignature._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMethodSignature].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMethodSignature1);
  }

  static NSMethodSignature? signatureWithObjCTypes_(
      UIKit _lib, ffi.Pointer<ffi.Char> types) {
    final _ret = _lib._objc_msgSend_9(_lib._class_NSMethodSignature1,
        _lib._sel_signatureWithObjCTypes_1, types);
    return _ret.address == 0
        ? null
        : NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  int get numberOfArguments {
    return _lib._objc_msgSend_10(_id, _lib._sel_numberOfArguments1);
  }

  ffi.Pointer<ffi.Char> getArgumentTypeAtIndex_(int idx) {
    return _lib._objc_msgSend_11(_id, _lib._sel_getArgumentTypeAtIndex_1, idx);
  }

  int get frameLength {
    return _lib._objc_msgSend_10(_id, _lib._sel_frameLength1);
  }

  bool isOneway() {
    return _lib._objc_msgSend_12(_id, _lib._sel_isOneway1);
  }

  ffi.Pointer<ffi.Char> get methodReturnType {
    return _lib._objc_msgSend_13(_id, _lib._sel_methodReturnType1);
  }

  int get methodReturnLength {
    return _lib._objc_msgSend_10(_id, _lib._sel_methodReturnLength1);
  }

  @override
  NSMethodSignature init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature new1(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMethodSignature1, _lib._sel_new1);
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }

  static NSMethodSignature allocWithZone_(
      UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMethodSignature1, _lib._sel_allocWithZone_1, zone);
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }

  static NSMethodSignature alloc(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMethodSignature1, _lib._sel_alloc1);
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }
}

class NSString extends NSObject {
  NSString._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSString] that points to the same underlying object as [other].
  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSString] that wraps the given raw object pointer.
  static NSString castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSString1);
  }

  factory NSString(UIKit _lib, String str) {
    final cstr = str.toNativeUtf16();
    final nsstr = stringWithCharacters_length_(_lib, cstr.cast(), str.length);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() {
    final data =
        dataUsingEncoding_(0x94000100 /* NSUTF16LittleEndianStringEncoding */);
    return data!.bytes.cast<pkg_ffi.Utf16>().toDartString(length: length);
  }

  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  int characterAtIndex_(int index) {
    return _lib._objc_msgSend_26(_id, _lib._sel_characterAtIndex_1, index);
  }

  @override
  NSString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithCharacters_length_(
      UIKit _lib, ffi.Pointer<ffi.WChar> characters, int length) {
    final _ret = _lib._objc_msgSend_34(_lib._class_NSString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSData dataUsingEncoding_(int encoding) {
    final _ret =
        _lib._objc_msgSend_35(_id, _lib._sel_dataUsingEncoding_1, encoding);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSString new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_new1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSString1, _lib._sel_allocWithZone_1, zone);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_alloc1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }
}

extension StringToNSString on String {
  NSString toNSString(UIKit lib) => NSString(lib, this);
}

class NSCoder extends NSObject {
  NSCoder._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCoder] that points to the same underlying object as [other].
  static NSCoder castFrom<T extends _ObjCWrapper>(T other) {
    return NSCoder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCoder] that wraps the given raw object pointer.
  static NSCoder castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSCoder1);
  }

  void encodeValueOfObjCType_at_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> addr) {
    _lib._objc_msgSend_27(
        _id, _lib._sel_encodeValueOfObjCType_at_1, type, addr);
  }

  void encodeDataObject_(NSData data) {
    _lib._objc_msgSend_29(_id, _lib._sel_encodeDataObject_1, data._id);
  }

  NSData? decodeDataObject() {
    final _ret = _lib._objc_msgSend_30(_id, _lib._sel_decodeDataObject1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_size_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> data, int size) {
    _lib._objc_msgSend_31(
        _id, _lib._sel_decodeValueOfObjCType_at_size_1, type, data, size);
  }

  int versionForClassName_(NSString className) {
    return _lib._objc_msgSend_32(
        _id, _lib._sel_versionForClassName_1, className._id);
  }

  @override
  NSCoder init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSCoder._(_ret, _lib, retain: true, release: true);
  }

  static NSCoder new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_new1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSCoder1, _lib._sel_allocWithZone_1, zone);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_alloc1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }
}

class NSData extends NSObject {
  NSData._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSData] that points to the same underlying object as [other].
  static NSData castFrom<T extends _ObjCWrapper>(T other) {
    return NSData._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSData] that wraps the given raw object pointer.
  static NSData castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSData].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSData1);
  }

  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _lib._objc_msgSend_28(_id, _lib._sel_bytes1);
  }

  @override
  NSData init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_new1);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSData1, _lib._sel_allocWithZone_1, zone);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_alloc1);
    return NSData._(_ret, _lib, retain: false, release: true);
  }
}

class UIEvent extends NSObject {
  UIEvent._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIEvent] that points to the same underlying object as [other].
  static UIEvent castFrom<T extends _ObjCWrapper>(T other) {
    return UIEvent._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIEvent] that wraps the given raw object pointer.
  static UIEvent castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIEvent._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIEvent].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIEvent1);
  }

  int get type {
    return _lib._objc_msgSend_38(_id, _lib._sel_type1);
  }

  int get subtype {
    return _lib._objc_msgSend_39(_id, _lib._sel_subtype1);
  }

  double get timestamp {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_timestamp1)
        : _lib._objc_msgSend_40(_id, _lib._sel_timestamp1);
  }

  int get modifierFlags {
    return _lib._objc_msgSend_41(_id, _lib._sel_modifierFlags1);
  }

  int get buttonMask {
    return _lib._objc_msgSend_42(_id, _lib._sel_buttonMask1);
  }

  NSObject? get allTouches {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_allTouches1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? touchesForWindow_(UIWindow window) {
    final _ret =
        _lib._objc_msgSend_43(_id, _lib._sel_touchesForWindow_1, window._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? touchesForView_(UIView view) {
    final _ret =
        _lib._objc_msgSend_44(_id, _lib._sel_touchesForView_1, view._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? touchesForGestureRecognizer_(UIGestureRecognizer gesture) {
    final _ret = _lib._objc_msgSend_45(
        _id, _lib._sel_touchesForGestureRecognizer_1, gesture._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? coalescedTouchesForTouch_(UITouch touch) {
    final _ret = _lib._objc_msgSend_83(
        _id, _lib._sel_coalescedTouchesForTouch_1, touch._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? predictedTouchesForTouch_(UITouch touch) {
    final _ret = _lib._objc_msgSend_83(
        _id, _lib._sel_predictedTouchesForTouch_1, touch._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  UIEvent init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return UIEvent._(_ret, _lib, retain: true, release: true);
  }

  static UIEvent new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UIEvent1, _lib._sel_new1);
    return UIEvent._(_ret, _lib, retain: false, release: true);
  }

  static UIEvent allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_UIEvent1, _lib._sel_allocWithZone_1, zone);
    return UIEvent._(_ret, _lib, retain: false, release: true);
  }

  static UIEvent alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UIEvent1, _lib._sel_alloc1);
    return UIEvent._(_ret, _lib, retain: false, release: true);
  }
}

abstract class UIEventType {
  static const int UIEventTypeTouches = 0;
  static const int UIEventTypeMotion = 1;
  static const int UIEventTypeRemoteControl = 2;
  static const int UIEventTypePresses = 3;
  static const int UIEventTypeScroll = 10;
  static const int UIEventTypeHover = 11;
  static const int UIEventTypeTransform = 14;
}

abstract class UIEventSubtype {
  static const int UIEventSubtypeNone = 0;
  static const int UIEventSubtypeMotionShake = 1;
  static const int UIEventSubtypeRemoteControlPlay = 100;
  static const int UIEventSubtypeRemoteControlPause = 101;
  static const int UIEventSubtypeRemoteControlStop = 102;
  static const int UIEventSubtypeRemoteControlTogglePlayPause = 103;
  static const int UIEventSubtypeRemoteControlNextTrack = 104;
  static const int UIEventSubtypeRemoteControlPreviousTrack = 105;
  static const int UIEventSubtypeRemoteControlBeginSeekingBackward = 106;
  static const int UIEventSubtypeRemoteControlEndSeekingBackward = 107;
  static const int UIEventSubtypeRemoteControlBeginSeekingForward = 108;
  static const int UIEventSubtypeRemoteControlEndSeekingForward = 109;
}

abstract class UIKeyModifierFlags {
  static const int UIKeyModifierAlphaShift = 65536;
  static const int UIKeyModifierShift = 131072;
  static const int UIKeyModifierControl = 262144;
  static const int UIKeyModifierAlternate = 524288;
  static const int UIKeyModifierCommand = 1048576;
  static const int UIKeyModifierNumericPad = 2097152;
}

abstract class UIEventButtonMask {
  static const int UIEventButtonMaskPrimary = 1;
  static const int UIEventButtonMaskSecondary = 2;
}

class UIGestureRecognizer extends _ObjCWrapper {
  UIGestureRecognizer._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIGestureRecognizer] that points to the same underlying object as [other].
  static UIGestureRecognizer castFrom<T extends _ObjCWrapper>(T other) {
    return UIGestureRecognizer._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [UIGestureRecognizer] that wraps the given raw object pointer.
  static UIGestureRecognizer castFromPointer(
      UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIGestureRecognizer._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIGestureRecognizer].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_UIGestureRecognizer1);
  }
}

class UITouch extends NSObject {
  UITouch._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UITouch] that points to the same underlying object as [other].
  static UITouch castFrom<T extends _ObjCWrapper>(T other) {
    return UITouch._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UITouch] that wraps the given raw object pointer.
  static UITouch castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UITouch._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UITouch].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UITouch1);
  }

  double get timestamp {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_timestamp1)
        : _lib._objc_msgSend_40(_id, _lib._sel_timestamp1);
  }

  int get phase {
    return _lib._objc_msgSend_46(_id, _lib._sel_phase1);
  }

  int get tapCount {
    return _lib._objc_msgSend_10(_id, _lib._sel_tapCount1);
  }

  int get type {
    return _lib._objc_msgSend_47(_id, _lib._sel_type1);
  }

  double get majorRadius {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_majorRadius1)
        : _lib._objc_msgSend_40(_id, _lib._sel_majorRadius1);
  }

  double get majorRadiusTolerance {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_majorRadiusTolerance1)
        : _lib._objc_msgSend_40(_id, _lib._sel_majorRadiusTolerance1);
  }

  UIWindow? get window {
    final _ret = _lib._objc_msgSend_48(_id, _lib._sel_window1);
    return _ret.address == 0
        ? null
        : UIWindow._(_ret, _lib, retain: true, release: true);
  }

  UIView? get view {
    final _ret = _lib._objc_msgSend_49(_id, _lib._sel_view1);
    return _ret.address == 0
        ? null
        : UIView._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get gestureRecognizers {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_gestureRecognizers1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void locationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_50_stret(
            stret, _id, _lib._sel_locationInView_1, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_50(
            _id, _lib._sel_locationInView_1, view?._id ?? ffi.nullptr);
  }

  void previousLocationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_50_stret(stret, _id,
            _lib._sel_previousLocationInView_1, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_50(
            _id, _lib._sel_previousLocationInView_1, view?._id ?? ffi.nullptr);
  }

  void preciseLocationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_50_stret(stret, _id,
            _lib._sel_preciseLocationInView_1, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_50(
            _id, _lib._sel_preciseLocationInView_1, view?._id ?? ffi.nullptr);
  }

  void precisePreviousLocationInView_(
      ffi.Pointer<CGPoint> stret, UIView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_50_stret(stret, _id,
            _lib._sel_precisePreviousLocationInView_1, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_50(
            _id,
            _lib._sel_precisePreviousLocationInView_1,
            view?._id ?? ffi.nullptr);
  }

  double get force {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_force1)
        : _lib._objc_msgSend_40(_id, _lib._sel_force1);
  }

  double get maximumPossibleForce {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_maximumPossibleForce1)
        : _lib._objc_msgSend_40(_id, _lib._sel_maximumPossibleForce1);
  }

  double azimuthAngleInView_(UIView? view) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_51_fpret(
            _id, _lib._sel_azimuthAngleInView_1, view?._id ?? ffi.nullptr)
        : _lib._objc_msgSend_51(
            _id, _lib._sel_azimuthAngleInView_1, view?._id ?? ffi.nullptr);
  }

  void azimuthUnitVectorInView_(ffi.Pointer<CGVector> stret, UIView? view) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_52_stret(stret, _id,
            _lib._sel_azimuthUnitVectorInView_1, view?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_52(
            _id, _lib._sel_azimuthUnitVectorInView_1, view?._id ?? ffi.nullptr);
  }

  double get altitudeAngle {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_altitudeAngle1)
        : _lib._objc_msgSend_40(_id, _lib._sel_altitudeAngle1);
  }

  NSNumber? get estimationUpdateIndex {
    final _ret = _lib._objc_msgSend_81(_id, _lib._sel_estimationUpdateIndex1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  int get estimatedProperties {
    return _lib._objc_msgSend_82(_id, _lib._sel_estimatedProperties1);
  }

  int get estimatedPropertiesExpectingUpdates {
    return _lib._objc_msgSend_82(
        _id, _lib._sel_estimatedPropertiesExpectingUpdates1);
  }

  @override
  UITouch init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return UITouch._(_ret, _lib, retain: true, release: true);
  }

  static UITouch new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UITouch1, _lib._sel_new1);
    return UITouch._(_ret, _lib, retain: false, release: true);
  }

  static UITouch allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_UITouch1, _lib._sel_allocWithZone_1, zone);
    return UITouch._(_ret, _lib, retain: false, release: true);
  }

  static UITouch alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UITouch1, _lib._sel_alloc1);
    return UITouch._(_ret, _lib, retain: false, release: true);
  }
}

abstract class UITouchPhase {
  static const int UITouchPhaseBegan = 0;
  static const int UITouchPhaseMoved = 1;
  static const int UITouchPhaseStationary = 2;
  static const int UITouchPhaseEnded = 3;
  static const int UITouchPhaseCancelled = 4;
  static const int UITouchPhaseRegionEntered = 5;
  static const int UITouchPhaseRegionMoved = 6;
  static const int UITouchPhaseRegionExited = 7;
}

abstract class UITouchType {
  static const int UITouchTypeDirect = 0;
  static const int UITouchTypeIndirect = 1;
  static const int UITouchTypePencil = 2;
  static const int UITouchTypeStylus = 2;
  static const int UITouchTypeIndirectPointer = 3;
}

final class CGPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class CGVector extends ffi.Struct {
  @ffi.Double()
  external double dx;

  @ffi.Double()
  external double dy;
}

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNumber] that points to the same underlying object as [other].
  static NSNumber castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumber._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNumber] that wraps the given raw object pointer.
  static NSNumber castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNumber._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumber].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSNumber1);
  }

  @override
  NSNumber? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_initWithChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_56(_id, _lib._sel_initWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_57(_id, _lib._sel_initWithShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_58(_id, _lib._sel_initWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_59(_id, _lib._sel_initWithInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_60(_id, _lib._sel_initWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_61(_id, _lib._sel_initWithLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_62(_id, _lib._sel_initWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_63(_id, _lib._sel_initWithLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_64(_id, _lib._sel_initWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_initWithFloat_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_66(_id, _lib._sel_initWithDouble_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_67(_id, _lib._sel_initWithBool_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInteger_(int value) {
    final _ret = _lib._objc_msgSend_61(_id, _lib._sel_initWithInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInteger_(int value) {
    final _ret =
        _lib._objc_msgSend_62(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  int get charValue {
    return _lib._objc_msgSend_68(_id, _lib._sel_charValue1);
  }

  int get unsignedCharValue {
    return _lib._objc_msgSend_69(_id, _lib._sel_unsignedCharValue1);
  }

  int get shortValue {
    return _lib._objc_msgSend_70(_id, _lib._sel_shortValue1);
  }

  int get unsignedShortValue {
    return _lib._objc_msgSend_71(_id, _lib._sel_unsignedShortValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_72(_id, _lib._sel_intValue1);
  }

  int get unsignedIntValue {
    return _lib._objc_msgSend_73(_id, _lib._sel_unsignedIntValue1);
  }

  int get longValue {
    return _lib._objc_msgSend_74(_id, _lib._sel_longValue1);
  }

  int get unsignedLongValue {
    return _lib._objc_msgSend_10(_id, _lib._sel_unsignedLongValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_75(_id, _lib._sel_longLongValue1);
  }

  int get unsignedLongLongValue {
    return _lib._objc_msgSend_76(_id, _lib._sel_unsignedLongLongValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_77_fpret(_id, _lib._sel_floatValue1)
        : _lib._objc_msgSend_77(_id, _lib._sel_floatValue1);
  }

  double get doubleValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_doubleValue1)
        : _lib._objc_msgSend_40(_id, _lib._sel_doubleValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_12(_id, _lib._sel_boolValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_74(_id, _lib._sel_integerValue1);
  }

  int get unsignedIntegerValue {
    return _lib._objc_msgSend_10(_id, _lib._sel_unsignedIntegerValue1);
  }

  NSString get stringValue {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_stringValue1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSNumber otherNumber) {
    return _lib._objc_msgSend_78(_id, _lib._sel_compare_1, otherNumber._id);
  }

  bool isEqualToNumber_(NSNumber number) {
    return _lib._objc_msgSend_79(_id, _lib._sel_isEqualToNumber_1, number._id);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_80(
        _id, _lib._sel_descriptionWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNumber initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_54(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNumber init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_new1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSNumber1, _lib._sel_allocWithZone_1, zone);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_alloc1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }
}

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSValue] that points to the same underlying object as [other].
  static NSValue castFrom<T extends _ObjCWrapper>(T other) {
    return NSValue._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSValue] that wraps the given raw object pointer.
  static NSValue castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSValue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSValue].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSValue1);
  }

  void getValue_size_(ffi.Pointer<ffi.Void> value, int size) {
    _lib._objc_msgSend_53(_id, _lib._sel_getValue_size_1, value, size);
  }

  ffi.Pointer<ffi.Char> get objCType {
    return _lib._objc_msgSend_13(_id, _lib._sel_objCType1);
  }

  NSValue initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_54(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSValue? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSValue init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_new1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSValue1, _lib._sel_allocWithZone_1, zone);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_alloc1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

abstract class UITouchProperties {
  static const int UITouchPropertyForce = 1;
  static const int UITouchPropertyAzimuth = 2;
  static const int UITouchPropertyAltitude = 4;
  static const int UITouchPropertyLocation = 8;
}

class UIPressesEvent extends _ObjCWrapper {
  UIPressesEvent._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIPressesEvent] that points to the same underlying object as [other].
  static UIPressesEvent castFrom<T extends _ObjCWrapper>(T other) {
    return UIPressesEvent._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIPressesEvent] that wraps the given raw object pointer.
  static UIPressesEvent castFromPointer(
      UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIPressesEvent._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIPressesEvent].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_UIPressesEvent1);
  }
}

class UICommand extends UIMenuElement {
  UICommand._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UICommand] that points to the same underlying object as [other].
  static UICommand castFrom<T extends _ObjCWrapper>(T other) {
    return UICommand._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UICommand] that wraps the given raw object pointer.
  static UICommand castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UICommand._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UICommand].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UICommand1);
  }

  @override
  NSString get title {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_title1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set title(NSString value) {
    return _lib._objc_msgSend_93(_id, _lib._sel_setTitle_1, value._id);
  }

  @override
  UIImage? get image {
    final _ret = _lib._objc_msgSend_92(_id, _lib._sel_image1);
    return _ret.address == 0
        ? null
        : UIImage._(_ret, _lib, retain: true, release: true);
  }

  set image(UIImage? value) {
    return _lib._objc_msgSend_94(
        _id, _lib._sel_setImage_1, value?._id ?? ffi.nullptr);
  }

  NSString? get discoverabilityTitle {
    final _ret = _lib._objc_msgSend_90(_id, _lib._sel_discoverabilityTitle1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set discoverabilityTitle(NSString? value) {
    return _lib._objc_msgSend_91(
        _id, _lib._sel_setDiscoverabilityTitle_1, value?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ObjCSel> get action {
    return _lib._objc_msgSend_18(_id, _lib._sel_action1);
  }

  NSObject? get propertyList {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_propertyList1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get attributes {
    return _lib._objc_msgSend_95(_id, _lib._sel_attributes1);
  }

  set attributes(int value) {
    return _lib._objc_msgSend_96(_id, _lib._sel_setAttributes_1, value);
  }

  int get state {
    return _lib._objc_msgSend_97(_id, _lib._sel_state1);
  }

  set state(int value) {
    return _lib._objc_msgSend_98(_id, _lib._sel_setState_1, value);
  }

  NSObject get alternates {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_alternates1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static UICommand commandWithTitle_image_action_propertyList_(
      UIKit _lib,
      NSString title,
      UIImage? image,
      ffi.Pointer<ObjCSel> action,
      NSObject? propertyList) {
    final _ret = _lib._objc_msgSend_99(
        _lib._class_UICommand1,
        _lib._sel_commandWithTitle_image_action_propertyList_1,
        title._id,
        image?._id ?? ffi.nullptr,
        action,
        propertyList?._id ?? ffi.nullptr);
    return UICommand._(_ret, _lib, retain: true, release: true);
  }

  static UICommand commandWithTitle_image_action_propertyList_alternates_(
      UIKit _lib,
      NSString title,
      UIImage? image,
      ffi.Pointer<ObjCSel> action,
      NSObject? propertyList,
      NSObject alternates) {
    final _ret = _lib._objc_msgSend_100(
        _lib._class_UICommand1,
        _lib._sel_commandWithTitle_image_action_propertyList_alternates_1,
        title._id,
        image?._id ?? ffi.nullptr,
        action,
        propertyList?._id ?? ffi.nullptr,
        alternates._id);
    return UICommand._(_ret, _lib, retain: true, release: true);
  }

  static UICommand new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UICommand1, _lib._sel_new1);
    return UICommand._(_ret, _lib, retain: false, release: true);
  }

  @override
  UICommand init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return UICommand._(_ret, _lib, retain: true, release: true);
  }

  @override
  UICommand? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : UICommand._(_ret, _lib, retain: true, release: true);
  }

  static UICommand allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_UICommand1, _lib._sel_allocWithZone_1, zone);
    return UICommand._(_ret, _lib, retain: false, release: true);
  }

  static UICommand alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_UICommand1, _lib._sel_alloc1);
    return UICommand._(_ret, _lib, retain: false, release: true);
  }
}

class UIMenuElement extends NSObject {
  UIMenuElement._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIMenuElement] that points to the same underlying object as [other].
  static UIMenuElement castFrom<T extends _ObjCWrapper>(T other) {
    return UIMenuElement._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIMenuElement] that wraps the given raw object pointer.
  static UIMenuElement castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIMenuElement._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIMenuElement].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIMenuElement1);
  }

  NSString get title {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_title1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get subtitle {
    final _ret = _lib._objc_msgSend_90(_id, _lib._sel_subtitle1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set subtitle(NSString? value) {
    return _lib._objc_msgSend_91(
        _id, _lib._sel_setSubtitle_1, value?._id ?? ffi.nullptr);
  }

  UIImage? get image {
    final _ret = _lib._objc_msgSend_92(_id, _lib._sel_image1);
    return _ret.address == 0
        ? null
        : UIImage._(_ret, _lib, retain: true, release: true);
  }

  UIMenuElement? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : UIMenuElement._(_ret, _lib, retain: true, release: true);
  }

  @override
  UIMenuElement init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return UIMenuElement._(_ret, _lib, retain: true, release: true);
  }

  static UIMenuElement new1(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_UIMenuElement1, _lib._sel_new1);
    return UIMenuElement._(_ret, _lib, retain: false, release: true);
  }

  static UIMenuElement allocWithZone_(
      UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_UIMenuElement1, _lib._sel_allocWithZone_1, zone);
    return UIMenuElement._(_ret, _lib, retain: false, release: true);
  }

  static UIMenuElement alloc(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_UIMenuElement1, _lib._sel_alloc1);
    return UIMenuElement._(_ret, _lib, retain: false, release: true);
  }
}

class UIImage extends _ObjCWrapper {
  UIImage._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIImage] that points to the same underlying object as [other].
  static UIImage castFrom<T extends _ObjCWrapper>(T other) {
    return UIImage._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIImage] that wraps the given raw object pointer.
  static UIImage castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIImage._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIImage].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIImage1);
  }
}

abstract class UIMenuElementAttributes {
  static const int UIMenuElementAttributesDisabled = 1;
  static const int UIMenuElementAttributesDestructive = 2;
  static const int UIMenuElementAttributesHidden = 4;
  static const int UIMenuElementAttributesKeepsMenuPresented = 8;
}

abstract class UIMenuElementState {
  static const int UIMenuElementStateOff = 0;
  static const int UIMenuElementStateOn = 1;
  static const int UIMenuElementStateMixed = 2;
}

class NSUndoManager extends NSObject {
  NSUndoManager._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSUndoManager] that points to the same underlying object as [other].
  static NSUndoManager castFrom<T extends _ObjCWrapper>(T other) {
    return NSUndoManager._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSUndoManager] that wraps the given raw object pointer.
  static NSUndoManager castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSUndoManager._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSUndoManager].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSUndoManager1);
  }

  void beginUndoGrouping() {
    _lib._objc_msgSend_1(_id, _lib._sel_beginUndoGrouping1);
  }

  void endUndoGrouping() {
    _lib._objc_msgSend_1(_id, _lib._sel_endUndoGrouping1);
  }

  int get groupingLevel {
    return _lib._objc_msgSend_74(_id, _lib._sel_groupingLevel1);
  }

  void disableUndoRegistration() {
    _lib._objc_msgSend_1(_id, _lib._sel_disableUndoRegistration1);
  }

  void enableUndoRegistration() {
    _lib._objc_msgSend_1(_id, _lib._sel_enableUndoRegistration1);
  }

  bool get undoRegistrationEnabled {
    return _lib._objc_msgSend_12(_id, _lib._sel_isUndoRegistrationEnabled1);
  }

  bool get groupsByEvent {
    return _lib._objc_msgSend_12(_id, _lib._sel_groupsByEvent1);
  }

  set groupsByEvent(bool value) {
    return _lib._objc_msgSend_102(_id, _lib._sel_setGroupsByEvent_1, value);
  }

  int get levelsOfUndo {
    return _lib._objc_msgSend_10(_id, _lib._sel_levelsOfUndo1);
  }

  set levelsOfUndo(int value) {
    return _lib._objc_msgSend_103(_id, _lib._sel_setLevelsOfUndo_1, value);
  }

  NSObject get runLoopModes {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_runLoopModes1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set runLoopModes(NSObject value) {
    return _lib._objc_msgSend_104(_id, _lib._sel_setRunLoopModes_1, value._id);
  }

  void undo() {
    _lib._objc_msgSend_1(_id, _lib._sel_undo1);
  }

  void redo() {
    _lib._objc_msgSend_1(_id, _lib._sel_redo1);
  }

  void undoNestedGroup() {
    _lib._objc_msgSend_1(_id, _lib._sel_undoNestedGroup1);
  }

  bool get canUndo {
    return _lib._objc_msgSend_12(_id, _lib._sel_canUndo1);
  }

  bool get canRedo {
    return _lib._objc_msgSend_12(_id, _lib._sel_canRedo1);
  }

  bool get undoing {
    return _lib._objc_msgSend_12(_id, _lib._sel_isUndoing1);
  }

  bool get redoing {
    return _lib._objc_msgSend_12(_id, _lib._sel_isRedoing1);
  }

  void removeAllActions() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllActions1);
  }

  void removeAllActionsWithTarget_(NSObject target) {
    _lib._objc_msgSend_22(
        _id, _lib._sel_removeAllActionsWithTarget_1, target._id);
  }

  void registerUndoWithTarget_selector_object_(
      NSObject target, ffi.Pointer<ObjCSel> selector, NSObject? anObject) {
    _lib._objc_msgSend_105(
        _id,
        _lib._sel_registerUndoWithTarget_selector_object_1,
        target._id,
        selector,
        anObject?._id ?? ffi.nullptr);
  }

  NSObject prepareWithInvocationTarget_(NSObject target) {
    final _ret = _lib._objc_msgSend_106(
        _id, _lib._sel_prepareWithInvocationTarget_1, target._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void registerUndoWithTarget_handler_(
      NSObject target, ObjCBlock_ffiVoid_ObjCObject undoHandler) {
    _lib._objc_msgSend_107(_id, _lib._sel_registerUndoWithTarget_handler_1,
        target._id, undoHandler._id);
  }

  void setActionIsDiscardable_(bool discardable) {
    _lib._objc_msgSend_108(
        _id, _lib._sel_setActionIsDiscardable_1, discardable);
  }

  bool get undoActionIsDiscardable {
    return _lib._objc_msgSend_12(_id, _lib._sel_undoActionIsDiscardable1);
  }

  bool get redoActionIsDiscardable {
    return _lib._objc_msgSend_12(_id, _lib._sel_redoActionIsDiscardable1);
  }

  NSString get undoActionName {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_undoActionName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get redoActionName {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_redoActionName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void setActionName_(NSString actionName) {
    _lib._objc_msgSend_109(_id, _lib._sel_setActionName_1, actionName._id);
  }

  NSString get undoMenuItemTitle {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_undoMenuItemTitle1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get redoMenuItemTitle {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_redoMenuItemTitle1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString undoMenuTitleForUndoActionName_(NSString actionName) {
    final _ret = _lib._objc_msgSend_110(
        _id, _lib._sel_undoMenuTitleForUndoActionName_1, actionName._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString redoMenuTitleForUndoActionName_(NSString actionName) {
    final _ret = _lib._objc_msgSend_110(
        _id, _lib._sel_redoMenuTitleForUndoActionName_1, actionName._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSUndoManager init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSUndoManager._(_ret, _lib, retain: true, release: true);
  }

  static NSUndoManager new1(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSUndoManager1, _lib._sel_new1);
    return NSUndoManager._(_ret, _lib, retain: false, release: true);
  }

  static NSUndoManager allocWithZone_(
      UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSUndoManager1, _lib._sel_allocWithZone_1, zone);
    return NSUndoManager._(_ret, _lib, retain: false, release: true);
  }

  static NSUndoManager alloc(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSUndoManager1, _lib._sel_alloc1);
    return NSUndoManager._(_ret, _lib, retain: false, release: true);
  }
}

class _ObjCBlockBase implements ffi.Finalizable {
  final ffi.Pointer<_ObjCBlock> _id;
  final UIKit _lib;
  bool _pendingRelease;

  _ObjCBlockBase._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._Block_copy(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer11.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC block held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._Block_release(_id.cast());
      _lib._objc_releaseFinalizer11.detach(this);
    } else {
      throw StateError(
          'Released an ObjC block that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCBlockBase && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<_ObjCBlock> get pointer => _id;

  ffi.Pointer<_ObjCBlock> _retainAndReturnId() {
    _lib._Block_copy(_id.cast());
    return _id;
  }
}

void _ObjCBlock_ffiVoid_ObjCObject_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi
            .NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_ObjCObject_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_ObjCObject_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ObjCObject_registerClosure(
    void Function(ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_ObjCObject_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ObjCObject_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ObjCObject_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_ObjCObject_closureRegistry[block.ref.target.address]!(
        arg0);

class ObjCBlock_ffiVoid_ObjCObject extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ObjCObject._(ffi.Pointer<_ObjCBlock> id, UIKit lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjCObject.fromFunctionPointer(
      UIKit lib,
      ffi.Pointer<
              ffi
              .NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_ObjCObject_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjCObject.fromFunction(
      UIKit lib, void Function(NSObject) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_ObjCObject_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ObjCObject_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0) => fn(
                        NSObject._(arg0, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ObjCObject.listener(UIKit lib, void Function(NSObject) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_ObjCObject_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ObjCObject_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0) => fn(
                        NSObject._(arg0, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSObject arg0) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>,
              ffi.Pointer<ObjCObject>)>()(_id, arg0._id);
}

final class _ObjCBlockDesc extends ffi.Struct {
  @ffi.UnsignedLong()
  external int reserved;

  @ffi.UnsignedLong()
  external int size;

  external ffi.Pointer<ffi.Void> copy_helper;

  external ffi.Pointer<ffi.Void> dispose_helper;

  external ffi.Pointer<ffi.Char> signature;
}

final class _ObjCBlock extends ffi.Struct {
  external ffi.Pointer<ffi.Void> isa;

  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int reserved;

  external ffi.Pointer<ffi.Void> invoke;

  external ffi.Pointer<_ObjCBlockDesc> descriptor;

  external ffi.Pointer<ffi.Void> target;
}

abstract class UIEditingInteractionConfiguration {
  static const int UIEditingInteractionConfigurationNone = 0;
  static const int UIEditingInteractionConfigurationDefault = 1;
}

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

final class CGSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

class CALayer extends NSObject {
  CALayer._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [CALayer] that points to the same underlying object as [other].
  static CALayer castFrom<T extends _ObjCWrapper>(T other) {
    return CALayer._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [CALayer] that wraps the given raw object pointer.
  static CALayer castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return CALayer._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [CALayer].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_CALayer1);
  }

  static CALayer layer(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_CALayer1, _lib._sel_layer1);
    return CALayer._(_ret, _lib, retain: true, release: true);
  }

  @override
  CALayer init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return CALayer._(_ret, _lib, retain: true, release: true);
  }

  CALayer initWithLayer_(NSObject layer) {
    final _ret =
        _lib._objc_msgSend_106(_id, _lib._sel_initWithLayer_1, layer._id);
    return CALayer._(_ret, _lib, retain: true, release: true);
  }

  CALayer? presentationLayer() {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_presentationLayer1);
    return _ret.address == 0
        ? null
        : CALayer._(_ret, _lib, retain: true, release: true);
  }

  CALayer modelLayer() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_modelLayer1);
    return CALayer._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? defaultValueForKey_(UIKit _lib, NSString key) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_CALayer1, _lib._sel_defaultValueForKey_1, key._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool needsDisplayForKey_(UIKit _lib, NSString key) {
    return _lib._objc_msgSend_116(
        _lib._class_CALayer1, _lib._sel_needsDisplayForKey_1, key._id);
  }

  bool shouldArchiveValueForKey_(NSString key) {
    return _lib._objc_msgSend_116(
        _id, _lib._sel_shouldArchiveValueForKey_1, key._id);
  }

  void getBounds(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_117_stret(stret, _id, _lib._sel_bounds1)
        : stret.ref = _lib._objc_msgSend_117(_id, _lib._sel_bounds1);
  }

  set bounds(CGRect value) {
    return _lib._objc_msgSend_118(_id, _lib._sel_setBounds_1, value);
  }

  void getPosition(ffi.Pointer<CGPoint> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_119_stret(stret, _id, _lib._sel_position1)
        : stret.ref = _lib._objc_msgSend_119(_id, _lib._sel_position1);
  }

  set position(CGPoint value) {
    return _lib._objc_msgSend_120(_id, _lib._sel_setPosition_1, value);
  }

  double get zPosition {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_zPosition1)
        : _lib._objc_msgSend_40(_id, _lib._sel_zPosition1);
  }

  set zPosition(double value) {
    return _lib._objc_msgSend_121(_id, _lib._sel_setZPosition_1, value);
  }

  void getAnchorPoint(ffi.Pointer<CGPoint> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_119_stret(stret, _id, _lib._sel_anchorPoint1)
        : stret.ref = _lib._objc_msgSend_119(_id, _lib._sel_anchorPoint1);
  }

  set anchorPoint(CGPoint value) {
    return _lib._objc_msgSend_120(_id, _lib._sel_setAnchorPoint_1, value);
  }

  double get anchorPointZ {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_anchorPointZ1)
        : _lib._objc_msgSend_40(_id, _lib._sel_anchorPointZ1);
  }

  set anchorPointZ(double value) {
    return _lib._objc_msgSend_121(_id, _lib._sel_setAnchorPointZ_1, value);
  }

  void getTransform(ffi.Pointer<CATransform3D> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_122_stret(stret, _id, _lib._sel_transform1)
        : stret.ref = _lib._objc_msgSend_122(_id, _lib._sel_transform1);
  }

  set transform(CATransform3D value) {
    return _lib._objc_msgSend_123(_id, _lib._sel_setTransform_1, value);
  }

  void affineTransform(ffi.Pointer<CGAffineTransform> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_124_stret(stret, _id, _lib._sel_affineTransform1)
        : stret.ref = _lib._objc_msgSend_124(_id, _lib._sel_affineTransform1);
  }

  void setAffineTransform_(CGAffineTransform m) {
    _lib._objc_msgSend_125(_id, _lib._sel_setAffineTransform_1, m);
  }

  void getFrame(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_117_stret(stret, _id, _lib._sel_frame1)
        : stret.ref = _lib._objc_msgSend_117(_id, _lib._sel_frame1);
  }

  set frame(CGRect value) {
    return _lib._objc_msgSend_118(_id, _lib._sel_setFrame_1, value);
  }

  bool get hidden {
    return _lib._objc_msgSend_12(_id, _lib._sel_isHidden1);
  }

  set hidden(bool value) {
    return _lib._objc_msgSend_102(_id, _lib._sel_setHidden_1, value);
  }

  bool get doubleSided {
    return _lib._objc_msgSend_12(_id, _lib._sel_isDoubleSided1);
  }

  set doubleSided(bool value) {
    return _lib._objc_msgSend_102(_id, _lib._sel_setDoubleSided_1, value);
  }

  bool get geometryFlipped {
    return _lib._objc_msgSend_12(_id, _lib._sel_isGeometryFlipped1);
  }

  set geometryFlipped(bool value) {
    return _lib._objc_msgSend_102(_id, _lib._sel_setGeometryFlipped_1, value);
  }

  bool contentsAreFlipped() {
    return _lib._objc_msgSend_12(_id, _lib._sel_contentsAreFlipped1);
  }

  CALayer? get superlayer {
    final _ret = _lib._objc_msgSend_126(_id, _lib._sel_superlayer1);
    return _ret.address == 0
        ? null
        : CALayer._(_ret, _lib, retain: true, release: true);
  }

  void removeFromSuperlayer() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeFromSuperlayer1);
  }

  NSObject? get sublayers {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_sublayers1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set sublayers(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setSublayers_1, value?._id ?? ffi.nullptr);
  }

  void addSublayer_(CALayer layer) {
    _lib._objc_msgSend_127(_id, _lib._sel_addSublayer_1, layer._id);
  }

  void insertSublayer_atIndex_(CALayer layer, int idx) {
    _lib._objc_msgSend_128(
        _id, _lib._sel_insertSublayer_atIndex_1, layer._id, idx);
  }

  void insertSublayer_below_(CALayer layer, CALayer? sibling) {
    _lib._objc_msgSend_129(_id, _lib._sel_insertSublayer_below_1, layer._id,
        sibling?._id ?? ffi.nullptr);
  }

  void insertSublayer_above_(CALayer layer, CALayer? sibling) {
    _lib._objc_msgSend_129(_id, _lib._sel_insertSublayer_above_1, layer._id,
        sibling?._id ?? ffi.nullptr);
  }

  void replaceSublayer_with_(CALayer oldLayer, CALayer newLayer) {
    _lib._objc_msgSend_130(
        _id, _lib._sel_replaceSublayer_with_1, oldLayer._id, newLayer._id);
  }

  void getSublayerTransform(ffi.Pointer<CATransform3D> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_122_stret(stret, _id, _lib._sel_sublayerTransform1)
        : stret.ref = _lib._objc_msgSend_122(_id, _lib._sel_sublayerTransform1);
  }

  set sublayerTransform(CATransform3D value) {
    return _lib._objc_msgSend_123(_id, _lib._sel_setSublayerTransform_1, value);
  }

  CALayer? get mask {
    final _ret = _lib._objc_msgSend_126(_id, _lib._sel_mask1);
    return _ret.address == 0
        ? null
        : CALayer._(_ret, _lib, retain: true, release: true);
  }

  set mask(CALayer? value) {
    return _lib._objc_msgSend_131(
        _id, _lib._sel_setMask_1, value?._id ?? ffi.nullptr);
  }

  bool get masksToBounds {
    return _lib._objc_msgSend_12(_id, _lib._sel_masksToBounds1);
  }

  set masksToBounds(bool value) {
    return _lib._objc_msgSend_102(_id, _lib._sel_setMasksToBounds_1, value);
  }

  void convertPoint_fromLayer_(
      ffi.Pointer<CGPoint> stret, CGPoint p, CALayer? l) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_132_stret(stret, _id,
            _lib._sel_convertPoint_fromLayer_1, p, l?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_132(
            _id, _lib._sel_convertPoint_fromLayer_1, p, l?._id ?? ffi.nullptr);
  }

  void convertPoint_toLayer_(
      ffi.Pointer<CGPoint> stret, CGPoint p, CALayer? l) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_132_stret(stret, _id,
            _lib._sel_convertPoint_toLayer_1, p, l?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_132(
            _id, _lib._sel_convertPoint_toLayer_1, p, l?._id ?? ffi.nullptr);
  }

  void convertRect_fromLayer_(ffi.Pointer<CGRect> stret, CGRect r, CALayer? l) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_133_stret(stret, _id,
            _lib._sel_convertRect_fromLayer_1, r, l?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_133(
            _id, _lib._sel_convertRect_fromLayer_1, r, l?._id ?? ffi.nullptr);
  }

  void convertRect_toLayer_(ffi.Pointer<CGRect> stret, CGRect r, CALayer? l) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_133_stret(stret, _id,
            _lib._sel_convertRect_toLayer_1, r, l?._id ?? ffi.nullptr)
        : stret.ref = _lib._objc_msgSend_133(
            _id, _lib._sel_convertRect_toLayer_1, r, l?._id ?? ffi.nullptr);
  }

  double convertTime_fromLayer_(double t, CALayer? l) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_134_fpret(
            _id, _lib._sel_convertTime_fromLayer_1, t, l?._id ?? ffi.nullptr)
        : _lib._objc_msgSend_134(
            _id, _lib._sel_convertTime_fromLayer_1, t, l?._id ?? ffi.nullptr);
  }

  double convertTime_toLayer_(double t, CALayer? l) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_134_fpret(
            _id, _lib._sel_convertTime_toLayer_1, t, l?._id ?? ffi.nullptr)
        : _lib._objc_msgSend_134(
            _id, _lib._sel_convertTime_toLayer_1, t, l?._id ?? ffi.nullptr);
  }

  CALayer? hitTest_(CGPoint p) {
    final _ret = _lib._objc_msgSend_135(_id, _lib._sel_hitTest_1, p);
    return _ret.address == 0
        ? null
        : CALayer._(_ret, _lib, retain: true, release: true);
  }

  bool containsPoint_(CGPoint p) {
    return _lib._objc_msgSend_136(_id, _lib._sel_containsPoint_1, p);
  }

  NSObject? get contents {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_contents1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set contents(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setContents_1, value?._id ?? ffi.nullptr);
  }

  void getContentsRect(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_117_stret(stret, _id, _lib._sel_contentsRect1)
        : stret.ref = _lib._objc_msgSend_117(_id, _lib._sel_contentsRect1);
  }

  set contentsRect(CGRect value) {
    return _lib._objc_msgSend_118(_id, _lib._sel_setContentsRect_1, value);
  }

  NSString get contentsGravity {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_contentsGravity1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set contentsGravity(NSString value) {
    return _lib._objc_msgSend_93(
        _id, _lib._sel_setContentsGravity_1, value._id);
  }

  double get contentsScale {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_contentsScale1)
        : _lib._objc_msgSend_40(_id, _lib._sel_contentsScale1);
  }

  set contentsScale(double value) {
    return _lib._objc_msgSend_121(_id, _lib._sel_setContentsScale_1, value);
  }

  void getContentsCenter(ffi.Pointer<CGRect> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_117_stret(stret, _id, _lib._sel_contentsCenter1)
        : stret.ref = _lib._objc_msgSend_117(_id, _lib._sel_contentsCenter1);
  }

  set contentsCenter(CGRect value) {
    return _lib._objc_msgSend_118(_id, _lib._sel_setContentsCenter_1, value);
  }

  NSString get contentsFormat {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_contentsFormat1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set contentsFormat(NSString value) {
    return _lib._objc_msgSend_93(_id, _lib._sel_setContentsFormat_1, value._id);
  }

  bool get wantsExtendedDynamicRangeContent {
    return _lib._objc_msgSend_12(
        _id, _lib._sel_wantsExtendedDynamicRangeContent1);
  }

  set wantsExtendedDynamicRangeContent(bool value) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_setWantsExtendedDynamicRangeContent_1, value);
  }

  NSString get minificationFilter {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_minificationFilter1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set minificationFilter(NSString value) {
    return _lib._objc_msgSend_93(
        _id, _lib._sel_setMinificationFilter_1, value._id);
  }

  NSString get magnificationFilter {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_magnificationFilter1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set magnificationFilter(NSString value) {
    return _lib._objc_msgSend_93(
        _id, _lib._sel_setMagnificationFilter_1, value._id);
  }

  double get minificationFilterBias {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_77_fpret(_id, _lib._sel_minificationFilterBias1)
        : _lib._objc_msgSend_77(_id, _lib._sel_minificationFilterBias1);
  }

  set minificationFilterBias(double value) {
    return _lib._objc_msgSend_137(
        _id, _lib._sel_setMinificationFilterBias_1, value);
  }

  bool get opaque {
    return _lib._objc_msgSend_12(_id, _lib._sel_isOpaque1);
  }

  set opaque(bool value) {
    return _lib._objc_msgSend_102(_id, _lib._sel_setOpaque_1, value);
  }

  void display() {
    _lib._objc_msgSend_1(_id, _lib._sel_display1);
  }

  void setNeedsDisplay() {
    _lib._objc_msgSend_1(_id, _lib._sel_setNeedsDisplay1);
  }

  void setNeedsDisplayInRect_(CGRect r) {
    _lib._objc_msgSend_138(_id, _lib._sel_setNeedsDisplayInRect_1, r);
  }

  bool needsDisplay() {
    return _lib._objc_msgSend_12(_id, _lib._sel_needsDisplay1);
  }

  void displayIfNeeded() {
    _lib._objc_msgSend_1(_id, _lib._sel_displayIfNeeded1);
  }

  bool get needsDisplayOnBoundsChange {
    return _lib._objc_msgSend_12(_id, _lib._sel_needsDisplayOnBoundsChange1);
  }

  set needsDisplayOnBoundsChange(bool value) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_setNeedsDisplayOnBoundsChange_1, value);
  }

  bool get drawsAsynchronously {
    return _lib._objc_msgSend_12(_id, _lib._sel_drawsAsynchronously1);
  }

  set drawsAsynchronously(bool value) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_setDrawsAsynchronously_1, value);
  }

  void drawInContext_(ffi.Pointer<CGContext> ctx) {
    _lib._objc_msgSend_139(_id, _lib._sel_drawInContext_1, ctx);
  }

  void renderInContext_(ffi.Pointer<CGContext> ctx) {
    _lib._objc_msgSend_139(_id, _lib._sel_renderInContext_1, ctx);
  }

  int get edgeAntialiasingMask {
    return _lib._objc_msgSend_140(_id, _lib._sel_edgeAntialiasingMask1);
  }

  set edgeAntialiasingMask(int value) {
    return _lib._objc_msgSend_141(
        _id, _lib._sel_setEdgeAntialiasingMask_1, value);
  }

  bool get allowsEdgeAntialiasing {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsEdgeAntialiasing1);
  }

  set allowsEdgeAntialiasing(bool value) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_setAllowsEdgeAntialiasing_1, value);
  }

  ffi.Pointer<CGColor> get backgroundColor {
    return _lib._objc_msgSend_142(_id, _lib._sel_backgroundColor1);
  }

  set backgroundColor(ffi.Pointer<CGColor> value) {
    return _lib._objc_msgSend_143(_id, _lib._sel_setBackgroundColor_1, value);
  }

  double get cornerRadius {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_cornerRadius1)
        : _lib._objc_msgSend_40(_id, _lib._sel_cornerRadius1);
  }

  set cornerRadius(double value) {
    return _lib._objc_msgSend_121(_id, _lib._sel_setCornerRadius_1, value);
  }

  int get maskedCorners {
    return _lib._objc_msgSend_144(_id, _lib._sel_maskedCorners1);
  }

  set maskedCorners(int value) {
    return _lib._objc_msgSend_145(_id, _lib._sel_setMaskedCorners_1, value);
  }

  NSString get cornerCurve {
    final _ret = _lib._objc_msgSend_36(_id, _lib._sel_cornerCurve1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set cornerCurve(NSString value) {
    return _lib._objc_msgSend_93(_id, _lib._sel_setCornerCurve_1, value._id);
  }

  static double cornerCurveExpansionFactor_(UIKit _lib, NSString curve) {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_146_fpret(_lib._class_CALayer1,
            _lib._sel_cornerCurveExpansionFactor_1, curve._id)
        : _lib._objc_msgSend_146(_lib._class_CALayer1,
            _lib._sel_cornerCurveExpansionFactor_1, curve._id);
  }

  double get borderWidth {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_borderWidth1)
        : _lib._objc_msgSend_40(_id, _lib._sel_borderWidth1);
  }

  set borderWidth(double value) {
    return _lib._objc_msgSend_121(_id, _lib._sel_setBorderWidth_1, value);
  }

  ffi.Pointer<CGColor> get borderColor {
    return _lib._objc_msgSend_142(_id, _lib._sel_borderColor1);
  }

  set borderColor(ffi.Pointer<CGColor> value) {
    return _lib._objc_msgSend_143(_id, _lib._sel_setBorderColor_1, value);
  }

  double get opacity {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_77_fpret(_id, _lib._sel_opacity1)
        : _lib._objc_msgSend_77(_id, _lib._sel_opacity1);
  }

  set opacity(double value) {
    return _lib._objc_msgSend_137(_id, _lib._sel_setOpacity_1, value);
  }

  bool get allowsGroupOpacity {
    return _lib._objc_msgSend_12(_id, _lib._sel_allowsGroupOpacity1);
  }

  set allowsGroupOpacity(bool value) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_setAllowsGroupOpacity_1, value);
  }

  NSObject? get compositingFilter {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_compositingFilter1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set compositingFilter(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setCompositingFilter_1, value?._id ?? ffi.nullptr);
  }

  NSArray? get filters {
    final _ret = _lib._objc_msgSend_149(_id, _lib._sel_filters1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  set filters(NSArray? value) {
    return _lib._objc_msgSend_150(
        _id, _lib._sel_setFilters_1, value?._id ?? ffi.nullptr);
  }

  NSArray? get backgroundFilters {
    final _ret = _lib._objc_msgSend_149(_id, _lib._sel_backgroundFilters1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  set backgroundFilters(NSArray? value) {
    return _lib._objc_msgSend_150(
        _id, _lib._sel_setBackgroundFilters_1, value?._id ?? ffi.nullptr);
  }

  bool get shouldRasterize {
    return _lib._objc_msgSend_12(_id, _lib._sel_shouldRasterize1);
  }

  set shouldRasterize(bool value) {
    return _lib._objc_msgSend_102(_id, _lib._sel_setShouldRasterize_1, value);
  }

  double get rasterizationScale {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_rasterizationScale1)
        : _lib._objc_msgSend_40(_id, _lib._sel_rasterizationScale1);
  }

  set rasterizationScale(double value) {
    return _lib._objc_msgSend_121(
        _id, _lib._sel_setRasterizationScale_1, value);
  }

  ffi.Pointer<CGColor> get shadowColor {
    return _lib._objc_msgSend_142(_id, _lib._sel_shadowColor1);
  }

  set shadowColor(ffi.Pointer<CGColor> value) {
    return _lib._objc_msgSend_143(_id, _lib._sel_setShadowColor_1, value);
  }

  double get shadowOpacity {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_77_fpret(_id, _lib._sel_shadowOpacity1)
        : _lib._objc_msgSend_77(_id, _lib._sel_shadowOpacity1);
  }

  set shadowOpacity(double value) {
    return _lib._objc_msgSend_137(_id, _lib._sel_setShadowOpacity_1, value);
  }

  void getShadowOffset(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_151_stret(stret, _id, _lib._sel_shadowOffset1)
        : stret.ref = _lib._objc_msgSend_151(_id, _lib._sel_shadowOffset1);
  }

  set shadowOffset(CGSize value) {
    return _lib._objc_msgSend_152(_id, _lib._sel_setShadowOffset_1, value);
  }

  double get shadowRadius {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_40_fpret(_id, _lib._sel_shadowRadius1)
        : _lib._objc_msgSend_40(_id, _lib._sel_shadowRadius1);
  }

  set shadowRadius(double value) {
    return _lib._objc_msgSend_121(_id, _lib._sel_setShadowRadius_1, value);
  }

  ffi.Pointer<CGPath> get shadowPath {
    return _lib._objc_msgSend_153(_id, _lib._sel_shadowPath1);
  }

  set shadowPath(ffi.Pointer<CGPath> value) {
    return _lib._objc_msgSend_154(_id, _lib._sel_setShadowPath_1, value);
  }

  void preferredFrameSize(ffi.Pointer<CGSize> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_151_stret(
            stret, _id, _lib._sel_preferredFrameSize1)
        : stret.ref =
            _lib._objc_msgSend_151(_id, _lib._sel_preferredFrameSize1);
  }

  void setNeedsLayout() {
    _lib._objc_msgSend_1(_id, _lib._sel_setNeedsLayout1);
  }

  bool needsLayout() {
    return _lib._objc_msgSend_12(_id, _lib._sel_needsLayout1);
  }

  void layoutIfNeeded() {
    _lib._objc_msgSend_1(_id, _lib._sel_layoutIfNeeded1);
  }

  void layoutSublayers() {
    _lib._objc_msgSend_1(_id, _lib._sel_layoutSublayers1);
  }

  static NSObject? defaultActionForKey_(UIKit _lib, NSString event) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_CALayer1, _lib._sel_defaultActionForKey_1, event._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? actionForKey_(NSString event) {
    final _ret =
        _lib._objc_msgSend_115(_id, _lib._sel_actionForKey_1, event._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get actions {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_actions1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set actions(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setActions_1, value?._id ?? ffi.nullptr);
  }

  void addAnimation_forKey_(CAAnimation anim, NSString? key) {
    _lib._objc_msgSend_162(_id, _lib._sel_addAnimation_forKey_1, anim._id,
        key?._id ?? ffi.nullptr);
  }

  void removeAllAnimations() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllAnimations1);
  }

  void removeAnimationForKey_(NSString key) {
    _lib._objc_msgSend_109(_id, _lib._sel_removeAnimationForKey_1, key._id);
  }

  NSArray? animationKeys() {
    final _ret = _lib._objc_msgSend_149(_id, _lib._sel_animationKeys1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  CAAnimation? animationForKey_(NSString key) {
    final _ret =
        _lib._objc_msgSend_163(_id, _lib._sel_animationForKey_1, key._id);
    return _ret.address == 0
        ? null
        : CAAnimation._(_ret, _lib, retain: true, release: true);
  }

  NSString? get name {
    final _ret = _lib._objc_msgSend_90(_id, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set name(NSString? value) {
    return _lib._objc_msgSend_91(
        _id, _lib._sel_setName_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  NSDictionary? get style {
    final _ret = _lib._objc_msgSend_166(_id, _lib._sel_style1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set style(NSDictionary? value) {
    return _lib._objc_msgSend_167(
        _id, _lib._sel_setStyle_1, value?._id ?? ffi.nullptr);
  }

  static CALayer new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_CALayer1, _lib._sel_new1);
    return CALayer._(_ret, _lib, retain: false, release: true);
  }

  static CALayer allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_CALayer1, _lib._sel_allocWithZone_1, zone);
    return CALayer._(_ret, _lib, retain: false, release: true);
  }

  static CALayer alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_CALayer1, _lib._sel_alloc1);
    return CALayer._(_ret, _lib, retain: false, release: true);
  }
}

final class CATransform3D extends ffi.Struct {
  @ffi.Double()
  external double m11;

  @ffi.Double()
  external double m12;

  @ffi.Double()
  external double m13;

  @ffi.Double()
  external double m14;

  @ffi.Double()
  external double m21;

  @ffi.Double()
  external double m22;

  @ffi.Double()
  external double m23;

  @ffi.Double()
  external double m24;

  @ffi.Double()
  external double m31;

  @ffi.Double()
  external double m32;

  @ffi.Double()
  external double m33;

  @ffi.Double()
  external double m34;

  @ffi.Double()
  external double m41;

  @ffi.Double()
  external double m42;

  @ffi.Double()
  external double m43;

  @ffi.Double()
  external double m44;
}

final class CGAffineTransform extends ffi.Struct {
  @ffi.Double()
  external double a;

  @ffi.Double()
  external double b;

  @ffi.Double()
  external double c;

  @ffi.Double()
  external double d;

  @ffi.Double()
  external double tx;

  @ffi.Double()
  external double ty;
}

final class CGContext extends ffi.Opaque {}

abstract class CAEdgeAntialiasingMask {
  static const int kCALayerLeftEdge = 1;
  static const int kCALayerRightEdge = 2;
  static const int kCALayerBottomEdge = 4;
  static const int kCALayerTopEdge = 8;
}

final class CGColor extends ffi.Opaque {}

abstract class CACornerMask {
  static const int kCALayerMinXMinYCorner = 1;
  static const int kCALayerMaxXMinYCorner = 2;
  static const int kCALayerMinXMaxYCorner = 4;
  static const int kCALayerMaxXMaxYCorner = 8;
}

class NSArray extends NSObject {
  NSArray._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSArray] that points to the same underlying object as [other].
  static NSArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSArray] that wraps the given raw object pointer.
  static NSArray castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSArray1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  NSObject objectAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_147(_id, _lib._sel_objectAtIndex_1, index);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_148(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_new1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSArray1, _lib._sel_allocWithZone_1, zone);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_alloc1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }
}

final class CGPath extends ffi.Opaque {}

class CAAnimation extends NSObject {
  CAAnimation._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [CAAnimation] that points to the same underlying object as [other].
  static CAAnimation castFrom<T extends _ObjCWrapper>(T other) {
    return CAAnimation._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [CAAnimation] that wraps the given raw object pointer.
  static CAAnimation castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return CAAnimation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [CAAnimation].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_CAAnimation1);
  }

  static CAAnimation animation(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_CAAnimation1, _lib._sel_animation1);
    return CAAnimation._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? defaultValueForKey_(UIKit _lib, NSString key) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_CAAnimation1, _lib._sel_defaultValueForKey_1, key._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool shouldArchiveValueForKey_(NSString key) {
    return _lib._objc_msgSend_116(
        _id, _lib._sel_shouldArchiveValueForKey_1, key._id);
  }

  CAMediaTimingFunction? get timingFunction {
    final _ret = _lib._objc_msgSend_158(_id, _lib._sel_timingFunction1);
    return _ret.address == 0
        ? null
        : CAMediaTimingFunction._(_ret, _lib, retain: true, release: true);
  }

  set timingFunction(CAMediaTimingFunction? value) {
    return _lib._objc_msgSend_159(
        _id, _lib._sel_setTimingFunction_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_16(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_17(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  bool get removedOnCompletion {
    return _lib._objc_msgSend_12(_id, _lib._sel_isRemovedOnCompletion1);
  }

  set removedOnCompletion(bool value) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_setRemovedOnCompletion_1, value);
  }

  void getPreferredFrameRateRange(ffi.Pointer<CAFrameRateRange> stret) {
    _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_160_stret(
            stret, _id, _lib._sel_preferredFrameRateRange1)
        : stret.ref =
            _lib._objc_msgSend_160(_id, _lib._sel_preferredFrameRateRange1);
  }

  set preferredFrameRateRange(CAFrameRateRange value) {
    return _lib._objc_msgSend_161(
        _id, _lib._sel_setPreferredFrameRateRange_1, value);
  }

  @override
  CAAnimation init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return CAAnimation._(_ret, _lib, retain: true, release: true);
  }

  static CAAnimation new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_CAAnimation1, _lib._sel_new1);
    return CAAnimation._(_ret, _lib, retain: false, release: true);
  }

  static CAAnimation allocWithZone_(UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_CAAnimation1, _lib._sel_allocWithZone_1, zone);
    return CAAnimation._(_ret, _lib, retain: false, release: true);
  }

  static CAAnimation alloc(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_CAAnimation1, _lib._sel_alloc1);
    return CAAnimation._(_ret, _lib, retain: false, release: true);
  }
}

class CAMediaTimingFunction extends NSObject {
  CAMediaTimingFunction._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [CAMediaTimingFunction] that points to the same underlying object as [other].
  static CAMediaTimingFunction castFrom<T extends _ObjCWrapper>(T other) {
    return CAMediaTimingFunction._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [CAMediaTimingFunction] that wraps the given raw object pointer.
  static CAMediaTimingFunction castFromPointer(
      UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return CAMediaTimingFunction._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [CAMediaTimingFunction].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_CAMediaTimingFunction1);
  }

  static CAMediaTimingFunction functionWithName_(UIKit _lib, NSString name) {
    final _ret = _lib._objc_msgSend_155(_lib._class_CAMediaTimingFunction1,
        _lib._sel_functionWithName_1, name._id);
    return CAMediaTimingFunction._(_ret, _lib, retain: true, release: true);
  }

  static CAMediaTimingFunction functionWithControlPoints____(
      UIKit _lib, double c1x, double c1y, double c2x, double c2y) {
    final _ret = _lib._objc_msgSend_156(_lib._class_CAMediaTimingFunction1,
        _lib._sel_functionWithControlPoints____1, c1x, c1y, c2x, c2y);
    return CAMediaTimingFunction._(_ret, _lib, retain: true, release: true);
  }

  CAMediaTimingFunction initWithControlPoints____(
      double c1x, double c1y, double c2x, double c2y) {
    final _ret = _lib._objc_msgSend_156(
        _id, _lib._sel_initWithControlPoints____1, c1x, c1y, c2x, c2y);
    return CAMediaTimingFunction._(_ret, _lib, retain: true, release: true);
  }

  void getControlPointAtIndex_values_(int idx, ffi.Pointer<ffi.Float> ptr) {
    _lib._objc_msgSend_157(
        _id, _lib._sel_getControlPointAtIndex_values_1, idx, ptr);
  }

  @override
  CAMediaTimingFunction init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return CAMediaTimingFunction._(_ret, _lib, retain: true, release: true);
  }

  static CAMediaTimingFunction new1(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_CAMediaTimingFunction1, _lib._sel_new1);
    return CAMediaTimingFunction._(_ret, _lib, retain: false, release: true);
  }

  static CAMediaTimingFunction allocWithZone_(
      UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_CAMediaTimingFunction1, _lib._sel_allocWithZone_1, zone);
    return CAMediaTimingFunction._(_ret, _lib, retain: false, release: true);
  }

  static CAMediaTimingFunction alloc(UIKit _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_CAMediaTimingFunction1, _lib._sel_alloc1);
    return CAMediaTimingFunction._(_ret, _lib, retain: false, release: true);
  }
}

final class CAFrameRateRange extends ffi.Struct {
  @ffi.Float()
  external double minimum;

  @ffi.Float()
  external double maximum;

  @ffi.Float()
  external double preferred;
}

class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDictionary] that points to the same underlying object as [other].
  static NSDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSDictionary._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDictionary] that wraps the given raw object pointer.
  static NSDictionary castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDictionary1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  NSObject? objectForKey_(NSObject aKey) {
    final _ret =
        _lib._objc_msgSend_164(_id, _lib._sel_objectForKey_1, aKey._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keyEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_keyEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_165(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_33(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary new1(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_new1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary allocWithZone_(
      UIKit _lib, ffi.Pointer<imp1.NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSDictionary1, _lib._sel_allocWithZone_1, zone);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary alloc(UIKit _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_alloc1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }
}

class UIFocusEffect extends _ObjCWrapper {
  UIFocusEffect._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIFocusEffect] that points to the same underlying object as [other].
  static UIFocusEffect castFrom<T extends _ObjCWrapper>(T other) {
    return UIFocusEffect._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIFocusEffect] that wraps the given raw object pointer.
  static UIFocusEffect castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIFocusEffect._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIFocusEffect].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIFocusEffect1);
  }
}

abstract class UISemanticContentAttribute {
  static const int UISemanticContentAttributeUnspecified = 0;
  static const int UISemanticContentAttributePlayback = 1;
  static const int UISemanticContentAttributeSpatial = 2;
  static const int UISemanticContentAttributeForceLeftToRight = 3;
  static const int UISemanticContentAttributeForceRightToLeft = 4;
}

abstract class UIUserInterfaceLayoutDirection {
  static const int UIUserInterfaceLayoutDirectionLeftToRight = 0;
  static const int UIUserInterfaceLayoutDirectionRightToLeft = 1;
}

class UIWindowScene extends _ObjCWrapper {
  UIWindowScene._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIWindowScene] that points to the same underlying object as [other].
  static UIWindowScene castFrom<T extends _ObjCWrapper>(T other) {
    return UIWindowScene._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIWindowScene] that wraps the given raw object pointer.
  static UIWindowScene castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIWindowScene._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIWindowScene].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIWindowScene1);
  }
}

class UIScreen extends _ObjCWrapper {
  UIScreen._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIScreen] that points to the same underlying object as [other].
  static UIScreen castFrom<T extends _ObjCWrapper>(T other) {
    return UIScreen._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [UIScreen] that wraps the given raw object pointer.
  static UIScreen castFromPointer(UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIScreen._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIScreen].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_UIScreen1);
  }
}

class UIViewController extends _ObjCWrapper {
  UIViewController._(ffi.Pointer<ObjCObject> id, UIKit lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [UIViewController] that points to the same underlying object as [other].
  static UIViewController castFrom<T extends _ObjCWrapper>(T other) {
    return UIViewController._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [UIViewController] that wraps the given raw object pointer.
  static UIViewController castFromPointer(
      UIKit lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return UIViewController._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [UIViewController].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_UIViewController1);
  }
}
