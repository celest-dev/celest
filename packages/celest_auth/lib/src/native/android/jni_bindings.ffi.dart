// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: dev.celest.celest_auth.CelestAuth
class CelestAuth extends jni.JObject {
  @override
  late final jni.JObjType<CelestAuth> $type = type;

  CelestAuth.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"dev/celest/celest_auth/CelestAuth");

  /// The type which includes information such as the signature of this class.
  static const type = $CelestAuthType();
  static final _id_new0 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Landroid/app/Activity;)V");

  /// from: public void <init>(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  factory CelestAuth(
    Activity activity,
  ) {
    return CelestAuth.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [activity.reference]).object);
  }

  static final _id_register = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"register",
      r"(Ljava/lang/String;Landroidx/credentials/CredentialManagerCallback;)Landroid/os/CancellationSignal;");

  /// from: public final android.os.CancellationSignal register(java.lang.String string, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  /// The returned object must be released after use, by calling the [release] method.
  CancellationSignal register(
    jni.JString string,
    CredentialManagerCallback<CreateCredentialResponse,
            CreateCredentialException>
        credentialManagerCallback,
  ) {
    return const $CancellationSignalType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_register, jni.JniCallType.objectType,
            [string.reference, credentialManagerCallback.reference]).object);
  }

  static final _id_authenticate = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"authenticate",
      r"(Ljava/lang/String;Landroidx/credentials/CredentialManagerCallback;)Landroid/os/CancellationSignal;");

  /// from: public final android.os.CancellationSignal authenticate(java.lang.String string, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  /// The returned object must be released after use, by calling the [release] method.
  CancellationSignal authenticate(
    jni.JString string,
    CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
        credentialManagerCallback,
  ) {
    return const $CancellationSignalType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_authenticate,
            jni.JniCallType.objectType,
            [string.reference, credentialManagerCallback.reference]).object);
  }
}

final class $CelestAuthType extends jni.JObjType<CelestAuth> {
  const $CelestAuthType();

  @override
  String get signature => r"Ldev/celest/celest_auth/CelestAuth;";

  @override
  CelestAuth fromRef(jni.JObjectPtr ref) => CelestAuth.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CelestAuthType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CelestAuthType) && other is $CelestAuthType;
  }
}

/// from: android.app.Activity$ScreenCaptureCallback
class Activity_ScreenCaptureCallback extends jni.JObject {
  @override
  late final jni.JObjType<Activity_ScreenCaptureCallback> $type = type;

  Activity_ScreenCaptureCallback.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/app/Activity$ScreenCaptureCallback");

  /// The type which includes information such as the signature of this class.
  static const type = $Activity_ScreenCaptureCallbackType();
  static final _id_onScreenCaptured = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onScreenCaptured", r"()V");

  /// from: public abstract void onScreenCaptured()
  void onScreenCaptured() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onScreenCaptured, jni.JniCallType.voidType, []).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Activity_ScreenCaptureCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onScreenCaptured()V") {
        _$impls[$p]!.onScreenCaptured();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Activity_ScreenCaptureCallback.implement(
    $Activity_ScreenCaptureCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Activity_ScreenCaptureCallback.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"android.app.Activity$ScreenCaptureCallback",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Activity_ScreenCaptureCallbackImpl {
  factory $Activity_ScreenCaptureCallbackImpl({
    required void Function() onScreenCaptured,
  }) = _$Activity_ScreenCaptureCallbackImpl;

  void onScreenCaptured();
}

class _$Activity_ScreenCaptureCallbackImpl
    implements $Activity_ScreenCaptureCallbackImpl {
  _$Activity_ScreenCaptureCallbackImpl({
    required void Function() onScreenCaptured,
  }) : _onScreenCaptured = onScreenCaptured;

  final void Function() _onScreenCaptured;

  void onScreenCaptured() {
    return _onScreenCaptured();
  }
}

final class $Activity_ScreenCaptureCallbackType
    extends jni.JObjType<Activity_ScreenCaptureCallback> {
  const $Activity_ScreenCaptureCallbackType();

  @override
  String get signature => r"Landroid/app/Activity$ScreenCaptureCallback;";

  @override
  Activity_ScreenCaptureCallback fromRef(jni.JObjectPtr ref) =>
      Activity_ScreenCaptureCallback.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Activity_ScreenCaptureCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity_ScreenCaptureCallbackType) &&
        other is $Activity_ScreenCaptureCallbackType;
  }
}

/// from: android.app.Activity
class Activity extends jni.JObject {
  @override
  late final jni.JObjType<Activity> $type = type;

  Activity.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/app/Activity");

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityType();

  /// from: static public final int DEFAULT_KEYS_DIALER
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: static public final int DEFAULT_KEYS_DISABLE
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: static public final int DEFAULT_KEYS_SEARCH_GLOBAL
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: static public final int DEFAULT_KEYS_SEARCH_LOCAL
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: static public final int DEFAULT_KEYS_SHORTCUT
  static const DEFAULT_KEYS_SHORTCUT = 2;

  static final _id_FOCUSED_STATE_SET = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"FOCUSED_STATE_SET",
    r"[I",
  );

  /// from: static protected final int[] FOCUSED_STATE_SET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jint> get FOCUSED_STATE_SET =>
      const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_FOCUSED_STATE_SET,
              jni.JniCallType.objectType)
          .object);

  /// from: static public final int FULLSCREEN_MODE_REQUEST_ENTER
  static const FULLSCREEN_MODE_REQUEST_ENTER = 1;

  /// from: static public final int FULLSCREEN_MODE_REQUEST_EXIT
  static const FULLSCREEN_MODE_REQUEST_EXIT = 0;

  /// from: static public final int OVERRIDE_TRANSITION_CLOSE
  static const OVERRIDE_TRANSITION_CLOSE = 1;

  /// from: static public final int OVERRIDE_TRANSITION_OPEN
  static const OVERRIDE_TRANSITION_OPEN = 0;

  /// from: static public final int RESULT_CANCELED
  static const RESULT_CANCELED = 0;

  /// from: static public final int RESULT_FIRST_USER
  static const RESULT_FIRST_USER = 1;

  /// from: static public final int RESULT_OK
  static const RESULT_OK = -1;

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getIntent", r"()Landroid/content/Intent;");

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIntent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getIntent, jni.JniCallType.objectType, []).object);
  }

  static final _id_setIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setIntent", r"(Landroid/content/Intent;)V");

  /// from: public void setIntent(android.content.Intent intent)
  void setIntent(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setIntent,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_setLocusContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setLocusContext",
      r"(Landroid/content/LocusId;Landroid/os/Bundle;)V");

  /// from: public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)
  void setLocusContext(
    jni.JObject locusId,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setLocusContext,
        jni.JniCallType.voidType,
        [locusId.reference, bundle.reference]).check();
  }

  static final _id_getApplication = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getApplication", r"()Landroid/app/Application;");

  /// from: public final android.app.Application getApplication()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplication() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getApplication, jni.JniCallType.objectType, []).object);
  }

  static final _id_isChild =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isChild", r"()Z");

  /// from: public final boolean isChild()
  bool isChild() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isChild, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getParent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getParent", r"()Landroid/app/Activity;");

  /// from: public final android.app.Activity getParent()
  /// The returned object must be released after use, by calling the [release] method.
  Activity getParent() {
    return const $ActivityType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getParent, jni.JniCallType.objectType, []).object);
  }

  static final _id_getWindowManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getWindowManager", r"()Landroid/view/WindowManager;");

  /// from: public android.view.WindowManager getWindowManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindowManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getWindowManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getWindow = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getWindow", r"()Landroid/view/Window;");

  /// from: public android.view.Window getWindow()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindow() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getWindow, jni.JniCallType.objectType, []).object);
  }

  static final _id_getLoaderManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLoaderManager", r"()Landroid/app/LoaderManager;");

  /// from: public android.app.LoaderManager getLoaderManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLoaderManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLoaderManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCurrentFocus = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCurrentFocus", r"()Landroid/view/View;");

  /// from: public android.view.View getCurrentFocus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCurrentFocus() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCurrentFocus, jni.JniCallType.objectType, []).object);
  }

  static final _id_attachBaseContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"attachBaseContext", r"(Landroid/content/Context;)V");

  /// from: protected void attachBaseContext(android.content.Context context)
  void attachBaseContext(
    Context context,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_attachBaseContext,
        jni.JniCallType.voidType,
        [context.reference]).check();
  }

  static final _id_registerActivityLifecycleCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"registerActivityLifecycleCallbacks",
          r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V");

  /// from: public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void registerActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerActivityLifecycleCallbacks,
        jni.JniCallType.voidType,
        [activityLifecycleCallbacks.reference]).check();
  }

  static final _id_unregisterActivityLifecycleCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterActivityLifecycleCallbacks",
          r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V");

  /// from: public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void unregisterActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterActivityLifecycleCallbacks,
        jni.JniCallType.voidType,
        [activityLifecycleCallbacks.reference]).check();
  }

  static final _id_registerComponentCallbacks = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerComponentCallbacks",
      r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_unregisterComponentCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterComponentCallbacks",
          r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_onCreate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onCreate", r"(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle bundle)
  void onCreate(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onCreate,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_getSplashScreen = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSplashScreen", r"()Landroid/window/SplashScreen;");

  /// from: public final android.window.SplashScreen getSplashScreen()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSplashScreen() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getSplashScreen, jni.JniCallType.objectType, []).object);
  }

  static final _id_onCreate1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"onCreate", r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreate1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onRestoreInstanceState = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onRestoreInstanceState", r"(Landroid/os/Bundle;)V");

  /// from: protected void onRestoreInstanceState(android.os.Bundle bundle)
  void onRestoreInstanceState(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRestoreInstanceState,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onRestoreInstanceState1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onRestoreInstanceState",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onRestoreInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRestoreInstanceState1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onPostCreate = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPostCreate", r"(Landroid/os/Bundle;)V");

  /// from: protected void onPostCreate(android.os.Bundle bundle)
  void onPostCreate(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPostCreate,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_onPostCreate1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPostCreate",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onPostCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPostCreate1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onStart =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onStart", r"()V");

  /// from: protected void onStart()
  void onStart() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStart, jni.JniCallType.voidType, []).check();
  }

  static final _id_onRestart =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onRestart", r"()V");

  /// from: protected void onRestart()
  void onRestart() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onRestart, jni.JniCallType.voidType, []).check();
  }

  static final _id_onStateNotSaved = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onStateNotSaved", r"()V");

  /// from: public void onStateNotSaved()
  void onStateNotSaved() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStateNotSaved, jni.JniCallType.voidType, []).check();
  }

  static final _id_onResume =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onResume", r"()V");

  /// from: protected void onResume()
  void onResume() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onResume, jni.JniCallType.voidType, []).check();
  }

  static final _id_onPostResume = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPostResume", r"()V");

  /// from: protected void onPostResume()
  void onPostResume() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPostResume, jni.JniCallType.voidType, []).check();
  }

  static final _id_onTopResumedActivityChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onTopResumedActivityChanged", r"(Z)V");

  /// from: public void onTopResumedActivityChanged(boolean z)
  void onTopResumedActivityChanged(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onTopResumedActivityChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isVoiceInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isVoiceInteraction", r"()Z");

  /// from: public boolean isVoiceInteraction()
  bool isVoiceInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isVoiceInteraction, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isVoiceInteractionRoot = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isVoiceInteractionRoot", r"()Z");

  /// from: public boolean isVoiceInteractionRoot()
  bool isVoiceInteractionRoot() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isVoiceInteractionRoot, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getVoiceInteractor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getVoiceInteractor",
      r"()Landroid/app/VoiceInteractor;");

  /// from: public android.app.VoiceInteractor getVoiceInteractor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getVoiceInteractor() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getVoiceInteractor,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_isLocalVoiceInteractionSupported = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"isLocalVoiceInteractionSupported", r"()Z");

  /// from: public boolean isLocalVoiceInteractionSupported()
  bool isLocalVoiceInteractionSupported() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isLocalVoiceInteractionSupported,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_startLocalVoiceInteraction = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startLocalVoiceInteraction",
      r"(Landroid/os/Bundle;)V");

  /// from: public void startLocalVoiceInteraction(android.os.Bundle bundle)
  void startLocalVoiceInteraction(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startLocalVoiceInteraction,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onLocalVoiceInteractionStarted = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onLocalVoiceInteractionStarted", r"()V");

  /// from: public void onLocalVoiceInteractionStarted()
  void onLocalVoiceInteractionStarted() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onLocalVoiceInteractionStarted,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_onLocalVoiceInteractionStopped = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onLocalVoiceInteractionStopped", r"()V");

  /// from: public void onLocalVoiceInteractionStopped()
  void onLocalVoiceInteractionStopped() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onLocalVoiceInteractionStopped,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_stopLocalVoiceInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"stopLocalVoiceInteraction", r"()V");

  /// from: public void stopLocalVoiceInteraction()
  void stopLocalVoiceInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_stopLocalVoiceInteraction, jni.JniCallType.voidType, []).check();
  }

  static final _id_onNewIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onNewIntent", r"(Landroid/content/Intent;)V");

  /// from: protected void onNewIntent(android.content.Intent intent)
  void onNewIntent(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onNewIntent,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_onSaveInstanceState = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onSaveInstanceState", r"(Landroid/os/Bundle;)V");

  /// from: protected void onSaveInstanceState(android.os.Bundle bundle)
  void onSaveInstanceState(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSaveInstanceState,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onSaveInstanceState1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onSaveInstanceState",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onSaveInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSaveInstanceState1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onPause =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onPause", r"()V");

  /// from: protected void onPause()
  void onPause() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPause, jni.JniCallType.voidType, []).check();
  }

  static final _id_onUserLeaveHint = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onUserLeaveHint", r"()V");

  /// from: protected void onUserLeaveHint()
  void onUserLeaveHint() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onUserLeaveHint, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateThumbnail = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateThumbnail",
      r"(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z");

  /// from: public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)
  bool onCreateThumbnail(
    jni.JObject bitmap,
    jni.JObject canvas,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateThumbnail,
        jni.JniCallType.booleanType,
        [bitmap.reference, canvas.reference]).boolean;
  }

  static final _id_onCreateDescription = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateDescription", r"()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence onCreateDescription()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDescription() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDescription,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onProvideAssistData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onProvideAssistData", r"(Landroid/os/Bundle;)V");

  /// from: public void onProvideAssistData(android.os.Bundle bundle)
  void onProvideAssistData(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideAssistData,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onProvideAssistContent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onProvideAssistContent",
      r"(Landroid/app/assist/AssistContent;)V");

  /// from: public void onProvideAssistContent(android.app.assist.AssistContent assistContent)
  void onProvideAssistContent(
    jni.JObject assistContent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideAssistContent,
        jni.JniCallType.voidType,
        [assistContent.reference]).check();
  }

  static final _id_onGetDirectActions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onGetDirectActions",
      r"(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V");

  /// from: public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onGetDirectActions(
    CancellationSignal cancellationSignal,
    jni.JObject consumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onGetDirectActions,
        jni.JniCallType.voidType,
        [cancellationSignal.reference, consumer.reference]).check();
  }

  static final _id_onPerformDirectAction = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPerformDirectAction",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V");

  /// from: public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onPerformDirectAction(
    jni.JString string,
    jni.JObject bundle,
    CancellationSignal cancellationSignal,
    jni.JObject consumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPerformDirectAction, jni.JniCallType.voidType, [
      string.reference,
      bundle.reference,
      cancellationSignal.reference,
      consumer.reference
    ]).check();
  }

  static final _id_requestShowKeyboardShortcuts = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestShowKeyboardShortcuts", r"()V");

  /// from: public final void requestShowKeyboardShortcuts()
  void requestShowKeyboardShortcuts() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_requestShowKeyboardShortcuts, jni.JniCallType.voidType, []).check();
  }

  static final _id_dismissKeyboardShortcutsHelper = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"dismissKeyboardShortcutsHelper", r"()V");

  /// from: public final void dismissKeyboardShortcutsHelper()
  void dismissKeyboardShortcutsHelper() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dismissKeyboardShortcutsHelper,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_onProvideKeyboardShortcuts = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onProvideKeyboardShortcuts",
      r"(Ljava/util/List;Landroid/view/Menu;I)V");

  /// from: public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)
  void onProvideKeyboardShortcuts(
    jni.JList<jni.JObject> list,
    jni.JObject menu,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideKeyboardShortcuts,
        jni.JniCallType.voidType,
        [list.reference, menu.reference, jni.JValueInt(i)]).check();
  }

  static final _id_showAssist = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"showAssist", r"(Landroid/os/Bundle;)Z");

  /// from: public boolean showAssist(android.os.Bundle bundle)
  bool showAssist(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_showAssist,
        jni.JniCallType.booleanType, [bundle.reference]).boolean;
  }

  static final _id_onStop =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onStop", r"()V");

  /// from: protected void onStop()
  void onStop() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStop, jni.JniCallType.voidType, []).check();
  }

  static final _id_onDestroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onDestroy", r"()V");

  /// from: protected void onDestroy()
  void onDestroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onDestroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_reportFullyDrawn = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"reportFullyDrawn", r"()V");

  /// from: public void reportFullyDrawn()
  void reportFullyDrawn() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_reportFullyDrawn, jni.JniCallType.voidType, []).check();
  }

  static final _id_onMultiWindowModeChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onMultiWindowModeChanged",
      r"(ZLandroid/content/res/Configuration;)V");

  /// from: public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)
  void onMultiWindowModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMultiWindowModeChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0, configuration.reference]).check();
  }

  static final _id_onMultiWindowModeChanged1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onMultiWindowModeChanged", r"(Z)V");

  /// from: public void onMultiWindowModeChanged(boolean z)
  void onMultiWindowModeChanged1(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMultiWindowModeChanged1,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isInMultiWindowMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isInMultiWindowMode", r"()Z");

  /// from: public boolean isInMultiWindowMode()
  bool isInMultiWindowMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isInMultiWindowMode, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onPictureInPictureModeChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureModeChanged",
          r"(ZLandroid/content/res/Configuration;)V");

  /// from: public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)
  void onPictureInPictureModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureModeChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0, configuration.reference]).check();
  }

  static final _id_onPictureInPictureUiStateChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureUiStateChanged",
          r"(Landroid/app/PictureInPictureUiState;)V");

  /// from: public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)
  void onPictureInPictureUiStateChanged(
    jni.JObject pictureInPictureUiState,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureUiStateChanged,
        jni.JniCallType.voidType,
        [pictureInPictureUiState.reference]).check();
  }

  static final _id_onPictureInPictureModeChanged1 = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onPictureInPictureModeChanged", r"(Z)V");

  /// from: public void onPictureInPictureModeChanged(boolean z)
  void onPictureInPictureModeChanged1(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureModeChanged1,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isInPictureInPictureMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isInPictureInPictureMode", r"()Z");

  /// from: public boolean isInPictureInPictureMode()
  bool isInPictureInPictureMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isInPictureInPictureMode, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_enterPictureInPictureMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enterPictureInPictureMode", r"()V");

  /// from: public void enterPictureInPictureMode()
  void enterPictureInPictureMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_enterPictureInPictureMode, jni.JniCallType.voidType, []).check();
  }

  static final _id_enterPictureInPictureMode1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enterPictureInPictureMode",
      r"(Landroid/app/PictureInPictureParams;)Z");

  /// from: public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)
  bool enterPictureInPictureMode1(
    jni.JObject pictureInPictureParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enterPictureInPictureMode1,
        jni.JniCallType.booleanType,
        [pictureInPictureParams.reference]).boolean;
  }

  static final _id_setPictureInPictureParams = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setPictureInPictureParams",
      r"(Landroid/app/PictureInPictureParams;)V");

  /// from: public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)
  void setPictureInPictureParams(
    jni.JObject pictureInPictureParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setPictureInPictureParams,
        jni.JniCallType.voidType,
        [pictureInPictureParams.reference]).check();
  }

  static final _id_getMaxNumPictureInPictureActions = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"getMaxNumPictureInPictureActions", r"()I");

  /// from: public int getMaxNumPictureInPictureActions()
  int getMaxNumPictureInPictureActions() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getMaxNumPictureInPictureActions,
        jni.JniCallType.intType, []).integer;
  }

  static final _id_onPictureInPictureRequested = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureRequested", r"()Z");

  /// from: public boolean onPictureInPictureRequested()
  bool onPictureInPictureRequested() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureRequested,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_requestFullscreenMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"requestFullscreenMode",
      r"(ILandroid/os/OutcomeReceiver;)V");

  /// from: public void requestFullscreenMode(int i, android.os.OutcomeReceiver outcomeReceiver)
  void requestFullscreenMode(
    int i,
    jni.JObject outcomeReceiver,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestFullscreenMode,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), outcomeReceiver.reference]).check();
  }

  static final _id_setShouldDockBigOverlays = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setShouldDockBigOverlays", r"(Z)V");

  /// from: public void setShouldDockBigOverlays(boolean z)
  void setShouldDockBigOverlays(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setShouldDockBigOverlays,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_shouldDockBigOverlays = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"shouldDockBigOverlays", r"()Z");

  /// from: public boolean shouldDockBigOverlays()
  bool shouldDockBigOverlays() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_shouldDockBigOverlays, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onConfigurationChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onConfigurationChanged",
      r"(Landroid/content/res/Configuration;)V");

  /// from: public void onConfigurationChanged(android.content.res.Configuration configuration)
  void onConfigurationChanged(
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onConfigurationChanged,
        jni.JniCallType.voidType,
        [configuration.reference]).check();
  }

  static final _id_getChangingConfigurations = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getChangingConfigurations", r"()I");

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getChangingConfigurations, jni.JniCallType.intType, []).integer;
  }

  static final _id_getLastNonConfigurationInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLastNonConfigurationInstance",
          r"()Ljava/lang/Object;");

  /// from: public java.lang.Object getLastNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLastNonConfigurationInstance() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLastNonConfigurationInstance,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onRetainNonConfigurationInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onRetainNonConfigurationInstance",
          r"()Ljava/lang/Object;");

  /// from: public java.lang.Object onRetainNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onRetainNonConfigurationInstance() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRetainNonConfigurationInstance,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onLowMemory =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onLowMemory", r"()V");

  /// from: public void onLowMemory()
  void onLowMemory() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onLowMemory, jni.JniCallType.voidType, []).check();
  }

  static final _id_onTrimMemory = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onTrimMemory", r"(I)V");

  /// from: public void onTrimMemory(int i)
  void onTrimMemory(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTrimMemory,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getFragmentManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getFragmentManager",
      r"()Landroid/app/FragmentManager;");

  /// from: public android.app.FragmentManager getFragmentManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFragmentManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getFragmentManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onAttachFragment = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onAttachFragment", r"(Landroid/app/Fragment;)V");

  /// from: public void onAttachFragment(android.app.Fragment fragment)
  void onAttachFragment(
    jni.JObject fragment,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onAttachFragment,
        jni.JniCallType.voidType, [fragment.reference]).check();
  }

  static final _id_managedQuery = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"managedQuery",
      r"(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;");

  /// from: public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject managedQuery(
    jni.JObject uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_managedQuery, jni.JniCallType.objectType, [
      uri.reference,
      strings.reference,
      string.reference,
      strings1.reference,
      string1.reference
    ]).object);
  }

  static final _id_startManagingCursor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startManagingCursor",
      r"(Landroid/database/Cursor;)V");

  /// from: public void startManagingCursor(android.database.Cursor cursor)
  void startManagingCursor(
    jni.JObject cursor,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startManagingCursor,
        jni.JniCallType.voidType,
        [cursor.reference]).check();
  }

  static final _id_stopManagingCursor = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"stopManagingCursor", r"(Landroid/database/Cursor;)V");

  /// from: public void stopManagingCursor(android.database.Cursor cursor)
  void stopManagingCursor(
    jni.JObject cursor,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_stopManagingCursor,
        jni.JniCallType.voidType,
        [cursor.reference]).check();
  }

  static final _id_findViewById = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"findViewById", r"(I)Landroid/view/View;");

  /// from: public T findViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T findViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_findViewById,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_requireViewById = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"requireViewById", r"(I)Landroid/view/View;");

  /// from: public final T requireViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T requireViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requireViewById,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getActionBar = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getActionBar", r"()Landroid/app/ActionBar;");

  /// from: public android.app.ActionBar getActionBar()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActionBar() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getActionBar, jni.JniCallType.objectType, []).object);
  }

  static final _id_setActionBar = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setActionBar", r"(Landroid/widget/Toolbar;)V");

  /// from: public void setActionBar(android.widget.Toolbar toolbar)
  void setActionBar(
    jni.JObject toolbar,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setActionBar,
        jni.JniCallType.voidType, [toolbar.reference]).check();
  }

  static final _id_setContentView = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setContentView", r"(I)V");

  /// from: public void setContentView(int i)
  void setContentView(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setContentView,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setContentView1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setContentView", r"(Landroid/view/View;)V");

  /// from: public void setContentView(android.view.View view)
  void setContentView1(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setContentView1,
        jni.JniCallType.voidType, [view.reference]).check();
  }

  static final _id_setContentView2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setContentView",
      r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V");

  /// from: public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void setContentView2(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setContentView2,
        jni.JniCallType.voidType,
        [view.reference, layoutParams.reference]).check();
  }

  static final _id_addContentView = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addContentView",
      r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V");

  /// from: public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void addContentView(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addContentView,
        jni.JniCallType.voidType,
        [view.reference, layoutParams.reference]).check();
  }

  static final _id_getContentTransitionManager = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getContentTransitionManager",
          r"()Landroid/transition/TransitionManager;");

  /// from: public android.transition.TransitionManager getContentTransitionManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentTransitionManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getContentTransitionManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setContentTransitionManager = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setContentTransitionManager",
          r"(Landroid/transition/TransitionManager;)V");

  /// from: public void setContentTransitionManager(android.transition.TransitionManager transitionManager)
  void setContentTransitionManager(
    jni.JObject transitionManager,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setContentTransitionManager,
        jni.JniCallType.voidType,
        [transitionManager.reference]).check();
  }

  static final _id_getContentScene = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getContentScene", r"()Landroid/transition/Scene;");

  /// from: public android.transition.Scene getContentScene()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentScene() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getContentScene, jni.JniCallType.objectType, []).object);
  }

  static final _id_setFinishOnTouchOutside = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFinishOnTouchOutside", r"(Z)V");

  /// from: public void setFinishOnTouchOutside(boolean z)
  void setFinishOnTouchOutside(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFinishOnTouchOutside,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setDefaultKeyMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setDefaultKeyMode", r"(I)V");

  /// from: public final void setDefaultKeyMode(int i)
  void setDefaultKeyMode(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setDefaultKeyMode,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_onKeyDown = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyDown", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)
  bool onKeyDown(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyDown,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyLongPress = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyLongPress", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)
  bool onKeyLongPress(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyLongPress,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyUp = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyUp", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)
  bool onKeyUp(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyUp,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyMultiple = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyMultiple", r"(IILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)
  bool onKeyMultiple(
    int i,
    int i1,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyMultiple,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), jni.JValueInt(i1), keyEvent.reference]).boolean;
  }

  static final _id_onBackPressed = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onBackPressed", r"()V");

  /// from: public void onBackPressed()
  void onBackPressed() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onBackPressed, jni.JniCallType.voidType, []).check();
  }

  static final _id_onKeyShortcut = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyShortcut", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)
  bool onKeyShortcut(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyShortcut,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onTouchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTouchEvent", r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTouchEvent,
        jni.JniCallType.booleanType, [motionEvent.reference]).boolean;
  }

  static final _id_onTrackballEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTrackballEvent", r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTrackballEvent(android.view.MotionEvent motionEvent)
  bool onTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTrackballEvent,
        jni.JniCallType.booleanType, [motionEvent.reference]).boolean;
  }

  static final _id_onGenericMotionEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onGenericMotionEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool onGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onGenericMotionEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_onUserInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onUserInteraction", r"()V");

  /// from: public void onUserInteraction()
  void onUserInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onUserInteraction, jni.JniCallType.voidType, []).check();
  }

  static final _id_onWindowAttributesChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onWindowAttributesChanged",
      r"(Landroid/view/WindowManager$LayoutParams;)V");

  /// from: public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)
  void onWindowAttributesChanged(
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowAttributesChanged,
        jni.JniCallType.voidType,
        [layoutParams.reference]).check();
  }

  static final _id_onContentChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onContentChanged", r"()V");

  /// from: public void onContentChanged()
  void onContentChanged() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onContentChanged, jni.JniCallType.voidType, []).check();
  }

  static final _id_onWindowFocusChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onWindowFocusChanged", r"(Z)V");

  /// from: public void onWindowFocusChanged(boolean z)
  void onWindowFocusChanged(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowFocusChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_onAttachedToWindow = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onAttachedToWindow", r"()V");

  /// from: public void onAttachedToWindow()
  void onAttachedToWindow() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onAttachedToWindow, jni.JniCallType.voidType, []).check();
  }

  static final _id_onDetachedFromWindow = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onDetachedFromWindow", r"()V");

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onDetachedFromWindow, jni.JniCallType.voidType, []).check();
  }

  static final _id_hasWindowFocus = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasWindowFocus", r"()Z");

  /// from: public boolean hasWindowFocus()
  bool hasWindowFocus() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasWindowFocus, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_dispatchKeyEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"dispatchKeyEvent", r"(Landroid/view/KeyEvent;)Z");

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyEvent(
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_dispatchKeyEvent,
        jni.JniCallType.booleanType, [keyEvent.reference]).boolean;
  }

  static final _id_dispatchKeyShortcutEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchKeyShortcutEvent",
      r"(Landroid/view/KeyEvent;)Z");

  /// from: public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyShortcutEvent(
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchKeyShortcutEvent,
        jni.JniCallType.booleanType,
        [keyEvent.reference]).boolean;
  }

  static final _id_dispatchTouchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchTouchEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)
  bool dispatchTouchEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchTouchEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchTrackballEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchTrackballEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)
  bool dispatchTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchTrackballEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchGenericMotionEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchGenericMotionEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool dispatchGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchGenericMotionEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"dispatchPopulateAccessibilityEvent",
          r"(Landroid/view/accessibility/AccessibilityEvent;)Z");

  /// from: public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)
  bool dispatchPopulateAccessibilityEvent(
    jni.JObject accessibilityEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchPopulateAccessibilityEvent,
        jni.JniCallType.booleanType,
        [accessibilityEvent.reference]).boolean;
  }

  static final _id_onCreatePanelView = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreatePanelView", r"(I)Landroid/view/View;");

  /// from: public android.view.View onCreatePanelView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreatePanelView(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreatePanelView,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_onCreatePanelMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreatePanelMenu", r"(ILandroid/view/Menu;)Z");

  /// from: public boolean onCreatePanelMenu(int i, android.view.Menu menu)
  bool onCreatePanelMenu(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreatePanelMenu,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menu.reference]).boolean;
  }

  static final _id_onPreparePanel = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPreparePanel",
      r"(ILandroid/view/View;Landroid/view/Menu;)Z");

  /// from: public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)
  bool onPreparePanel(
    int i,
    jni.JObject view,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPreparePanel,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), view.reference, menu.reference]).boolean;
  }

  static final _id_onMenuOpened = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onMenuOpened", r"(ILandroid/view/Menu;)Z");

  /// from: public boolean onMenuOpened(int i, android.view.Menu menu)
  bool onMenuOpened(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMenuOpened,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menu.reference]).boolean;
  }

  static final _id_onMenuItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onMenuItemSelected", r"(ILandroid/view/MenuItem;)Z");

  /// from: public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)
  bool onMenuItemSelected(
    int i,
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMenuItemSelected,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menuItem.reference]).boolean;
  }

  static final _id_onPanelClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPanelClosed", r"(ILandroid/view/Menu;)V");

  /// from: public void onPanelClosed(int i, android.view.Menu menu)
  void onPanelClosed(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPanelClosed,
        jni.JniCallType.voidType, [jni.JValueInt(i), menu.reference]).check();
  }

  static final _id_invalidateOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"invalidateOptionsMenu", r"()V");

  /// from: public void invalidateOptionsMenu()
  void invalidateOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_invalidateOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateOptionsMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateOptionsMenu", r"(Landroid/view/Menu;)Z");

  /// from: public boolean onCreateOptionsMenu(android.view.Menu menu)
  bool onCreateOptionsMenu(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateOptionsMenu,
        jni.JniCallType.booleanType,
        [menu.reference]).boolean;
  }

  static final _id_onPrepareOptionsMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPrepareOptionsMenu", r"(Landroid/view/Menu;)Z");

  /// from: public boolean onPrepareOptionsMenu(android.view.Menu menu)
  bool onPrepareOptionsMenu(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareOptionsMenu,
        jni.JniCallType.booleanType,
        [menu.reference]).boolean;
  }

  static final _id_onOptionsItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onOptionsItemSelected",
      r"(Landroid/view/MenuItem;)Z");

  /// from: public boolean onOptionsItemSelected(android.view.MenuItem menuItem)
  bool onOptionsItemSelected(
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onOptionsItemSelected,
        jni.JniCallType.booleanType,
        [menuItem.reference]).boolean;
  }

  static final _id_onNavigateUp = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onNavigateUp", r"()Z");

  /// from: public boolean onNavigateUp()
  bool onNavigateUp() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onNavigateUp, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onNavigateUpFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onNavigateUpFromChild", r"(Landroid/app/Activity;)Z");

  /// from: public boolean onNavigateUpFromChild(android.app.Activity activity)
  bool onNavigateUpFromChild(
    Activity activity,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onNavigateUpFromChild,
        jni.JniCallType.booleanType,
        [activity.reference]).boolean;
  }

  static final _id_onCreateNavigateUpTaskStack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onCreateNavigateUpTaskStack",
          r"(Landroid/app/TaskStackBuilder;)V");

  /// from: public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onCreateNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateNavigateUpTaskStack,
        jni.JniCallType.voidType,
        [taskStackBuilder.reference]).check();
  }

  static final _id_onPrepareNavigateUpTaskStack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPrepareNavigateUpTaskStack",
          r"(Landroid/app/TaskStackBuilder;)V");

  /// from: public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onPrepareNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareNavigateUpTaskStack,
        jni.JniCallType.voidType,
        [taskStackBuilder.reference]).check();
  }

  static final _id_onOptionsMenuClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onOptionsMenuClosed", r"(Landroid/view/Menu;)V");

  /// from: public void onOptionsMenuClosed(android.view.Menu menu)
  void onOptionsMenuClosed(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onOptionsMenuClosed,
        jni.JniCallType.voidType,
        [menu.reference]).check();
  }

  static final _id_openOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"openOptionsMenu", r"()V");

  /// from: public void openOptionsMenu()
  void openOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_openOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_closeOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"closeOptionsMenu", r"()V");

  /// from: public void closeOptionsMenu()
  void closeOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_closeOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateContextMenu",
      r"(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V");

  /// from: public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)
  void onCreateContextMenu(
    jni.JObject contextMenu,
    jni.JObject view,
    jni.JObject contextMenuInfo,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onCreateContextMenu, jni.JniCallType.voidType, [
      contextMenu.reference,
      view.reference,
      contextMenuInfo.reference
    ]).check();
  }

  static final _id_registerForContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"registerForContextMenu", r"(Landroid/view/View;)V");

  /// from: public void registerForContextMenu(android.view.View view)
  void registerForContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerForContextMenu,
        jni.JniCallType.voidType,
        [view.reference]).check();
  }

  static final _id_unregisterForContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"unregisterForContextMenu", r"(Landroid/view/View;)V");

  /// from: public void unregisterForContextMenu(android.view.View view)
  void unregisterForContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterForContextMenu,
        jni.JniCallType.voidType,
        [view.reference]).check();
  }

  static final _id_openContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"openContextMenu", r"(Landroid/view/View;)V");

  /// from: public void openContextMenu(android.view.View view)
  void openContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_openContextMenu,
        jni.JniCallType.voidType, [view.reference]).check();
  }

  static final _id_closeContextMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"closeContextMenu", r"()V");

  /// from: public void closeContextMenu()
  void closeContextMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_closeContextMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onContextItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onContextItemSelected",
      r"(Landroid/view/MenuItem;)Z");

  /// from: public boolean onContextItemSelected(android.view.MenuItem menuItem)
  bool onContextItemSelected(
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onContextItemSelected,
        jni.JniCallType.booleanType,
        [menuItem.reference]).boolean;
  }

  static final _id_onContextMenuClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onContextMenuClosed", r"(Landroid/view/Menu;)V");

  /// from: public void onContextMenuClosed(android.view.Menu menu)
  void onContextMenuClosed(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onContextMenuClosed,
        jni.JniCallType.voidType,
        [menu.reference]).check();
  }

  static final _id_onCreateDialog = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateDialog", r"(I)Landroid/app/Dialog;");

  /// from: protected android.app.Dialog onCreateDialog(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDialog,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_onCreateDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateDialog",
      r"(ILandroid/os/Bundle;)Landroid/app/Dialog;");

  /// from: protected android.app.Dialog onCreateDialog(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDialog1,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), bundle.reference]).object);
  }

  static final _id_onPrepareDialog = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPrepareDialog", r"(ILandroid/app/Dialog;)V");

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog)
  void onPrepareDialog(
    int i,
    jni.JObject dialog,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPrepareDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i), dialog.reference]).check();
  }

  static final _id_onPrepareDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPrepareDialog",
      r"(ILandroid/app/Dialog;Landroid/os/Bundle;)V");

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog, android.os.Bundle bundle)
  void onPrepareDialog1(
    int i,
    jni.JObject dialog,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareDialog1,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), dialog.reference, bundle.reference]).check();
  }

  static final _id_showDialog =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"showDialog", r"(I)V");

  /// from: public final void showDialog(int i)
  void showDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_showDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_showDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"showDialog", r"(ILandroid/os/Bundle;)Z");

  /// from: public final boolean showDialog(int i, android.os.Bundle bundle)
  bool showDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_showDialog1,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), bundle.reference]).boolean;
  }

  static final _id_dismissDialog = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"dismissDialog", r"(I)V");

  /// from: public final void dismissDialog(int i)
  void dismissDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_dismissDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_removeDialog = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"removeDialog", r"(I)V");

  /// from: public final void removeDialog(int i)
  void removeDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_removeDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_onSearchRequested = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onSearchRequested", r"(Landroid/view/SearchEvent;)Z");

  /// from: public boolean onSearchRequested(android.view.SearchEvent searchEvent)
  bool onSearchRequested(
    jni.JObject searchEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSearchRequested,
        jni.JniCallType.booleanType,
        [searchEvent.reference]).boolean;
  }

  static final _id_onSearchRequested1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onSearchRequested", r"()Z");

  /// from: public boolean onSearchRequested()
  bool onSearchRequested1() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onSearchRequested1, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getSearchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSearchEvent", r"()Landroid/view/SearchEvent;");

  /// from: public final android.view.SearchEvent getSearchEvent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSearchEvent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getSearchEvent, jni.JniCallType.objectType, []).object);
  }

  static final _id_startSearch = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startSearch",
      r"(Ljava/lang/String;ZLandroid/os/Bundle;Z)V");

  /// from: public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)
  void startSearch(
    jni.JString string,
    bool z,
    jni.JObject bundle,
    bool z1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startSearch,
        jni.JniCallType.voidType,
        [string.reference, z ? 1 : 0, bundle.reference, z1 ? 1 : 0]).check();
  }

  static final _id_triggerSearch = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"triggerSearch",
      r"(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void triggerSearch(java.lang.String string, android.os.Bundle bundle)
  void triggerSearch(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_triggerSearch,
        jni.JniCallType.voidType, [string.reference, bundle.reference]).check();
  }

  static final _id_takeKeyEvents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"takeKeyEvents", r"(Z)V");

  /// from: public void takeKeyEvents(boolean z)
  void takeKeyEvents(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_takeKeyEvents,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_requestWindowFeature = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestWindowFeature", r"(I)Z");

  /// from: public final boolean requestWindowFeature(int i)
  bool requestWindowFeature(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestWindowFeature,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i)]).boolean;
  }

  static final _id_setFeatureDrawableResource = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFeatureDrawableResource", r"(II)V");

  /// from: public final void setFeatureDrawableResource(int i, int i1)
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableResource,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_setFeatureDrawableUri = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setFeatureDrawableUri", r"(ILandroid/net/Uri;)V");

  /// from: public final void setFeatureDrawableUri(int i, android.net.Uri uri)
  void setFeatureDrawableUri(
    int i,
    jni.JObject uri,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableUri,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), uri.reference]).check();
  }

  static final _id_setFeatureDrawable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setFeatureDrawable",
      r"(ILandroid/graphics/drawable/Drawable;)V");

  /// from: public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)
  void setFeatureDrawable(
    int i,
    jni.JObject drawable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawable,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), drawable.reference]).check();
  }

  static final _id_setFeatureDrawableAlpha = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFeatureDrawableAlpha", r"(II)V");

  /// from: public final void setFeatureDrawableAlpha(int i, int i1)
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableAlpha,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_getLayoutInflater = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getLayoutInflater",
      r"()Landroid/view/LayoutInflater;");

  /// from: public android.view.LayoutInflater getLayoutInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLayoutInflater() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLayoutInflater,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getMenuInflater = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getMenuInflater", r"()Landroid/view/MenuInflater;");

  /// from: public android.view.MenuInflater getMenuInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMenuInflater() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMenuInflater, jni.JniCallType.objectType, []).object);
  }

  static final _id_setTheme =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setTheme", r"(I)V");

  /// from: public void setTheme(int i)
  void setTheme(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTheme,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_onApplyThemeResource = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onApplyThemeResource",
      r"(Landroid/content/res/Resources$Theme;IZ)V");

  /// from: protected void onApplyThemeResource(android.content.res.Resources$Theme theme, int i, boolean z)
  void onApplyThemeResource(
    jni.JObject theme,
    int i,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onApplyThemeResource,
        jni.JniCallType.voidType,
        [theme.reference, jni.JValueInt(i), z ? 1 : 0]).check();
  }

  static final _id_requestPermissions = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"requestPermissions", r"([Ljava/lang/String;I)V");

  /// from: public final void requestPermissions(java.lang.String[] strings, int i)
  void requestPermissions(
    jni.JArray<jni.JString> strings,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestPermissions,
        jni.JniCallType.voidType,
        [strings.reference, jni.JValueInt(i)]).check();
  }

  static final _id_onRequestPermissionsResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onRequestPermissionsResult",
      r"(I[Ljava/lang/String;[I)V");

  /// from: public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)
  void onRequestPermissionsResult(
    int i,
    jni.JArray<jni.JString> strings,
    jni.JArray<jni.jint> is0,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRequestPermissionsResult,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), strings.reference, is0.reference]).check();
  }

  static final _id_shouldShowRequestPermissionRationale = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"shouldShowRequestPermissionRationale",
          r"(Ljava/lang/String;)Z");

  /// from: public boolean shouldShowRequestPermissionRationale(java.lang.String string)
  bool shouldShowRequestPermissionRationale(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_shouldShowRequestPermissionRationale,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_startActivityForResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityForResult",
      r"(Landroid/content/Intent;I)V");

  /// from: public void startActivityForResult(android.content.Intent intent, int i)
  void startActivityForResult(
    jni.JObject intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityForResult,
        jni.JniCallType.voidType,
        [intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityForResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityForResult",
      r"(Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityForResult1(
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityForResult1,
        jni.JniCallType.voidType,
        [intent.reference, jni.JValueInt(i), bundle.reference]).check();
  }

  static final _id_isActivityTransitionRunning = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isActivityTransitionRunning", r"()Z");

  /// from: public boolean isActivityTransitionRunning()
  bool isActivityTransitionRunning() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isActivityTransitionRunning,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_startIntentSenderForResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderForResult",
      r"(Landroid/content/IntentSender;ILandroid/content/Intent;III)V");

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderForResult(
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderForResult, jni.JniCallType.voidType, [
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_startIntentSenderForResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderForResult",
      r"(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderForResult1(
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderForResult1, jni.JniCallType.voidType, [
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3),
      bundle.reference
    ]).check();
  }

  static final _id_startActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivity", r"(Landroid/content/Intent;)V");

  /// from: public void startActivity(android.content.Intent intent)
  void startActivity(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_startActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivity",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity1,
        jni.JniCallType.voidType, [intent.reference, bundle.reference]).check();
  }

  static final _id_startActivities = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivities", r"([Landroid/content/Intent;)V");

  /// from: public void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<jni.JObject> intents,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivities,
        jni.JniCallType.voidType, [intents.reference]).check();
  }

  static final _id_startActivities1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivities",
      r"([Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<jni.JObject> intents,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivities1,
        jni.JniCallType.voidType,
        [intents.reference, bundle.reference]).check();
  }

  static final _id_startIntentSender = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V");

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).check();
  }

  static final _id_startIntentSender1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender1, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      bundle.reference
    ]).check();
  }

  static final _id_startActivityIfNeeded = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityIfNeeded",
      r"(Landroid/content/Intent;I)Z");

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i)
  bool startActivityIfNeeded(
    jni.JObject intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityIfNeeded,
        jni.JniCallType.booleanType,
        [intent.reference, jni.JValueInt(i)]).boolean;
  }

  static final _id_startActivityIfNeeded1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityIfNeeded",
      r"(Landroid/content/Intent;ILandroid/os/Bundle;)Z");

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)
  bool startActivityIfNeeded1(
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityIfNeeded1,
        jni.JniCallType.booleanType,
        [intent.reference, jni.JValueInt(i), bundle.reference]).boolean;
  }

  static final _id_startNextMatchingActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startNextMatchingActivity",
      r"(Landroid/content/Intent;)Z");

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent)
  bool startNextMatchingActivity(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startNextMatchingActivity,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_startNextMatchingActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startNextMatchingActivity",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)Z");

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)
  bool startNextMatchingActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startNextMatchingActivity1,
        jni.JniCallType.booleanType,
        [intent.reference, bundle.reference]).boolean;
  }

  static final _id_startActivityFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;I)V");

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)
  void startActivityFromChild(
    Activity activity,
    jni.JObject intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityFromChild,
        jni.JniCallType.voidType,
        [activity.reference, intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityFromChild1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromChild1(
    Activity activity,
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startActivityFromChild1, jni.JniCallType.voidType, [
      activity.reference,
      intent.reference,
      jni.JValueInt(i),
      bundle.reference
    ]).check();
  }

  static final _id_startActivityFromFragment = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromFragment",
      r"(Landroid/app/Fragment;Landroid/content/Intent;I)V");

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)
  void startActivityFromFragment(
    jni.JObject fragment,
    jni.JObject intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityFromFragment,
        jni.JniCallType.voidType,
        [fragment.reference, intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityFromFragment1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromFragment",
      r"(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromFragment1(
    jni.JObject fragment,
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startActivityFromFragment1, jni.JniCallType.voidType, [
      fragment.reference,
      intent.reference,
      jni.JValueInt(i),
      bundle.reference
    ]).check();
  }

  static final _id_startIntentSenderFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderFromChild",
      r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V");

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderFromChild(
    Activity activity,
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderFromChild, jni.JniCallType.voidType, [
      activity.reference,
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_startIntentSenderFromChild1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderFromChild",
      r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderFromChild1(
    Activity activity,
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderFromChild1, jni.JniCallType.voidType, [
      activity.reference,
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3),
      bundle.reference
    ]).check();
  }

  static final _id_overrideActivityTransition = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"overrideActivityTransition", r"(III)V");

  /// from: public void overrideActivityTransition(int i, int i1, int i2)
  void overrideActivityTransition(
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overrideActivityTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueInt(i2)]).check();
  }

  static final _id_overrideActivityTransition1 = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"overrideActivityTransition", r"(IIII)V");

  /// from: public void overrideActivityTransition(int i, int i1, int i2, int i3)
  void overrideActivityTransition1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_overrideActivityTransition1, jni.JniCallType.voidType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_clearOverrideActivityTransition = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"clearOverrideActivityTransition", r"(I)V");

  /// from: public void clearOverrideActivityTransition(int i)
  void clearOverrideActivityTransition(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_clearOverrideActivityTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_overridePendingTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"overridePendingTransition", r"(II)V");

  /// from: public void overridePendingTransition(int i, int i1)
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overridePendingTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_overridePendingTransition1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"overridePendingTransition", r"(III)V");

  /// from: public void overridePendingTransition(int i, int i1, int i2)
  void overridePendingTransition1(
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overridePendingTransition1,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueInt(i2)]).check();
  }

  static final _id_setResult =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setResult", r"(I)V");

  /// from: public final void setResult(int i)
  void setResult(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setResult,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setResult", r"(ILandroid/content/Intent;)V");

  /// from: public final void setResult(int i, android.content.Intent intent)
  void setResult1(
    int i,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setResult1,
        jni.JniCallType.voidType, [jni.JValueInt(i), intent.reference]).check();
  }

  static final _id_getReferrer = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getReferrer", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri getReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getReferrer() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getReferrer, jni.JniCallType.objectType, []).object);
  }

  static final _id_onProvideReferrer = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onProvideReferrer", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri onProvideReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onProvideReferrer() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideReferrer,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCallingPackage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCallingPackage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getCallingPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCallingPackage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCallingPackage,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCallingActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCallingActivity",
      r"()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getCallingActivity()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCallingActivity() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCallingActivity,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getLaunchedFromUid = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLaunchedFromUid", r"()I");

  /// from: public int getLaunchedFromUid()
  int getLaunchedFromUid() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getLaunchedFromUid, jni.JniCallType.intType, []).integer;
  }

  static final _id_getLaunchedFromPackage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLaunchedFromPackage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getLaunchedFromPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLaunchedFromPackage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLaunchedFromPackage,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setVisible =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setVisible", r"(Z)V");

  /// from: public void setVisible(boolean z)
  void setVisible(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setVisible,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_isFinishing =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isFinishing", r"()Z");

  /// from: public boolean isFinishing()
  bool isFinishing() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isFinishing, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isDestroyed =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isDestroyed", r"()Z");

  /// from: public boolean isDestroyed()
  bool isDestroyed() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isDestroyed, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isChangingConfigurations = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isChangingConfigurations", r"()Z");

  /// from: public boolean isChangingConfigurations()
  bool isChangingConfigurations() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isChangingConfigurations, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_recreate =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"recreate", r"()V");

  /// from: public void recreate()
  void recreate() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_recreate, jni.JniCallType.voidType, []).check();
  }

  static final _id_finish =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finish", r"()V");

  /// from: public void finish()
  void finish() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finish, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishAffinity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAffinity", r"()V");

  /// from: public void finishAffinity()
  void finishAffinity() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finishAffinity, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"finishFromChild", r"(Landroid/app/Activity;)V");

  /// from: public void finishFromChild(android.app.Activity activity)
  void finishFromChild(
    Activity activity,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_finishFromChild,
        jni.JniCallType.voidType, [activity.reference]).check();
  }

  static final _id_finishAfterTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAfterTransition", r"()V");

  /// from: public void finishAfterTransition()
  void finishAfterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_finishAfterTransition, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishActivity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishActivity", r"(I)V");

  /// from: public void finishActivity(int i)
  void finishActivity(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_finishActivity,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_finishActivityFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"finishActivityFromChild",
      r"(Landroid/app/Activity;I)V");

  /// from: public void finishActivityFromChild(android.app.Activity activity, int i)
  void finishActivityFromChild(
    Activity activity,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_finishActivityFromChild,
        jni.JniCallType.voidType,
        [activity.reference, jni.JValueInt(i)]).check();
  }

  static final _id_finishAndRemoveTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAndRemoveTask", r"()V");

  /// from: public void finishAndRemoveTask()
  void finishAndRemoveTask() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_finishAndRemoveTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_releaseInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"releaseInstance", r"()Z");

  /// from: public boolean releaseInstance()
  bool releaseInstance() {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_releaseInstance,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onActivityResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onActivityResult", r"(IILandroid/content/Intent;)V");

  /// from: protected void onActivityResult(int i, int i1, android.content.Intent intent)
  void onActivityResult(
    int i,
    int i1,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActivityResult,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), intent.reference]).check();
  }

  static final _id_onActivityReenter = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onActivityReenter", r"(ILandroid/content/Intent;)V");

  /// from: public void onActivityReenter(int i, android.content.Intent intent)
  void onActivityReenter(
    int i,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActivityReenter,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), intent.reference]).check();
  }

  static final _id_createPendingResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createPendingResult",
      r"(ILandroid/content/Intent;I)Landroid/app/PendingIntent;");

  /// from: public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createPendingResult(
    int i,
    jni.JObject intent,
    int i1,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createPendingResult,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), intent.reference, jni.JValueInt(i1)]).object);
  }

  static final _id_setRequestedOrientation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setRequestedOrientation", r"(I)V");

  /// from: public void setRequestedOrientation(int i)
  void setRequestedOrientation(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setRequestedOrientation,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_getRequestedOrientation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getRequestedOrientation", r"()I");

  /// from: public int getRequestedOrientation()
  int getRequestedOrientation() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getRequestedOrientation, jni.JniCallType.intType, []).integer;
  }

  static final _id_getTaskId =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getTaskId", r"()I");

  /// from: public int getTaskId()
  int getTaskId() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTaskId, jni.JniCallType.intType, []).integer;
  }

  static final _id_isTaskRoot =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isTaskRoot", r"()Z");

  /// from: public boolean isTaskRoot()
  bool isTaskRoot() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isTaskRoot, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_moveTaskToBack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"moveTaskToBack", r"(Z)Z");

  /// from: public boolean moveTaskToBack(boolean z)
  bool moveTaskToBack(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_moveTaskToBack,
        jni.JniCallType.booleanType, [z ? 1 : 0]).boolean;
  }

  static final _id_getLocalClassName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLocalClassName", r"()Ljava/lang/String;");

  /// from: public java.lang.String getLocalClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalClassName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLocalClassName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getComponentName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getComponentName",
      r"()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponentName() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getComponentName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPreferences = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPreferences",
      r"(I)Landroid/content/SharedPreferences;");

  /// from: public android.content.SharedPreferences getPreferences(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferences(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPreferences,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_isLaunchedFromBubble = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isLaunchedFromBubble", r"()Z");

  /// from: public boolean isLaunchedFromBubble()
  bool isLaunchedFromBubble() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isLaunchedFromBubble, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getSystemService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemService",
      r"(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemService,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_setTitle = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setTitle", r"(Ljava/lang/CharSequence;)V");

  /// from: public void setTitle(java.lang.CharSequence charSequence)
  void setTitle(
    jni.JObject charSequence,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitle,
        jni.JniCallType.voidType, [charSequence.reference]).check();
  }

  static final _id_setTitle1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setTitle", r"(I)V");

  /// from: public void setTitle(int i)
  void setTitle1(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitle1,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setTitleColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTitleColor", r"(I)V");

  /// from: public void setTitleColor(int i)
  void setTitleColor(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitleColor,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getTitle = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getTitle", r"()Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTitle() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTitle, jni.JniCallType.objectType, []).object);
  }

  static final _id_getTitleColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getTitleColor", r"()I");

  /// from: public final int getTitleColor()
  int getTitleColor() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTitleColor, jni.JniCallType.intType, []).integer;
  }

  static final _id_onTitleChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTitleChanged", r"(Ljava/lang/CharSequence;I)V");

  /// from: protected void onTitleChanged(java.lang.CharSequence charSequence, int i)
  void onTitleChanged(
    jni.JObject charSequence,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onTitleChanged,
        jni.JniCallType.voidType,
        [charSequence.reference, jni.JValueInt(i)]).check();
  }

  static final _id_onChildTitleChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onChildTitleChanged",
      r"(Landroid/app/Activity;Ljava/lang/CharSequence;)V");

  /// from: protected void onChildTitleChanged(android.app.Activity activity, java.lang.CharSequence charSequence)
  void onChildTitleChanged(
    Activity activity,
    jni.JObject charSequence,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onChildTitleChanged,
        jni.JniCallType.voidType,
        [activity.reference, charSequence.reference]).check();
  }

  static final _id_setTaskDescription = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setTaskDescription",
      r"(Landroid/app/ActivityManager$TaskDescription;)V");

  /// from: public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)
  void setTaskDescription(
    jni.JObject taskDescription,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setTaskDescription,
        jni.JniCallType.voidType,
        [taskDescription.reference]).check();
  }

  static final _id_setProgressBarVisibility = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgressBarVisibility", r"(Z)V");

  /// from: public final void setProgressBarVisibility(boolean z)
  void setProgressBarVisibility(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarVisibility,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgressBarIndeterminateVisibility = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"setProgressBarIndeterminateVisibility", r"(Z)V");

  /// from: public final void setProgressBarIndeterminateVisibility(boolean z)
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarIndeterminateVisibility,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgressBarIndeterminate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgressBarIndeterminate", r"(Z)V");

  /// from: public final void setProgressBarIndeterminate(boolean z)
  void setProgressBarIndeterminate(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarIndeterminate,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgress = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgress", r"(I)V");

  /// from: public final void setProgress(int i)
  void setProgress(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setProgress,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setSecondaryProgress = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setSecondaryProgress", r"(I)V");

  /// from: public final void setSecondaryProgress(int i)
  void setSecondaryProgress(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setSecondaryProgress,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_setVolumeControlStream = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setVolumeControlStream", r"(I)V");

  /// from: public final void setVolumeControlStream(int i)
  void setVolumeControlStream(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setVolumeControlStream,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_getVolumeControlStream = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getVolumeControlStream", r"()I");

  /// from: public final int getVolumeControlStream()
  int getVolumeControlStream() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getVolumeControlStream, jni.JniCallType.intType, []).integer;
  }

  static final _id_setMediaController = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setMediaController",
      r"(Landroid/media/session/MediaController;)V");

  /// from: public final void setMediaController(android.media.session.MediaController mediaController)
  void setMediaController(
    jni.JObject mediaController,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setMediaController,
        jni.JniCallType.voidType,
        [mediaController.reference]).check();
  }

  static final _id_getMediaController = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getMediaController",
      r"()Landroid/media/session/MediaController;");

  /// from: public final android.media.session.MediaController getMediaController()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMediaController() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getMediaController,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_runOnUiThread = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"runOnUiThread", r"(Ljava/lang/Runnable;)V");

  /// from: public final void runOnUiThread(java.lang.Runnable runnable)
  void runOnUiThread(
    Runnable runnable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_runOnUiThread,
        jni.JniCallType.voidType, [runnable.reference]).check();
  }

  static final _id_onCreateView = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateView",
      r"(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;");

  /// from: public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView(
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateView,
        jni.JniCallType.objectType,
        [string.reference, context.reference, attributeSet.reference]).object);
  }

  static final _id_onCreateView1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateView",
      r"(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;");

  /// from: public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView1(
    jni.JObject view,
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onCreateView1, jni.JniCallType.objectType, [
      view.reference,
      string.reference,
      context.reference,
      attributeSet.reference
    ]).object);
  }

  static final _id_dump = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dump",
      r"(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V");

  /// from: public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)
  void dump(
    jni.JString string,
    jni.JObject fileDescriptor,
    jni.JObject printWriter,
    jni.JArray<jni.JString> strings,
  ) {
    return jni.Jni.accessors
        .callMethodWithArgs(reference, _id_dump, jni.JniCallType.voidType, [
      string.reference,
      fileDescriptor.reference,
      printWriter.reference,
      strings.reference
    ]).check();
  }

  static final _id_isImmersive =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isImmersive", r"()Z");

  /// from: public boolean isImmersive()
  bool isImmersive() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isImmersive, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_setTranslucent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTranslucent", r"(Z)Z");

  /// from: public boolean setTranslucent(boolean z)
  bool setTranslucent(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTranslucent,
        jni.JniCallType.booleanType, [z ? 1 : 0]).boolean;
  }

  static final _id_requestVisibleBehind = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestVisibleBehind", r"(Z)Z");

  /// from: public boolean requestVisibleBehind(boolean z)
  bool requestVisibleBehind(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestVisibleBehind,
        jni.JniCallType.booleanType,
        [z ? 1 : 0]).boolean;
  }

  static final _id_onVisibleBehindCanceled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onVisibleBehindCanceled", r"()V");

  /// from: public void onVisibleBehindCanceled()
  void onVisibleBehindCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onVisibleBehindCanceled, jni.JniCallType.voidType, []).check();
  }

  static final _id_onEnterAnimationComplete = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onEnterAnimationComplete", r"()V");

  /// from: public void onEnterAnimationComplete()
  void onEnterAnimationComplete() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onEnterAnimationComplete, jni.JniCallType.voidType, []).check();
  }

  static final _id_setImmersive = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setImmersive", r"(Z)V");

  /// from: public void setImmersive(boolean z)
  void setImmersive(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setImmersive,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_setVrModeEnabled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setVrModeEnabled",
      r"(ZLandroid/content/ComponentName;)V");

  /// from: public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)
  void setVrModeEnabled(
    bool z,
    jni.JObject componentName,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setVrModeEnabled,
        jni.JniCallType.voidType, [z ? 1 : 0, componentName.reference]).check();
  }

  static final _id_startActionMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActionMode",
      r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode(
    jni.JObject callback,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActionMode,
        jni.JniCallType.objectType,
        [callback.reference]).object);
  }

  static final _id_startActionMode1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActionMode",
      r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActionMode1,
        jni.JniCallType.objectType,
        [callback.reference, jni.JValueInt(i)]).object);
  }

  static final _id_onWindowStartingActionMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onWindowStartingActionMode",
      r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode(
    jni.JObject callback,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowStartingActionMode,
        jni.JniCallType.objectType,
        [callback.reference]).object);
  }

  static final _id_onWindowStartingActionMode1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onWindowStartingActionMode",
          r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowStartingActionMode1,
        jni.JniCallType.objectType,
        [callback.reference, jni.JValueInt(i)]).object);
  }

  static final _id_onActionModeStarted = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onActionModeStarted",
      r"(Landroid/view/ActionMode;)V");

  /// from: public void onActionModeStarted(android.view.ActionMode actionMode)
  void onActionModeStarted(
    jni.JObject actionMode,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActionModeStarted,
        jni.JniCallType.voidType,
        [actionMode.reference]).check();
  }

  static final _id_onActionModeFinished = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onActionModeFinished",
      r"(Landroid/view/ActionMode;)V");

  /// from: public void onActionModeFinished(android.view.ActionMode actionMode)
  void onActionModeFinished(
    jni.JObject actionMode,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActionModeFinished,
        jni.JniCallType.voidType,
        [actionMode.reference]).check();
  }

  static final _id_shouldUpRecreateTask = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"shouldUpRecreateTask",
      r"(Landroid/content/Intent;)Z");

  /// from: public boolean shouldUpRecreateTask(android.content.Intent intent)
  bool shouldUpRecreateTask(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_shouldUpRecreateTask,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_navigateUpTo = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"navigateUpTo", r"(Landroid/content/Intent;)Z");

  /// from: public boolean navigateUpTo(android.content.Intent intent)
  bool navigateUpTo(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_navigateUpTo,
        jni.JniCallType.booleanType, [intent.reference]).boolean;
  }

  static final _id_navigateUpToFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"navigateUpToFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;)Z");

  /// from: public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)
  bool navigateUpToFromChild(
    Activity activity,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_navigateUpToFromChild,
        jni.JniCallType.booleanType,
        [activity.reference, intent.reference]).boolean;
  }

  static final _id_getParentActivityIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParentActivityIntent",
      r"()Landroid/content/Intent;");

  /// from: public android.content.Intent getParentActivityIntent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParentActivityIntent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParentActivityIntent,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setEnterSharedElementCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setEnterSharedElementCallback",
          r"(Landroid/app/SharedElementCallback;)V");

  /// from: public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setEnterSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setEnterSharedElementCallback,
        jni.JniCallType.voidType,
        [sharedElementCallback.reference]).check();
  }

  static final _id_setExitSharedElementCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setExitSharedElementCallback",
          r"(Landroid/app/SharedElementCallback;)V");

  /// from: public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setExitSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setExitSharedElementCallback,
        jni.JniCallType.voidType,
        [sharedElementCallback.reference]).check();
  }

  static final _id_postponeEnterTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"postponeEnterTransition", r"()V");

  /// from: public void postponeEnterTransition()
  void postponeEnterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_postponeEnterTransition, jni.JniCallType.voidType, []).check();
  }

  static final _id_startPostponedEnterTransition = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"startPostponedEnterTransition", r"()V");

  /// from: public void startPostponedEnterTransition()
  void startPostponedEnterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startPostponedEnterTransition,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_requestDragAndDropPermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestDragAndDropPermissions",
          r"(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;");

  /// from: public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject requestDragAndDropPermissions(
    jni.JObject dragEvent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestDragAndDropPermissions,
        jni.JniCallType.objectType,
        [dragEvent.reference]).object);
  }

  static final _id_startLockTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"startLockTask", r"()V");

  /// from: public void startLockTask()
  void startLockTask() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startLockTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_stopLockTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"stopLockTask", r"()V");

  /// from: public void stopLockTask()
  void stopLockTask() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_stopLockTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_showLockTaskEscapeMessage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"showLockTaskEscapeMessage", r"()V");

  /// from: public void showLockTaskEscapeMessage()
  void showLockTaskEscapeMessage() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_showLockTaskEscapeMessage, jni.JniCallType.voidType, []).check();
  }

  static final _id_setRecentsScreenshotEnabled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setRecentsScreenshotEnabled", r"(Z)V");

  /// from: public void setRecentsScreenshotEnabled(boolean z)
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setRecentsScreenshotEnabled,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setShowWhenLocked = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setShowWhenLocked", r"(Z)V");

  /// from: public void setShowWhenLocked(boolean z)
  void setShowWhenLocked(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_setShowWhenLocked, jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_setInheritShowWhenLocked = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setInheritShowWhenLocked", r"(Z)V");

  /// from: public void setInheritShowWhenLocked(boolean z)
  void setInheritShowWhenLocked(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setInheritShowWhenLocked,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setTurnScreenOn = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTurnScreenOn", r"(Z)V");

  /// from: public void setTurnScreenOn(boolean z)
  void setTurnScreenOn(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTurnScreenOn,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_getOnBackInvokedDispatcher = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getOnBackInvokedDispatcher",
      r"()Landroid/window/OnBackInvokedDispatcher;");

  /// from: public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getOnBackInvokedDispatcher() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getOnBackInvokedDispatcher,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_registerScreenCaptureCallback = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerScreenCaptureCallback",
      r"(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V");

  /// from: public void registerScreenCaptureCallback(java.util.concurrent.Executor executor, android.app.Activity$ScreenCaptureCallback screenCaptureCallback)
  void registerScreenCaptureCallback(
    jni.JObject executor,
    Activity_ScreenCaptureCallback screenCaptureCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerScreenCaptureCallback,
        jni.JniCallType.voidType,
        [executor.reference, screenCaptureCallback.reference]).check();
  }

  static final _id_unregisterScreenCaptureCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterScreenCaptureCallback",
          r"(Landroid/app/Activity$ScreenCaptureCallback;)V");

  /// from: public void unregisterScreenCaptureCallback(android.app.Activity$ScreenCaptureCallback screenCaptureCallback)
  void unregisterScreenCaptureCallback(
    Activity_ScreenCaptureCallback screenCaptureCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterScreenCaptureCallback,
        jni.JniCallType.voidType,
        [screenCaptureCallback.reference]).check();
  }
}

final class $ActivityType extends jni.JObjType<Activity> {
  const $ActivityType();

  @override
  String get signature => r"Landroid/app/Activity;";

  @override
  Activity fromRef(jni.JObjectPtr ref) => Activity.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ActivityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityType) && other is $ActivityType;
  }
}

/// from: android.content.Context$BindServiceFlags
class Context_BindServiceFlags extends jni.JObject {
  @override
  late final jni.JObjType<Context_BindServiceFlags> $type = type;

  Context_BindServiceFlags.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/content/Context$BindServiceFlags");

  /// The type which includes information such as the signature of this class.
  static const type = $Context_BindServiceFlagsType();
  static final _id_of = jni.Jni.accessors.getStaticMethodIDOf(_class.reference,
      r"of", r"(J)Landroid/content/Context$BindServiceFlags;");

  /// from: static public android.content.Context$BindServiceFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Context_BindServiceFlags of(
    int j,
  ) {
    return const $Context_BindServiceFlagsType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_of, jni.JniCallType.objectType, [j]).object);
  }
}

final class $Context_BindServiceFlagsType
    extends jni.JObjType<Context_BindServiceFlags> {
  const $Context_BindServiceFlagsType();

  @override
  String get signature => r"Landroid/content/Context$BindServiceFlags;";

  @override
  Context_BindServiceFlags fromRef(jni.JObjectPtr ref) =>
      Context_BindServiceFlags.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Context_BindServiceFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context_BindServiceFlagsType) &&
        other is $Context_BindServiceFlagsType;
  }
}

/// from: android.content.Context
class Context extends jni.JObject {
  @override
  late final jni.JObjType<Context> $type = type;

  Context.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/content/Context");

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();

  /// from: static public final java.lang.String ACCESSIBILITY_SERVICE
  static const ACCESSIBILITY_SERVICE = r"""accessibility""";

  /// from: static public final java.lang.String ACCOUNT_SERVICE
  static const ACCOUNT_SERVICE = r"""account""";

  /// from: static public final java.lang.String ACTIVITY_SERVICE
  static const ACTIVITY_SERVICE = r"""activity""";

  /// from: static public final java.lang.String ALARM_SERVICE
  static const ALARM_SERVICE = r"""alarm""";

  /// from: static public final java.lang.String APPWIDGET_SERVICE
  static const APPWIDGET_SERVICE = r"""appwidget""";

  /// from: static public final java.lang.String APP_OPS_SERVICE
  static const APP_OPS_SERVICE = r"""appops""";

  /// from: static public final java.lang.String APP_SEARCH_SERVICE
  static const APP_SEARCH_SERVICE = r"""app_search""";

  /// from: static public final java.lang.String AUDIO_SERVICE
  static const AUDIO_SERVICE = r"""audio""";

  /// from: static public final java.lang.String BATTERY_SERVICE
  static const BATTERY_SERVICE = r"""batterymanager""";

  /// from: static public final int BIND_ABOVE_CLIENT
  static const BIND_ABOVE_CLIENT = 8;

  /// from: static public final int BIND_ADJUST_WITH_ACTIVITY
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: static public final int BIND_ALLOW_ACTIVITY_STARTS
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: static public final int BIND_ALLOW_OOM_MANAGEMENT
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: static public final int BIND_AUTO_CREATE
  static const BIND_AUTO_CREATE = 1;

  /// from: static public final int BIND_DEBUG_UNBIND
  static const BIND_DEBUG_UNBIND = 2;

  /// from: static public final int BIND_EXTERNAL_SERVICE
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: static public final long BIND_EXTERNAL_SERVICE_LONG
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: static public final int BIND_IMPORTANT
  static const BIND_IMPORTANT = 64;

  /// from: static public final int BIND_INCLUDE_CAPABILITIES
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: static public final int BIND_NOT_FOREGROUND
  static const BIND_NOT_FOREGROUND = 4;

  /// from: static public final int BIND_NOT_PERCEPTIBLE
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: static public final int BIND_SHARED_ISOLATED_PROCESS
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: static public final int BIND_WAIVE_PRIORITY
  static const BIND_WAIVE_PRIORITY = 32;

  /// from: static public final java.lang.String BIOMETRIC_SERVICE
  static const BIOMETRIC_SERVICE = r"""biometric""";

  /// from: static public final java.lang.String BLOB_STORE_SERVICE
  static const BLOB_STORE_SERVICE = r"""blob_store""";

  /// from: static public final java.lang.String BLUETOOTH_SERVICE
  static const BLUETOOTH_SERVICE = r"""bluetooth""";

  /// from: static public final java.lang.String BUGREPORT_SERVICE
  static const BUGREPORT_SERVICE = r"""bugreport""";

  /// from: static public final java.lang.String CAMERA_SERVICE
  static const CAMERA_SERVICE = r"""camera""";

  /// from: static public final java.lang.String CAPTIONING_SERVICE
  static const CAPTIONING_SERVICE = r"""captioning""";

  /// from: static public final java.lang.String CARRIER_CONFIG_SERVICE
  static const CARRIER_CONFIG_SERVICE = r"""carrier_config""";

  /// from: static public final java.lang.String CLIPBOARD_SERVICE
  static const CLIPBOARD_SERVICE = r"""clipboard""";

  /// from: static public final java.lang.String COMPANION_DEVICE_SERVICE
  static const COMPANION_DEVICE_SERVICE = r"""companiondevice""";

  /// from: static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE
  static const CONNECTIVITY_DIAGNOSTICS_SERVICE =
      r"""connectivity_diagnostics""";

  /// from: static public final java.lang.String CONNECTIVITY_SERVICE
  static const CONNECTIVITY_SERVICE = r"""connectivity""";

  /// from: static public final java.lang.String CONSUMER_IR_SERVICE
  static const CONSUMER_IR_SERVICE = r"""consumer_ir""";

  /// from: static public final int CONTEXT_IGNORE_SECURITY
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: static public final int CONTEXT_INCLUDE_CODE
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: static public final int CONTEXT_RESTRICTED
  static const CONTEXT_RESTRICTED = 4;

  /// from: static public final java.lang.String CREDENTIAL_SERVICE
  static const CREDENTIAL_SERVICE = r"""credential""";

  /// from: static public final java.lang.String CROSS_PROFILE_APPS_SERVICE
  static const CROSS_PROFILE_APPS_SERVICE = r"""crossprofileapps""";

  /// from: static public final int DEVICE_ID_DEFAULT
  static const DEVICE_ID_DEFAULT = 0;

  /// from: static public final int DEVICE_ID_INVALID
  static const DEVICE_ID_INVALID = -1;

  /// from: static public final java.lang.String DEVICE_LOCK_SERVICE
  static const DEVICE_LOCK_SERVICE = r"""device_lock""";

  /// from: static public final java.lang.String DEVICE_POLICY_SERVICE
  static const DEVICE_POLICY_SERVICE = r"""device_policy""";

  /// from: static public final java.lang.String DISPLAY_HASH_SERVICE
  static const DISPLAY_HASH_SERVICE = r"""display_hash""";

  /// from: static public final java.lang.String DISPLAY_SERVICE
  static const DISPLAY_SERVICE = r"""display""";

  /// from: static public final java.lang.String DOMAIN_VERIFICATION_SERVICE
  static const DOMAIN_VERIFICATION_SERVICE = r"""domain_verification""";

  /// from: static public final java.lang.String DOWNLOAD_SERVICE
  static const DOWNLOAD_SERVICE = r"""download""";

  /// from: static public final java.lang.String DROPBOX_SERVICE
  static const DROPBOX_SERVICE = r"""dropbox""";

  /// from: static public final java.lang.String EUICC_SERVICE
  static const EUICC_SERVICE = r"""euicc""";

  /// from: static public final java.lang.String FILE_INTEGRITY_SERVICE
  static const FILE_INTEGRITY_SERVICE = r"""file_integrity""";

  /// from: static public final java.lang.String FINGERPRINT_SERVICE
  static const FINGERPRINT_SERVICE = r"""fingerprint""";

  /// from: static public final java.lang.String GAME_SERVICE
  static const GAME_SERVICE = r"""game""";

  /// from: static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE
  static const GRAMMATICAL_INFLECTION_SERVICE = r"""grammatical_inflection""";

  /// from: static public final java.lang.String HARDWARE_PROPERTIES_SERVICE
  static const HARDWARE_PROPERTIES_SERVICE = r"""hardware_properties""";

  /// from: static public final java.lang.String HEALTHCONNECT_SERVICE
  static const HEALTHCONNECT_SERVICE = r"""healthconnect""";

  /// from: static public final java.lang.String INPUT_METHOD_SERVICE
  static const INPUT_METHOD_SERVICE = r"""input_method""";

  /// from: static public final java.lang.String INPUT_SERVICE
  static const INPUT_SERVICE = r"""input""";

  /// from: static public final java.lang.String IPSEC_SERVICE
  static const IPSEC_SERVICE = r"""ipsec""";

  /// from: static public final java.lang.String JOB_SCHEDULER_SERVICE
  static const JOB_SCHEDULER_SERVICE = r"""jobscheduler""";

  /// from: static public final java.lang.String KEYGUARD_SERVICE
  static const KEYGUARD_SERVICE = r"""keyguard""";

  /// from: static public final java.lang.String LAUNCHER_APPS_SERVICE
  static const LAUNCHER_APPS_SERVICE = r"""launcherapps""";

  /// from: static public final java.lang.String LAYOUT_INFLATER_SERVICE
  static const LAYOUT_INFLATER_SERVICE = r"""layout_inflater""";

  /// from: static public final java.lang.String LOCALE_SERVICE
  static const LOCALE_SERVICE = r"""locale""";

  /// from: static public final java.lang.String LOCATION_SERVICE
  static const LOCATION_SERVICE = r"""location""";

  /// from: static public final java.lang.String MEDIA_COMMUNICATION_SERVICE
  static const MEDIA_COMMUNICATION_SERVICE = r"""media_communication""";

  /// from: static public final java.lang.String MEDIA_METRICS_SERVICE
  static const MEDIA_METRICS_SERVICE = r"""media_metrics""";

  /// from: static public final java.lang.String MEDIA_PROJECTION_SERVICE
  static const MEDIA_PROJECTION_SERVICE = r"""media_projection""";

  /// from: static public final java.lang.String MEDIA_ROUTER_SERVICE
  static const MEDIA_ROUTER_SERVICE = r"""media_router""";

  /// from: static public final java.lang.String MEDIA_SESSION_SERVICE
  static const MEDIA_SESSION_SERVICE = r"""media_session""";

  /// from: static public final java.lang.String MIDI_SERVICE
  static const MIDI_SERVICE = r"""midi""";

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 32768;

  /// from: static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: static public final int MODE_MULTI_PROCESS
  static const MODE_MULTI_PROCESS = 4;

  /// from: static public final int MODE_NO_LOCALIZED_COLLATORS
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: static public final int MODE_PRIVATE
  static const MODE_PRIVATE = 0;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;

  /// from: static public final java.lang.String NETWORK_STATS_SERVICE
  static const NETWORK_STATS_SERVICE = r"""netstats""";

  /// from: static public final java.lang.String NFC_SERVICE
  static const NFC_SERVICE = r"""nfc""";

  /// from: static public final java.lang.String NOTIFICATION_SERVICE
  static const NOTIFICATION_SERVICE = r"""notification""";

  /// from: static public final java.lang.String NSD_SERVICE
  static const NSD_SERVICE = r"""servicediscovery""";

  /// from: static public final java.lang.String OVERLAY_SERVICE
  static const OVERLAY_SERVICE = r"""overlay""";

  /// from: static public final java.lang.String PEOPLE_SERVICE
  static const PEOPLE_SERVICE = r"""people""";

  /// from: static public final java.lang.String PERFORMANCE_HINT_SERVICE
  static const PERFORMANCE_HINT_SERVICE = r"""performance_hint""";

  /// from: static public final java.lang.String POWER_SERVICE
  static const POWER_SERVICE = r"""power""";

  /// from: static public final java.lang.String PRINT_SERVICE
  static const PRINT_SERVICE = r"""print""";

  /// from: static public final int RECEIVER_EXPORTED
  static const RECEIVER_EXPORTED = 2;

  /// from: static public final int RECEIVER_NOT_EXPORTED
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;

  /// from: static public final java.lang.String RESTRICTIONS_SERVICE
  static const RESTRICTIONS_SERVICE = r"""restrictions""";

  /// from: static public final java.lang.String ROLE_SERVICE
  static const ROLE_SERVICE = r"""role""";

  /// from: static public final java.lang.String SEARCH_SERVICE
  static const SEARCH_SERVICE = r"""search""";

  /// from: static public final java.lang.String SENSOR_SERVICE
  static const SENSOR_SERVICE = r"""sensor""";

  /// from: static public final java.lang.String SHORTCUT_SERVICE
  static const SHORTCUT_SERVICE = r"""shortcut""";

  /// from: static public final java.lang.String STATUS_BAR_SERVICE
  static const STATUS_BAR_SERVICE = r"""statusbar""";

  /// from: static public final java.lang.String STORAGE_SERVICE
  static const STORAGE_SERVICE = r"""storage""";

  /// from: static public final java.lang.String STORAGE_STATS_SERVICE
  static const STORAGE_STATS_SERVICE = r"""storagestats""";

  /// from: static public final java.lang.String SYSTEM_HEALTH_SERVICE
  static const SYSTEM_HEALTH_SERVICE = r"""systemhealth""";

  /// from: static public final java.lang.String TELECOM_SERVICE
  static const TELECOM_SERVICE = r"""telecom""";

  /// from: static public final java.lang.String TELEPHONY_IMS_SERVICE
  static const TELEPHONY_IMS_SERVICE = r"""telephony_ims""";

  /// from: static public final java.lang.String TELEPHONY_SERVICE
  static const TELEPHONY_SERVICE = r"""phone""";

  /// from: static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE
  static const TELEPHONY_SUBSCRIPTION_SERVICE =
      r"""telephony_subscription_service""";

  /// from: static public final java.lang.String TEXT_CLASSIFICATION_SERVICE
  static const TEXT_CLASSIFICATION_SERVICE = r"""textclassification""";

  /// from: static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE
  static const TEXT_SERVICES_MANAGER_SERVICE = r"""textservices""";

  /// from: static public final java.lang.String TV_INPUT_SERVICE
  static const TV_INPUT_SERVICE = r"""tv_input""";

  /// from: static public final java.lang.String TV_INTERACTIVE_APP_SERVICE
  static const TV_INTERACTIVE_APP_SERVICE = r"""tv_interactive_app""";

  /// from: static public final java.lang.String UI_MODE_SERVICE
  static const UI_MODE_SERVICE = r"""uimode""";

  /// from: static public final java.lang.String USAGE_STATS_SERVICE
  static const USAGE_STATS_SERVICE = r"""usagestats""";

  /// from: static public final java.lang.String USB_SERVICE
  static const USB_SERVICE = r"""usb""";

  /// from: static public final java.lang.String USER_SERVICE
  static const USER_SERVICE = r"""user""";

  /// from: static public final java.lang.String VIBRATOR_MANAGER_SERVICE
  static const VIBRATOR_MANAGER_SERVICE = r"""vibrator_manager""";

  /// from: static public final java.lang.String VIBRATOR_SERVICE
  static const VIBRATOR_SERVICE = r"""vibrator""";

  /// from: static public final java.lang.String VIRTUAL_DEVICE_SERVICE
  static const VIRTUAL_DEVICE_SERVICE = r"""virtualdevice""";

  /// from: static public final java.lang.String VPN_MANAGEMENT_SERVICE
  static const VPN_MANAGEMENT_SERVICE = r"""vpn_management""";

  /// from: static public final java.lang.String WALLPAPER_SERVICE
  static const WALLPAPER_SERVICE = r"""wallpaper""";

  /// from: static public final java.lang.String WIFI_AWARE_SERVICE
  static const WIFI_AWARE_SERVICE = r"""wifiaware""";

  /// from: static public final java.lang.String WIFI_P2P_SERVICE
  static const WIFI_P2P_SERVICE = r"""wifip2p""";

  /// from: static public final java.lang.String WIFI_RTT_RANGING_SERVICE
  static const WIFI_RTT_RANGING_SERVICE = r"""wifirtt""";

  /// from: static public final java.lang.String WIFI_SERVICE
  static const WIFI_SERVICE = r"""wifi""";

  /// from: static public final java.lang.String WINDOW_SERVICE
  static const WINDOW_SERVICE = r"""window""";

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context() {
    return Context.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getAssets = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getAssets", r"()Landroid/content/res/AssetManager;");

  /// from: public abstract android.content.res.AssetManager getAssets()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAssets() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getAssets, jni.JniCallType.objectType, []).object);
  }

  static final _id_getResources = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getResources", r"()Landroid/content/res/Resources;");

  /// from: public abstract android.content.res.Resources getResources()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResources() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getResources, jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPackageManager",
      r"()Landroid/content/pm/PackageManager;");

  /// from: public abstract android.content.pm.PackageManager getPackageManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getContentResolver = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getContentResolver",
      r"()Landroid/content/ContentResolver;");

  /// from: public abstract android.content.ContentResolver getContentResolver()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentResolver() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getContentResolver,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getMainLooper = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getMainLooper", r"()Landroid/os/Looper;");

  /// from: public abstract android.os.Looper getMainLooper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainLooper() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMainLooper, jni.JniCallType.objectType, []).object);
  }

  static final _id_getMainExecutor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getMainExecutor",
      r"()Ljava/util/concurrent/Executor;");

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainExecutor() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMainExecutor, jni.JniCallType.objectType, []).object);
  }

  static final _id_getApplicationContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationContext",
      r"()Landroid/content/Context;");

  /// from: public abstract android.content.Context getApplicationContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context getApplicationContext() {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationContext,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_registerComponentCallbacks = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerComponentCallbacks",
      r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_unregisterComponentCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterComponentCallbacks",
          r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_getText = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getText", r"(I)Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getText(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getText,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getString = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getString", r"(I)Ljava/lang/String;");

  /// from: public final java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getString,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getString1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getString",
      r"(I[Ljava/lang/Object;)Ljava/lang/String;");

  /// from: public final java.lang.String getString(int i, java.lang.Object[] objects)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString1(
    int i,
    jni.JArray<jni.JObject> objects,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getString1,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), objects.reference]).object);
  }

  static final _id_getColor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getColor", r"(I)I");

  /// from: public final int getColor(int i)
  int getColor(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getColor,
        jni.JniCallType.intType, [jni.JValueInt(i)]).integer;
  }

  static final _id_getDrawable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDrawable",
      r"(I)Landroid/graphics/drawable/Drawable;");

  /// from: public final android.graphics.drawable.Drawable getDrawable(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getDrawable,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getColorStateList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getColorStateList",
      r"(I)Landroid/content/res/ColorStateList;");

  /// from: public final android.content.res.ColorStateList getColorStateList(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorStateList(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getColorStateList,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_setTheme =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setTheme", r"(I)V");

  /// from: public abstract void setTheme(int i)
  void setTheme(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTheme,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getTheme = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"getTheme", r"()Landroid/content/res/Resources$Theme;");

  /// from: public abstract android.content.res.Resources$Theme getTheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTheme() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTheme, jni.JniCallType.objectType, []).object);
  }

  static final _id_obtainStyledAttributes = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"obtainStyledAttributes",
      r"([I)Landroid/content/res/TypedArray;");

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes(
    jni.JArray<jni.jint> is0,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_obtainStyledAttributes,
        jni.JniCallType.objectType,
        [is0.reference]).object);
  }

  static final _id_obtainStyledAttributes1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"obtainStyledAttributes",
      r"(I[I)Landroid/content/res/TypedArray;");

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes1(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_obtainStyledAttributes1,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), is0.reference]).object);
  }

  static final _id_obtainStyledAttributes2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"obtainStyledAttributes",
      r"(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;");

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes2(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_obtainStyledAttributes2,
        jni.JniCallType.objectType,
        [attributeSet.reference, is0.reference]).object);
  }

  static final _id_obtainStyledAttributes3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"obtainStyledAttributes",
      r"(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;");

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes3(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_obtainStyledAttributes3, jni.JniCallType.objectType, [
      attributeSet.reference,
      is0.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1)
    ]).object);
  }

  static final _id_getClassLoader = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getClassLoader", r"()Ljava/lang/ClassLoader;");

  /// from: public abstract java.lang.ClassLoader getClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClassLoader() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getClassLoader, jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageName", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getPackageName, jni.JniCallType.objectType, []).object);
  }

  static final _id_getOpPackageName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getOpPackageName", r"()Ljava/lang/String;");

  /// from: public java.lang.String getOpPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOpPackageName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getOpPackageName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getAttributionTag = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getAttributionTag", r"()Ljava/lang/String;");

  /// from: public java.lang.String getAttributionTag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAttributionTag() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getAttributionTag,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getAttributionSource = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getAttributionSource",
      r"()Landroid/content/AttributionSource;");

  /// from: public android.content.AttributionSource getAttributionSource()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAttributionSource() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getAttributionSource,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getParams = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getParams", r"()Landroid/content/ContextParams;");

  /// from: public android.content.ContextParams getParams()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParams() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getParams, jni.JniCallType.objectType, []).object);
  }

  static final _id_getApplicationInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getApplicationInfo",
      r"()Landroid/content/pm/ApplicationInfo;");

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationInfo() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getApplicationInfo,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageResourcePath = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageResourcePath", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPackageResourcePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageResourcePath() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageResourcePath,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPackageCodePath = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPackageCodePath", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPackageCodePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageCodePath() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPackageCodePath,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getSharedPreferences = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSharedPreferences",
      r"(Ljava/lang/String;I)Landroid/content/SharedPreferences;");

  /// from: public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSharedPreferences(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSharedPreferences,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_moveSharedPreferencesFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"moveSharedPreferencesFrom",
      r"(Landroid/content/Context;Ljava/lang/String;)Z");

  /// from: public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)
  bool moveSharedPreferencesFrom(
    Context context,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_moveSharedPreferencesFrom,
        jni.JniCallType.booleanType,
        [context.reference, string.reference]).boolean;
  }

  static final _id_deleteSharedPreferences = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"deleteSharedPreferences", r"(Ljava/lang/String;)Z");

  /// from: public abstract boolean deleteSharedPreferences(java.lang.String string)
  bool deleteSharedPreferences(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_deleteSharedPreferences,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_openFileInput = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openFileInput",
      r"(Ljava/lang/String;)Ljava/io/FileInputStream;");

  /// from: public abstract java.io.FileInputStream openFileInput(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileInput(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_openFileInput,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_openFileOutput = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openFileOutput",
      r"(Ljava/lang/String;I)Ljava/io/FileOutputStream;");

  /// from: public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileOutput(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_openFileOutput,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_deleteFile = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"deleteFile", r"(Ljava/lang/String;)Z");

  /// from: public abstract boolean deleteFile(java.lang.String string)
  bool deleteFile(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deleteFile,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_getFileStreamPath = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getFileStreamPath",
      r"(Ljava/lang/String;)Ljava/io/File;");

  /// from: public abstract java.io.File getFileStreamPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFileStreamPath(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getFileStreamPath,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getDataDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getDataDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getDataDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDataDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getFilesDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getFilesDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilesDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getFilesDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getNoBackupFilesDir = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getNoBackupFilesDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getNoBackupFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getNoBackupFilesDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getNoBackupFilesDir,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getExternalFilesDir = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getExternalFilesDir",
      r"(Ljava/lang/String;)Ljava/io/File;");

  /// from: public abstract java.io.File getExternalFilesDir(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalFilesDir(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getExternalFilesDir,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getExternalFilesDirs = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getExternalFilesDirs",
      r"(Ljava/lang/String;)[Ljava/io/File;");

  /// from: public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalFilesDirs(
    jni.JString string,
  ) {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getExternalFilesDirs,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_getObbDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getObbDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getObbDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObbDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getObbDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getObbDirs = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getObbDirs", r"()[Ljava/io/File;");

  /// from: public abstract java.io.File[] getObbDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getObbDirs() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getObbDirs, jni.JniCallType.objectType, []).object);
  }

  static final _id_getCacheDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCacheDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCacheDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCacheDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getCodeCacheDir = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCodeCacheDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getCodeCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCodeCacheDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCodeCacheDir, jni.JniCallType.objectType, []).object);
  }

  static final _id_getExternalCacheDir = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getExternalCacheDir", r"()Ljava/io/File;");

  /// from: public abstract java.io.File getExternalCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalCacheDir() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getExternalCacheDir,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getExternalCacheDirs = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getExternalCacheDirs", r"()[Ljava/io/File;");

  /// from: public abstract java.io.File[] getExternalCacheDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalCacheDirs() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getExternalCacheDirs,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getExternalMediaDirs = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getExternalMediaDirs", r"()[Ljava/io/File;");

  /// from: public abstract java.io.File[] getExternalMediaDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalMediaDirs() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getExternalMediaDirs,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_fileList = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"fileList", r"()[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] fileList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> fileList() {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_fileList, jni.JniCallType.objectType, []).object);
  }

  static final _id_getDir = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDir", r"(Ljava/lang/String;I)Ljava/io/File;");

  /// from: public abstract java.io.File getDir(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDir(
    jni.JString string,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getDir,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_openOrCreateDatabase = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openOrCreateDatabase",
      r"(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;");

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_openOrCreateDatabase,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i), cursorFactory.reference]).object);
  }

  static final _id_openOrCreateDatabase1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openOrCreateDatabase",
      r"(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;");

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase1(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
    jni.JObject databaseErrorHandler,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_openOrCreateDatabase1, jni.JniCallType.objectType, [
      string.reference,
      jni.JValueInt(i),
      cursorFactory.reference,
      databaseErrorHandler.reference
    ]).object);
  }

  static final _id_moveDatabaseFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"moveDatabaseFrom",
      r"(Landroid/content/Context;Ljava/lang/String;)Z");

  /// from: public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)
  bool moveDatabaseFrom(
    Context context,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_moveDatabaseFrom,
        jni.JniCallType.booleanType,
        [context.reference, string.reference]).boolean;
  }

  static final _id_deleteDatabase = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"deleteDatabase", r"(Ljava/lang/String;)Z");

  /// from: public abstract boolean deleteDatabase(java.lang.String string)
  bool deleteDatabase(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deleteDatabase,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_getDatabasePath = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDatabasePath",
      r"(Ljava/lang/String;)Ljava/io/File;");

  /// from: public abstract java.io.File getDatabasePath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDatabasePath(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getDatabasePath,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_databaseList = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"databaseList", r"()[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] databaseList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> databaseList() {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_databaseList,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getWallpaper = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getWallpaper",
      r"()Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWallpaper() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getWallpaper, jni.JniCallType.objectType, []).object);
  }

  static final _id_peekWallpaper = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"peekWallpaper",
      r"()Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject peekWallpaper() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_peekWallpaper, jni.JniCallType.objectType, []).object);
  }

  static final _id_getWallpaperDesiredMinimumWidth = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"getWallpaperDesiredMinimumWidth", r"()I");

  /// from: public abstract int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getWallpaperDesiredMinimumWidth,
        jni.JniCallType.intType, []).integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"getWallpaperDesiredMinimumHeight", r"()I");

  /// from: public abstract int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getWallpaperDesiredMinimumHeight,
        jni.JniCallType.intType, []).integer;
  }

  static final _id_setWallpaper = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setWallpaper", r"(Landroid/graphics/Bitmap;)V");

  /// from: public abstract void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(
    jni.JObject bitmap,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setWallpaper,
        jni.JniCallType.voidType, [bitmap.reference]).check();
  }

  static final _id_setWallpaper1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setWallpaper", r"(Ljava/io/InputStream;)V");

  /// from: public abstract void setWallpaper(java.io.InputStream inputStream)
  void setWallpaper1(
    jni.JObject inputStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setWallpaper1,
        jni.JniCallType.voidType, [inputStream.reference]).check();
  }

  static final _id_clearWallpaper = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearWallpaper", r"()V");

  /// from: public abstract void clearWallpaper()
  void clearWallpaper() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearWallpaper, jni.JniCallType.voidType, []).check();
  }

  static final _id_startActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivity", r"(Landroid/content/Intent;)V");

  /// from: public abstract void startActivity(android.content.Intent intent)
  void startActivity(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_startActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivity",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity1,
        jni.JniCallType.voidType, [intent.reference, bundle.reference]).check();
  }

  static final _id_startActivities = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivities", r"([Landroid/content/Intent;)V");

  /// from: public abstract void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<jni.JObject> intents,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivities,
        jni.JniCallType.voidType, [intents.reference]).check();
  }

  static final _id_startActivities1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivities",
      r"([Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<jni.JObject> intents,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivities1,
        jni.JniCallType.voidType,
        [intents.reference, bundle.reference]).check();
  }

  static final _id_startIntentSender = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V");

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).check();
  }

  static final _id_startIntentSender1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender1, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      bundle.reference
    ]).check();
  }

  static final _id_sendBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"sendBroadcast", r"(Landroid/content/Intent;)V");

  /// from: public abstract void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_sendBroadcast,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_sendBroadcast1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;)V");

  /// from: public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)
  void sendBroadcast1(
    jni.JObject intent,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_sendBroadcast1,
        jni.JniCallType.voidType, [intent.reference, string.reference]).check();
  }

  static final _id_sendBroadcastWithMultiplePermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"sendBroadcastWithMultiplePermissions",
          r"(Landroid/content/Intent;[Ljava/lang/String;)V");

  /// from: public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)
  void sendBroadcastWithMultiplePermissions(
    jni.JObject intent,
    jni.JArray<jni.JString> strings,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendBroadcastWithMultiplePermissions,
        jni.JniCallType.voidType,
        [intent.reference, strings.reference]).check();
  }

  static final _id_sendBroadcast2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendBroadcast2(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendBroadcast2,
        jni.JniCallType.voidType,
        [intent.reference, string.reference, bundle.reference]).check();
  }

  static final _id_sendOrderedBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;)V");

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)
  void sendOrderedBroadcast(
    jni.JObject intent,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendOrderedBroadcast,
        jni.JniCallType.voidType,
        [intent.reference, string.reference]).check();
  }

  static final _id_sendOrderedBroadcast1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendOrderedBroadcast1(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendOrderedBroadcast1,
        jni.JniCallType.voidType,
        [intent.reference, string.reference, bundle.reference]).check();
  }

  static final _id_sendOrderedBroadcast2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcast2(
    jni.JObject intent,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendOrderedBroadcast2, jni.JniCallType.voidType, [
      intent.reference,
      string.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string1.reference,
      bundle.reference
    ]).check();
  }

  static final _id_sendOrderedBroadcast3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)
  void sendOrderedBroadcast3(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendOrderedBroadcast3, jni.JniCallType.voidType, [
      intent.reference,
      string.reference,
      bundle.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string1.reference,
      bundle1.reference
    ]).check();
  }

  static final _id_sendBroadcastAsUser = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendBroadcastAsUser",
      r"(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendBroadcastAsUser,
        jni.JniCallType.voidType,
        [intent.reference, userHandle.reference]).check();
  }

  static final _id_sendBroadcastAsUser1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendBroadcastAsUser",
      r"(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V");

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)
  void sendBroadcastAsUser1(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendBroadcastAsUser1,
        jni.JniCallType.voidType,
        [intent.reference, userHandle.reference, string.reference]).check();
  }

  static final _id_sendOrderedBroadcastAsUser = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcastAsUser",
      r"(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendOrderedBroadcastAsUser, jni.JniCallType.voidType, [
      intent.reference,
      userHandle.reference,
      string.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string1.reference,
      bundle.reference
    ]).check();
  }

  static final _id_sendOrderedBroadcast4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendOrderedBroadcast",
      r"(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)
  void sendOrderedBroadcast4(
    jni.JObject intent,
    jni.JString string,
    jni.JString string1,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string2,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendOrderedBroadcast4, jni.JniCallType.voidType, [
      intent.reference,
      string.reference,
      string1.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string2.reference,
      bundle.reference
    ]).check();
  }

  static final _id_sendStickyBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"sendStickyBroadcast", r"(Landroid/content/Intent;)V");

  /// from: public abstract void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendStickyBroadcast,
        jni.JniCallType.voidType,
        [intent.reference]).check();
  }

  static final _id_sendStickyBroadcast1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendStickyBroadcast",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)
  void sendStickyBroadcast1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendStickyBroadcast1,
        jni.JniCallType.voidType,
        [intent.reference, bundle.reference]).check();
  }

  static final _id_sendStickyOrderedBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendStickyOrderedBroadcast",
      r"(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcast(
    jni.JObject intent,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_sendStickyOrderedBroadcast, jni.JniCallType.voidType, [
      intent.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string.reference,
      bundle.reference
    ]).check();
  }

  static final _id_removeStickyBroadcast = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"removeStickyBroadcast",
      r"(Landroid/content/Intent;)V");

  /// from: public abstract void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removeStickyBroadcast,
        jni.JniCallType.voidType,
        [intent.reference]).check();
  }

  static final _id_sendStickyBroadcastAsUser = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sendStickyBroadcastAsUser",
      r"(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendStickyBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sendStickyBroadcastAsUser,
        jni.JniCallType.voidType,
        [intent.reference, userHandle.reference]).check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"sendStickyOrderedBroadcastAsUser",
          r"(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_sendStickyOrderedBroadcastAsUser, jni.JniCallType.voidType, [
      intent.reference,
      userHandle.reference,
      broadcastReceiver.reference,
      handler.reference,
      jni.JValueInt(i),
      string.reference,
      bundle.reference
    ]).check();
  }

  static final _id_removeStickyBroadcastAsUser = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"removeStickyBroadcastAsUser",
          r"(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void removeStickyBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removeStickyBroadcastAsUser,
        jni.JniCallType.voidType,
        [intent.reference, userHandle.reference]).check();
  }

  static final _id_registerReceiver = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerReceiver",
      r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerReceiver,
        jni.JniCallType.objectType,
        [broadcastReceiver.reference, intentFilter.reference]).object);
  }

  static final _id_registerReceiver1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerReceiver",
      r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver1(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_registerReceiver1, jni.JniCallType.objectType, [
      broadcastReceiver.reference,
      intentFilter.reference,
      jni.JValueInt(i)
    ]).object);
  }

  static final _id_registerReceiver2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerReceiver",
      r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver2(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_registerReceiver2, jni.JniCallType.objectType, [
      broadcastReceiver.reference,
      intentFilter.reference,
      string.reference,
      handler.reference
    ]).object);
  }

  static final _id_registerReceiver3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerReceiver",
      r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;");

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver3(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_registerReceiver3, jni.JniCallType.objectType, [
      broadcastReceiver.reference,
      intentFilter.reference,
      string.reference,
      handler.reference,
      jni.JValueInt(i)
    ]).object);
  }

  static final _id_unregisterReceiver = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"unregisterReceiver",
      r"(Landroid/content/BroadcastReceiver;)V");

  /// from: public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)
  void unregisterReceiver(
    jni.JObject broadcastReceiver,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterReceiver,
        jni.JniCallType.voidType,
        [broadcastReceiver.reference]).check();
  }

  static final _id_startService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startService",
      r"(Landroid/content/Intent;)Landroid/content/ComponentName;");

  /// from: public abstract android.content.ComponentName startService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startService(
    jni.JObject intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startService,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_startForegroundService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startForegroundService",
      r"(Landroid/content/Intent;)Landroid/content/ComponentName;");

  /// from: public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startForegroundService(
    jni.JObject intent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startForegroundService,
        jni.JniCallType.objectType,
        [intent.reference]).object);
  }

  static final _id_stopService = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"stopService", r"(Landroid/content/Intent;)Z");

  /// from: public abstract boolean stopService(android.content.Intent intent)
  bool stopService(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_stopService,
        jni.JniCallType.booleanType, [intent.reference]).boolean;
  }

  static final _id_bindService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindService",
      r"(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z");

  /// from: public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)
  bool bindService(
    jni.JObject intent,
    jni.JObject serviceConnection,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindService, jni.JniCallType.booleanType, [
      intent.reference,
      serviceConnection.reference,
      jni.JValueInt(i)
    ]).boolean;
  }

  static final _id_bindService1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindService",
      r"(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z");

  /// from: public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)
  bool bindService1(
    jni.JObject intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindService1, jni.JniCallType.booleanType, [
      intent.reference,
      serviceConnection.reference,
      bindServiceFlags.reference
    ]).boolean;
  }

  static final _id_bindService2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindService",
      r"(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z");

  /// from: public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService2(
    jni.JObject intent,
    int i,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindService2, jni.JniCallType.booleanType, [
      intent.reference,
      jni.JValueInt(i),
      executor.reference,
      serviceConnection.reference
    ]).boolean;
  }

  static final _id_bindService3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindService",
      r"(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z");

  /// from: public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService3(
    jni.JObject intent,
    Context_BindServiceFlags bindServiceFlags,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindService3, jni.JniCallType.booleanType, [
      intent.reference,
      bindServiceFlags.reference,
      executor.reference,
      serviceConnection.reference
    ]).boolean;
  }

  static final _id_bindIsolatedService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindIsolatedService",
      r"(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z");

  /// from: public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService(
    jni.JObject intent,
    int i,
    jni.JString string,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindIsolatedService, jni.JniCallType.booleanType, [
      intent.reference,
      jni.JValueInt(i),
      string.reference,
      executor.reference,
      serviceConnection.reference
    ]).boolean;
  }

  static final _id_bindIsolatedService1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindIsolatedService",
      r"(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z");

  /// from: public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService1(
    jni.JObject intent,
    Context_BindServiceFlags bindServiceFlags,
    jni.JString string,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindIsolatedService1, jni.JniCallType.booleanType, [
      intent.reference,
      bindServiceFlags.reference,
      string.reference,
      executor.reference,
      serviceConnection.reference
    ]).boolean;
  }

  static final _id_bindServiceAsUser = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindServiceAsUser",
      r"(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z");

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)
  bool bindServiceAsUser(
    jni.JObject intent,
    jni.JObject serviceConnection,
    int i,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindServiceAsUser, jni.JniCallType.booleanType, [
      intent.reference,
      serviceConnection.reference,
      jni.JValueInt(i),
      userHandle.reference
    ]).boolean;
  }

  static final _id_bindServiceAsUser1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"bindServiceAsUser",
      r"(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z");

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)
  bool bindServiceAsUser1(
    jni.JObject intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
    jni.JObject userHandle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_bindServiceAsUser1, jni.JniCallType.booleanType, [
      intent.reference,
      serviceConnection.reference,
      bindServiceFlags.reference,
      userHandle.reference
    ]).boolean;
  }

  static final _id_updateServiceGroup = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"updateServiceGroup",
      r"(Landroid/content/ServiceConnection;II)V");

  /// from: public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)
  void updateServiceGroup(
    jni.JObject serviceConnection,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_updateServiceGroup, jni.JniCallType.voidType, [
      serviceConnection.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1)
    ]).check();
  }

  static final _id_unbindService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"unbindService",
      r"(Landroid/content/ServiceConnection;)V");

  /// from: public abstract void unbindService(android.content.ServiceConnection serviceConnection)
  void unbindService(
    jni.JObject serviceConnection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_unbindService,
        jni.JniCallType.voidType, [serviceConnection.reference]).check();
  }

  static final _id_startInstrumentation = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startInstrumentation",
      r"(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z");

  /// from: public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)
  bool startInstrumentation(
    jni.JObject componentName,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startInstrumentation,
        jni.JniCallType.booleanType,
        [componentName.reference, string.reference, bundle.reference]).boolean;
  }

  static final _id_getSystemService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemService",
      r"(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public abstract java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemService,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_getSystemService1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemService",
      r"(Ljava/lang/Class;)Ljava/lang/Object;");

  /// from: public final T getSystemService(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSystemService1<$T extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemService1,
        jni.JniCallType.objectType,
        [class0.reference]).object);
  }

  static final _id_getSystemServiceName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemServiceName",
      r"(Ljava/lang/Class;)Ljava/lang/String;");

  /// from: public abstract java.lang.String getSystemServiceName(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSystemServiceName(
    jni.JObject class0,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemServiceName,
        jni.JniCallType.objectType,
        [class0.reference]).object);
  }

  static final _id_checkPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkPermission", r"(Ljava/lang/String;II)I");

  /// from: public abstract int checkPermission(java.lang.String string, int i, int i1)
  int checkPermission(
    jni.JString string,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkPermission,
        jni.JniCallType.intType,
        [string.reference, jni.JValueInt(i), jni.JValueInt(i1)]).integer;
  }

  static final _id_checkCallingPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkCallingPermission", r"(Ljava/lang/String;)I");

  /// from: public abstract int checkCallingPermission(java.lang.String string)
  int checkCallingPermission(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkCallingPermission,
        jni.JniCallType.intType,
        [string.reference]).integer;
  }

  static final _id_checkCallingOrSelfPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"checkCallingOrSelfPermission",
          r"(Ljava/lang/String;)I");

  /// from: public abstract int checkCallingOrSelfPermission(java.lang.String string)
  int checkCallingOrSelfPermission(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkCallingOrSelfPermission,
        jni.JniCallType.intType,
        [string.reference]).integer;
  }

  static final _id_checkSelfPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkSelfPermission", r"(Ljava/lang/String;)I");

  /// from: public abstract int checkSelfPermission(java.lang.String string)
  int checkSelfPermission(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkSelfPermission,
        jni.JniCallType.intType,
        [string.reference]).integer;
  }

  static final _id_enforcePermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enforcePermission",
      r"(Ljava/lang/String;IILjava/lang/String;)V");

  /// from: public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)
  void enforcePermission(
    jni.JString string,
    int i,
    int i1,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_enforcePermission, jni.JniCallType.voidType, [
      string.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      string1.reference
    ]).check();
  }

  static final _id_enforceCallingPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enforceCallingPermission",
      r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enforceCallingPermission,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_enforceCallingOrSelfPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enforceCallingOrSelfPermission",
          r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingOrSelfPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enforceCallingOrSelfPermission,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_grantUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"grantUriPermission",
      r"(Ljava/lang/String;Landroid/net/Uri;I)V");

  /// from: public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void grantUriPermission(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_grantUriPermission,
        jni.JniCallType.voidType,
        [string.reference, uri.reference, jni.JValueInt(i)]).check();
  }

  static final _id_revokeUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"revokeUriPermission", r"(Landroid/net/Uri;I)V");

  /// from: public abstract void revokeUriPermission(android.net.Uri uri, int i)
  void revokeUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_revokeUriPermission,
        jni.JniCallType.voidType,
        [uri.reference, jni.JValueInt(i)]).check();
  }

  static final _id_revokeUriPermission1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"revokeUriPermission",
      r"(Ljava/lang/String;Landroid/net/Uri;I)V");

  /// from: public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void revokeUriPermission1(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_revokeUriPermission1,
        jni.JniCallType.voidType,
        [string.reference, uri.reference, jni.JValueInt(i)]).check();
  }

  static final _id_checkUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkUriPermission", r"(Landroid/net/Uri;III)I");

  /// from: public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)
  int checkUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_checkUriPermission, jni.JniCallType.intType, [
      uri.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).integer;
  }

  static final _id_checkUriPermissions = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkUriPermissions", r"(Ljava/util/List;III)[I");

  /// from: public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
    int i1,
    int i2,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_checkUriPermissions, jni.JniCallType.objectType, [
      list.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).object);
  }

  static final _id_checkCallingUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"checkCallingUriPermission", r"(Landroid/net/Uri;I)I");

  /// from: public abstract int checkCallingUriPermission(android.net.Uri uri, int i)
  int checkCallingUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkCallingUriPermission,
        jni.JniCallType.intType,
        [uri.reference, jni.JValueInt(i)]).integer;
  }

  static final _id_checkCallingUriPermissions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkCallingUriPermissions",
      r"(Ljava/util/List;I)[I");

  /// from: public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_checkCallingUriPermissions,
            jni.JniCallType.objectType,
            [list.reference, jni.JValueInt(i)]).object);
  }

  static final _id_checkCallingOrSelfUriPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"checkCallingOrSelfUriPermission",
          r"(Landroid/net/Uri;I)I");

  /// from: public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)
  int checkCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkCallingOrSelfUriPermission,
        jni.JniCallType.intType,
        [uri.reference, jni.JValueInt(i)]).integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"checkCallingOrSelfUriPermissions",
          r"(Ljava/util/List;I)[I");

  /// from: public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingOrSelfUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_checkCallingOrSelfUriPermissions,
            jni.JniCallType.objectType,
            [list.reference, jni.JValueInt(i)]).object);
  }

  static final _id_checkUriPermission1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkUriPermission",
      r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I");

  /// from: public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)
  int checkUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_checkUriPermission1, jni.JniCallType.intType, [
      uri.reference,
      string.reference,
      string1.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).integer;
  }

  static final _id_enforceUriPermission = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enforceUriPermission",
      r"(Landroid/net/Uri;IIILjava/lang/String;)V");

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)
  void enforceUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_enforceUriPermission, jni.JniCallType.voidType, [
      uri.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      string.reference
    ]).check();
  }

  static final _id_enforceCallingUriPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enforceCallingUriPermission",
          r"(Landroid/net/Uri;ILjava/lang/String;)V");

  /// from: public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enforceCallingUriPermission,
        jni.JniCallType.voidType,
        [uri.reference, jni.JValueInt(i), string.reference]).check();
  }

  static final _id_enforceCallingOrSelfUriPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enforceCallingOrSelfUriPermission",
          r"(Landroid/net/Uri;ILjava/lang/String;)V");

  /// from: public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enforceCallingOrSelfUriPermission,
        jni.JniCallType.voidType,
        [uri.reference, jni.JValueInt(i), string.reference]).check();
  }

  static final _id_enforceUriPermission1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enforceUriPermission",
      r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V");

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)
  void enforceUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
    jni.JString string2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_enforceUriPermission1, jni.JniCallType.voidType, [
      uri.reference,
      string.reference,
      string1.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      string2.reference
    ]).check();
  }

  static final _id_revokeSelfPermissionOnKill = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"revokeSelfPermissionOnKill",
      r"(Ljava/lang/String;)V");

  /// from: public void revokeSelfPermissionOnKill(java.lang.String string)
  void revokeSelfPermissionOnKill(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_revokeSelfPermissionOnKill,
        jni.JniCallType.voidType,
        [string.reference]).check();
  }

  static final _id_revokeSelfPermissionsOnKill = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"revokeSelfPermissionsOnKill",
          r"(Ljava/util/Collection;)V");

  /// from: public void revokeSelfPermissionsOnKill(java.util.Collection collection)
  void revokeSelfPermissionsOnKill(
    jni.JObject collection,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_revokeSelfPermissionsOnKill,
        jni.JniCallType.voidType,
        [collection.reference]).check();
  }

  static final _id_createPackageContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createPackageContext",
      r"(Ljava/lang/String;I)Landroid/content/Context;");

  /// from: public abstract android.content.Context createPackageContext(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createPackageContext(
    jni.JString string,
    int i,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createPackageContext,
        jni.JniCallType.objectType,
        [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_createContextForSplit = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createContextForSplit",
      r"(Ljava/lang/String;)Landroid/content/Context;");

  /// from: public abstract android.content.Context createContextForSplit(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContextForSplit(
    jni.JString string,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createContextForSplit,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_createConfigurationContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createConfigurationContext",
      r"(Landroid/content/res/Configuration;)Landroid/content/Context;");

  /// from: public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  Context createConfigurationContext(
    jni.JObject configuration,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createConfigurationContext,
        jni.JniCallType.objectType,
        [configuration.reference]).object);
  }

  static final _id_createDisplayContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createDisplayContext",
      r"(Landroid/view/Display;)Landroid/content/Context;");

  /// from: public abstract android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDisplayContext(
    jni.JObject display,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createDisplayContext,
        jni.JniCallType.objectType,
        [display.reference]).object);
  }

  static final _id_createDeviceContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createDeviceContext",
      r"(I)Landroid/content/Context;");

  /// from: public android.content.Context createDeviceContext(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceContext(
    int i,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createDeviceContext,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_createWindowContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createWindowContext",
      r"(ILandroid/os/Bundle;)Landroid/content/Context;");

  /// from: public android.content.Context createWindowContext(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext(
    int i,
    jni.JObject bundle,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createWindowContext,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), bundle.reference]).object);
  }

  static final _id_createWindowContext1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createWindowContext",
      r"(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;");

  /// from: public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext1(
    jni.JObject display,
    int i,
    jni.JObject bundle,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createWindowContext1,
        jni.JniCallType.objectType,
        [display.reference, jni.JValueInt(i), bundle.reference]).object);
  }

  static final _id_createContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createContext",
      r"(Landroid/content/ContextParams;)Landroid/content/Context;");

  /// from: public android.content.Context createContext(android.content.ContextParams contextParams)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContext(
    jni.JObject contextParams,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createContext,
        jni.JniCallType.objectType,
        [contextParams.reference]).object);
  }

  static final _id_createAttributionContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createAttributionContext",
      r"(Ljava/lang/String;)Landroid/content/Context;");

  /// from: public android.content.Context createAttributionContext(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createAttributionContext(
    jni.JString string,
  ) {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createAttributionContext,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_createDeviceProtectedStorageContext = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"createDeviceProtectedStorageContext",
          r"()Landroid/content/Context;");

  /// from: public abstract android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceProtectedStorageContext() {
    return const $ContextType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createDeviceProtectedStorageContext,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getDisplay = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDisplay", r"()Landroid/view/Display;");

  /// from: public android.view.Display getDisplay()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDisplay() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDisplay, jni.JniCallType.objectType, []).object);
  }

  static final _id_getDeviceId =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getDeviceId", r"()I");

  /// from: public int getDeviceId()
  int getDeviceId() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDeviceId, jni.JniCallType.intType, []).integer;
  }

  static final _id_registerDeviceIdChangeListener = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"registerDeviceIdChangeListener",
          r"(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V");

  /// from: public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)
  void registerDeviceIdChangeListener(
    jni.JObject executor,
    jni.JObject intConsumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerDeviceIdChangeListener,
        jni.JniCallType.voidType,
        [executor.reference, intConsumer.reference]).check();
  }

  static final _id_unregisterDeviceIdChangeListener = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterDeviceIdChangeListener",
          r"(Ljava/util/function/IntConsumer;)V");

  /// from: public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)
  void unregisterDeviceIdChangeListener(
    jni.JObject intConsumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterDeviceIdChangeListener,
        jni.JniCallType.voidType,
        [intConsumer.reference]).check();
  }

  static final _id_isRestricted = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isRestricted", r"()Z");

  /// from: public boolean isRestricted()
  bool isRestricted() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isRestricted, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isDeviceProtectedStorage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isDeviceProtectedStorage", r"()Z");

  /// from: public abstract boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isDeviceProtectedStorage, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isUiContext =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isUiContext", r"()Z");

  /// from: public boolean isUiContext()
  bool isUiContext() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isUiContext, jni.JniCallType.booleanType, []).boolean;
  }
}

final class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r"Landroid/content/Context;";

  @override
  Context fromRef(jni.JObjectPtr ref) => Context.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextType) && other is $ContextType;
  }
}

/// from: android.os.CancellationSignal$OnCancelListener
class CancellationSignal_OnCancelListener extends jni.JObject {
  @override
  late final jni.JObjType<CancellationSignal_OnCancelListener> $type = type;

  CancellationSignal_OnCancelListener.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/os/CancellationSignal$OnCancelListener");

  /// The type which includes information such as the signature of this class.
  static const type = $CancellationSignal_OnCancelListenerType();
  static final _id_onCancel =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onCancel", r"()V");

  /// from: public abstract void onCancel()
  void onCancel() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onCancel, jni.JniCallType.voidType, []).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CancellationSignal_OnCancelListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onCancel()V") {
        _$impls[$p]!.onCancel();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CancellationSignal_OnCancelListener.implement(
    $CancellationSignal_OnCancelListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CancellationSignal_OnCancelListener.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"android.os.CancellationSignal$OnCancelListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CancellationSignal_OnCancelListenerImpl {
  factory $CancellationSignal_OnCancelListenerImpl({
    required void Function() onCancel,
  }) = _$CancellationSignal_OnCancelListenerImpl;

  void onCancel();
}

class _$CancellationSignal_OnCancelListenerImpl
    implements $CancellationSignal_OnCancelListenerImpl {
  _$CancellationSignal_OnCancelListenerImpl({
    required void Function() onCancel,
  }) : _onCancel = onCancel;

  final void Function() _onCancel;

  void onCancel() {
    return _onCancel();
  }
}

final class $CancellationSignal_OnCancelListenerType
    extends jni.JObjType<CancellationSignal_OnCancelListener> {
  const $CancellationSignal_OnCancelListenerType();

  @override
  String get signature => r"Landroid/os/CancellationSignal$OnCancelListener;";

  @override
  CancellationSignal_OnCancelListener fromRef(jni.JObjectPtr ref) =>
      CancellationSignal_OnCancelListener.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CancellationSignal_OnCancelListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CancellationSignal_OnCancelListenerType) &&
        other is $CancellationSignal_OnCancelListenerType;
  }
}

/// from: android.os.CancellationSignal
class CancellationSignal extends jni.JObject {
  @override
  late final jni.JObjType<CancellationSignal> $type = type;

  CancellationSignal.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/os/CancellationSignal");

  /// The type which includes information such as the signature of this class.
  static const type = $CancellationSignalType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CancellationSignal() {
    return CancellationSignal.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_isCanceled =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isCanceled", r"()Z");

  /// from: public boolean isCanceled()
  bool isCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isCanceled, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_throwIfCanceled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"throwIfCanceled", r"()V");

  /// from: public void throwIfCanceled()
  void throwIfCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_throwIfCanceled, jni.JniCallType.voidType, []).check();
  }

  static final _id_cancel =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"cancel", r"()V");

  /// from: public void cancel()
  void cancel() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_cancel, jni.JniCallType.voidType, []).check();
  }

  static final _id_setOnCancelListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setOnCancelListener",
      r"(Landroid/os/CancellationSignal$OnCancelListener;)V");

  /// from: public void setOnCancelListener(android.os.CancellationSignal$OnCancelListener onCancelListener)
  void setOnCancelListener(
    CancellationSignal_OnCancelListener onCancelListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setOnCancelListener,
        jni.JniCallType.voidType,
        [onCancelListener.reference]).check();
  }
}

final class $CancellationSignalType extends jni.JObjType<CancellationSignal> {
  const $CancellationSignalType();

  @override
  String get signature => r"Landroid/os/CancellationSignal;";

  @override
  CancellationSignal fromRef(jni.JObjectPtr ref) =>
      CancellationSignal.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CancellationSignalType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CancellationSignalType) &&
        other is $CancellationSignalType;
  }
}

/// from: java.lang.Runnable
class Runnable extends jni.JObject {
  @override
  late final jni.JObjType<Runnable> $type = type;

  Runnable.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/lang/Runnable");

  /// The type which includes information such as the signature of this class.
  static const type = $RunnableType();
  static final _id_run =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"run", r"()V");

  /// from: public abstract void run()
  void run() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_run, jni.JniCallType.voidType, []).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $RunnableImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"run()V") {
        _$impls[$p]!.run();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Runnable.implement(
    $RunnableImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Runnable.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"java.lang.Runnable",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $RunnableImpl {
  factory $RunnableImpl({
    required void Function() run,
  }) = _$RunnableImpl;

  void run();
}

class _$RunnableImpl implements $RunnableImpl {
  _$RunnableImpl({
    required void Function() run,
  }) : _run = run;

  final void Function() _run;

  void run() {
    return _run();
  }
}

final class $RunnableType extends jni.JObjType<Runnable> {
  const $RunnableType();

  @override
  String get signature => r"Ljava/lang/Runnable;";

  @override
  Runnable fromRef(jni.JObjectPtr ref) => Runnable.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($RunnableType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($RunnableType) && other is $RunnableType;
  }
}

/// from: java.lang.Exception
class Exception extends Throwable {
  @override
  late final jni.JObjType<Exception> $type = type;

  Exception.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/lang/Exception");

  /// The type which includes information such as the signature of this class.
  static const type = $ExceptionType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception() {
    return Exception.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception.new1(
    jni.JString string,
  ) {
    return Exception.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.String string, java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception.new2(
    jni.JString string,
    Throwable throwable,
  ) {
    return Exception.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new2,
        [string.reference, throwable.reference]).object);
  }

  static final _id_new3 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception.new3(
    Throwable throwable,
  ) {
    return Exception.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new3, [throwable.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V");

  /// from: protected void <init>(java.lang.String string, java.lang.Throwable throwable, boolean z, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Exception.new4(
    jni.JString string,
    Throwable throwable,
    bool z,
    bool z1,
  ) {
    return Exception.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new4,
        [string.reference, throwable.reference, z ? 1 : 0, z1 ? 1 : 0]).object);
  }
}

final class $ExceptionType extends jni.JObjType<Exception> {
  const $ExceptionType();

  @override
  String get signature => r"Ljava/lang/Exception;";

  @override
  Exception fromRef(jni.JObjectPtr ref) => Exception.fromRef(ref);

  @override
  jni.JObjType get superType => const $ThrowableType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($ExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExceptionType) && other is $ExceptionType;
  }
}

/// from: java.lang.Throwable
class Throwable extends jni.JObject {
  @override
  late final jni.JObjType<Throwable> $type = type;

  Throwable.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/lang/Throwable");

  /// The type which includes information such as the signature of this class.
  static const type = $ThrowableType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable() {
    return Throwable.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable.new1(
    jni.JString string,
  ) {
    return Throwable.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.String string, java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable.new2(
    jni.JString string,
    Throwable throwable,
  ) {
    return Throwable.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new2,
        [string.reference, throwable.reference]).object);
  }

  static final _id_new3 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable.new3(
    Throwable throwable,
  ) {
    return Throwable.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new3, [throwable.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V");

  /// from: protected void <init>(java.lang.String string, java.lang.Throwable throwable, boolean z, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Throwable.new4(
    jni.JString string,
    Throwable throwable,
    bool z,
    bool z1,
  ) {
    return Throwable.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new4,
        [string.reference, throwable.reference, z ? 1 : 0, z1 ? 1 : 0]).object);
  }

  static final _id_getMessage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getMessage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getMessage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMessage, jni.JniCallType.objectType, []).object);
  }

  static final _id_getLocalizedMessage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLocalizedMessage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getLocalizedMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalizedMessage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLocalizedMessage,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCause = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCause", r"()Ljava/lang/Throwable;");

  /// from: public java.lang.Throwable getCause()
  /// The returned object must be released after use, by calling the [release] method.
  Throwable getCause() {
    return const $ThrowableType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCause, jni.JniCallType.objectType, []).object);
  }

  static final _id_initCause = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"initCause", r"(Ljava/lang/Throwable;)Ljava/lang/Throwable;");

  /// from: public java.lang.Throwable initCause(java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  Throwable initCause(
    Throwable throwable,
  ) {
    return const $ThrowableType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_initCause,
        jni.JniCallType.objectType,
        [throwable.reference]).object);
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }

  static final _id_printStackTrace = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"printStackTrace", r"()V");

  /// from: public void printStackTrace()
  void printStackTrace() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_printStackTrace, jni.JniCallType.voidType, []).check();
  }

  static final _id_printStackTrace1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"printStackTrace", r"(Ljava/io/PrintStream;)V");

  /// from: public void printStackTrace(java.io.PrintStream printStream)
  void printStackTrace1(
    jni.JObject printStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_printStackTrace1,
        jni.JniCallType.voidType, [printStream.reference]).check();
  }

  static final _id_printStackTrace2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"printStackTrace", r"(Ljava/io/PrintWriter;)V");

  /// from: public void printStackTrace(java.io.PrintWriter printWriter)
  void printStackTrace2(
    jni.JObject printWriter,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_printStackTrace2,
        jni.JniCallType.voidType, [printWriter.reference]).check();
  }

  static final _id_fillInStackTrace = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"fillInStackTrace", r"()Ljava/lang/Throwable;");

  /// from: public java.lang.Throwable fillInStackTrace()
  /// The returned object must be released after use, by calling the [release] method.
  Throwable fillInStackTrace() {
    return const $ThrowableType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_fillInStackTrace,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getStackTrace = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getStackTrace", r"()[Ljava/lang/StackTraceElement;");

  /// from: public java.lang.StackTraceElement[] getStackTrace()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getStackTrace() {
    return const jni.JArrayType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getStackTrace,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_setStackTrace = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setStackTrace", r"([Ljava/lang/StackTraceElement;)V");

  /// from: public void setStackTrace(java.lang.StackTraceElement[] stackTraceElements)
  void setStackTrace(
    jni.JArray<jni.JObject> stackTraceElements,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setStackTrace,
        jni.JniCallType.voidType, [stackTraceElements.reference]).check();
  }

  static final _id_addSuppressed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"addSuppressed", r"(Ljava/lang/Throwable;)V");

  /// from: public final void addSuppressed(java.lang.Throwable throwable)
  void addSuppressed(
    Throwable throwable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_addSuppressed,
        jni.JniCallType.voidType, [throwable.reference]).check();
  }

  static final _id_getSuppressed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSuppressed", r"()[Ljava/lang/Throwable;");

  /// from: public final java.lang.Throwable[] getSuppressed()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<Throwable> getSuppressed() {
    return const jni.JArrayType($ThrowableType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getSuppressed,
            jni.JniCallType.objectType, []).object);
  }
}

final class $ThrowableType extends jni.JObjType<Throwable> {
  const $ThrowableType();

  @override
  String get signature => r"Ljava/lang/Throwable;";

  @override
  Throwable fromRef(jni.JObjectPtr ref) => Throwable.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ThrowableType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ThrowableType) && other is $ThrowableType;
  }
}

/// from: androidx.credentials.CreateCredentialRequest$Companion
class CreateCredentialRequest_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialRequest_Companion> $type = type;

  CreateCredentialRequest_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreateCredentialRequest$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialRequest_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/Bundle;ZLjava/lang/String;)Landroidx/credentials/CreateCredentialRequest;");

  /// from: public final androidx.credentials.CreateCredentialRequest createFrom(java.lang.String string, android.os.Bundle bundle, android.os.Bundle bundle1, boolean z, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialRequest createFrom(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject bundle1,
    bool z,
    jni.JString string1,
  ) {
    return const $CreateCredentialRequestType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_createFrom, jni.JniCallType.objectType, [
      string.reference,
      bundle.reference,
      bundle1.reference,
      z ? 1 : 0,
      string1.reference
    ]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialRequest_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialRequest_CompanionType
    extends jni.JObjType<CreateCredentialRequest_Companion> {
  const $CreateCredentialRequest_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreateCredentialRequest$Companion;";

  @override
  CreateCredentialRequest_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialRequest_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialRequest_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialRequest_CompanionType) &&
        other is $CreateCredentialRequest_CompanionType;
  }
}

/// from: androidx.credentials.CreateCredentialRequest$DisplayInfo$Companion
class CreateCredentialRequest_DisplayInfo_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialRequest_DisplayInfo_Companion> $type =
      type;

  CreateCredentialRequest_DisplayInfo_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreateCredentialRequest$DisplayInfo$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialRequest_DisplayInfo_CompanionType();
  static final _id_parseFromCredentialDataBundle = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"parseFromCredentialDataBundle",
      r"(Landroid/os/Bundle;)Landroidx/credentials/CreateCredentialRequest$DisplayInfo;");

  /// from: public final androidx.credentials.CreateCredentialRequest$DisplayInfo parseFromCredentialDataBundle(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialRequest_DisplayInfo parseFromCredentialDataBundle(
    jni.JObject bundle,
  ) {
    return const $CreateCredentialRequest_DisplayInfoType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_parseFromCredentialDataBundle,
            jni.JniCallType.objectType,
            [bundle.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialRequest_DisplayInfo_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialRequest_DisplayInfo_CompanionType
    extends jni.JObjType<CreateCredentialRequest_DisplayInfo_Companion> {
  const $CreateCredentialRequest_DisplayInfo_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreateCredentialRequest$DisplayInfo$Companion;";

  @override
  CreateCredentialRequest_DisplayInfo_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialRequest_DisplayInfo_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialRequest_DisplayInfo_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialRequest_DisplayInfo_CompanionType) &&
        other is $CreateCredentialRequest_DisplayInfo_CompanionType;
  }
}

/// from: androidx.credentials.CreateCredentialRequest$DisplayInfo
class CreateCredentialRequest_DisplayInfo extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialRequest_DisplayInfo> $type = type;

  CreateCredentialRequest_DisplayInfo.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreateCredentialRequest$DisplayInfo");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialRequest_DisplayInfoType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreateCredentialRequest$DisplayInfo$Companion;",
  );

  /// from: static public final androidx.credentials.CreateCredentialRequest$DisplayInfo$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialRequest_DisplayInfo_Companion get Companion =>
      const $CreateCredentialRequest_DisplayInfo_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_REQUEST_DISPLAY_INFO
  static const BUNDLE_KEY_REQUEST_DISPLAY_INFO =
      r"""androidx.credentials.BUNDLE_KEY_REQUEST_DISPLAY_INFO""";

  /// from: static public final java.lang.String BUNDLE_KEY_USER_ID
  static const BUNDLE_KEY_USER_ID =
      r"""androidx.credentials.BUNDLE_KEY_USER_ID""";

  /// from: static public final java.lang.String BUNDLE_KEY_USER_DISPLAY_NAME
  static const BUNDLE_KEY_USER_DISPLAY_NAME =
      r"""androidx.credentials.BUNDLE_KEY_USER_DISPLAY_NAME""";

  /// from: static public final java.lang.String BUNDLE_KEY_CREDENTIAL_TYPE_ICON
  static const BUNDLE_KEY_CREDENTIAL_TYPE_ICON =
      r"""androidx.credentials.BUNDLE_KEY_CREDENTIAL_TYPE_ICON""";

  /// from: static public final java.lang.String BUNDLE_KEY_DEFAULT_PROVIDER
  static const BUNDLE_KEY_DEFAULT_PROVIDER =
      r"""androidx.credentials.BUNDLE_KEY_DEFAULT_PROVIDER""";

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/graphics/drawable/Icon;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1, android.graphics.drawable.Icon icon, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo(
    jni.JObject charSequence,
    jni.JObject charSequence1,
    jni.JObject icon,
    jni.JString string,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0, [
      charSequence.reference,
      charSequence1.reference,
      icon.reference,
      string.reference
    ]).object);
  }

  static final _id_getUserId = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getUserId", r"()Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getUserId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserId() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getUserId, jni.JniCallType.objectType, []).object);
  }

  static final _id_getUserDisplayName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getUserDisplayName", r"()Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getUserDisplayName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserDisplayName() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getUserDisplayName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCredentialTypeIcon = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredentialTypeIcon",
      r"()Landroid/graphics/drawable/Icon;");

  /// from: public final android.graphics.drawable.Icon getCredentialTypeIcon()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCredentialTypeIcon() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCredentialTypeIcon,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPreferDefaultProvider = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getPreferDefaultProvider", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getPreferDefaultProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPreferDefaultProvider() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPreferDefaultProvider,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo.new1(
    jni.JObject charSequence,
    jni.JObject charSequence1,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new1,
            [charSequence.reference, charSequence1.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo.new2(
    jni.JObject charSequence,
    jni.JObject charSequence1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new2, [
      charSequence.reference,
      charSequence1.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo.new3(
    jni.JObject charSequence,
    jni.JObject charSequence1,
    jni.JString string,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new3, [
      charSequence.reference,
      charSequence1.reference,
      string.reference
    ]).object);
  }

  static final _id_toBundle = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toBundle", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle toBundle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject toBundle() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toBundle, jni.JniCallType.objectType, []).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest_DisplayInfo.new4(
    jni.JObject charSequence,
  ) {
    return CreateCredentialRequest_DisplayInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new4, [charSequence.reference]).object);
  }

  static final _id_parseFromCredentialDataBundle = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"parseFromCredentialDataBundle",
          r"(Landroid/os/Bundle;)Landroidx/credentials/CreateCredentialRequest$DisplayInfo;");

  /// from: static public final androidx.credentials.CreateCredentialRequest$DisplayInfo parseFromCredentialDataBundle(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialRequest_DisplayInfo parseFromCredentialDataBundle(
    jni.JObject bundle,
  ) {
    return const $CreateCredentialRequest_DisplayInfoType().fromRef(
        jni.Jni.accessors.callStaticMethodWithArgs(
            _class.reference,
            _id_parseFromCredentialDataBundle,
            jni.JniCallType.objectType,
            [bundle.reference]).object);
  }
}

final class $CreateCredentialRequest_DisplayInfoType
    extends jni.JObjType<CreateCredentialRequest_DisplayInfo> {
  const $CreateCredentialRequest_DisplayInfoType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreateCredentialRequest$DisplayInfo;";

  @override
  CreateCredentialRequest_DisplayInfo fromRef(jni.JObjectPtr ref) =>
      CreateCredentialRequest_DisplayInfo.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialRequest_DisplayInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialRequest_DisplayInfoType) &&
        other is $CreateCredentialRequest_DisplayInfoType;
  }
}

/// from: androidx.credentials.CreateCredentialRequest
class CreateCredentialRequest extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialRequest> $type = type;

  CreateCredentialRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CreateCredentialRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialRequestType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreateCredentialRequest$Companion;",
  );

  /// from: static public final androidx.credentials.CreateCredentialRequest$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialRequest_Companion get Companion =>
      const $CreateCredentialRequest_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS
  static const BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS =
      r"""androidx.credentials.BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS""";

  /// from: static public final java.lang.String BUNDLE_KEY_IS_AUTO_SELECT_ALLOWED
  static const BUNDLE_KEY_IS_AUTO_SELECT_ALLOWED =
      r"""androidx.credentials.BUNDLE_KEY_IS_AUTO_SELECT_ALLOWED""";

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/Bundle;ZZLandroidx/credentials/CreateCredentialRequest$DisplayInfo;Ljava/lang/String;Z)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle, android.os.Bundle bundle1, boolean z, boolean z1, androidx.credentials.CreateCredentialRequest$DisplayInfo displayInfo, java.lang.String string1, boolean z2)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialRequest(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject bundle1,
    bool z,
    bool z1,
    CreateCredentialRequest_DisplayInfo displayInfo,
    jni.JString string1,
    bool z2,
  ) {
    return CreateCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0, [
      string.reference,
      bundle.reference,
      bundle1.reference,
      z ? 1 : 0,
      z1 ? 1 : 0,
      displayInfo.reference,
      string1.reference,
      z2 ? 1 : 0
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getCredentialData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCredentialData", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getCredentialData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCredentialData() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCredentialData,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCandidateQueryData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCandidateQueryData", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getCandidateQueryData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCandidateQueryData() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCandidateQueryData,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_isSystemProviderRequired = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isSystemProviderRequired", r"()Z");

  /// from: public final boolean isSystemProviderRequired()
  bool isSystemProviderRequired() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isSystemProviderRequired, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isAutoSelectAllowed = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isAutoSelectAllowed", r"()Z");

  /// from: public final boolean isAutoSelectAllowed()
  bool isAutoSelectAllowed() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isAutoSelectAllowed, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getDisplayInfo = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDisplayInfo",
      r"()Landroidx/credentials/CreateCredentialRequest$DisplayInfo;");

  /// from: public final androidx.credentials.CreateCredentialRequest$DisplayInfo getDisplayInfo()
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialRequest_DisplayInfo getDisplayInfo() {
    return const $CreateCredentialRequest_DisplayInfoType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(reference, _id_getDisplayInfo,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getOrigin = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getOrigin", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getOrigin()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOrigin() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getOrigin, jni.JniCallType.objectType, []).object);
  }

  static final _id_preferImmediatelyAvailableCredentials = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"preferImmediatelyAvailableCredentials", r"()Z");

  /// from: public final boolean preferImmediatelyAvailableCredentials()
  bool preferImmediatelyAvailableCredentials() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_preferImmediatelyAvailableCredentials,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/Bundle;ZLjava/lang/String;)Landroidx/credentials/CreateCredentialRequest;");

  /// from: static public final androidx.credentials.CreateCredentialRequest createFrom(java.lang.String string, android.os.Bundle bundle, android.os.Bundle bundle1, boolean z, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialRequest createFrom(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject bundle1,
    bool z,
    jni.JString string1,
  ) {
    return const $CreateCredentialRequestType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_createFrom, jni.JniCallType.objectType, [
      string.reference,
      bundle.reference,
      bundle1.reference,
      z ? 1 : 0,
      string1.reference
    ]).object);
  }
}

final class $CreateCredentialRequestType
    extends jni.JObjType<CreateCredentialRequest> {
  const $CreateCredentialRequestType();

  @override
  String get signature => r"Landroidx/credentials/CreateCredentialRequest;";

  @override
  CreateCredentialRequest fromRef(jni.JObjectPtr ref) =>
      CreateCredentialRequest.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialRequestType) &&
        other is $CreateCredentialRequestType;
  }
}

/// from: androidx.credentials.CreateCredentialResponse$Companion
class CreateCredentialResponse_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialResponse_Companion> $type = type;

  CreateCredentialResponse_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreateCredentialResponse$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialResponse_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/CreateCredentialResponse;");

  /// from: public final androidx.credentials.CreateCredentialResponse createFrom(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialResponse createFrom(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return const $CreateCredentialResponseType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, bundle.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialResponse_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialResponse_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialResponse_CompanionType
    extends jni.JObjType<CreateCredentialResponse_Companion> {
  const $CreateCredentialResponse_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreateCredentialResponse$Companion;";

  @override
  CreateCredentialResponse_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialResponse_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialResponse_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialResponse_CompanionType) &&
        other is $CreateCredentialResponse_CompanionType;
  }
}

/// from: androidx.credentials.CreateCredentialResponse
class CreateCredentialResponse extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialResponse> $type = type;

  CreateCredentialResponse.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CreateCredentialResponse");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialResponseType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreateCredentialResponse$Companion;",
  );

  /// from: static public final androidx.credentials.CreateCredentialResponse$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialResponse_Companion get Companion =>
      const $CreateCredentialResponse_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialResponse(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return CreateCredentialResponse.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [string.reference, bundle.reference]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getData = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getData", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getData() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getData, jni.JniCallType.objectType, []).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/CreateCredentialResponse;");

  /// from: static public final androidx.credentials.CreateCredentialResponse createFrom(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialResponse createFrom(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return const $CreateCredentialResponseType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, bundle.reference]).object);
  }
}

final class $CreateCredentialResponseType
    extends jni.JObjType<CreateCredentialResponse> {
  const $CreateCredentialResponseType();

  @override
  String get signature => r"Landroidx/credentials/CreateCredentialResponse;";

  @override
  CreateCredentialResponse fromRef(jni.JObjectPtr ref) =>
      CreateCredentialResponse.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CreateCredentialResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialResponseType) &&
        other is $CreateCredentialResponseType;
  }
}

/// from: androidx.credentials.CreatePublicKeyCredentialRequest$Companion
class CreatePublicKeyCredentialRequest_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialRequest_Companion> $type =
      type;

  CreatePublicKeyCredentialRequest_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreatePublicKeyCredentialRequest$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialRequest_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialRequest_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreatePublicKeyCredentialRequest_CompanionType
    extends jni.JObjType<CreatePublicKeyCredentialRequest_Companion> {
  const $CreatePublicKeyCredentialRequest_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreatePublicKeyCredentialRequest$Companion;";

  @override
  CreatePublicKeyCredentialRequest_Companion fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialRequest_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreatePublicKeyCredentialRequest_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreatePublicKeyCredentialRequest_CompanionType) &&
        other is $CreatePublicKeyCredentialRequest_CompanionType;
  }
}

/// from: androidx.credentials.CreatePublicKeyCredentialRequest
class CreatePublicKeyCredentialRequest extends CreateCredentialRequest {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialRequest> $type = type;

  CreatePublicKeyCredentialRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreatePublicKeyCredentialRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialRequestType();
  static final _id_Companion1 = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreatePublicKeyCredentialRequest$Companion;",
  );

  /// from: static public final androidx.credentials.CreatePublicKeyCredentialRequest$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreatePublicKeyCredentialRequest_Companion get Companion1 =>
      const $CreatePublicKeyCredentialRequest_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion1, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_CLIENT_DATA_HASH
  static const BUNDLE_KEY_CLIENT_DATA_HASH =
      r"""androidx.credentials.BUNDLE_KEY_CLIENT_DATA_HASH""";

  /// from: static public final java.lang.String BUNDLE_KEY_REQUEST_JSON
  static const BUNDLE_KEY_REQUEST_JSON =
      r"""androidx.credentials.BUNDLE_KEY_REQUEST_JSON""";

  /// from: static public final java.lang.String BUNDLE_VALUE_SUBTYPE_CREATE_PUBLIC_KEY_CREDENTIAL_REQUEST
  static const BUNDLE_VALUE_SUBTYPE_CREATE_PUBLIC_KEY_CREDENTIAL_REQUEST =
      r"""androidx.credentials.BUNDLE_VALUE_SUBTYPE_CREATE_PUBLIC_KEY_CREDENTIAL_REQUEST""";

  static final _id_getRequestJson = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getRequestJson", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getRequestJson()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRequestJson() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getRequestJson, jni.JniCallType.objectType, []).object);
  }

  static final _id_getClientDataHash = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getClientDataHash", r"()[B");

  /// from: public final byte[] getClientDataHash()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getClientDataHash() {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getClientDataHash,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;[BZLjava/lang/String;Z)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, java.lang.String string1, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new1(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    jni.JString string1,
    bool z1,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new1, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      string1.reference,
      z1 ? 1 : 0
    ]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BZLjava/lang/String;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, java.lang.String string1, boolean z1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new2(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    jni.JString string1,
    bool z1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new2, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      string1.reference,
      z1 ? 1 : 0,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BZLjava/lang/String;Ljava/lang/String;Z)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, java.lang.String string1, java.lang.String string2, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new3(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    jni.JString string1,
    jni.JString string2,
    bool z1,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new3, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      string1.reference,
      string2.reference,
      z1 ? 1 : 0
    ]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;[BZLjava/lang/String;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new4(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    jni.JString string1,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new4, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      string1.reference
    ]).object);
  }

  static final _id_new5 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;[BZ)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new5(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new5,
            [string.reference, bs.reference, z ? 1 : 0]).object);
  }

  static final _id_new6 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;[B)V");

  /// from: public void <init>(java.lang.String string, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new6(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new6,
            [string.reference, bs.reference]).object);
  }

  static final _id_new7 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new7(
    jni.JString string,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [string.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BZZLandroidx/credentials/CreateCredentialRequest$DisplayInfo;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/Bundle;Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, boolean z, boolean z1, androidx.credentials.CreateCredentialRequest$DisplayInfo displayInfo, java.lang.String string1, android.os.Bundle bundle, android.os.Bundle bundle1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialRequest.new8(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    bool z,
    bool z1,
    CreateCredentialRequest_DisplayInfo displayInfo,
    jni.JString string1,
    jni.JObject bundle,
    jni.JObject bundle1,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new8, [
      string.reference,
      bs.reference,
      z ? 1 : 0,
      z1 ? 1 : 0,
      displayInfo.reference,
      string1.reference,
      bundle.reference,
      bundle1.reference,
      defaultConstructorMarker.reference
    ]).object);
  }
}

final class $CreatePublicKeyCredentialRequestType
    extends jni.JObjType<CreatePublicKeyCredentialRequest> {
  const $CreatePublicKeyCredentialRequestType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreatePublicKeyCredentialRequest;";

  @override
  CreatePublicKeyCredentialRequest fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialRequest.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialRequestType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($CreatePublicKeyCredentialRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreatePublicKeyCredentialRequestType) &&
        other is $CreatePublicKeyCredentialRequestType;
  }
}

/// from: androidx.credentials.CreatePublicKeyCredentialResponse$Companion
class CreatePublicKeyCredentialResponse_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialResponse_Companion> $type =
      type;

  CreatePublicKeyCredentialResponse_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreatePublicKeyCredentialResponse$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialResponse_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialResponse_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialResponse_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreatePublicKeyCredentialResponse_CompanionType
    extends jni.JObjType<CreatePublicKeyCredentialResponse_Companion> {
  const $CreatePublicKeyCredentialResponse_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreatePublicKeyCredentialResponse$Companion;";

  @override
  CreatePublicKeyCredentialResponse_Companion fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialResponse_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreatePublicKeyCredentialResponse_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreatePublicKeyCredentialResponse_CompanionType) &&
        other is $CreatePublicKeyCredentialResponse_CompanionType;
  }
}

/// from: androidx.credentials.CreatePublicKeyCredentialResponse
class CreatePublicKeyCredentialResponse extends CreateCredentialResponse {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialResponse> $type = type;

  CreatePublicKeyCredentialResponse.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/CreatePublicKeyCredentialResponse");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialResponseType();
  static final _id_Companion1 = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CreatePublicKeyCredentialResponse$Companion;",
  );

  /// from: static public final androidx.credentials.CreatePublicKeyCredentialResponse$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreatePublicKeyCredentialResponse_Companion get Companion1 =>
      const $CreatePublicKeyCredentialResponse_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion1, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_REGISTRATION_RESPONSE_JSON
  static const BUNDLE_KEY_REGISTRATION_RESPONSE_JSON =
      r"""androidx.credentials.BUNDLE_KEY_REGISTRATION_RESPONSE_JSON""";

  static final _id_getRegistrationResponseJson = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getRegistrationResponseJson",
          r"()Ljava/lang/String;");

  /// from: public final java.lang.String getRegistrationResponseJson()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRegistrationResponseJson() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getRegistrationResponseJson,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialResponse.new1(
    jni.JString string,
  ) {
    return CreatePublicKeyCredentialResponse.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Landroid/os/Bundle;Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialResponse.new2(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialResponse.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new2, [
      string.reference,
      bundle.reference,
      defaultConstructorMarker.reference
    ]).object);
  }
}

final class $CreatePublicKeyCredentialResponseType
    extends jni.JObjType<CreatePublicKeyCredentialResponse> {
  const $CreatePublicKeyCredentialResponseType();

  @override
  String get signature =>
      r"Landroidx/credentials/CreatePublicKeyCredentialResponse;";

  @override
  CreatePublicKeyCredentialResponse fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialResponse.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialResponseType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($CreatePublicKeyCredentialResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreatePublicKeyCredentialResponseType) &&
        other is $CreatePublicKeyCredentialResponseType;
  }
}

/// from: androidx.credentials.Credential$Companion
class Credential_Companion extends jni.JObject {
  @override
  late final jni.JObjType<Credential_Companion> $type = type;

  Credential_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/Credential$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $Credential_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/Credential;");

  /// from: public final androidx.credentials.Credential createFrom(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Credential createFrom(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return const $CredentialType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createFrom,
        jni.JniCallType.objectType,
        [string.reference, bundle.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory Credential_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return Credential_Companion.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [defaultConstructorMarker.reference]).object);
  }
}

final class $Credential_CompanionType
    extends jni.JObjType<Credential_Companion> {
  const $Credential_CompanionType();

  @override
  String get signature => r"Landroidx/credentials/Credential$Companion;";

  @override
  Credential_Companion fromRef(jni.JObjectPtr ref) =>
      Credential_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Credential_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Credential_CompanionType) &&
        other is $Credential_CompanionType;
  }
}

/// from: androidx.credentials.Credential
class Credential extends jni.JObject {
  @override
  late final jni.JObjType<Credential> $type = type;

  Credential.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"androidx/credentials/Credential");

  /// The type which includes information such as the signature of this class.
  static const type = $CredentialType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/Credential$Companion;",
  );

  /// from: static public final androidx.credentials.Credential$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static Credential_Companion get Companion =>
      const $Credential_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  factory Credential(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return Credential.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [string.reference, bundle.reference]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getData = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getData", r"()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getData() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getData, jni.JniCallType.objectType, []).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/Credential;");

  /// from: static public final androidx.credentials.Credential createFrom(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  static Credential createFrom(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return const $CredentialType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, bundle.reference]).object);
  }
}

final class $CredentialType extends jni.JObjType<Credential> {
  const $CredentialType();

  @override
  String get signature => r"Landroidx/credentials/Credential;";

  @override
  Credential fromRef(jni.JObjectPtr ref) => Credential.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CredentialType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialType) && other is $CredentialType;
  }
}

/// from: androidx.credentials.CredentialManager$Companion
class CredentialManager_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CredentialManager_Companion> $type = type;

  CredentialManager_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CredentialManager$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CredentialManager_CompanionType();
  static final _id_create = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"create",
      r"(Landroid/content/Context;)Landroidx/credentials/CredentialManager;");

  /// from: public final androidx.credentials.CredentialManager create(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  CredentialManager create(
    Context context,
  ) {
    return const $CredentialManagerType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_create, jni.JniCallType.objectType,
            [context.reference]).object);
  }
}

final class $CredentialManager_CompanionType
    extends jni.JObjType<CredentialManager_Companion> {
  const $CredentialManager_CompanionType();

  @override
  String get signature => r"Landroidx/credentials/CredentialManager$Companion;";

  @override
  CredentialManager_Companion fromRef(jni.JObjectPtr ref) =>
      CredentialManager_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CredentialManager_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialManager_CompanionType) &&
        other is $CredentialManager_CompanionType;
  }
}

/// from: androidx.credentials.CredentialManager
class CredentialManager extends jni.JObject {
  @override
  late final jni.JObjType<CredentialManager> $type = type;

  CredentialManager.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CredentialManager");

  /// The type which includes information such as the signature of this class.
  static const type = $CredentialManagerType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/CredentialManager$Companion;",
  );

  /// from: static public final androidx.credentials.CredentialManager$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CredentialManager_Companion get Companion =>
      const $CredentialManager_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  static final _id_getCredential = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredential",
      r"(Landroid/content/Context;Landroidx/credentials/GetCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object getCredential(android.content.Context context, androidx.credentials.GetCredentialRequest getCredentialRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<GetCredentialResponse> getCredential(
    Context context,
    GetCredentialRequest getCredentialRequest,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredential, jni.JniCallType.objectType, [
      context.reference,
      getCredentialRequest.reference,
      $c.reference
    ]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const $GetCredentialResponseType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const $GetCredentialResponseType().fromRef($o);
  }

  static final _id_getCredential1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredential",
      r"(Landroid/content/Context;Landroidx/credentials/PrepareGetCredentialResponse$PendingGetCredentialHandle;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object getCredential(android.content.Context context, androidx.credentials.PrepareGetCredentialResponse$PendingGetCredentialHandle pendingGetCredentialHandle, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<GetCredentialResponse> getCredential1(
    Context context,
    jni.JObject pendingGetCredentialHandle,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredential1, jni.JniCallType.objectType, [
      context.reference,
      pendingGetCredentialHandle.reference,
      $c.reference
    ]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const $GetCredentialResponseType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const $GetCredentialResponseType().fromRef($o);
  }

  static final _id_prepareGetCredential = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"prepareGetCredential",
      r"(Landroidx/credentials/GetCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object prepareGetCredential(androidx.credentials.GetCredentialRequest getCredentialRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> prepareGetCredential(
    GetCredentialRequest getCredentialRequest,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_prepareGetCredential,
        jni.JniCallType.objectType,
        [getCredentialRequest.reference, $c.reference]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _id_createCredential = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createCredential",
      r"(Landroid/content/Context;Landroidx/credentials/CreateCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object createCredential(android.content.Context context, androidx.credentials.CreateCredentialRequest createCredentialRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<CreateCredentialResponse> createCredential(
    Context context,
    CreateCredentialRequest createCredentialRequest,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference, _id_createCredential, jni.JniCallType.objectType, [
      context.reference,
      createCredentialRequest.reference,
      $c.reference
    ]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const $CreateCredentialResponseType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const $CreateCredentialResponseType().fromRef($o);
  }

  static final _id_clearCredentialState = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"clearCredentialState",
      r"(Landroidx/credentials/ClearCredentialStateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;");

  /// from: public java.lang.Object clearCredentialState(androidx.credentials.ClearCredentialStateRequest clearCredentialStateRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> clearCredentialState(
    jni.JObject clearCredentialStateRequest,
  ) async {
    final $p = ReceivePort();
    final $c =
        jni.JObject.fromRef(ProtectedJniExtensions.newPortContinuation($p));
    jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_clearCredentialState,
        jni.JniCallType.objectType,
        [clearCredentialStateRequest.reference, $c.reference]).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _id_getCredentialAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredentialAsync",
      r"(Landroid/content/Context;Landroidx/credentials/GetCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void getCredentialAsync(android.content.Context context, androidx.credentials.GetCredentialRequest getCredentialRequest, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void getCredentialAsync(
    Context context,
    GetCredentialRequest getCredentialRequest,
    CancellationSignal cancellationSignal,
    jni.JObject executor,
    CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredentialAsync, jni.JniCallType.voidType, [
      context.reference,
      getCredentialRequest.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_getCredentialAsync1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredentialAsync",
      r"(Landroid/content/Context;Landroidx/credentials/PrepareGetCredentialResponse$PendingGetCredentialHandle;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void getCredentialAsync(android.content.Context context, androidx.credentials.PrepareGetCredentialResponse$PendingGetCredentialHandle pendingGetCredentialHandle, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void getCredentialAsync1(
    Context context,
    jni.JObject pendingGetCredentialHandle,
    CancellationSignal cancellationSignal,
    jni.JObject executor,
    CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredentialAsync1, jni.JniCallType.voidType, [
      context.reference,
      pendingGetCredentialHandle.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_prepareGetCredentialAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"prepareGetCredentialAsync",
      r"(Landroidx/credentials/GetCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void prepareGetCredentialAsync(androidx.credentials.GetCredentialRequest getCredentialRequest, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void prepareGetCredentialAsync(
    GetCredentialRequest getCredentialRequest,
    CancellationSignal cancellationSignal,
    jni.JObject executor,
    CredentialManagerCallback<jni.JObject, GetCredentialException>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_prepareGetCredentialAsync, jni.JniCallType.voidType, [
      getCredentialRequest.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_createCredentialAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createCredentialAsync",
      r"(Landroid/content/Context;Landroidx/credentials/CreateCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void createCredentialAsync(android.content.Context context, androidx.credentials.CreateCredentialRequest createCredentialRequest, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void createCredentialAsync(
    Context context,
    CreateCredentialRequest createCredentialRequest,
    CancellationSignal cancellationSignal,
    jni.JObject executor,
    CredentialManagerCallback<CreateCredentialResponse,
            CreateCredentialException>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_createCredentialAsync, jni.JniCallType.voidType, [
      context.reference,
      createCredentialRequest.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_clearCredentialStateAsync = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"clearCredentialStateAsync",
      r"(Landroidx/credentials/ClearCredentialStateRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V");

  /// from: public abstract void clearCredentialStateAsync(androidx.credentials.ClearCredentialStateRequest clearCredentialStateRequest, android.os.CancellationSignal cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback credentialManagerCallback)
  void clearCredentialStateAsync(
    jni.JObject clearCredentialStateRequest,
    CancellationSignal cancellationSignal,
    jni.JObject executor,
    CredentialManagerCallback<jni.JObject, jni.JObject>
        credentialManagerCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearCredentialStateAsync, jni.JniCallType.voidType, [
      clearCredentialStateRequest.reference,
      cancellationSignal.reference,
      executor.reference,
      credentialManagerCallback.reference
    ]).check();
  }

  static final _id_createSettingsPendingIntent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"createSettingsPendingIntent",
          r"()Landroid/app/PendingIntent;");

  /// from: public abstract android.app.PendingIntent createSettingsPendingIntent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createSettingsPendingIntent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createSettingsPendingIntent,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_create = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"create",
      r"(Landroid/content/Context;)Landroidx/credentials/CredentialManager;");

  /// from: static public androidx.credentials.CredentialManager create(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static CredentialManager create(
    Context context,
  ) {
    return const $CredentialManagerType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_create,
            jni.JniCallType.objectType, [context.reference]).object);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CredentialManagerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r"getCredential(Landroid/content/Context;Landroidx/credentials/GetCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.getCredential(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1]
              .castTo(const $GetCredentialRequestType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"getCredential(Landroid/content/Context;Landroidx/credentials/PrepareGetCredentialResponse$PendingGetCredentialHandle;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.getCredential1(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"prepareGetCredential(Landroidx/credentials/GetCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.prepareGetCredential(
          $a[0]
              .castTo(const $GetCredentialRequestType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"createCredential(Landroid/content/Context;Landroidx/credentials/CreateCredentialRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.createCredential(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const $CreateCredentialRequestType(),
              releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"clearCredentialState(Landroidx/credentials/ClearCredentialStateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.clearCredentialState(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"getCredentialAsync(Landroid/content/Context;Landroidx/credentials/GetCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.getCredentialAsync(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1]
              .castTo(const $GetCredentialRequestType(), releaseOriginal: true),
          $a[2].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[3].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[4].castTo(
              const $CredentialManagerCallbackType(
                  $GetCredentialResponseType(), $GetCredentialExceptionType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"getCredentialAsync(Landroid/content/Context;Landroidx/credentials/PrepareGetCredentialResponse$PendingGetCredentialHandle;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.getCredentialAsync1(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[2].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[3].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[4].castTo(
              const $CredentialManagerCallbackType(
                  $GetCredentialResponseType(), $GetCredentialExceptionType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"prepareGetCredentialAsync(Landroidx/credentials/GetCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.prepareGetCredentialAsync(
          $a[0]
              .castTo(const $GetCredentialRequestType(), releaseOriginal: true),
          $a[1].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[3].castTo(
              const $CredentialManagerCallbackType(
                  jni.JObjectType(), $GetCredentialExceptionType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"createCredentialAsync(Landroid/content/Context;Landroidx/credentials/CreateCredentialRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.createCredentialAsync(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const $CreateCredentialRequestType(),
              releaseOriginal: true),
          $a[2].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[3].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[4].castTo(
              const $CredentialManagerCallbackType(
                  $CreateCredentialResponseType(),
                  $CreateCredentialExceptionType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"clearCredentialStateAsync(Landroidx/credentials/ClearCredentialStateRequest;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroidx/credentials/CredentialManagerCallback;)V") {
        _$impls[$p]!.clearCredentialStateAsync(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const $CancellationSignalType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[3].castTo(
              const $CredentialManagerCallbackType(
                  jni.JObjectType(), jni.JObjectType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"createSettingsPendingIntent()Landroid/app/PendingIntent;") {
        final $r = _$impls[$p]!.createSettingsPendingIntent();
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
      if ($d ==
          r"create(Landroid/content/Context;)Landroidx/credentials/CredentialManager;") {
        final $r = _$impls[$p]!.create(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CredentialManager.implement(
    $CredentialManagerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CredentialManager.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.credentials.CredentialManager",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CredentialManagerImpl {
  factory $CredentialManagerImpl({
    required jni.JObject Function(Context context,
            GetCredentialRequest getCredentialRequest, jni.JObject $c)
        getCredential,
    required jni.JObject Function(Context context,
            jni.JObject pendingGetCredentialHandle, jni.JObject $c)
        getCredential1,
    required jni.JObject Function(
            GetCredentialRequest getCredentialRequest, jni.JObject $c)
        prepareGetCredential,
    required jni.JObject Function(Context context,
            CreateCredentialRequest createCredentialRequest, jni.JObject $c)
        createCredential,
    required jni.JObject Function(
            jni.JObject clearCredentialStateRequest, jni.JObject $c)
        clearCredentialState,
    required void Function(
            Context context,
            GetCredentialRequest getCredentialRequest,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<GetCredentialResponse,
                    GetCredentialException>
                credentialManagerCallback)
        getCredentialAsync,
    required void Function(
            Context context,
            jni.JObject pendingGetCredentialHandle,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<GetCredentialResponse,
                    GetCredentialException>
                credentialManagerCallback)
        getCredentialAsync1,
    required void Function(
            GetCredentialRequest getCredentialRequest,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<jni.JObject, GetCredentialException>
                credentialManagerCallback)
        prepareGetCredentialAsync,
    required void Function(
            Context context,
            CreateCredentialRequest createCredentialRequest,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<CreateCredentialResponse,
                    CreateCredentialException>
                credentialManagerCallback)
        createCredentialAsync,
    required void Function(
            jni.JObject clearCredentialStateRequest,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<jni.JObject, jni.JObject>
                credentialManagerCallback)
        clearCredentialStateAsync,
    required jni.JObject Function() createSettingsPendingIntent,
    required CredentialManager Function(Context context) create,
  }) = _$CredentialManagerImpl;

  jni.JObject getCredential(Context context,
      GetCredentialRequest getCredentialRequest, jni.JObject $c);
  jni.JObject getCredential1(
      Context context, jni.JObject pendingGetCredentialHandle, jni.JObject $c);
  jni.JObject prepareGetCredential(
      GetCredentialRequest getCredentialRequest, jni.JObject $c);
  jni.JObject createCredential(Context context,
      CreateCredentialRequest createCredentialRequest, jni.JObject $c);
  jni.JObject clearCredentialState(
      jni.JObject clearCredentialStateRequest, jni.JObject $c);
  void getCredentialAsync(
      Context context,
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback);
  void getCredentialAsync1(
      Context context,
      jni.JObject pendingGetCredentialHandle,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback);
  void prepareGetCredentialAsync(
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<jni.JObject, GetCredentialException>
          credentialManagerCallback);
  void createCredentialAsync(
      Context context,
      CreateCredentialRequest createCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<CreateCredentialResponse,
              CreateCredentialException>
          credentialManagerCallback);
  void clearCredentialStateAsync(
      jni.JObject clearCredentialStateRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<jni.JObject, jni.JObject>
          credentialManagerCallback);
  jni.JObject createSettingsPendingIntent();
  CredentialManager create(Context context);
}

class _$CredentialManagerImpl implements $CredentialManagerImpl {
  _$CredentialManagerImpl({
    required jni.JObject Function(Context context,
            GetCredentialRequest getCredentialRequest, jni.JObject $c)
        getCredential,
    required jni.JObject Function(Context context,
            jni.JObject pendingGetCredentialHandle, jni.JObject $c)
        getCredential1,
    required jni.JObject Function(
            GetCredentialRequest getCredentialRequest, jni.JObject $c)
        prepareGetCredential,
    required jni.JObject Function(Context context,
            CreateCredentialRequest createCredentialRequest, jni.JObject $c)
        createCredential,
    required jni.JObject Function(
            jni.JObject clearCredentialStateRequest, jni.JObject $c)
        clearCredentialState,
    required void Function(
            Context context,
            GetCredentialRequest getCredentialRequest,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<GetCredentialResponse,
                    GetCredentialException>
                credentialManagerCallback)
        getCredentialAsync,
    required void Function(
            Context context,
            jni.JObject pendingGetCredentialHandle,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<GetCredentialResponse,
                    GetCredentialException>
                credentialManagerCallback)
        getCredentialAsync1,
    required void Function(
            GetCredentialRequest getCredentialRequest,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<jni.JObject, GetCredentialException>
                credentialManagerCallback)
        prepareGetCredentialAsync,
    required void Function(
            Context context,
            CreateCredentialRequest createCredentialRequest,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<CreateCredentialResponse,
                    CreateCredentialException>
                credentialManagerCallback)
        createCredentialAsync,
    required void Function(
            jni.JObject clearCredentialStateRequest,
            CancellationSignal cancellationSignal,
            jni.JObject executor,
            CredentialManagerCallback<jni.JObject, jni.JObject>
                credentialManagerCallback)
        clearCredentialStateAsync,
    required jni.JObject Function() createSettingsPendingIntent,
    required CredentialManager Function(Context context) create,
  })  : _getCredential = getCredential,
        _getCredential1 = getCredential1,
        _prepareGetCredential = prepareGetCredential,
        _createCredential = createCredential,
        _clearCredentialState = clearCredentialState,
        _getCredentialAsync = getCredentialAsync,
        _getCredentialAsync1 = getCredentialAsync1,
        _prepareGetCredentialAsync = prepareGetCredentialAsync,
        _createCredentialAsync = createCredentialAsync,
        _clearCredentialStateAsync = clearCredentialStateAsync,
        _createSettingsPendingIntent = createSettingsPendingIntent,
        _create = create;

  final jni.JObject Function(Context context,
      GetCredentialRequest getCredentialRequest, jni.JObject $c) _getCredential;
  final jni.JObject Function(Context context,
      jni.JObject pendingGetCredentialHandle, jni.JObject $c) _getCredential1;
  final jni.JObject Function(
          GetCredentialRequest getCredentialRequest, jni.JObject $c)
      _prepareGetCredential;
  final jni.JObject Function(
      Context context,
      CreateCredentialRequest createCredentialRequest,
      jni.JObject $c) _createCredential;
  final jni.JObject Function(
          jni.JObject clearCredentialStateRequest, jni.JObject $c)
      _clearCredentialState;
  final void Function(
      Context context,
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback) _getCredentialAsync;
  final void Function(
      Context context,
      jni.JObject pendingGetCredentialHandle,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback) _getCredentialAsync1;
  final void Function(
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<jni.JObject, GetCredentialException>
          credentialManagerCallback) _prepareGetCredentialAsync;
  final void Function(
      Context context,
      CreateCredentialRequest createCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<CreateCredentialResponse,
              CreateCredentialException>
          credentialManagerCallback) _createCredentialAsync;
  final void Function(
      jni.JObject clearCredentialStateRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<jni.JObject, jni.JObject>
          credentialManagerCallback) _clearCredentialStateAsync;
  final jni.JObject Function() _createSettingsPendingIntent;
  final CredentialManager Function(Context context) _create;

  jni.JObject getCredential(Context context,
      GetCredentialRequest getCredentialRequest, jni.JObject $c) {
    return _getCredential(context, getCredentialRequest, $c);
  }

  jni.JObject getCredential1(
      Context context, jni.JObject pendingGetCredentialHandle, jni.JObject $c) {
    return _getCredential1(context, pendingGetCredentialHandle, $c);
  }

  jni.JObject prepareGetCredential(
      GetCredentialRequest getCredentialRequest, jni.JObject $c) {
    return _prepareGetCredential(getCredentialRequest, $c);
  }

  jni.JObject createCredential(Context context,
      CreateCredentialRequest createCredentialRequest, jni.JObject $c) {
    return _createCredential(context, createCredentialRequest, $c);
  }

  jni.JObject clearCredentialState(
      jni.JObject clearCredentialStateRequest, jni.JObject $c) {
    return _clearCredentialState(clearCredentialStateRequest, $c);
  }

  void getCredentialAsync(
      Context context,
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback) {
    return _getCredentialAsync(context, getCredentialRequest,
        cancellationSignal, executor, credentialManagerCallback);
  }

  void getCredentialAsync1(
      Context context,
      jni.JObject pendingGetCredentialHandle,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<GetCredentialResponse, GetCredentialException>
          credentialManagerCallback) {
    return _getCredentialAsync1(context, pendingGetCredentialHandle,
        cancellationSignal, executor, credentialManagerCallback);
  }

  void prepareGetCredentialAsync(
      GetCredentialRequest getCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<jni.JObject, GetCredentialException>
          credentialManagerCallback) {
    return _prepareGetCredentialAsync(getCredentialRequest, cancellationSignal,
        executor, credentialManagerCallback);
  }

  void createCredentialAsync(
      Context context,
      CreateCredentialRequest createCredentialRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<CreateCredentialResponse,
              CreateCredentialException>
          credentialManagerCallback) {
    return _createCredentialAsync(context, createCredentialRequest,
        cancellationSignal, executor, credentialManagerCallback);
  }

  void clearCredentialStateAsync(
      jni.JObject clearCredentialStateRequest,
      CancellationSignal cancellationSignal,
      jni.JObject executor,
      CredentialManagerCallback<jni.JObject, jni.JObject>
          credentialManagerCallback) {
    return _clearCredentialStateAsync(clearCredentialStateRequest,
        cancellationSignal, executor, credentialManagerCallback);
  }

  jni.JObject createSettingsPendingIntent() {
    return _createSettingsPendingIntent();
  }

  CredentialManager create(Context context) {
    return _create(context);
  }
}

final class $CredentialManagerType extends jni.JObjType<CredentialManager> {
  const $CredentialManagerType();

  @override
  String get signature => r"Landroidx/credentials/CredentialManager;";

  @override
  CredentialManager fromRef(jni.JObjectPtr ref) =>
      CredentialManager.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CredentialManagerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialManagerType) &&
        other is $CredentialManagerType;
  }
}

/// from: androidx.credentials.CredentialManagerCallback
class CredentialManagerCallback<$R extends jni.JObject, $E extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType<CredentialManagerCallback<$R, $E>> $type = type(R, E);

  final jni.JObjType<$R> R;
  final jni.JObjType<$E> E;

  CredentialManagerCallback.fromRef(
    this.R,
    this.E,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/CredentialManagerCallback");

  /// The type which includes information such as the signature of this class.
  static $CredentialManagerCallbackType<$R, $E>
      type<$R extends jni.JObject, $E extends jni.JObject>(
    jni.JObjType<$R> R,
    jni.JObjType<$E> E,
  ) {
    return $CredentialManagerCallbackType(
      R,
      E,
    );
  }

  static final _id_onResult = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onResult", r"(Ljava/lang/Object;)V");

  /// from: public abstract void onResult(R object)
  void onResult(
    $R object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onResult,
        jni.JniCallType.voidType, [object.reference]).check();
  }

  static final _id_onError = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onError", r"(Ljava/lang/Object;)V");

  /// from: public abstract void onError(E object)
  void onError(
    $E object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onError,
        jni.JniCallType.voidType, [object.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CredentialManagerCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onResult(Ljava/lang/Object;)V") {
        _$impls[$p]!.onResult(
          $a[0].castTo(_$impls[$p]!.R, releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"onError(Ljava/lang/Object;)V") {
        _$impls[$p]!.onError(
          $a[0].castTo(_$impls[$p]!.E, releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory CredentialManagerCallback.implement(
    $CredentialManagerCallbackImpl<$R, $E> $impl,
  ) {
    final $p = ReceivePort();
    final $x = CredentialManagerCallback.fromRef(
      $impl.R,
      $impl.E,
      ProtectedJniExtensions.newPortProxy(
        r"androidx.credentials.CredentialManagerCallback",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $CredentialManagerCallbackImpl<$R extends jni.JObject,
    $E extends jni.JObject> {
  factory $CredentialManagerCallbackImpl({
    required jni.JObjType<$R> R,
    required jni.JObjType<$E> E,
    required void Function($R object) onResult,
    required void Function($E object) onError,
  }) = _$CredentialManagerCallbackImpl;

  jni.JObjType<$R> get R;
  jni.JObjType<$E> get E;

  void onResult($R object);
  void onError($E object);
}

class _$CredentialManagerCallbackImpl<$R extends jni.JObject,
    $E extends jni.JObject> implements $CredentialManagerCallbackImpl<$R, $E> {
  _$CredentialManagerCallbackImpl({
    required this.R,
    required this.E,
    required void Function($R object) onResult,
    required void Function($E object) onError,
  })  : _onResult = onResult,
        _onError = onError;

  @override
  final jni.JObjType<$R> R;

  @override
  final jni.JObjType<$E> E;

  final void Function($R object) _onResult;
  final void Function($E object) _onError;

  void onResult($R object) {
    return _onResult(object);
  }

  void onError($E object) {
    return _onError(object);
  }
}

final class $CredentialManagerCallbackType<$R extends jni.JObject,
        $E extends jni.JObject>
    extends jni.JObjType<CredentialManagerCallback<$R, $E>> {
  final jni.JObjType<$R> R;
  final jni.JObjType<$E> E;

  const $CredentialManagerCallbackType(
    this.R,
    this.E,
  );

  @override
  String get signature => r"Landroidx/credentials/CredentialManagerCallback;";

  @override
  CredentialManagerCallback<$R, $E> fromRef(jni.JObjectPtr ref) =>
      CredentialManagerCallback.fromRef(R, E, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($CredentialManagerCallbackType, R, E);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialManagerCallbackType<$R, $E>) &&
        other is $CredentialManagerCallbackType<$R, $E> &&
        R == other.R &&
        E == other.E;
  }
}

/// from: androidx.credentials.GetCredentialRequest$Builder
class GetCredentialRequest_Builder extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialRequest_Builder> $type = type;

  GetCredentialRequest_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/GetCredentialRequest$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialRequest_BuilderType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest_Builder() {
    return GetCredentialRequest_Builder.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_addCredentialOption = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addCredentialOption",
      r"(Landroidx/credentials/CredentialOption;)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder addCredentialOption(androidx.credentials.CredentialOption credentialOption)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder addCredentialOption(
    jni.JObject credentialOption,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addCredentialOption,
            jni.JniCallType.objectType, [credentialOption.reference]).object);
  }

  static final _id_setCredentialOptions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setCredentialOptions",
      r"(Ljava/util/List;)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setCredentialOptions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setCredentialOptions(
    jni.JList<jni.JObject> list,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setCredentialOptions,
            jni.JniCallType.objectType, [list.reference]).object);
  }

  static final _id_setOrigin = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setOrigin",
      r"(Ljava/lang/String;)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setOrigin(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setOrigin(
    jni.JString string,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setOrigin,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_setPreferImmediatelyAvailableCredentials = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference,
          r"setPreferImmediatelyAvailableCredentials",
          r"(Z)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setPreferImmediatelyAvailableCredentials(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setPreferImmediatelyAvailableCredentials(
    bool z,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setPreferImmediatelyAvailableCredentials,
            jni.JniCallType.objectType,
            [z ? 1 : 0]).object);
  }

  static final _id_setPreferUiBrandingComponentName = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setPreferUiBrandingComponentName",
          r"(Landroid/content/ComponentName;)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setPreferUiBrandingComponentName(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setPreferUiBrandingComponentName(
    jni.JObject componentName,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setPreferUiBrandingComponentName,
            jni.JniCallType.objectType, [componentName.reference]).object);
  }

  static final _id_setPreferIdentityDocUi = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setPreferIdentityDocUi",
      r"(Z)Landroidx/credentials/GetCredentialRequest$Builder;");

  /// from: public final androidx.credentials.GetCredentialRequest$Builder setPreferIdentityDocUi(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest_Builder setPreferIdentityDocUi(
    bool z,
  ) {
    return const $GetCredentialRequest_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setPreferIdentityDocUi,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_build = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"build", r"()Landroidx/credentials/GetCredentialRequest;");

  /// from: public final androidx.credentials.GetCredentialRequest build()
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest build() {
    return const $GetCredentialRequestType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_build, jni.JniCallType.objectType, []).object);
  }
}

final class $GetCredentialRequest_BuilderType
    extends jni.JObjType<GetCredentialRequest_Builder> {
  const $GetCredentialRequest_BuilderType();

  @override
  String get signature =>
      r"Landroidx/credentials/GetCredentialRequest$Builder;";

  @override
  GetCredentialRequest_Builder fromRef(jni.JObjectPtr ref) =>
      GetCredentialRequest_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetCredentialRequest_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialRequest_BuilderType) &&
        other is $GetCredentialRequest_BuilderType;
  }
}

/// from: androidx.credentials.GetCredentialRequest$Companion
class GetCredentialRequest_Companion extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialRequest_Companion> $type = type;

  GetCredentialRequest_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/GetCredentialRequest$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialRequest_CompanionType();
  static final _id_toRequestDataBundle = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toRequestDataBundle",
      r"(Landroidx/credentials/GetCredentialRequest;)Landroid/os/Bundle;");

  /// from: public final android.os.Bundle toRequestDataBundle(androidx.credentials.GetCredentialRequest getCredentialRequest)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject toRequestDataBundle(
    GetCredentialRequest getCredentialRequest,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_toRequestDataBundle,
        jni.JniCallType.objectType,
        [getCredentialRequest.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/util/List;Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/GetCredentialRequest;");

  /// from: public final androidx.credentials.GetCredentialRequest createFrom(java.util.List list, java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialRequest createFrom(
    jni.JList<jni.JObject> list,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return const $GetCredentialRequestType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [list.reference, string.reference, bundle.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialRequest_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $GetCredentialRequest_CompanionType
    extends jni.JObjType<GetCredentialRequest_Companion> {
  const $GetCredentialRequest_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/GetCredentialRequest$Companion;";

  @override
  GetCredentialRequest_Companion fromRef(jni.JObjectPtr ref) =>
      GetCredentialRequest_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetCredentialRequest_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialRequest_CompanionType) &&
        other is $GetCredentialRequest_CompanionType;
  }
}

/// from: androidx.credentials.GetCredentialRequest
class GetCredentialRequest extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialRequest> $type = type;

  GetCredentialRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/GetCredentialRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialRequestType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/GetCredentialRequest$Companion;",
  );

  /// from: static public final androidx.credentials.GetCredentialRequest$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static GetCredentialRequest_Companion get Companion =>
      const $GetCredentialRequest_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS
  static const BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS =
      r"""androidx.credentials.BUNDLE_KEY_PREFER_IMMEDIATELY_AVAILABLE_CREDENTIALS""";

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/util/List;Ljava/lang/String;ZLandroid/content/ComponentName;Z)V");

  /// from: public void <init>(java.util.List list, java.lang.String string, boolean z, android.content.ComponentName componentName, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest(
    jni.JList<jni.JObject> list,
    jni.JString string,
    bool z,
    jni.JObject componentName,
    bool z1,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [
      list.reference,
      string.reference,
      z ? 1 : 0,
      componentName.reference,
      z1 ? 1 : 0
    ]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/util/List;Ljava/lang/String;ZLandroid/content/ComponentName;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.util.List list, java.lang.String string, boolean z, android.content.ComponentName componentName, boolean z1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new1(
    jni.JList<jni.JObject> list,
    jni.JString string,
    bool z,
    jni.JObject componentName,
    bool z1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialRequest.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new1, [
      list.reference,
      string.reference,
      z ? 1 : 0,
      componentName.reference,
      z1 ? 1 : 0,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getCredentialOptions = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCredentialOptions", r"()Ljava/util/List;");

  /// from: public final java.util.List getCredentialOptions()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getCredentialOptions() {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getCredentialOptions,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getOrigin = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getOrigin", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getOrigin()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOrigin() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getOrigin, jni.JniCallType.objectType, []).object);
  }

  static final _id_getPreferIdentityDocUi = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getPreferIdentityDocUi", r"()Z");

  /// from: public final boolean getPreferIdentityDocUi()
  bool getPreferIdentityDocUi() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getPreferIdentityDocUi, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getPreferUiBrandingComponentName = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getPreferUiBrandingComponentName",
          r"()Landroid/content/ComponentName;");

  /// from: public final android.content.ComponentName getPreferUiBrandingComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferUiBrandingComponentName() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPreferUiBrandingComponentName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_preferImmediatelyAvailableCredentials = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"preferImmediatelyAvailableCredentials", r"()Z");

  /// from: public final boolean preferImmediatelyAvailableCredentials()
  bool preferImmediatelyAvailableCredentials() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_preferImmediatelyAvailableCredentials,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/util/List;Ljava/lang/String;ZLandroid/content/ComponentName;)V");

  /// from: public void <init>(java.util.List list, java.lang.String string, boolean z, android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new2(
    jni.JList<jni.JObject> list,
    jni.JString string,
    bool z,
    jni.JObject componentName,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [
      list.reference,
      string.reference,
      z ? 1 : 0,
      componentName.reference
    ]).object);
  }

  static final _id_new3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/util/List;Ljava/lang/String;Z)V");

  /// from: public void <init>(java.util.List list, java.lang.String string, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new3(
    jni.JList<jni.JObject> list,
    jni.JString string,
    bool z,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new3,
        [list.reference, string.reference, z ? 1 : 0]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/util/List;Ljava/lang/String;)V");

  /// from: public void <init>(java.util.List list, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new4(
    jni.JList<jni.JObject> list,
    jni.JString string,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new4, [list.reference, string.reference]).object);
  }

  static final _id_new5 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/util/List;)V");

  /// from: public void <init>(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialRequest.new5(
    jni.JList<jni.JObject> list,
  ) {
    return GetCredentialRequest.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new5, [list.reference]).object);
  }

  static final _id_toRequestDataBundle = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"toRequestDataBundle",
      r"(Landroidx/credentials/GetCredentialRequest;)Landroid/os/Bundle;");

  /// from: static public final android.os.Bundle toRequestDataBundle(androidx.credentials.GetCredentialRequest getCredentialRequest)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject toRequestDataBundle(
    GetCredentialRequest getCredentialRequest,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_toRequestDataBundle,
            jni.JniCallType.objectType,
            [getCredentialRequest.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/util/List;Ljava/lang/String;Landroid/os/Bundle;)Landroidx/credentials/GetCredentialRequest;");

  /// from: static public final androidx.credentials.GetCredentialRequest createFrom(java.util.List list, java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  static GetCredentialRequest createFrom(
    jni.JList<jni.JObject> list,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return const $GetCredentialRequestType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [list.reference, string.reference, bundle.reference]).object);
  }
}

final class $GetCredentialRequestType
    extends jni.JObjType<GetCredentialRequest> {
  const $GetCredentialRequestType();

  @override
  String get signature => r"Landroidx/credentials/GetCredentialRequest;";

  @override
  GetCredentialRequest fromRef(jni.JObjectPtr ref) =>
      GetCredentialRequest.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetCredentialRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialRequestType) &&
        other is $GetCredentialRequestType;
  }
}

/// from: androidx.credentials.GetCredentialResponse
class GetCredentialResponse extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialResponse> $type = type;

  GetCredentialResponse.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/GetCredentialResponse");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialResponseType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroidx/credentials/Credential;)V");

  /// from: public void <init>(androidx.credentials.Credential credential)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialResponse(
    Credential credential,
  ) {
    return GetCredentialResponse.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [credential.reference]).object);
  }

  static final _id_getCredential = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCredential",
      r"()Landroidx/credentials/Credential;");

  /// from: public final androidx.credentials.Credential getCredential()
  /// The returned object must be released after use, by calling the [release] method.
  Credential getCredential() {
    return const $CredentialType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCredential, jni.JniCallType.objectType, []).object);
  }
}

final class $GetCredentialResponseType
    extends jni.JObjType<GetCredentialResponse> {
  const $GetCredentialResponseType();

  @override
  String get signature => r"Landroidx/credentials/GetCredentialResponse;";

  @override
  GetCredentialResponse fromRef(jni.JObjectPtr ref) =>
      GetCredentialResponse.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetCredentialResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialResponseType) &&
        other is $GetCredentialResponseType;
  }
}

/// from: androidx.credentials.GetPublicKeyCredentialOption$Companion
class GetPublicKeyCredentialOption_Companion extends jni.JObject {
  @override
  late final jni.JObjType<GetPublicKeyCredentialOption_Companion> $type = type;

  GetPublicKeyCredentialOption_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/GetPublicKeyCredentialOption$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $GetPublicKeyCredentialOption_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialOption_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $GetPublicKeyCredentialOption_CompanionType
    extends jni.JObjType<GetPublicKeyCredentialOption_Companion> {
  const $GetPublicKeyCredentialOption_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/GetPublicKeyCredentialOption$Companion;";

  @override
  GetPublicKeyCredentialOption_Companion fromRef(jni.JObjectPtr ref) =>
      GetPublicKeyCredentialOption_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetPublicKeyCredentialOption_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetPublicKeyCredentialOption_CompanionType) &&
        other is $GetPublicKeyCredentialOption_CompanionType;
  }
}

/// from: androidx.credentials.GetPublicKeyCredentialOption
class GetPublicKeyCredentialOption extends jni.JObject {
  @override
  late final jni.JObjType<GetPublicKeyCredentialOption> $type = type;

  GetPublicKeyCredentialOption.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/GetPublicKeyCredentialOption");

  /// The type which includes information such as the signature of this class.
  static const type = $GetPublicKeyCredentialOptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/GetPublicKeyCredentialOption$Companion;",
  );

  /// from: static public final androidx.credentials.GetPublicKeyCredentialOption$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static GetPublicKeyCredentialOption_Companion get Companion =>
      const $GetPublicKeyCredentialOption_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String BUNDLE_KEY_CLIENT_DATA_HASH
  static const BUNDLE_KEY_CLIENT_DATA_HASH =
      r"""androidx.credentials.BUNDLE_KEY_CLIENT_DATA_HASH""";

  /// from: static public final java.lang.String BUNDLE_KEY_REQUEST_JSON
  static const BUNDLE_KEY_REQUEST_JSON =
      r"""androidx.credentials.BUNDLE_KEY_REQUEST_JSON""";

  /// from: static public final java.lang.String BUNDLE_VALUE_SUBTYPE_GET_PUBLIC_KEY_CREDENTIAL_OPTION
  static const BUNDLE_VALUE_SUBTYPE_GET_PUBLIC_KEY_CREDENTIAL_OPTION =
      r"""androidx.credentials.BUNDLE_VALUE_SUBTYPE_GET_PUBLIC_KEY_CREDENTIAL_OPTION""";

  static final _id_getRequestJson = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getRequestJson", r"()Ljava/lang/String;");

  /// from: public final java.lang.String getRequestJson()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRequestJson() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getRequestJson, jni.JniCallType.objectType, []).object);
  }

  static final _id_getClientDataHash = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getClientDataHash", r"()[B");

  /// from: public final byte[] getClientDataHash()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getClientDataHash() {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getClientDataHash,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/String;[BLjava/util/Set;)V");

  /// from: public void <init>(java.lang.String string, java.lang.Object[] bs, java.util.Set set)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    jni.JSet<jni.JObject> set0,
  ) {
    return GetPublicKeyCredentialOption.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [string.reference, bs.reference, set0.reference]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BLjava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, java.util.Set set, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption.new1(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    jni.JSet<jni.JObject> set0,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialOption.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new1, [
      string.reference,
      bs.reference,
      set0.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new2 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;[B)V");

  /// from: public void <init>(java.lang.String string, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption.new2(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return GetPublicKeyCredentialOption.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new2,
            [string.reference, bs.reference]).object);
  }

  static final _id_new3 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption.new3(
    jni.JString string,
  ) {
    return GetPublicKeyCredentialOption.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new3, [string.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;[BLjava/util/Set;Landroid/os/Bundle;Landroid/os/Bundle;Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, byte[] bs, java.util.Set set, android.os.Bundle bundle, android.os.Bundle bundle1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialOption.new4(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    jni.JSet<jni.JObject> set0,
    jni.JObject bundle,
    jni.JObject bundle1,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialOption.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new4, [
      string.reference,
      bs.reference,
      set0.reference,
      bundle.reference,
      bundle1.reference,
      defaultConstructorMarker.reference
    ]).object);
  }
}

final class $GetPublicKeyCredentialOptionType
    extends jni.JObjType<GetPublicKeyCredentialOption> {
  const $GetPublicKeyCredentialOptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/GetPublicKeyCredentialOption;";

  @override
  GetPublicKeyCredentialOption fromRef(jni.JObjectPtr ref) =>
      GetPublicKeyCredentialOption.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetPublicKeyCredentialOptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetPublicKeyCredentialOptionType) &&
        other is $GetPublicKeyCredentialOptionType;
  }
}

/// from: androidx.credentials.PublicKeyCredential$Companion
class PublicKeyCredential_Companion extends jni.JObject {
  @override
  late final jni.JObjType<PublicKeyCredential_Companion> $type = type;

  PublicKeyCredential_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/PublicKeyCredential$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $PublicKeyCredential_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory PublicKeyCredential_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return PublicKeyCredential_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $PublicKeyCredential_CompanionType
    extends jni.JObjType<PublicKeyCredential_Companion> {
  const $PublicKeyCredential_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/PublicKeyCredential$Companion;";

  @override
  PublicKeyCredential_Companion fromRef(jni.JObjectPtr ref) =>
      PublicKeyCredential_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PublicKeyCredential_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PublicKeyCredential_CompanionType) &&
        other is $PublicKeyCredential_CompanionType;
  }
}

/// from: androidx.credentials.PublicKeyCredential
class PublicKeyCredential extends Credential {
  @override
  late final jni.JObjType<PublicKeyCredential> $type = type;

  PublicKeyCredential.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"androidx/credentials/PublicKeyCredential");

  /// The type which includes information such as the signature of this class.
  static const type = $PublicKeyCredentialType();
  static final _id_Companion1 = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/PublicKeyCredential$Companion;",
  );

  /// from: static public final androidx.credentials.PublicKeyCredential$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static PublicKeyCredential_Companion get Companion1 =>
      const $PublicKeyCredential_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion1, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_PUBLIC_KEY_CREDENTIAL
  static const TYPE_PUBLIC_KEY_CREDENTIAL =
      r"""androidx.credentials.TYPE_PUBLIC_KEY_CREDENTIAL""";

  /// from: static public final java.lang.String BUNDLE_KEY_SUBTYPE
  static const BUNDLE_KEY_SUBTYPE =
      r"""androidx.credentials.BUNDLE_KEY_SUBTYPE""";

  /// from: static public final java.lang.String BUNDLE_KEY_AUTHENTICATION_RESPONSE_JSON
  static const BUNDLE_KEY_AUTHENTICATION_RESPONSE_JSON =
      r"""androidx.credentials.BUNDLE_KEY_AUTHENTICATION_RESPONSE_JSON""";

  static final _id_getAuthenticationResponseJson = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getAuthenticationResponseJson",
          r"()Ljava/lang/String;");

  /// from: public final java.lang.String getAuthenticationResponseJson()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAuthenticationResponseJson() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getAuthenticationResponseJson,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory PublicKeyCredential.new1(
    jni.JString string,
  ) {
    return PublicKeyCredential.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Landroid/os/Bundle;Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, android.os.Bundle bundle, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory PublicKeyCredential.new2(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject defaultConstructorMarker,
  ) {
    return PublicKeyCredential.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [
      string.reference,
      bundle.reference,
      defaultConstructorMarker.reference
    ]).object);
  }
}

final class $PublicKeyCredentialType extends jni.JObjType<PublicKeyCredential> {
  const $PublicKeyCredentialType();

  @override
  String get signature => r"Landroidx/credentials/PublicKeyCredential;";

  @override
  PublicKeyCredential fromRef(jni.JObjectPtr ref) =>
      PublicKeyCredential.fromRef(ref);

  @override
  jni.JObjType get superType => const $CredentialType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PublicKeyCredentialType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PublicKeyCredentialType) &&
        other is $PublicKeyCredentialType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialCancellationException$Companion
class CreateCredentialCancellationException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialCancellationException_Companion>
      $type = type;

  CreateCredentialCancellationException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialCancellationException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialCancellationException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCancellationException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialCancellationException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialCancellationException_CompanionType
    extends jni.JObjType<CreateCredentialCancellationException_Companion> {
  const $CreateCredentialCancellationException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialCancellationException$Companion;";

  @override
  CreateCredentialCancellationException_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialCancellationException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialCancellationException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialCancellationException_CompanionType) &&
        other is $CreateCredentialCancellationException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialCancellationException
class CreateCredentialCancellationException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialCancellationException> $type = type;

  CreateCredentialCancellationException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialCancellationException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialCancellationExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/CreateCredentialCancellationException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.CreateCredentialCancellationException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialCancellationException_Companion get Companion =>
      const $CreateCredentialCancellationException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_CREATE_CREDENTIAL_CANCELLATION_EXCEPTION
  static const TYPE_CREATE_CREDENTIAL_CANCELLATION_EXCEPTION =
      r"""android.credentials.CreateCredentialException.TYPE_USER_CANCELED""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCancellationException.new7(
    jni.JObject charSequence,
  ) {
    return CreateCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCancellationException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCancellationException.new9() {
    return CreateCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $CreateCredentialCancellationExceptionType
    extends jni.JObjType<CreateCredentialCancellationException> {
  const $CreateCredentialCancellationExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialCancellationException;";

  @override
  CreateCredentialCancellationException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialCancellationException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreateCredentialCancellationExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialCancellationExceptionType) &&
        other is $CreateCredentialCancellationExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialException
class CreateCredentialException extends Exception {
  @override
  late final jni.JObjType<CreateCredentialException> $type = type;

  CreateCredentialException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialExceptionType();
  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialException.new5(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return CreateCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new5,
            [string.reference, charSequence.reference]).object);
  }

  static final _id_new6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialException.new6(
    jni.JString string,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new6, [
      string.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getErrorMessage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getErrorMessage", r"()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getErrorMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getErrorMessage() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getErrorMessage, jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialException.new1(
    jni.JString string,
  ) {
    return CreateCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }
}

final class $CreateCredentialExceptionType
    extends jni.JObjType<CreateCredentialException> {
  const $CreateCredentialExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialException;";

  @override
  CreateCredentialException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialException.fromRef(ref);

  @override
  jni.JObjType get superType => const $ExceptionType();

  @override
  final superCount = 3;

  @override
  int get hashCode => ($CreateCredentialExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialExceptionType) &&
        other is $CreateCredentialExceptionType;
  }
}

/// from: androidx.credentials.exceptions.GetCredentialCancellationException$Companion
class GetCredentialCancellationException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<GetCredentialCancellationException_Companion> $type =
      type;

  GetCredentialCancellationException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/GetCredentialCancellationException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialCancellationException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialCancellationException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialCancellationException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $GetCredentialCancellationException_CompanionType
    extends jni.JObjType<GetCredentialCancellationException_Companion> {
  const $GetCredentialCancellationException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/GetCredentialCancellationException$Companion;";

  @override
  GetCredentialCancellationException_Companion fromRef(jni.JObjectPtr ref) =>
      GetCredentialCancellationException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($GetCredentialCancellationException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($GetCredentialCancellationException_CompanionType) &&
        other is $GetCredentialCancellationException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.GetCredentialCancellationException
class GetCredentialCancellationException extends GetCredentialException {
  @override
  late final jni.JObjType<GetCredentialCancellationException> $type = type;

  GetCredentialCancellationException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/GetCredentialCancellationException");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialCancellationExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/GetCredentialCancellationException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.GetCredentialCancellationException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static GetCredentialCancellationException_Companion get Companion =>
      const $GetCredentialCancellationException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_GET_CREDENTIAL_CANCELLATION_EXCEPTION
  static const TYPE_GET_CREDENTIAL_CANCELLATION_EXCEPTION =
      r"""android.credentials.GetCredentialException.TYPE_USER_CANCELED""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialCancellationException.new7(
    jni.JObject charSequence,
  ) {
    return GetCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialCancellationException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialCancellationException.new9() {
    return GetCredentialCancellationException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $GetCredentialCancellationExceptionType
    extends jni.JObjType<GetCredentialCancellationException> {
  const $GetCredentialCancellationExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/GetCredentialCancellationException;";

  @override
  GetCredentialCancellationException fromRef(jni.JObjectPtr ref) =>
      GetCredentialCancellationException.fromRef(ref);

  @override
  jni.JObjType get superType => const $GetCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($GetCredentialCancellationExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialCancellationExceptionType) &&
        other is $GetCredentialCancellationExceptionType;
  }
}

/// from: androidx.credentials.exceptions.GetCredentialException
class GetCredentialException extends Exception {
  @override
  late final jni.JObjType<GetCredentialException> $type = type;

  GetCredentialException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/GetCredentialException");

  /// The type which includes information such as the signature of this class.
  static const type = $GetCredentialExceptionType();
  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialException.new5(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return GetCredentialException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new5,
        [string.reference, charSequence.reference]).object);
  }

  static final _id_new6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialException.new6(
    jni.JString string,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetCredentialException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new6, [
      string.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_getErrorMessage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getErrorMessage", r"()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getErrorMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getErrorMessage() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getErrorMessage, jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetCredentialException.new1(
    jni.JString string,
  ) {
    return GetCredentialException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [string.reference]).object);
  }
}

final class $GetCredentialExceptionType
    extends jni.JObjType<GetCredentialException> {
  const $GetCredentialExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/GetCredentialException;";

  @override
  GetCredentialException fromRef(jni.JObjectPtr ref) =>
      GetCredentialException.fromRef(ref);

  @override
  jni.JObjType get superType => const $ExceptionType();

  @override
  final superCount = 3;

  @override
  int get hashCode => ($GetCredentialExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetCredentialExceptionType) &&
        other is $GetCredentialExceptionType;
  }
}

/// from: androidx.credentials.exceptions.NoCredentialException$Companion
class NoCredentialException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<NoCredentialException_Companion> $type = type;

  NoCredentialException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/NoCredentialException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $NoCredentialException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory NoCredentialException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return NoCredentialException_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $NoCredentialException_CompanionType
    extends jni.JObjType<NoCredentialException_Companion> {
  const $NoCredentialException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/NoCredentialException$Companion;";

  @override
  NoCredentialException_Companion fromRef(jni.JObjectPtr ref) =>
      NoCredentialException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($NoCredentialException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($NoCredentialException_CompanionType) &&
        other is $NoCredentialException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.NoCredentialException
class NoCredentialException extends GetCredentialException {
  @override
  late final jni.JObjType<NoCredentialException> $type = type;

  NoCredentialException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/NoCredentialException");

  /// The type which includes information such as the signature of this class.
  static const type = $NoCredentialExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/NoCredentialException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.NoCredentialException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static NoCredentialException_Companion get Companion =>
      const $NoCredentialException_CompanionType().fromRef(jni.Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_FRAMEWORK_TYPE_NO_CREDENTIAL
  static const TYPE_FRAMEWORK_TYPE_NO_CREDENTIAL =
      r"""android.credentials.GetCredentialException.TYPE_NO_CREDENTIAL""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory NoCredentialException.new7(
    jni.JObject charSequence,
  ) {
    return NoCredentialException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory NoCredentialException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return NoCredentialException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory NoCredentialException.new9() {
    return NoCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $NoCredentialExceptionType
    extends jni.JObjType<NoCredentialException> {
  const $NoCredentialExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/NoCredentialException;";

  @override
  NoCredentialException fromRef(jni.JObjectPtr ref) =>
      NoCredentialException.fromRef(ref);

  @override
  jni.JObjType get superType => const $GetCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($NoCredentialExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($NoCredentialExceptionType) &&
        other is $NoCredentialExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialInterruptedException$Companion
class CreateCredentialInterruptedException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialInterruptedException_Companion>
      $type = type;

  CreateCredentialInterruptedException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialInterruptedException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialInterruptedException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialInterruptedException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialInterruptedException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialInterruptedException_CompanionType
    extends jni.JObjType<CreateCredentialInterruptedException_Companion> {
  const $CreateCredentialInterruptedException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialInterruptedException$Companion;";

  @override
  CreateCredentialInterruptedException_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialInterruptedException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialInterruptedException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialInterruptedException_CompanionType) &&
        other is $CreateCredentialInterruptedException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialInterruptedException
class CreateCredentialInterruptedException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialInterruptedException> $type = type;

  CreateCredentialInterruptedException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialInterruptedException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialInterruptedExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/CreateCredentialInterruptedException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.CreateCredentialInterruptedException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialInterruptedException_Companion get Companion =>
      const $CreateCredentialInterruptedException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_CREATE_CREDENTIAL_INTERRUPTED_EXCEPTION
  static const TYPE_CREATE_CREDENTIAL_INTERRUPTED_EXCEPTION =
      r"""android.credentials.CreateCredentialException.TYPE_INTERRUPTED""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialInterruptedException.new7(
    jni.JObject charSequence,
  ) {
    return CreateCredentialInterruptedException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialInterruptedException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialInterruptedException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialInterruptedException.new9() {
    return CreateCredentialInterruptedException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $CreateCredentialInterruptedExceptionType
    extends jni.JObjType<CreateCredentialInterruptedException> {
  const $CreateCredentialInterruptedExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialInterruptedException;";

  @override
  CreateCredentialInterruptedException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialInterruptedException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreateCredentialInterruptedExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialInterruptedExceptionType) &&
        other is $CreateCredentialInterruptedExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialProviderConfigurationException$Companion
class CreateCredentialProviderConfigurationException_Companion
    extends jni.JObject {
  @override
  late final jni
      .JObjType<CreateCredentialProviderConfigurationException_Companion>
      $type = type;

  CreateCredentialProviderConfigurationException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialProviderConfigurationException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type =
      $CreateCredentialProviderConfigurationException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialProviderConfigurationException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialProviderConfigurationException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialProviderConfigurationException_CompanionType
    extends jni
    .JObjType<CreateCredentialProviderConfigurationException_Companion> {
  const $CreateCredentialProviderConfigurationException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialProviderConfigurationException$Companion;";

  @override
  CreateCredentialProviderConfigurationException_Companion fromRef(
          jni.JObjectPtr ref) =>
      CreateCredentialProviderConfigurationException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialProviderConfigurationException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialProviderConfigurationException_CompanionType) &&
        other is $CreateCredentialProviderConfigurationException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialProviderConfigurationException
class CreateCredentialProviderConfigurationException
    extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialProviderConfigurationException>
      $type = type;

  CreateCredentialProviderConfigurationException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialProviderConfigurationException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialProviderConfigurationExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/CreateCredentialProviderConfigurationException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.CreateCredentialProviderConfigurationException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialProviderConfigurationException_Companion
      get Companion =>
          const $CreateCredentialProviderConfigurationException_CompanionType()
              .fromRef(jni.Jni.accessors
                  .getStaticField(_class.reference, _id_Companion,
                      jni.JniCallType.objectType)
                  .object);

  /// from: static public final java.lang.String TYPE_CREATE_CREDENTIAL_PROVIDER_CONFIGURATION_EXCEPTION
  static const TYPE_CREATE_CREDENTIAL_PROVIDER_CONFIGURATION_EXCEPTION =
      r"""androidx.credentials.TYPE_CREATE_CREDENTIAL_PROVIDER_CONFIGURATION_EXCEPTION""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialProviderConfigurationException.new7(
    jni.JObject charSequence,
  ) {
    return CreateCredentialProviderConfigurationException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialProviderConfigurationException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialProviderConfigurationException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialProviderConfigurationException.new9() {
    return CreateCredentialProviderConfigurationException.fromRef(jni
        .Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $CreateCredentialProviderConfigurationExceptionType
    extends jni.JObjType<CreateCredentialProviderConfigurationException> {
  const $CreateCredentialProviderConfigurationExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialProviderConfigurationException;";

  @override
  CreateCredentialProviderConfigurationException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialProviderConfigurationException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode =>
      ($CreateCredentialProviderConfigurationExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialProviderConfigurationExceptionType) &&
        other is $CreateCredentialProviderConfigurationExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialUnknownException$Companion
class CreateCredentialUnknownException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreateCredentialUnknownException_Companion> $type =
      type;

  CreateCredentialUnknownException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialUnknownException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialUnknownException_CompanionType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialUnknownException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialUnknownException_Companion.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreateCredentialUnknownException_CompanionType
    extends jni.JObjType<CreateCredentialUnknownException_Companion> {
  const $CreateCredentialUnknownException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialUnknownException$Companion;";

  @override
  CreateCredentialUnknownException_Companion fromRef(jni.JObjectPtr ref) =>
      CreateCredentialUnknownException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreateCredentialUnknownException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreateCredentialUnknownException_CompanionType) &&
        other is $CreateCredentialUnknownException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialUnknownException
class CreateCredentialUnknownException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialUnknownException> $type = type;

  CreateCredentialUnknownException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialUnknownException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialUnknownExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/CreateCredentialUnknownException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.CreateCredentialUnknownException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialUnknownException_Companion get Companion =>
      const $CreateCredentialUnknownException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_CREATE_CREDENTIAL_UNKNOWN_EXCEPTION
  static const TYPE_CREATE_CREDENTIAL_UNKNOWN_EXCEPTION =
      r"""android.credentials.CreateCredentialException.TYPE_UNKNOWN""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialUnknownException.new7(
    jni.JObject charSequence,
  ) {
    return CreateCredentialUnknownException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new7, [charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialUnknownException.new8(
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialUnknownException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new8, [
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_new9 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialUnknownException.new9() {
    return CreateCredentialUnknownException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new9, []).object);
  }
}

final class $CreateCredentialUnknownExceptionType
    extends jni.JObjType<CreateCredentialUnknownException> {
  const $CreateCredentialUnknownExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialUnknownException;";

  @override
  CreateCredentialUnknownException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialUnknownException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreateCredentialUnknownExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialUnknownExceptionType) &&
        other is $CreateCredentialUnknownExceptionType;
  }
}

/// from: androidx.credentials.exceptions.CreateCredentialCustomException
class CreateCredentialCustomException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreateCredentialCustomException> $type = type;

  CreateCredentialCustomException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/CreateCredentialCustomException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreateCredentialCustomExceptionType();
  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCustomException.new5(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return CreateCredentialCustomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new5,
            [string.reference, charSequence.reference]).object);
  }

  static final _id_new6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCustomException.new6(
    jni.JString string,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreateCredentialCustomException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new6, [
      string.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreateCredentialCustomException.new1(
    jni.JString string,
  ) {
    return CreateCredentialCustomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }
}

final class $CreateCredentialCustomExceptionType
    extends jni.JObjType<CreateCredentialCustomException> {
  const $CreateCredentialCustomExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/CreateCredentialCustomException;";

  @override
  CreateCredentialCustomException fromRef(jni.JObjectPtr ref) =>
      CreateCredentialCustomException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreateCredentialCustomExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreateCredentialCustomExceptionType) &&
        other is $CreateCredentialCustomExceptionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialDomException$Companion
class CreatePublicKeyCredentialDomException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialDomException_Companion>
      $type = type;

  CreatePublicKeyCredentialDomException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialDomException_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/CreateCredentialException;");

  /// from: public final androidx.credentials.exceptions.CreateCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $CreateCredentialExceptionType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialDomException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialDomException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreatePublicKeyCredentialDomException_CompanionType
    extends jni.JObjType<CreatePublicKeyCredentialDomException_Companion> {
  const $CreatePublicKeyCredentialDomException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException$Companion;";

  @override
  CreatePublicKeyCredentialDomException_Companion fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialDomException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreatePublicKeyCredentialDomException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreatePublicKeyCredentialDomException_CompanionType) &&
        other is $CreatePublicKeyCredentialDomException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialDomException
class CreatePublicKeyCredentialDomException
    extends CreatePublicKeyCredentialException {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialDomException> $type = type;

  CreatePublicKeyCredentialDomException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialDomExceptionType();
  static final _id_Companion1 = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialDomException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreatePublicKeyCredentialDomException_Companion get Companion1 =>
      const $CreatePublicKeyCredentialDomException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion1, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_CREATE_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION
  static const TYPE_CREATE_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION =
      r"""androidx.credentials.TYPE_CREATE_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION""";

  static final _id_new7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Landroidx/credentials/exceptions/domerrors/DomError;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialDomException.new7(
    jni.JObject domError,
    jni.JObject charSequence,
  ) {
    return CreatePublicKeyCredentialDomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new7,
            [domError.reference, charSequence.reference]).object);
  }

  static final _id_new8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Landroidx/credentials/exceptions/domerrors/DomError;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialDomException.new8(
    jni.JObject domError,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialDomException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new8, [
      domError.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getDomError = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDomError",
      r"()Landroidx/credentials/exceptions/domerrors/DomError;");

  /// from: public final androidx.credentials.exceptions.domerrors.DomError getDomError()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDomError() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDomError, jni.JniCallType.objectType, []).object);
  }

  static final _id_new9 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Landroidx/credentials/exceptions/domerrors/DomError;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialDomException.new9(
    jni.JObject domError,
  ) {
    return CreatePublicKeyCredentialDomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new9, [domError.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/CreateCredentialException;");

  /// from: static public final androidx.credentials.exceptions.CreateCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $CreateCredentialExceptionType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }
}

final class $CreatePublicKeyCredentialDomExceptionType
    extends jni.JObjType<CreatePublicKeyCredentialDomException> {
  const $CreatePublicKeyCredentialDomExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialDomException;";

  @override
  CreatePublicKeyCredentialDomException fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialDomException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreatePublicKeyCredentialExceptionType();

  @override
  final superCount = 5;

  @override
  int get hashCode => ($CreatePublicKeyCredentialDomExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreatePublicKeyCredentialDomExceptionType) &&
        other is $CreatePublicKeyCredentialDomExceptionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialException$Companion
class CreatePublicKeyCredentialException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialException_Companion> $type =
      type;

  CreatePublicKeyCredentialException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialException_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/CreateCredentialException;");

  /// from: public final androidx.credentials.exceptions.CreateCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  CreateCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $CreateCredentialExceptionType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $CreatePublicKeyCredentialException_CompanionType
    extends jni.JObjType<CreatePublicKeyCredentialException_Companion> {
  const $CreatePublicKeyCredentialException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException$Companion;";

  @override
  CreatePublicKeyCredentialException_Companion fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CreatePublicKeyCredentialException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CreatePublicKeyCredentialException_CompanionType) &&
        other is $CreatePublicKeyCredentialException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialException
class CreatePublicKeyCredentialException extends CreateCredentialException {
  @override
  late final jni.JObjType<CreatePublicKeyCredentialException> $type = type;

  CreatePublicKeyCredentialException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException");

  /// The type which includes information such as the signature of this class.
  static const type = $CreatePublicKeyCredentialExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static CreatePublicKeyCredentialException_Companion get Companion =>
      const $CreatePublicKeyCredentialException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  static final _id_new5 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialException.new5(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return CreatePublicKeyCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new5,
            [string.reference, charSequence.reference]).object);
  }

  static final _id_new6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Ljava/lang/String;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(java.lang.String string, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialException.new6(
    jni.JString string,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return CreatePublicKeyCredentialException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new6, [
      string.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getType", r"()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.objectType, []).object);
  }

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CreatePublicKeyCredentialException.new1(
    jni.JString string,
  ) {
    return CreatePublicKeyCredentialException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new1, [string.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/CreateCredentialException;");

  /// from: static public final androidx.credentials.exceptions.CreateCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static CreateCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $CreateCredentialExceptionType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }
}

final class $CreatePublicKeyCredentialExceptionType
    extends jni.JObjType<CreatePublicKeyCredentialException> {
  const $CreatePublicKeyCredentialExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/CreatePublicKeyCredentialException;";

  @override
  CreatePublicKeyCredentialException fromRef(jni.JObjectPtr ref) =>
      CreatePublicKeyCredentialException.fromRef(ref);

  @override
  jni.JObjType get superType => const $CreateCredentialExceptionType();

  @override
  final superCount = 4;

  @override
  int get hashCode => ($CreatePublicKeyCredentialExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CreatePublicKeyCredentialExceptionType) &&
        other is $CreatePublicKeyCredentialExceptionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.GetPublicKeyCredentialDomException$Companion
class GetPublicKeyCredentialDomException_Companion extends jni.JObject {
  @override
  late final jni.JObjType<GetPublicKeyCredentialDomException_Companion> $type =
      type;

  GetPublicKeyCredentialDomException_Companion.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $GetPublicKeyCredentialDomException_CompanionType();
  static final _id_createFrom = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/GetCredentialException;");

  /// from: public final androidx.credentials.exceptions.GetCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  GetCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $GetCredentialExceptionType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialDomException_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialDomException_Companion.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new0,
            [defaultConstructorMarker.reference]).object);
  }
}

final class $GetPublicKeyCredentialDomException_CompanionType
    extends jni.JObjType<GetPublicKeyCredentialDomException_Companion> {
  const $GetPublicKeyCredentialDomException_CompanionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException$Companion;";

  @override
  GetPublicKeyCredentialDomException_Companion fromRef(jni.JObjectPtr ref) =>
      GetPublicKeyCredentialDomException_Companion.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($GetPublicKeyCredentialDomException_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($GetPublicKeyCredentialDomException_CompanionType) &&
        other is $GetPublicKeyCredentialDomException_CompanionType;
  }
}

/// from: androidx.credentials.exceptions.publickeycredential.GetPublicKeyCredentialDomException
class GetPublicKeyCredentialDomException extends jni.JObject {
  @override
  late final jni.JObjType<GetPublicKeyCredentialDomException> $type = type;

  GetPublicKeyCredentialDomException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"androidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException");

  /// The type which includes information such as the signature of this class.
  static const type = $GetPublicKeyCredentialDomExceptionType();
  static final _id_Companion = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"Companion",
    r"Landroidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException$Companion;",
  );

  /// from: static public final androidx.credentials.exceptions.publickeycredential.GetPublicKeyCredentialDomException$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static GetPublicKeyCredentialDomException_Companion get Companion =>
      const $GetPublicKeyCredentialDomException_CompanionType().fromRef(jni
          .Jni.accessors
          .getStaticField(
              _class.reference, _id_Companion, jni.JniCallType.objectType)
          .object);

  /// from: static public final java.lang.String TYPE_GET_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION
  static const TYPE_GET_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION =
      r"""androidx.credentials.TYPE_GET_PUBLIC_KEY_CREDENTIAL_DOM_EXCEPTION""";

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Landroidx/credentials/exceptions/domerrors/DomError;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialDomException(
    jni.JObject domError,
    jni.JObject charSequence,
  ) {
    return GetPublicKeyCredentialDomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0,
            [domError.reference, charSequence.reference]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Landroidx/credentials/exceptions/domerrors/DomError;Ljava/lang/CharSequence;ILkotlin/jvm/internal/DefaultConstructorMarker;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError, java.lang.CharSequence charSequence, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialDomException.new1(
    jni.JObject domError,
    jni.JObject charSequence,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return GetPublicKeyCredentialDomException.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new1, [
      domError.reference,
      charSequence.reference,
      jni.JValueInt(i),
      defaultConstructorMarker.reference
    ]).object);
  }

  static final _id_getDomError = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDomError",
      r"()Landroidx/credentials/exceptions/domerrors/DomError;");

  /// from: public final androidx.credentials.exceptions.domerrors.DomError getDomError()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDomError() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getDomError, jni.JniCallType.objectType, []).object);
  }

  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Landroidx/credentials/exceptions/domerrors/DomError;)V");

  /// from: public void <init>(androidx.credentials.exceptions.domerrors.DomError domError)
  /// The returned object must be released after use, by calling the [release] method.
  factory GetPublicKeyCredentialDomException.new2(
    jni.JObject domError,
  ) {
    return GetPublicKeyCredentialDomException.fromRef(jni.Jni.accessors
        .newObjectWithArgs(
            _class.reference, _id_new2, [domError.reference]).object);
  }

  static final _id_createFrom = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"createFrom",
      r"(Ljava/lang/String;Ljava/lang/String;)Landroidx/credentials/exceptions/GetCredentialException;");

  /// from: static public final androidx.credentials.exceptions.GetCredentialException createFrom(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static GetCredentialException createFrom(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $GetCredentialExceptionType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_createFrom,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }
}

final class $GetPublicKeyCredentialDomExceptionType
    extends jni.JObjType<GetPublicKeyCredentialDomException> {
  const $GetPublicKeyCredentialDomExceptionType();

  @override
  String get signature =>
      r"Landroidx/credentials/exceptions/publickeycredential/GetPublicKeyCredentialDomException;";

  @override
  GetPublicKeyCredentialDomException fromRef(jni.JObjectPtr ref) =>
      GetPublicKeyCredentialDomException.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GetPublicKeyCredentialDomExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GetPublicKeyCredentialDomExceptionType) &&
        other is $GetPublicKeyCredentialDomExceptionType;
  }
}

/// from: com.google.android.gms.fido.Fido
class Fido extends jni.JObject {
  @override
  late final jni.JObjType<Fido> $type = type;

  Fido.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/google/android/gms/fido/Fido");

  /// The type which includes information such as the signature of this class.
  static const type = $FidoType();

  /// from: static public final java.lang.String KEY_RESPONSE_EXTRA
  static const KEY_RESPONSE_EXTRA = r"""RESPONSE_EXTRA""";

  /// from: static public final java.lang.String FIDO2_KEY_RESPONSE_EXTRA
  static const FIDO2_KEY_RESPONSE_EXTRA = r"""FIDO2_RESPONSE_EXTRA""";

  /// from: static public final java.lang.String FIDO2_KEY_ERROR_EXTRA
  static const FIDO2_KEY_ERROR_EXTRA = r"""FIDO2_ERROR_EXTRA""";

  /// from: static public final java.lang.String FIDO2_KEY_CREDENTIAL_EXTRA
  static const FIDO2_KEY_CREDENTIAL_EXTRA = r"""FIDO2_CREDENTIAL_EXTRA""";

  static final _id_zza = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"zza",
    r"Lcom/google/android/gms/common/api/Api$ClientKey;",
  );

  /// from: static public final com.google.android.gms.common.api.Api$ClientKey zza
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get zza =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_zza, jni.JniCallType.objectType)
          .object);

  static final _id_zzb = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"zzb",
    r"Lcom/google/android/gms/common/api/Api;",
  );

  /// from: static public final com.google.android.gms.common.api.Api zzb
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get zzb =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_zzb, jni.JniCallType.objectType)
          .object);

  static final _id_zzc = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"zzc",
    r"Lcom/google/android/gms/internal/fido/zzaa;",
  );

  /// from: static public final com.google.android.gms.internal.fido.zzaa zzc
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get zzc =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_zzc, jni.JniCallType.objectType)
          .object);

  static final _id_getFido2ApiClient = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getFido2ApiClient",
      r"(Landroid/app/Activity;)Lcom/google/android/gms/fido/fido2/Fido2ApiClient;");

  /// from: static public com.google.android.gms.fido.fido2.Fido2ApiClient getFido2ApiClient(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  static Fido2ApiClient getFido2ApiClient(
    Activity activity,
  ) {
    return const $Fido2ApiClientType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getFido2ApiClient,
            jni.JniCallType.objectType, [activity.reference]).object);
  }

  static final _id_getFido2ApiClient1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getFido2ApiClient",
      r"(Landroid/content/Context;)Lcom/google/android/gms/fido/fido2/Fido2ApiClient;");

  /// from: static public com.google.android.gms.fido.fido2.Fido2ApiClient getFido2ApiClient(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static Fido2ApiClient getFido2ApiClient1(
    Context context,
  ) {
    return const $Fido2ApiClientType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getFido2ApiClient1,
            jni.JniCallType.objectType, [context.reference]).object);
  }

  static final _id_getFido2PrivilegedApiClient = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getFido2PrivilegedApiClient",
          r"(Landroid/app/Activity;)Lcom/google/android/gms/fido/fido2/Fido2PrivilegedApiClient;");

  /// from: static public com.google.android.gms.fido.fido2.Fido2PrivilegedApiClient getFido2PrivilegedApiClient(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getFido2PrivilegedApiClient(
    Activity activity,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_getFido2PrivilegedApiClient,
            jni.JniCallType.objectType,
            [activity.reference]).object);
  }

  static final _id_getFido2PrivilegedApiClient1 = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"getFido2PrivilegedApiClient",
          r"(Landroid/content/Context;)Lcom/google/android/gms/fido/fido2/Fido2PrivilegedApiClient;");

  /// from: static public com.google.android.gms.fido.fido2.Fido2PrivilegedApiClient getFido2PrivilegedApiClient(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getFido2PrivilegedApiClient1(
    Context context,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_getFido2PrivilegedApiClient1,
            jni.JniCallType.objectType,
            [context.reference]).object);
  }

  static final _id_getU2fApiClient = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getU2fApiClient",
      r"(Landroid/app/Activity;)Lcom/google/android/gms/fido/u2f/U2fApiClient;");

  /// from: static public com.google.android.gms.fido.u2f.U2fApiClient getU2fApiClient(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getU2fApiClient(
    Activity activity,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getU2fApiClient,
            jni.JniCallType.objectType, [activity.reference]).object);
  }

  static final _id_getU2fApiClient1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getU2fApiClient",
      r"(Landroid/content/Context;)Lcom/google/android/gms/fido/u2f/U2fApiClient;");

  /// from: static public com.google.android.gms.fido.u2f.U2fApiClient getU2fApiClient(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getU2fApiClient1(
    Context context,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getU2fApiClient1,
            jni.JniCallType.objectType, [context.reference]).object);
  }
}

final class $FidoType extends jni.JObjType<Fido> {
  const $FidoType();

  @override
  String get signature => r"Lcom/google/android/gms/fido/Fido;";

  @override
  Fido fromRef(jni.JObjectPtr ref) => Fido.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FidoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FidoType) && other is $FidoType;
  }
}

/// from: com.google.android.gms.fido.fido2.Fido2ApiClient
class Fido2ApiClient extends jni.JObject {
  @override
  late final jni.JObjType<Fido2ApiClient> $type = type;

  Fido2ApiClient.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/google/android/gms/fido/fido2/Fido2ApiClient");

  /// The type which includes information such as the signature of this class.
  static const type = $Fido2ApiClientType();
  static final _id_getRegisterIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getRegisterIntent",
      r"(Lcom/google/android/gms/fido/fido2/api/common/PublicKeyCredentialCreationOptions;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task getRegisterIntent(com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialCreationOptions publicKeyCredentialCreationOptions)
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JObject> getRegisterIntent(
    jni.JObject publicKeyCredentialCreationOptions,
  ) {
    return const $TaskType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getRegisterIntent,
            jni.JniCallType.objectType,
            [publicKeyCredentialCreationOptions.reference]).object);
  }

  static final _id_getRegisterPendingIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getRegisterPendingIntent",
      r"(Lcom/google/android/gms/fido/fido2/api/common/PublicKeyCredentialCreationOptions;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task getRegisterPendingIntent(com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialCreationOptions publicKeyCredentialCreationOptions)
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JObject> getRegisterPendingIntent(
    jni.JObject publicKeyCredentialCreationOptions,
  ) {
    return const $TaskType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getRegisterPendingIntent,
            jni.JniCallType.objectType,
            [publicKeyCredentialCreationOptions.reference]).object);
  }

  static final _id_getSignIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSignIntent",
      r"(Lcom/google/android/gms/fido/fido2/api/common/PublicKeyCredentialRequestOptions;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task getSignIntent(com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialRequestOptions publicKeyCredentialRequestOptions)
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JObject> getSignIntent(
    jni.JObject publicKeyCredentialRequestOptions,
  ) {
    return const $TaskType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getSignIntent,
            jni.JniCallType.objectType,
            [publicKeyCredentialRequestOptions.reference]).object);
  }

  static final _id_getSignPendingIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSignPendingIntent",
      r"(Lcom/google/android/gms/fido/fido2/api/common/PublicKeyCredentialRequestOptions;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task getSignPendingIntent(com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialRequestOptions publicKeyCredentialRequestOptions)
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JObject> getSignPendingIntent(
    jni.JObject publicKeyCredentialRequestOptions,
  ) {
    return const $TaskType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getSignPendingIntent,
            jni.JniCallType.objectType,
            [publicKeyCredentialRequestOptions.reference]).object);
  }

  static final _id_isUserVerifyingPlatformAuthenticatorAvailable =
      jni.Jni.accessors.getMethodIDOf(
          _class.reference,
          r"isUserVerifyingPlatformAuthenticatorAvailable",
          r"()Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task isUserVerifyingPlatformAuthenticatorAvailable()
  /// The returned object must be released after use, by calling the [release] method.
  Task<jni.JBoolean> isUserVerifyingPlatformAuthenticatorAvailable() {
    return const $TaskType(jni.JBooleanType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_isUserVerifyingPlatformAuthenticatorAvailable,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_new0 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Landroid/app/Activity;)V");

  /// from: public void <init>(android.app.Activity activity)
  /// The returned object must be released after use, by calling the [release] method.
  factory Fido2ApiClient(
    Activity activity,
  ) {
    return Fido2ApiClient.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [activity.reference]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory Fido2ApiClient.new1(
    Context context,
  ) {
    return Fido2ApiClient.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [context.reference]).object);
  }
}

final class $Fido2ApiClientType extends jni.JObjType<Fido2ApiClient> {
  const $Fido2ApiClientType();

  @override
  String get signature => r"Lcom/google/android/gms/fido/fido2/Fido2ApiClient;";

  @override
  Fido2ApiClient fromRef(jni.JObjectPtr ref) => Fido2ApiClient.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Fido2ApiClientType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Fido2ApiClientType) &&
        other is $Fido2ApiClientType;
  }
}

/// from: com.google.android.gms.tasks.Task
class Task<$TResult extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<Task<$TResult>> $type = type(TResult);

  final jni.JObjType<$TResult> TResult;

  Task.fromRef(
    this.TResult,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/google/android/gms/tasks/Task");

  /// The type which includes information such as the signature of this class.
  static $TaskType<$TResult> type<$TResult extends jni.JObject>(
    jni.JObjType<$TResult> TResult,
  ) {
    return $TaskType(
      TResult,
    );
  }

  static final _id_addOnCanceledListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCanceledListener",
      r"(Lcom/google/android/gms/tasks/OnCanceledListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCanceledListener(
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCanceledListener,
        jni.JniCallType.objectType,
        [onCanceledListener.reference]).object);
  }

  static final _id_addOnCanceledListener1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCanceledListener",
      r"(Landroid/app/Activity;Lcom/google/android/gms/tasks/OnCanceledListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(android.app.Activity activity, com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCanceledListener1(
    Activity activity,
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCanceledListener1,
        jni.JniCallType.objectType,
        [activity.reference, onCanceledListener.reference]).object);
  }

  static final _id_addOnCanceledListener2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCanceledListener",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/OnCanceledListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCanceledListener2(
    jni.JObject executor,
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCanceledListener2,
        jni.JniCallType.objectType,
        [executor.reference, onCanceledListener.reference]).object);
  }

  static final _id_addOnCompleteListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCompleteListener",
      r"(Lcom/google/android/gms/tasks/OnCompleteListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCompleteListener(
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCompleteListener,
        jni.JniCallType.objectType,
        [onCompleteListener.reference]).object);
  }

  static final _id_addOnCompleteListener1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCompleteListener",
      r"(Landroid/app/Activity;Lcom/google/android/gms/tasks/OnCompleteListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(android.app.Activity activity, com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCompleteListener1(
    Activity activity,
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCompleteListener1,
        jni.JniCallType.objectType,
        [activity.reference, onCompleteListener.reference]).object);
  }

  static final _id_addOnCompleteListener2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnCompleteListener",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/OnCompleteListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnCompleteListener2(
    jni.JObject executor,
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnCompleteListener2,
        jni.JniCallType.objectType,
        [executor.reference, onCompleteListener.reference]).object);
  }

  static final _id_addOnFailureListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnFailureListener",
      r"(Lcom/google/android/gms/tasks/OnFailureListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnFailureListener(
    OnFailureListener onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnFailureListener,
        jni.JniCallType.objectType,
        [onFailureListener.reference]).object);
  }

  static final _id_addOnFailureListener1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnFailureListener",
      r"(Landroid/app/Activity;Lcom/google/android/gms/tasks/OnFailureListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(android.app.Activity activity, com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnFailureListener1(
    Activity activity,
    OnFailureListener onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnFailureListener1,
        jni.JniCallType.objectType,
        [activity.reference, onFailureListener.reference]).object);
  }

  static final _id_addOnFailureListener2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnFailureListener",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/OnFailureListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnFailureListener2(
    jni.JObject executor,
    OnFailureListener onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnFailureListener2,
        jni.JniCallType.objectType,
        [executor.reference, onFailureListener.reference]).object);
  }

  static final _id_addOnSuccessListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnSuccessListener",
      r"(Lcom/google/android/gms/tasks/OnSuccessListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnSuccessListener(
    OnSuccessListener<$TResult> onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnSuccessListener,
        jni.JniCallType.objectType,
        [onSuccessListener.reference]).object);
  }

  static final _id_addOnSuccessListener1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnSuccessListener",
      r"(Landroid/app/Activity;Lcom/google/android/gms/tasks/OnSuccessListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(android.app.Activity activity, com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnSuccessListener1(
    Activity activity,
    OnSuccessListener<$TResult> onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnSuccessListener1,
        jni.JniCallType.objectType,
        [activity.reference, onSuccessListener.reference]).object);
  }

  static final _id_addOnSuccessListener2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOnSuccessListener",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/OnSuccessListener;)Lcom/google/android/gms/tasks/Task;");

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TResult> addOnSuccessListener2(
    jni.JObject executor,
    OnSuccessListener<$TResult> onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addOnSuccessListener2,
        jni.JniCallType.objectType,
        [executor.reference, onSuccessListener.reference]).object);
  }

  static final _id_continueWith = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"continueWith",
      r"(Lcom/google/android/gms/tasks/Continuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task continueWith(com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      continueWith<$TContinuationResult extends jni.JObject>(
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_continueWith,
            jni.JniCallType.objectType, [continuation.reference]).object);
  }

  static final _id_continueWith1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"continueWith",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/Continuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task continueWith(java.util.concurrent.Executor executor, com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      continueWith1<$TContinuationResult extends jni.JObject>(
    jni.JObject executor,
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_continueWith1,
            jni.JniCallType.objectType,
            [executor.reference, continuation.reference]).object);
  }

  static final _id_continueWithTask = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"continueWithTask",
      r"(Lcom/google/android/gms/tasks/Continuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task continueWithTask(com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      continueWithTask<$TContinuationResult extends jni.JObject>(
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_continueWithTask,
            jni.JniCallType.objectType, [continuation.reference]).object);
  }

  static final _id_continueWithTask1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"continueWithTask",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/Continuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task continueWithTask(java.util.concurrent.Executor executor, com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      continueWithTask1<$TContinuationResult extends jni.JObject>(
    jni.JObject executor,
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_continueWithTask1,
            jni.JniCallType.objectType,
            [executor.reference, continuation.reference]).object);
  }

  static final _id_onSuccessTask = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onSuccessTask",
      r"(Lcom/google/android/gms/tasks/SuccessContinuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task onSuccessTask(com.google.android.gms.tasks.SuccessContinuation successContinuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      onSuccessTask<$TContinuationResult extends jni.JObject>(
    jni.JObject successContinuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_onSuccessTask,
            jni.JniCallType.objectType,
            [successContinuation.reference]).object);
  }

  static final _id_onSuccessTask1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onSuccessTask",
      r"(Ljava/util/concurrent/Executor;Lcom/google/android/gms/tasks/SuccessContinuation;)Lcom/google/android/gms/tasks/Task;");

  /// from: public com.google.android.gms.tasks.Task onSuccessTask(java.util.concurrent.Executor executor, com.google.android.gms.tasks.SuccessContinuation successContinuation)
  /// The returned object must be released after use, by calling the [release] method.
  Task<$TContinuationResult>
      onSuccessTask1<$TContinuationResult extends jni.JObject>(
    jni.JObject executor,
    jni.JObject successContinuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_onSuccessTask1,
            jni.JniCallType.objectType,
            [executor.reference, successContinuation.reference]).object);
  }

  static final _id_getException = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getException", r"()Ljava/lang/Exception;");

  /// from: public abstract java.lang.Exception getException()
  /// The returned object must be released after use, by calling the [release] method.
  Exception getException() {
    return const $ExceptionType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getException, jni.JniCallType.objectType, []).object);
  }

  static final _id_getResult = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getResult", r"()Ljava/lang/Object;");

  /// from: public abstract TResult getResult()
  /// The returned object must be released after use, by calling the [release] method.
  $TResult getResult() {
    return TResult.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getResult, jni.JniCallType.objectType, []).object);
  }

  static final _id_getResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getResult", r"(Ljava/lang/Class;)Ljava/lang/Object;");

  /// from: public abstract TResult getResult(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $TResult getResult1<$X extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$X> X,
  }) {
    return TResult.fromRef(jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getResult1, jni.JniCallType.objectType, [class0.reference]).object);
  }

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Task({
    required jni.JObjType<$TResult> TResult,
  }) {
    return Task.fromRef(
        TResult,
        jni.Jni.accessors
            .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_isCanceled =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isCanceled", r"()Z");

  /// from: public abstract boolean isCanceled()
  bool isCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isCanceled, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isComplete =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isComplete", r"()Z");

  /// from: public abstract boolean isComplete()
  bool isComplete() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isComplete, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isSuccessful = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isSuccessful", r"()Z");

  /// from: public abstract boolean isSuccessful()
  bool isSuccessful() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isSuccessful, jni.JniCallType.booleanType, []).boolean;
  }
}

final class $TaskType<$TResult extends jni.JObject>
    extends jni.JObjType<Task<$TResult>> {
  final jni.JObjType<$TResult> TResult;

  const $TaskType(
    this.TResult,
  );

  @override
  String get signature => r"Lcom/google/android/gms/tasks/Task;";

  @override
  Task<$TResult> fromRef(jni.JObjectPtr ref) => Task.fromRef(TResult, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($TaskType, TResult);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TaskType<$TResult>) &&
        other is $TaskType<$TResult> &&
        TResult == other.TResult;
  }
}

/// from: com.google.android.gms.tasks.OnSuccessListener
class OnSuccessListener<$TResult extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<OnSuccessListener<$TResult>> $type = type(TResult);

  final jni.JObjType<$TResult> TResult;

  OnSuccessListener.fromRef(
    this.TResult,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/google/android/gms/tasks/OnSuccessListener");

  /// The type which includes information such as the signature of this class.
  static $OnSuccessListenerType<$TResult> type<$TResult extends jni.JObject>(
    jni.JObjType<$TResult> TResult,
  ) {
    return $OnSuccessListenerType(
      TResult,
    );
  }

  static final _id_onSuccess = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onSuccess", r"(Ljava/lang/Object;)V");

  /// from: public abstract void onSuccess(TResult object)
  void onSuccess(
    $TResult object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onSuccess,
        jni.JniCallType.voidType, [object.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $OnSuccessListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onSuccess(Ljava/lang/Object;)V") {
        _$impls[$p]!.onSuccess(
          $a[0].castTo(_$impls[$p]!.TResult, releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory OnSuccessListener.implement(
    $OnSuccessListenerImpl<$TResult> $impl,
  ) {
    final $p = ReceivePort();
    final $x = OnSuccessListener.fromRef(
      $impl.TResult,
      ProtectedJniExtensions.newPortProxy(
        r"com.google.android.gms.tasks.OnSuccessListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $OnSuccessListenerImpl<$TResult extends jni.JObject> {
  factory $OnSuccessListenerImpl({
    required jni.JObjType<$TResult> TResult,
    required void Function($TResult object) onSuccess,
  }) = _$OnSuccessListenerImpl;

  jni.JObjType<$TResult> get TResult;

  void onSuccess($TResult object);
}

class _$OnSuccessListenerImpl<$TResult extends jni.JObject>
    implements $OnSuccessListenerImpl<$TResult> {
  _$OnSuccessListenerImpl({
    required this.TResult,
    required void Function($TResult object) onSuccess,
  }) : _onSuccess = onSuccess;

  @override
  final jni.JObjType<$TResult> TResult;

  final void Function($TResult object) _onSuccess;

  void onSuccess($TResult object) {
    return _onSuccess(object);
  }
}

final class $OnSuccessListenerType<$TResult extends jni.JObject>
    extends jni.JObjType<OnSuccessListener<$TResult>> {
  final jni.JObjType<$TResult> TResult;

  const $OnSuccessListenerType(
    this.TResult,
  );

  @override
  String get signature => r"Lcom/google/android/gms/tasks/OnSuccessListener;";

  @override
  OnSuccessListener<$TResult> fromRef(jni.JObjectPtr ref) =>
      OnSuccessListener.fromRef(TResult, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($OnSuccessListenerType, TResult);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OnSuccessListenerType<$TResult>) &&
        other is $OnSuccessListenerType<$TResult> &&
        TResult == other.TResult;
  }
}

/// from: com.google.android.gms.tasks.OnFailureListener
class OnFailureListener extends jni.JObject {
  @override
  late final jni.JObjType<OnFailureListener> $type = type;

  OnFailureListener.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/google/android/gms/tasks/OnFailureListener");

  /// The type which includes information such as the signature of this class.
  static const type = $OnFailureListenerType();
  static final _id_onFailure = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onFailure", r"(Ljava/lang/Exception;)V");

  /// from: public abstract void onFailure(java.lang.Exception exception)
  void onFailure(
    Exception exception,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onFailure,
        jni.JniCallType.voidType, [exception.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $OnFailureListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onFailure(Ljava/lang/Exception;)V") {
        _$impls[$p]!.onFailure(
          $a[0].castTo(const $ExceptionType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory OnFailureListener.implement(
    $OnFailureListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = OnFailureListener.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.android.gms.tasks.OnFailureListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $OnFailureListenerImpl {
  factory $OnFailureListenerImpl({
    required void Function(Exception exception) onFailure,
  }) = _$OnFailureListenerImpl;

  void onFailure(Exception exception);
}

class _$OnFailureListenerImpl implements $OnFailureListenerImpl {
  _$OnFailureListenerImpl({
    required void Function(Exception exception) onFailure,
  }) : _onFailure = onFailure;

  final void Function(Exception exception) _onFailure;

  void onFailure(Exception exception) {
    return _onFailure(exception);
  }
}

final class $OnFailureListenerType extends jni.JObjType<OnFailureListener> {
  const $OnFailureListenerType();

  @override
  String get signature => r"Lcom/google/android/gms/tasks/OnFailureListener;";

  @override
  OnFailureListener fromRef(jni.JObjectPtr ref) =>
      OnFailureListener.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OnFailureListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OnFailureListenerType) &&
        other is $OnFailureListenerType;
  }
}
