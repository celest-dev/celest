// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'package:cedar_ffi/src/ffi/cedar_bindings.symbols.ffi.dart' as imp1;
import 'dart:ffi' as ffi;

/// Parses a policy set from a Cedar policy string into JSON.
@ffi.Native<NativeCedar_parse_policy_set>(
    symbol: 'cedar_parse_policy_set', isLeaf: true)
external imp1.CCedarPolicySetResult cedar_parse_policy_set(
  ffi.Pointer<ffi.Char> policies,
);

/// Links a policy template to a set of entities.
///
/// Returns the linked policy template in JSON format.
@ffi.Native<NativeCedar_link_policy_template>(
    symbol: 'cedar_link_policy_template', isLeaf: true)
external ffi.Pointer<ffi.Char> cedar_link_policy_template(
  ffi.Pointer<ffi.Char> policy_template_json,
  ffi.Pointer<ffi.Char> entities_json,
);

/// Initializes the Cedar policy engine with the given configuration.
///
/// This must be called exactly once before any other Cedar functions are called.
@ffi.Native<NativeCedar_init>(symbol: 'cedar_init', isLeaf: true)
external imp1.CInitResult cedar_init(
  ffi.Pointer<imp1.CCedarConfig> config,
);

/// De-initializes the Cedar policy engine.
///
/// This must be called exactly once when the Cedar policy engine is no longer needed.
@ffi.Native<NativeCedar_deinit>(symbol: 'cedar_deinit', isLeaf: true)
external void cedar_deinit(
  ffi.Pointer<imp1.CedarStore> store,
);

/// Performs a Cedar authorization check.
///
/// This must be called after [cedar_init] has been called.
@ffi.Native<NativeCedar_is_authorized>(
    symbol: 'cedar_is_authorized', isLeaf: true)
external imp1.CAuthorizationDecision cedar_is_authorized(
  ffi.Pointer<imp1.CedarStore> store,
  ffi.Pointer<imp1.CCedarQuery> query,
);

typedef NativeCedar_parse_policy_set = imp1.CCedarPolicySetResult Function(
    ffi.Pointer<ffi.Char> policies);
typedef DartCedar_parse_policy_set = imp1.CCedarPolicySetResult Function(
    ffi.Pointer<ffi.Char> policies);
typedef NativeCedar_link_policy_template = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> policy_template_json,
    ffi.Pointer<ffi.Char> entities_json);
typedef DartCedar_link_policy_template = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> policy_template_json,
    ffi.Pointer<ffi.Char> entities_json);
typedef NativeCedar_init = imp1.CInitResult Function(
    ffi.Pointer<imp1.CCedarConfig> config);
typedef DartCedar_init = imp1.CInitResult Function(
    ffi.Pointer<imp1.CCedarConfig> config);
typedef NativeCedar_deinit = ffi.Void Function(
    ffi.Pointer<imp1.CedarStore> store);
typedef DartCedar_deinit = void Function(ffi.Pointer<imp1.CedarStore> store);
typedef NativeCedar_is_authorized = imp1.CAuthorizationDecision Function(
    ffi.Pointer<imp1.CedarStore> store, ffi.Pointer<imp1.CCedarQuery> query);
typedef DartCedar_is_authorized = imp1.CAuthorizationDecision Function(
    ffi.Pointer<imp1.CedarStore> store, ffi.Pointer<imp1.CCedarQuery> query);
