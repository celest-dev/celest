// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:cedar_ffi/src/ffi/cedar_bindings.symbols.ffi.dart' as imp1;

/// Parses a policy set from a Cedar policy string into JSON.
@ffi.Native<imp1.CCedarPolicySetResult Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'cedar_parse_policy_set', isLeaf: true)
external imp1.CCedarPolicySetResult cedar_parse_policy_set(
  ffi.Pointer<ffi.Char> policies,
);

/// Links a policy template to a set of entities.
///
/// Returns the linked policy template in JSON format.
@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'cedar_link_policy_template', isLeaf: true)
external ffi.Pointer<ffi.Char> cedar_link_policy_template(
  ffi.Pointer<ffi.Char> policy_template_json,
  ffi.Pointer<ffi.Char> entities_json,
);

/// Initializes the Cedar policy engine with the given configuration.
///
/// This must be called exactly once before any other Cedar functions are called.
@ffi.Native<imp1.CInitResult Function(ffi.Pointer<imp1.CCedarConfig>)>(
    symbol: 'cedar_init', isLeaf: true)
external imp1.CInitResult cedar_init(
  ffi.Pointer<imp1.CCedarConfig> config,
);

/// De-initializes the Cedar policy engine.
///
/// This must be called exactly once when the Cedar policy engine is no longer needed.
@ffi.Native<ffi.Void Function(ffi.Pointer<imp1.CedarStore>)>(
    symbol: 'cedar_deinit', isLeaf: true)
external void cedar_deinit(
  ffi.Pointer<imp1.CedarStore> store,
);

/// Performs a Cedar authorization check.
///
/// This must be called after [cedar_init] has been called.
@ffi.Native<
        imp1.CAuthorizationDecision Function(
            ffi.Pointer<imp1.CedarStore>, ffi.Pointer<imp1.CCedarQuery>)>(
    symbol: 'cedar_is_authorized', isLeaf: true)
external imp1.CAuthorizationDecision cedar_is_authorized(
  ffi.Pointer<imp1.CedarStore> store,
  ffi.Pointer<imp1.CCedarQuery> query,
);
