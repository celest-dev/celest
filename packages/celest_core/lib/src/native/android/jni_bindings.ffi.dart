// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: dev.celest.celest_core.CelestSecureStorage
class CelestSecureStorage extends jni.JObject {
  @override
  late final jni.JObjType<CelestSecureStorage> $type = type;

  CelestSecureStorage.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"dev/celest/celest_core/CelestSecureStorage");

  /// The type which includes information such as the signature of this class.
  static const type = $CelestSecureStorageType();
  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Landroid/app/Activity;Ljava/lang/String;)V");

  /// from: public void <init>(android.app.Activity activity, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory CelestSecureStorage(
    Activity activity,
    jni.JString string,
  ) {
    return CelestSecureStorage.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [activity.reference, string.reference]).object);
  }

  static final _id_write = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"write", r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public final void write(java.lang.String string, java.lang.String string1)
  void write(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_write,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_read = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"read", r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public final java.lang.String read(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString read(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_read,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_delete = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"delete", r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public final java.lang.String delete(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString delete(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_delete,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_clear =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"clear", r"()V");

  /// from: public final void clear()
  void clear() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clear, jni.JniCallType.voidType, []).check();
  }
}

final class $CelestSecureStorageType extends jni.JObjType<CelestSecureStorage> {
  const $CelestSecureStorageType();

  @override
  String get signature => r"Ldev/celest/celest_core/CelestSecureStorage;";

  @override
  CelestSecureStorage fromRef(jni.JObjectPtr ref) =>
      CelestSecureStorage.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CelestSecureStorageType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CelestSecureStorageType) &&
        other is $CelestSecureStorageType;
  }
}

/// from: android.app.Activity$ScreenCaptureCallback
class Activity_ScreenCaptureCallback extends jni.JObject {
  @override
  late final jni.JObjType<Activity_ScreenCaptureCallback> $type = type;

  Activity_ScreenCaptureCallback.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"android/app/Activity$ScreenCaptureCallback");

  /// The type which includes information such as the signature of this class.
  static const type = $Activity_ScreenCaptureCallbackType();
  static final _id_onScreenCaptured = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onScreenCaptured", r"()V");

  /// from: public abstract void onScreenCaptured()
  void onScreenCaptured() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onScreenCaptured, jni.JniCallType.voidType, []).check();
  }
}

final class $Activity_ScreenCaptureCallbackType
    extends jni.JObjType<Activity_ScreenCaptureCallback> {
  const $Activity_ScreenCaptureCallbackType();

  @override
  String get signature => r"Landroid/app/Activity$ScreenCaptureCallback;";

  @override
  Activity_ScreenCaptureCallback fromRef(jni.JObjectPtr ref) =>
      Activity_ScreenCaptureCallback.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Activity_ScreenCaptureCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity_ScreenCaptureCallbackType) &&
        other is $Activity_ScreenCaptureCallbackType;
  }
}

/// from: android.app.Activity
class Activity extends jni.JObject {
  @override
  late final jni.JObjType<Activity> $type = type;

  Activity.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"android/app/Activity");

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityType();

  /// from: static public final int DEFAULT_KEYS_DIALER
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: static public final int DEFAULT_KEYS_DISABLE
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: static public final int DEFAULT_KEYS_SEARCH_GLOBAL
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: static public final int DEFAULT_KEYS_SEARCH_LOCAL
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: static public final int DEFAULT_KEYS_SHORTCUT
  static const DEFAULT_KEYS_SHORTCUT = 2;

  static final _id_FOCUSED_STATE_SET = jni.Jni.accessors.getStaticFieldIDOf(
    _class.reference,
    r"FOCUSED_STATE_SET",
    r"[I",
  );

  /// from: static protected final int[] FOCUSED_STATE_SET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jint> get FOCUSED_STATE_SET =>
      const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
          .getStaticField(_class.reference, _id_FOCUSED_STATE_SET,
              jni.JniCallType.objectType)
          .object);

  /// from: static public final int FULLSCREEN_MODE_REQUEST_ENTER
  static const FULLSCREEN_MODE_REQUEST_ENTER = 1;

  /// from: static public final int FULLSCREEN_MODE_REQUEST_EXIT
  static const FULLSCREEN_MODE_REQUEST_EXIT = 0;

  /// from: static public final int OVERRIDE_TRANSITION_CLOSE
  static const OVERRIDE_TRANSITION_CLOSE = 1;

  /// from: static public final int OVERRIDE_TRANSITION_OPEN
  static const OVERRIDE_TRANSITION_OPEN = 0;

  /// from: static public final int RESULT_CANCELED
  static const RESULT_CANCELED = 0;

  /// from: static public final int RESULT_FIRST_USER
  static const RESULT_FIRST_USER = 1;

  /// from: static public final int RESULT_OK
  static const RESULT_OK = -1;

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getIntent", r"()Landroid/content/Intent;");

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIntent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getIntent, jni.JniCallType.objectType, []).object);
  }

  static final _id_setIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setIntent", r"(Landroid/content/Intent;)V");

  /// from: public void setIntent(android.content.Intent intent)
  void setIntent(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setIntent,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_setLocusContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setLocusContext",
      r"(Landroid/content/LocusId;Landroid/os/Bundle;)V");

  /// from: public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)
  void setLocusContext(
    jni.JObject locusId,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setLocusContext,
        jni.JniCallType.voidType,
        [locusId.reference, bundle.reference]).check();
  }

  static final _id_getApplication = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getApplication", r"()Landroid/app/Application;");

  /// from: public final android.app.Application getApplication()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplication() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getApplication, jni.JniCallType.objectType, []).object);
  }

  static final _id_isChild =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isChild", r"()Z");

  /// from: public final boolean isChild()
  bool isChild() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isChild, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getParent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getParent", r"()Landroid/app/Activity;");

  /// from: public final android.app.Activity getParent()
  /// The returned object must be released after use, by calling the [release] method.
  Activity getParent() {
    return const $ActivityType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getParent, jni.JniCallType.objectType, []).object);
  }

  static final _id_getWindowManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getWindowManager", r"()Landroid/view/WindowManager;");

  /// from: public android.view.WindowManager getWindowManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindowManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getWindowManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getWindow = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getWindow", r"()Landroid/view/Window;");

  /// from: public android.view.Window getWindow()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindow() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getWindow, jni.JniCallType.objectType, []).object);
  }

  static final _id_getLoaderManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLoaderManager", r"()Landroid/app/LoaderManager;");

  /// from: public android.app.LoaderManager getLoaderManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLoaderManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLoaderManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCurrentFocus = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCurrentFocus", r"()Landroid/view/View;");

  /// from: public android.view.View getCurrentFocus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCurrentFocus() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCurrentFocus, jni.JniCallType.objectType, []).object);
  }

  static final _id_attachBaseContext = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"attachBaseContext", r"(Landroid/content/Context;)V");

  /// from: protected void attachBaseContext(android.content.Context context)
  void attachBaseContext(
    jni.JObject context,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_attachBaseContext,
        jni.JniCallType.voidType,
        [context.reference]).check();
  }

  static final _id_registerActivityLifecycleCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"registerActivityLifecycleCallbacks",
          r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V");

  /// from: public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void registerActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerActivityLifecycleCallbacks,
        jni.JniCallType.voidType,
        [activityLifecycleCallbacks.reference]).check();
  }

  static final _id_unregisterActivityLifecycleCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterActivityLifecycleCallbacks",
          r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V");

  /// from: public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void unregisterActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterActivityLifecycleCallbacks,
        jni.JniCallType.voidType,
        [activityLifecycleCallbacks.reference]).check();
  }

  static final _id_registerComponentCallbacks = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerComponentCallbacks",
      r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_unregisterComponentCallbacks = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterComponentCallbacks",
          r"(Landroid/content/ComponentCallbacks;)V");

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterComponentCallbacks,
        jni.JniCallType.voidType,
        [componentCallbacks.reference]).check();
  }

  static final _id_onCreate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onCreate", r"(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle bundle)
  void onCreate(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onCreate,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_getSplashScreen = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSplashScreen", r"()Landroid/window/SplashScreen;");

  /// from: public final android.window.SplashScreen getSplashScreen()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSplashScreen() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getSplashScreen, jni.JniCallType.objectType, []).object);
  }

  static final _id_onCreate1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"onCreate", r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreate1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onRestoreInstanceState = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onRestoreInstanceState", r"(Landroid/os/Bundle;)V");

  /// from: protected void onRestoreInstanceState(android.os.Bundle bundle)
  void onRestoreInstanceState(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRestoreInstanceState,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onRestoreInstanceState1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onRestoreInstanceState",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onRestoreInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRestoreInstanceState1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onPostCreate = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPostCreate", r"(Landroid/os/Bundle;)V");

  /// from: protected void onPostCreate(android.os.Bundle bundle)
  void onPostCreate(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPostCreate,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_onPostCreate1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPostCreate",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onPostCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPostCreate1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onStart =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onStart", r"()V");

  /// from: protected void onStart()
  void onStart() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStart, jni.JniCallType.voidType, []).check();
  }

  static final _id_onRestart =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onRestart", r"()V");

  /// from: protected void onRestart()
  void onRestart() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onRestart, jni.JniCallType.voidType, []).check();
  }

  static final _id_onStateNotSaved = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onStateNotSaved", r"()V");

  /// from: public void onStateNotSaved()
  void onStateNotSaved() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStateNotSaved, jni.JniCallType.voidType, []).check();
  }

  static final _id_onResume =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onResume", r"()V");

  /// from: protected void onResume()
  void onResume() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onResume, jni.JniCallType.voidType, []).check();
  }

  static final _id_onPostResume = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPostResume", r"()V");

  /// from: protected void onPostResume()
  void onPostResume() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPostResume, jni.JniCallType.voidType, []).check();
  }

  static final _id_onTopResumedActivityChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onTopResumedActivityChanged", r"(Z)V");

  /// from: public void onTopResumedActivityChanged(boolean z)
  void onTopResumedActivityChanged(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onTopResumedActivityChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isVoiceInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isVoiceInteraction", r"()Z");

  /// from: public boolean isVoiceInteraction()
  bool isVoiceInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isVoiceInteraction, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isVoiceInteractionRoot = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isVoiceInteractionRoot", r"()Z");

  /// from: public boolean isVoiceInteractionRoot()
  bool isVoiceInteractionRoot() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isVoiceInteractionRoot, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getVoiceInteractor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getVoiceInteractor",
      r"()Landroid/app/VoiceInteractor;");

  /// from: public android.app.VoiceInteractor getVoiceInteractor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getVoiceInteractor() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getVoiceInteractor,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_isLocalVoiceInteractionSupported = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"isLocalVoiceInteractionSupported", r"()Z");

  /// from: public boolean isLocalVoiceInteractionSupported()
  bool isLocalVoiceInteractionSupported() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isLocalVoiceInteractionSupported,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_startLocalVoiceInteraction = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startLocalVoiceInteraction",
      r"(Landroid/os/Bundle;)V");

  /// from: public void startLocalVoiceInteraction(android.os.Bundle bundle)
  void startLocalVoiceInteraction(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startLocalVoiceInteraction,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onLocalVoiceInteractionStarted = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onLocalVoiceInteractionStarted", r"()V");

  /// from: public void onLocalVoiceInteractionStarted()
  void onLocalVoiceInteractionStarted() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onLocalVoiceInteractionStarted,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_onLocalVoiceInteractionStopped = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onLocalVoiceInteractionStopped", r"()V");

  /// from: public void onLocalVoiceInteractionStopped()
  void onLocalVoiceInteractionStopped() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onLocalVoiceInteractionStopped,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_stopLocalVoiceInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"stopLocalVoiceInteraction", r"()V");

  /// from: public void stopLocalVoiceInteraction()
  void stopLocalVoiceInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_stopLocalVoiceInteraction, jni.JniCallType.voidType, []).check();
  }

  static final _id_onNewIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onNewIntent", r"(Landroid/content/Intent;)V");

  /// from: protected void onNewIntent(android.content.Intent intent)
  void onNewIntent(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onNewIntent,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_onSaveInstanceState = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onSaveInstanceState", r"(Landroid/os/Bundle;)V");

  /// from: protected void onSaveInstanceState(android.os.Bundle bundle)
  void onSaveInstanceState(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSaveInstanceState,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onSaveInstanceState1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onSaveInstanceState",
      r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V");

  /// from: public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onSaveInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSaveInstanceState1,
        jni.JniCallType.voidType,
        [bundle.reference, persistableBundle.reference]).check();
  }

  static final _id_onPause =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onPause", r"()V");

  /// from: protected void onPause()
  void onPause() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPause, jni.JniCallType.voidType, []).check();
  }

  static final _id_onUserLeaveHint = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onUserLeaveHint", r"()V");

  /// from: protected void onUserLeaveHint()
  void onUserLeaveHint() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onUserLeaveHint, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateThumbnail = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateThumbnail",
      r"(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z");

  /// from: public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)
  bool onCreateThumbnail(
    jni.JObject bitmap,
    jni.JObject canvas,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateThumbnail,
        jni.JniCallType.booleanType,
        [bitmap.reference, canvas.reference]).boolean;
  }

  static final _id_onCreateDescription = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateDescription", r"()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence onCreateDescription()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDescription() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDescription,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onProvideAssistData = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onProvideAssistData", r"(Landroid/os/Bundle;)V");

  /// from: public void onProvideAssistData(android.os.Bundle bundle)
  void onProvideAssistData(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideAssistData,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onProvideAssistContent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onProvideAssistContent",
      r"(Landroid/app/assist/AssistContent;)V");

  /// from: public void onProvideAssistContent(android.app.assist.AssistContent assistContent)
  void onProvideAssistContent(
    jni.JObject assistContent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideAssistContent,
        jni.JniCallType.voidType,
        [assistContent.reference]).check();
  }

  static final _id_onGetDirectActions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onGetDirectActions",
      r"(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V");

  /// from: public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onGetDirectActions(
    jni.JObject cancellationSignal,
    jni.JObject consumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onGetDirectActions,
        jni.JniCallType.voidType,
        [cancellationSignal.reference, consumer.reference]).check();
  }

  static final _id_onPerformDirectAction = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPerformDirectAction",
      r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V");

  /// from: public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onPerformDirectAction(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject cancellationSignal,
    jni.JObject consumer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPerformDirectAction, jni.JniCallType.voidType, [
      string.reference,
      bundle.reference,
      cancellationSignal.reference,
      consumer.reference
    ]).check();
  }

  static final _id_requestShowKeyboardShortcuts = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestShowKeyboardShortcuts", r"()V");

  /// from: public final void requestShowKeyboardShortcuts()
  void requestShowKeyboardShortcuts() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_requestShowKeyboardShortcuts, jni.JniCallType.voidType, []).check();
  }

  static final _id_dismissKeyboardShortcutsHelper = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"dismissKeyboardShortcutsHelper", r"()V");

  /// from: public final void dismissKeyboardShortcutsHelper()
  void dismissKeyboardShortcutsHelper() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dismissKeyboardShortcutsHelper,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_onProvideKeyboardShortcuts = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onProvideKeyboardShortcuts",
      r"(Ljava/util/List;Landroid/view/Menu;I)V");

  /// from: public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)
  void onProvideKeyboardShortcuts(
    jni.JList<jni.JObject> list,
    jni.JObject menu,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideKeyboardShortcuts,
        jni.JniCallType.voidType,
        [list.reference, menu.reference, jni.JValueInt(i)]).check();
  }

  static final _id_showAssist = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"showAssist", r"(Landroid/os/Bundle;)Z");

  /// from: public boolean showAssist(android.os.Bundle bundle)
  bool showAssist(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_showAssist,
        jni.JniCallType.booleanType, [bundle.reference]).boolean;
  }

  static final _id_onStop =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onStop", r"()V");

  /// from: protected void onStop()
  void onStop() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStop, jni.JniCallType.voidType, []).check();
  }

  static final _id_onDestroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onDestroy", r"()V");

  /// from: protected void onDestroy()
  void onDestroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onDestroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_reportFullyDrawn = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"reportFullyDrawn", r"()V");

  /// from: public void reportFullyDrawn()
  void reportFullyDrawn() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_reportFullyDrawn, jni.JniCallType.voidType, []).check();
  }

  static final _id_onMultiWindowModeChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onMultiWindowModeChanged",
      r"(ZLandroid/content/res/Configuration;)V");

  /// from: public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)
  void onMultiWindowModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMultiWindowModeChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0, configuration.reference]).check();
  }

  static final _id_onMultiWindowModeChanged1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onMultiWindowModeChanged", r"(Z)V");

  /// from: public void onMultiWindowModeChanged(boolean z)
  void onMultiWindowModeChanged1(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMultiWindowModeChanged1,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isInMultiWindowMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isInMultiWindowMode", r"()Z");

  /// from: public boolean isInMultiWindowMode()
  bool isInMultiWindowMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isInMultiWindowMode, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onPictureInPictureModeChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureModeChanged",
          r"(ZLandroid/content/res/Configuration;)V");

  /// from: public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)
  void onPictureInPictureModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureModeChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0, configuration.reference]).check();
  }

  static final _id_onPictureInPictureUiStateChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureUiStateChanged",
          r"(Landroid/app/PictureInPictureUiState;)V");

  /// from: public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)
  void onPictureInPictureUiStateChanged(
    jni.JObject pictureInPictureUiState,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureUiStateChanged,
        jni.JniCallType.voidType,
        [pictureInPictureUiState.reference]).check();
  }

  static final _id_onPictureInPictureModeChanged1 = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"onPictureInPictureModeChanged", r"(Z)V");

  /// from: public void onPictureInPictureModeChanged(boolean z)
  void onPictureInPictureModeChanged1(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureModeChanged1,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_isInPictureInPictureMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isInPictureInPictureMode", r"()Z");

  /// from: public boolean isInPictureInPictureMode()
  bool isInPictureInPictureMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isInPictureInPictureMode, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_enterPictureInPictureMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enterPictureInPictureMode", r"()V");

  /// from: public void enterPictureInPictureMode()
  void enterPictureInPictureMode() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_enterPictureInPictureMode, jni.JniCallType.voidType, []).check();
  }

  static final _id_enterPictureInPictureMode1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enterPictureInPictureMode",
      r"(Landroid/app/PictureInPictureParams;)Z");

  /// from: public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)
  bool enterPictureInPictureMode1(
    jni.JObject pictureInPictureParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_enterPictureInPictureMode1,
        jni.JniCallType.booleanType,
        [pictureInPictureParams.reference]).boolean;
  }

  static final _id_setPictureInPictureParams = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setPictureInPictureParams",
      r"(Landroid/app/PictureInPictureParams;)V");

  /// from: public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)
  void setPictureInPictureParams(
    jni.JObject pictureInPictureParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setPictureInPictureParams,
        jni.JniCallType.voidType,
        [pictureInPictureParams.reference]).check();
  }

  static final _id_getMaxNumPictureInPictureActions = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"getMaxNumPictureInPictureActions", r"()I");

  /// from: public int getMaxNumPictureInPictureActions()
  int getMaxNumPictureInPictureActions() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getMaxNumPictureInPictureActions,
        jni.JniCallType.intType, []).integer;
  }

  static final _id_onPictureInPictureRequested = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPictureInPictureRequested", r"()Z");

  /// from: public boolean onPictureInPictureRequested()
  bool onPictureInPictureRequested() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPictureInPictureRequested,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_requestFullscreenMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"requestFullscreenMode",
      r"(ILandroid/os/OutcomeReceiver;)V");

  /// from: public void requestFullscreenMode(int i, android.os.OutcomeReceiver outcomeReceiver)
  void requestFullscreenMode(
    int i,
    jni.JObject outcomeReceiver,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestFullscreenMode,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), outcomeReceiver.reference]).check();
  }

  static final _id_setShouldDockBigOverlays = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setShouldDockBigOverlays", r"(Z)V");

  /// from: public void setShouldDockBigOverlays(boolean z)
  void setShouldDockBigOverlays(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setShouldDockBigOverlays,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_shouldDockBigOverlays = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"shouldDockBigOverlays", r"()Z");

  /// from: public boolean shouldDockBigOverlays()
  bool shouldDockBigOverlays() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_shouldDockBigOverlays, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onConfigurationChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onConfigurationChanged",
      r"(Landroid/content/res/Configuration;)V");

  /// from: public void onConfigurationChanged(android.content.res.Configuration configuration)
  void onConfigurationChanged(
    jni.JObject configuration,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onConfigurationChanged,
        jni.JniCallType.voidType,
        [configuration.reference]).check();
  }

  static final _id_getChangingConfigurations = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getChangingConfigurations", r"()I");

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getChangingConfigurations, jni.JniCallType.intType, []).integer;
  }

  static final _id_getLastNonConfigurationInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLastNonConfigurationInstance",
          r"()Ljava/lang/Object;");

  /// from: public java.lang.Object getLastNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLastNonConfigurationInstance() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLastNonConfigurationInstance,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onRetainNonConfigurationInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onRetainNonConfigurationInstance",
          r"()Ljava/lang/Object;");

  /// from: public java.lang.Object onRetainNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onRetainNonConfigurationInstance() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRetainNonConfigurationInstance,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onLowMemory =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onLowMemory", r"()V");

  /// from: public void onLowMemory()
  void onLowMemory() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onLowMemory, jni.JniCallType.voidType, []).check();
  }

  static final _id_onTrimMemory = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onTrimMemory", r"(I)V");

  /// from: public void onTrimMemory(int i)
  void onTrimMemory(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTrimMemory,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getFragmentManager = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getFragmentManager",
      r"()Landroid/app/FragmentManager;");

  /// from: public android.app.FragmentManager getFragmentManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFragmentManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getFragmentManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_onAttachFragment = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onAttachFragment", r"(Landroid/app/Fragment;)V");

  /// from: public void onAttachFragment(android.app.Fragment fragment)
  void onAttachFragment(
    jni.JObject fragment,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onAttachFragment,
        jni.JniCallType.voidType, [fragment.reference]).check();
  }

  static final _id_managedQuery = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"managedQuery",
      r"(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;");

  /// from: public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject managedQuery(
    jni.JObject uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_managedQuery, jni.JniCallType.objectType, [
      uri.reference,
      strings.reference,
      string.reference,
      strings1.reference,
      string1.reference
    ]).object);
  }

  static final _id_startManagingCursor = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startManagingCursor",
      r"(Landroid/database/Cursor;)V");

  /// from: public void startManagingCursor(android.database.Cursor cursor)
  void startManagingCursor(
    jni.JObject cursor,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startManagingCursor,
        jni.JniCallType.voidType,
        [cursor.reference]).check();
  }

  static final _id_stopManagingCursor = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"stopManagingCursor", r"(Landroid/database/Cursor;)V");

  /// from: public void stopManagingCursor(android.database.Cursor cursor)
  void stopManagingCursor(
    jni.JObject cursor,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_stopManagingCursor,
        jni.JniCallType.voidType,
        [cursor.reference]).check();
  }

  static final _id_findViewById = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"findViewById", r"(I)Landroid/view/View;");

  /// from: public T findViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T findViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_findViewById,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_requireViewById = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"requireViewById", r"(I)Landroid/view/View;");

  /// from: public final T requireViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T requireViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requireViewById,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getActionBar = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getActionBar", r"()Landroid/app/ActionBar;");

  /// from: public android.app.ActionBar getActionBar()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActionBar() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getActionBar, jni.JniCallType.objectType, []).object);
  }

  static final _id_setActionBar = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setActionBar", r"(Landroid/widget/Toolbar;)V");

  /// from: public void setActionBar(android.widget.Toolbar toolbar)
  void setActionBar(
    jni.JObject toolbar,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setActionBar,
        jni.JniCallType.voidType, [toolbar.reference]).check();
  }

  static final _id_setContentView = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setContentView", r"(I)V");

  /// from: public void setContentView(int i)
  void setContentView(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setContentView,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setContentView1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setContentView", r"(Landroid/view/View;)V");

  /// from: public void setContentView(android.view.View view)
  void setContentView1(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setContentView1,
        jni.JniCallType.voidType, [view.reference]).check();
  }

  static final _id_setContentView2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setContentView",
      r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V");

  /// from: public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void setContentView2(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setContentView2,
        jni.JniCallType.voidType,
        [view.reference, layoutParams.reference]).check();
  }

  static final _id_addContentView = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addContentView",
      r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V");

  /// from: public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void addContentView(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addContentView,
        jni.JniCallType.voidType,
        [view.reference, layoutParams.reference]).check();
  }

  static final _id_getContentTransitionManager = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getContentTransitionManager",
          r"()Landroid/transition/TransitionManager;");

  /// from: public android.transition.TransitionManager getContentTransitionManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentTransitionManager() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getContentTransitionManager,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setContentTransitionManager = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setContentTransitionManager",
          r"(Landroid/transition/TransitionManager;)V");

  /// from: public void setContentTransitionManager(android.transition.TransitionManager transitionManager)
  void setContentTransitionManager(
    jni.JObject transitionManager,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setContentTransitionManager,
        jni.JniCallType.voidType,
        [transitionManager.reference]).check();
  }

  static final _id_getContentScene = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getContentScene", r"()Landroid/transition/Scene;");

  /// from: public android.transition.Scene getContentScene()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentScene() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getContentScene, jni.JniCallType.objectType, []).object);
  }

  static final _id_setFinishOnTouchOutside = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFinishOnTouchOutside", r"(Z)V");

  /// from: public void setFinishOnTouchOutside(boolean z)
  void setFinishOnTouchOutside(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFinishOnTouchOutside,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setDefaultKeyMode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setDefaultKeyMode", r"(I)V");

  /// from: public final void setDefaultKeyMode(int i)
  void setDefaultKeyMode(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setDefaultKeyMode,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_onKeyDown = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyDown", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)
  bool onKeyDown(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyDown,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyLongPress = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyLongPress", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)
  bool onKeyLongPress(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyLongPress,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyUp = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyUp", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)
  bool onKeyUp(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyUp,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onKeyMultiple = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyMultiple", r"(IILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)
  bool onKeyMultiple(
    int i,
    int i1,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyMultiple,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), jni.JValueInt(i1), keyEvent.reference]).boolean;
  }

  static final _id_onBackPressed = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onBackPressed", r"()V");

  /// from: public void onBackPressed()
  void onBackPressed() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onBackPressed, jni.JniCallType.voidType, []).check();
  }

  static final _id_onKeyShortcut = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onKeyShortcut", r"(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)
  bool onKeyShortcut(
    int i,
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onKeyShortcut,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), keyEvent.reference]).boolean;
  }

  static final _id_onTouchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTouchEvent", r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTouchEvent,
        jni.JniCallType.booleanType, [motionEvent.reference]).boolean;
  }

  static final _id_onTrackballEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTrackballEvent", r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTrackballEvent(android.view.MotionEvent motionEvent)
  bool onTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onTrackballEvent,
        jni.JniCallType.booleanType, [motionEvent.reference]).boolean;
  }

  static final _id_onGenericMotionEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onGenericMotionEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool onGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onGenericMotionEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_onUserInteraction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onUserInteraction", r"()V");

  /// from: public void onUserInteraction()
  void onUserInteraction() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onUserInteraction, jni.JniCallType.voidType, []).check();
  }

  static final _id_onWindowAttributesChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onWindowAttributesChanged",
      r"(Landroid/view/WindowManager$LayoutParams;)V");

  /// from: public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)
  void onWindowAttributesChanged(
    jni.JObject layoutParams,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowAttributesChanged,
        jni.JniCallType.voidType,
        [layoutParams.reference]).check();
  }

  static final _id_onContentChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onContentChanged", r"()V");

  /// from: public void onContentChanged()
  void onContentChanged() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onContentChanged, jni.JniCallType.voidType, []).check();
  }

  static final _id_onWindowFocusChanged = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onWindowFocusChanged", r"(Z)V");

  /// from: public void onWindowFocusChanged(boolean z)
  void onWindowFocusChanged(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowFocusChanged,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_onAttachedToWindow = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onAttachedToWindow", r"()V");

  /// from: public void onAttachedToWindow()
  void onAttachedToWindow() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onAttachedToWindow, jni.JniCallType.voidType, []).check();
  }

  static final _id_onDetachedFromWindow = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onDetachedFromWindow", r"()V");

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onDetachedFromWindow, jni.JniCallType.voidType, []).check();
  }

  static final _id_hasWindowFocus = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasWindowFocus", r"()Z");

  /// from: public boolean hasWindowFocus()
  bool hasWindowFocus() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasWindowFocus, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_dispatchKeyEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"dispatchKeyEvent", r"(Landroid/view/KeyEvent;)Z");

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyEvent(
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_dispatchKeyEvent,
        jni.JniCallType.booleanType, [keyEvent.reference]).boolean;
  }

  static final _id_dispatchKeyShortcutEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchKeyShortcutEvent",
      r"(Landroid/view/KeyEvent;)Z");

  /// from: public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyShortcutEvent(
    jni.JObject keyEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchKeyShortcutEvent,
        jni.JniCallType.booleanType,
        [keyEvent.reference]).boolean;
  }

  static final _id_dispatchTouchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchTouchEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)
  bool dispatchTouchEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchTouchEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchTrackballEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchTrackballEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)
  bool dispatchTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchTrackballEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchGenericMotionEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dispatchGenericMotionEvent",
      r"(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool dispatchGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchGenericMotionEvent,
        jni.JniCallType.booleanType,
        [motionEvent.reference]).boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"dispatchPopulateAccessibilityEvent",
          r"(Landroid/view/accessibility/AccessibilityEvent;)Z");

  /// from: public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)
  bool dispatchPopulateAccessibilityEvent(
    jni.JObject accessibilityEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_dispatchPopulateAccessibilityEvent,
        jni.JniCallType.booleanType,
        [accessibilityEvent.reference]).boolean;
  }

  static final _id_onCreatePanelView = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreatePanelView", r"(I)Landroid/view/View;");

  /// from: public android.view.View onCreatePanelView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreatePanelView(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreatePanelView,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_onCreatePanelMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreatePanelMenu", r"(ILandroid/view/Menu;)Z");

  /// from: public boolean onCreatePanelMenu(int i, android.view.Menu menu)
  bool onCreatePanelMenu(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreatePanelMenu,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menu.reference]).boolean;
  }

  static final _id_onPreparePanel = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPreparePanel",
      r"(ILandroid/view/View;Landroid/view/Menu;)Z");

  /// from: public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)
  bool onPreparePanel(
    int i,
    jni.JObject view,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPreparePanel,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), view.reference, menu.reference]).boolean;
  }

  static final _id_onMenuOpened = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onMenuOpened", r"(ILandroid/view/Menu;)Z");

  /// from: public boolean onMenuOpened(int i, android.view.Menu menu)
  bool onMenuOpened(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMenuOpened,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menu.reference]).boolean;
  }

  static final _id_onMenuItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onMenuItemSelected", r"(ILandroid/view/MenuItem;)Z");

  /// from: public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)
  bool onMenuItemSelected(
    int i,
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onMenuItemSelected,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), menuItem.reference]).boolean;
  }

  static final _id_onPanelClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPanelClosed", r"(ILandroid/view/Menu;)V");

  /// from: public void onPanelClosed(int i, android.view.Menu menu)
  void onPanelClosed(
    int i,
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPanelClosed,
        jni.JniCallType.voidType, [jni.JValueInt(i), menu.reference]).check();
  }

  static final _id_invalidateOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"invalidateOptionsMenu", r"()V");

  /// from: public void invalidateOptionsMenu()
  void invalidateOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_invalidateOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateOptionsMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateOptionsMenu", r"(Landroid/view/Menu;)Z");

  /// from: public boolean onCreateOptionsMenu(android.view.Menu menu)
  bool onCreateOptionsMenu(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateOptionsMenu,
        jni.JniCallType.booleanType,
        [menu.reference]).boolean;
  }

  static final _id_onPrepareOptionsMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPrepareOptionsMenu", r"(Landroid/view/Menu;)Z");

  /// from: public boolean onPrepareOptionsMenu(android.view.Menu menu)
  bool onPrepareOptionsMenu(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareOptionsMenu,
        jni.JniCallType.booleanType,
        [menu.reference]).boolean;
  }

  static final _id_onOptionsItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onOptionsItemSelected",
      r"(Landroid/view/MenuItem;)Z");

  /// from: public boolean onOptionsItemSelected(android.view.MenuItem menuItem)
  bool onOptionsItemSelected(
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onOptionsItemSelected,
        jni.JniCallType.booleanType,
        [menuItem.reference]).boolean;
  }

  static final _id_onNavigateUp = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onNavigateUp", r"()Z");

  /// from: public boolean onNavigateUp()
  bool onNavigateUp() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onNavigateUp, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onNavigateUpFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onNavigateUpFromChild", r"(Landroid/app/Activity;)Z");

  /// from: public boolean onNavigateUpFromChild(android.app.Activity activity)
  bool onNavigateUpFromChild(
    Activity activity,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onNavigateUpFromChild,
        jni.JniCallType.booleanType,
        [activity.reference]).boolean;
  }

  static final _id_onCreateNavigateUpTaskStack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onCreateNavigateUpTaskStack",
          r"(Landroid/app/TaskStackBuilder;)V");

  /// from: public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onCreateNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateNavigateUpTaskStack,
        jni.JniCallType.voidType,
        [taskStackBuilder.reference]).check();
  }

  static final _id_onPrepareNavigateUpTaskStack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onPrepareNavigateUpTaskStack",
          r"(Landroid/app/TaskStackBuilder;)V");

  /// from: public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onPrepareNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareNavigateUpTaskStack,
        jni.JniCallType.voidType,
        [taskStackBuilder.reference]).check();
  }

  static final _id_onOptionsMenuClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onOptionsMenuClosed", r"(Landroid/view/Menu;)V");

  /// from: public void onOptionsMenuClosed(android.view.Menu menu)
  void onOptionsMenuClosed(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onOptionsMenuClosed,
        jni.JniCallType.voidType,
        [menu.reference]).check();
  }

  static final _id_openOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"openOptionsMenu", r"()V");

  /// from: public void openOptionsMenu()
  void openOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_openOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_closeOptionsMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"closeOptionsMenu", r"()V");

  /// from: public void closeOptionsMenu()
  void closeOptionsMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_closeOptionsMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onCreateContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateContextMenu",
      r"(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V");

  /// from: public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)
  void onCreateContextMenu(
    jni.JObject contextMenu,
    jni.JObject view,
    jni.JObject contextMenuInfo,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onCreateContextMenu, jni.JniCallType.voidType, [
      contextMenu.reference,
      view.reference,
      contextMenuInfo.reference
    ]).check();
  }

  static final _id_registerForContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"registerForContextMenu", r"(Landroid/view/View;)V");

  /// from: public void registerForContextMenu(android.view.View view)
  void registerForContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerForContextMenu,
        jni.JniCallType.voidType,
        [view.reference]).check();
  }

  static final _id_unregisterForContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"unregisterForContextMenu", r"(Landroid/view/View;)V");

  /// from: public void unregisterForContextMenu(android.view.View view)
  void unregisterForContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterForContextMenu,
        jni.JniCallType.voidType,
        [view.reference]).check();
  }

  static final _id_openContextMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"openContextMenu", r"(Landroid/view/View;)V");

  /// from: public void openContextMenu(android.view.View view)
  void openContextMenu(
    jni.JObject view,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_openContextMenu,
        jni.JniCallType.voidType, [view.reference]).check();
  }

  static final _id_closeContextMenu = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"closeContextMenu", r"()V");

  /// from: public void closeContextMenu()
  void closeContextMenu() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_closeContextMenu, jni.JniCallType.voidType, []).check();
  }

  static final _id_onContextItemSelected = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onContextItemSelected",
      r"(Landroid/view/MenuItem;)Z");

  /// from: public boolean onContextItemSelected(android.view.MenuItem menuItem)
  bool onContextItemSelected(
    jni.JObject menuItem,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onContextItemSelected,
        jni.JniCallType.booleanType,
        [menuItem.reference]).boolean;
  }

  static final _id_onContextMenuClosed = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onContextMenuClosed", r"(Landroid/view/Menu;)V");

  /// from: public void onContextMenuClosed(android.view.Menu menu)
  void onContextMenuClosed(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onContextMenuClosed,
        jni.JniCallType.voidType,
        [menu.reference]).check();
  }

  static final _id_onCreateDialog = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onCreateDialog", r"(I)Landroid/app/Dialog;");

  /// from: protected android.app.Dialog onCreateDialog(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDialog,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_onCreateDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateDialog",
      r"(ILandroid/os/Bundle;)Landroid/app/Dialog;");

  /// from: protected android.app.Dialog onCreateDialog(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateDialog1,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), bundle.reference]).object);
  }

  static final _id_onPrepareDialog = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPrepareDialog", r"(ILandroid/app/Dialog;)V");

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog)
  void onPrepareDialog(
    int i,
    jni.JObject dialog,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onPrepareDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i), dialog.reference]).check();
  }

  static final _id_onPrepareDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onPrepareDialog",
      r"(ILandroid/app/Dialog;Landroid/os/Bundle;)V");

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog, android.os.Bundle bundle)
  void onPrepareDialog1(
    int i,
    jni.JObject dialog,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareDialog1,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), dialog.reference, bundle.reference]).check();
  }

  static final _id_showDialog =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"showDialog", r"(I)V");

  /// from: public final void showDialog(int i)
  void showDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_showDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_showDialog1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"showDialog", r"(ILandroid/os/Bundle;)Z");

  /// from: public final boolean showDialog(int i, android.os.Bundle bundle)
  bool showDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_showDialog1,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), bundle.reference]).boolean;
  }

  static final _id_dismissDialog = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"dismissDialog", r"(I)V");

  /// from: public final void dismissDialog(int i)
  void dismissDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_dismissDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_removeDialog = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"removeDialog", r"(I)V");

  /// from: public final void removeDialog(int i)
  void removeDialog(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_removeDialog,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_onSearchRequested = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onSearchRequested", r"(Landroid/view/SearchEvent;)Z");

  /// from: public boolean onSearchRequested(android.view.SearchEvent searchEvent)
  bool onSearchRequested(
    jni.JObject searchEvent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSearchRequested,
        jni.JniCallType.booleanType,
        [searchEvent.reference]).boolean;
  }

  static final _id_onSearchRequested1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onSearchRequested", r"()Z");

  /// from: public boolean onSearchRequested()
  bool onSearchRequested1() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onSearchRequested1, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getSearchEvent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getSearchEvent", r"()Landroid/view/SearchEvent;");

  /// from: public final android.view.SearchEvent getSearchEvent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSearchEvent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getSearchEvent, jni.JniCallType.objectType, []).object);
  }

  static final _id_startSearch = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startSearch",
      r"(Ljava/lang/String;ZLandroid/os/Bundle;Z)V");

  /// from: public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)
  void startSearch(
    jni.JString string,
    bool z,
    jni.JObject bundle,
    bool z1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startSearch,
        jni.JniCallType.voidType,
        [string.reference, z ? 1 : 0, bundle.reference, z1 ? 1 : 0]).check();
  }

  static final _id_triggerSearch = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"triggerSearch",
      r"(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void triggerSearch(java.lang.String string, android.os.Bundle bundle)
  void triggerSearch(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_triggerSearch,
        jni.JniCallType.voidType, [string.reference, bundle.reference]).check();
  }

  static final _id_takeKeyEvents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"takeKeyEvents", r"(Z)V");

  /// from: public void takeKeyEvents(boolean z)
  void takeKeyEvents(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_takeKeyEvents,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_requestWindowFeature = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestWindowFeature", r"(I)Z");

  /// from: public final boolean requestWindowFeature(int i)
  bool requestWindowFeature(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestWindowFeature,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i)]).boolean;
  }

  static final _id_setFeatureDrawableResource = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFeatureDrawableResource", r"(II)V");

  /// from: public final void setFeatureDrawableResource(int i, int i1)
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableResource,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_setFeatureDrawableUri = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setFeatureDrawableUri", r"(ILandroid/net/Uri;)V");

  /// from: public final void setFeatureDrawableUri(int i, android.net.Uri uri)
  void setFeatureDrawableUri(
    int i,
    jni.JObject uri,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableUri,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), uri.reference]).check();
  }

  static final _id_setFeatureDrawable = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setFeatureDrawable",
      r"(ILandroid/graphics/drawable/Drawable;)V");

  /// from: public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)
  void setFeatureDrawable(
    int i,
    jni.JObject drawable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawable,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), drawable.reference]).check();
  }

  static final _id_setFeatureDrawableAlpha = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setFeatureDrawableAlpha", r"(II)V");

  /// from: public final void setFeatureDrawableAlpha(int i, int i1)
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFeatureDrawableAlpha,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_getLayoutInflater = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getLayoutInflater",
      r"()Landroid/view/LayoutInflater;");

  /// from: public android.view.LayoutInflater getLayoutInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLayoutInflater() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLayoutInflater,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getMenuInflater = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getMenuInflater", r"()Landroid/view/MenuInflater;");

  /// from: public android.view.MenuInflater getMenuInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMenuInflater() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMenuInflater, jni.JniCallType.objectType, []).object);
  }

  static final _id_setTheme =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setTheme", r"(I)V");

  /// from: public void setTheme(int i)
  void setTheme(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTheme,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_onApplyThemeResource = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onApplyThemeResource",
      r"(Landroid/content/res/Resources$Theme;IZ)V");

  /// from: protected void onApplyThemeResource(android.content.res.Resources$Theme theme, int i, boolean z)
  void onApplyThemeResource(
    jni.JObject theme,
    int i,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onApplyThemeResource,
        jni.JniCallType.voidType,
        [theme.reference, jni.JValueInt(i), z ? 1 : 0]).check();
  }

  static final _id_requestPermissions = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"requestPermissions", r"([Ljava/lang/String;I)V");

  /// from: public final void requestPermissions(java.lang.String[] strings, int i)
  void requestPermissions(
    jni.JArray<jni.JString> strings,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestPermissions,
        jni.JniCallType.voidType,
        [strings.reference, jni.JValueInt(i)]).check();
  }

  static final _id_onRequestPermissionsResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onRequestPermissionsResult",
      r"(I[Ljava/lang/String;[I)V");

  /// from: public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)
  void onRequestPermissionsResult(
    int i,
    jni.JArray<jni.JString> strings,
    jni.JArray<jni.jint> is0,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onRequestPermissionsResult,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), strings.reference, is0.reference]).check();
  }

  static final _id_shouldShowRequestPermissionRationale = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"shouldShowRequestPermissionRationale",
          r"(Ljava/lang/String;)Z");

  /// from: public boolean shouldShowRequestPermissionRationale(java.lang.String string)
  bool shouldShowRequestPermissionRationale(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_shouldShowRequestPermissionRationale,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_startActivityForResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityForResult",
      r"(Landroid/content/Intent;I)V");

  /// from: public void startActivityForResult(android.content.Intent intent, int i)
  void startActivityForResult(
    jni.JObject intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityForResult,
        jni.JniCallType.voidType,
        [intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityForResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityForResult",
      r"(Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityForResult1(
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityForResult1,
        jni.JniCallType.voidType,
        [intent.reference, jni.JValueInt(i), bundle.reference]).check();
  }

  static final _id_isActivityTransitionRunning = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isActivityTransitionRunning", r"()Z");

  /// from: public boolean isActivityTransitionRunning()
  bool isActivityTransitionRunning() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_isActivityTransitionRunning,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_startIntentSenderForResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderForResult",
      r"(Landroid/content/IntentSender;ILandroid/content/Intent;III)V");

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderForResult(
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderForResult, jni.JniCallType.voidType, [
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_startIntentSenderForResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderForResult",
      r"(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderForResult1(
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderForResult1, jni.JniCallType.voidType, [
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3),
      bundle.reference
    ]).check();
  }

  static final _id_startActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivity", r"(Landroid/content/Intent;)V");

  /// from: public void startActivity(android.content.Intent intent)
  void startActivity(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity,
        jni.JniCallType.voidType, [intent.reference]).check();
  }

  static final _id_startActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivity",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivity1,
        jni.JniCallType.voidType, [intent.reference, bundle.reference]).check();
  }

  static final _id_startActivities = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startActivities", r"([Landroid/content/Intent;)V");

  /// from: public void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<jni.JObject> intents,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_startActivities,
        jni.JniCallType.voidType, [intents.reference]).check();
  }

  static final _id_startActivities1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivities",
      r"([Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<jni.JObject> intents,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivities1,
        jni.JniCallType.voidType,
        [intents.reference, bundle.reference]).check();
  }

  static final _id_startIntentSender = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V");

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).check();
  }

  static final _id_startIntentSender1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSender",
      r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSender1, jni.JniCallType.voidType, [
      intentSender.reference,
      intent.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      bundle.reference
    ]).check();
  }

  static final _id_startActivityIfNeeded = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityIfNeeded",
      r"(Landroid/content/Intent;I)Z");

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i)
  bool startActivityIfNeeded(
    jni.JObject intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityIfNeeded,
        jni.JniCallType.booleanType,
        [intent.reference, jni.JValueInt(i)]).boolean;
  }

  static final _id_startActivityIfNeeded1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityIfNeeded",
      r"(Landroid/content/Intent;ILandroid/os/Bundle;)Z");

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)
  bool startActivityIfNeeded1(
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityIfNeeded1,
        jni.JniCallType.booleanType,
        [intent.reference, jni.JValueInt(i), bundle.reference]).boolean;
  }

  static final _id_startNextMatchingActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startNextMatchingActivity",
      r"(Landroid/content/Intent;)Z");

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent)
  bool startNextMatchingActivity(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startNextMatchingActivity,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_startNextMatchingActivity1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startNextMatchingActivity",
      r"(Landroid/content/Intent;Landroid/os/Bundle;)Z");

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)
  bool startNextMatchingActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startNextMatchingActivity1,
        jni.JniCallType.booleanType,
        [intent.reference, bundle.reference]).boolean;
  }

  static final _id_startActivityFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;I)V");

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)
  void startActivityFromChild(
    Activity activity,
    jni.JObject intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityFromChild,
        jni.JniCallType.voidType,
        [activity.reference, intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityFromChild1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromChild1(
    Activity activity,
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startActivityFromChild1, jni.JniCallType.voidType, [
      activity.reference,
      intent.reference,
      jni.JValueInt(i),
      bundle.reference
    ]).check();
  }

  static final _id_startActivityFromFragment = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromFragment",
      r"(Landroid/app/Fragment;Landroid/content/Intent;I)V");

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)
  void startActivityFromFragment(
    jni.JObject fragment,
    jni.JObject intent,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActivityFromFragment,
        jni.JniCallType.voidType,
        [fragment.reference, intent.reference, jni.JValueInt(i)]).check();
  }

  static final _id_startActivityFromFragment1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActivityFromFragment",
      r"(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V");

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromFragment1(
    jni.JObject fragment,
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startActivityFromFragment1, jni.JniCallType.voidType, [
      fragment.reference,
      intent.reference,
      jni.JValueInt(i),
      bundle.reference
    ]).check();
  }

  static final _id_startIntentSenderFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderFromChild",
      r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V");

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderFromChild(
    Activity activity,
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderFromChild, jni.JniCallType.voidType, [
      activity.reference,
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_startIntentSenderFromChild1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startIntentSenderFromChild",
      r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderFromChild1(
    Activity activity,
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startIntentSenderFromChild1, jni.JniCallType.voidType, [
      activity.reference,
      intentSender.reference,
      jni.JValueInt(i),
      intent.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3),
      bundle.reference
    ]).check();
  }

  static final _id_overrideActivityTransition = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"overrideActivityTransition", r"(III)V");

  /// from: public void overrideActivityTransition(int i, int i1, int i2)
  void overrideActivityTransition(
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overrideActivityTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueInt(i2)]).check();
  }

  static final _id_overrideActivityTransition1 = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"overrideActivityTransition", r"(IIII)V");

  /// from: public void overrideActivityTransition(int i, int i1, int i2, int i3)
  void overrideActivityTransition1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_overrideActivityTransition1, jni.JniCallType.voidType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_clearOverrideActivityTransition = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"clearOverrideActivityTransition", r"(I)V");

  /// from: public void clearOverrideActivityTransition(int i)
  void clearOverrideActivityTransition(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_clearOverrideActivityTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_overridePendingTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"overridePendingTransition", r"(II)V");

  /// from: public void overridePendingTransition(int i, int i1)
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overridePendingTransition,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_overridePendingTransition1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"overridePendingTransition", r"(III)V");

  /// from: public void overridePendingTransition(int i, int i1, int i2)
  void overridePendingTransition1(
    int i,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_overridePendingTransition1,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueInt(i2)]).check();
  }

  static final _id_setResult =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setResult", r"(I)V");

  /// from: public final void setResult(int i)
  void setResult(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setResult,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setResult1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setResult", r"(ILandroid/content/Intent;)V");

  /// from: public final void setResult(int i, android.content.Intent intent)
  void setResult1(
    int i,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setResult1,
        jni.JniCallType.voidType, [jni.JValueInt(i), intent.reference]).check();
  }

  static final _id_getReferrer = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getReferrer", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri getReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getReferrer() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getReferrer, jni.JniCallType.objectType, []).object);
  }

  static final _id_onProvideReferrer = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onProvideReferrer", r"()Landroid/net/Uri;");

  /// from: public android.net.Uri onProvideReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onProvideReferrer() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onProvideReferrer,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCallingPackage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCallingPackage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getCallingPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCallingPackage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCallingPackage,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getCallingActivity = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getCallingActivity",
      r"()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getCallingActivity()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCallingActivity() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getCallingActivity,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getLaunchedFromUid = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLaunchedFromUid", r"()I");

  /// from: public int getLaunchedFromUid()
  int getLaunchedFromUid() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getLaunchedFromUid, jni.JniCallType.intType, []).integer;
  }

  static final _id_getLaunchedFromPackage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLaunchedFromPackage", r"()Ljava/lang/String;");

  /// from: public java.lang.String getLaunchedFromPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLaunchedFromPackage() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLaunchedFromPackage,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setVisible =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setVisible", r"(Z)V");

  /// from: public void setVisible(boolean z)
  void setVisible(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setVisible,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_isFinishing =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isFinishing", r"()Z");

  /// from: public boolean isFinishing()
  bool isFinishing() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isFinishing, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isDestroyed =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isDestroyed", r"()Z");

  /// from: public boolean isDestroyed()
  bool isDestroyed() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isDestroyed, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isChangingConfigurations = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isChangingConfigurations", r"()Z");

  /// from: public boolean isChangingConfigurations()
  bool isChangingConfigurations() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isChangingConfigurations, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_recreate =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"recreate", r"()V");

  /// from: public void recreate()
  void recreate() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_recreate, jni.JniCallType.voidType, []).check();
  }

  static final _id_finish =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finish", r"()V");

  /// from: public void finish()
  void finish() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finish, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishAffinity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAffinity", r"()V");

  /// from: public void finishAffinity()
  void finishAffinity() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finishAffinity, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"finishFromChild", r"(Landroid/app/Activity;)V");

  /// from: public void finishFromChild(android.app.Activity activity)
  void finishFromChild(
    Activity activity,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_finishFromChild,
        jni.JniCallType.voidType, [activity.reference]).check();
  }

  static final _id_finishAfterTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAfterTransition", r"()V");

  /// from: public void finishAfterTransition()
  void finishAfterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_finishAfterTransition, jni.JniCallType.voidType, []).check();
  }

  static final _id_finishActivity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishActivity", r"(I)V");

  /// from: public void finishActivity(int i)
  void finishActivity(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_finishActivity,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_finishActivityFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"finishActivityFromChild",
      r"(Landroid/app/Activity;I)V");

  /// from: public void finishActivityFromChild(android.app.Activity activity, int i)
  void finishActivityFromChild(
    Activity activity,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_finishActivityFromChild,
        jni.JniCallType.voidType,
        [activity.reference, jni.JValueInt(i)]).check();
  }

  static final _id_finishAndRemoveTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"finishAndRemoveTask", r"()V");

  /// from: public void finishAndRemoveTask()
  void finishAndRemoveTask() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_finishAndRemoveTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_releaseInstance = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"releaseInstance", r"()Z");

  /// from: public boolean releaseInstance()
  bool releaseInstance() {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_releaseInstance,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onActivityResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onActivityResult", r"(IILandroid/content/Intent;)V");

  /// from: protected void onActivityResult(int i, int i1, android.content.Intent intent)
  void onActivityResult(
    int i,
    int i1,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActivityResult,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), intent.reference]).check();
  }

  static final _id_onActivityReenter = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onActivityReenter", r"(ILandroid/content/Intent;)V");

  /// from: public void onActivityReenter(int i, android.content.Intent intent)
  void onActivityReenter(
    int i,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActivityReenter,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), intent.reference]).check();
  }

  static final _id_createPendingResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createPendingResult",
      r"(ILandroid/content/Intent;I)Landroid/app/PendingIntent;");

  /// from: public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createPendingResult(
    int i,
    jni.JObject intent,
    int i1,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createPendingResult,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), intent.reference, jni.JValueInt(i1)]).object);
  }

  static final _id_setRequestedOrientation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setRequestedOrientation", r"(I)V");

  /// from: public void setRequestedOrientation(int i)
  void setRequestedOrientation(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setRequestedOrientation,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_getRequestedOrientation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getRequestedOrientation", r"()I");

  /// from: public int getRequestedOrientation()
  int getRequestedOrientation() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getRequestedOrientation, jni.JniCallType.intType, []).integer;
  }

  static final _id_getTaskId =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getTaskId", r"()I");

  /// from: public int getTaskId()
  int getTaskId() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTaskId, jni.JniCallType.intType, []).integer;
  }

  static final _id_isTaskRoot =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isTaskRoot", r"()Z");

  /// from: public boolean isTaskRoot()
  bool isTaskRoot() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isTaskRoot, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_moveTaskToBack = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"moveTaskToBack", r"(Z)Z");

  /// from: public boolean moveTaskToBack(boolean z)
  bool moveTaskToBack(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_moveTaskToBack,
        jni.JniCallType.booleanType, [z ? 1 : 0]).boolean;
  }

  static final _id_getLocalClassName = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLocalClassName", r"()Ljava/lang/String;");

  /// from: public java.lang.String getLocalClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalClassName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getLocalClassName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getComponentName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getComponentName",
      r"()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponentName() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getComponentName,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getPreferences = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getPreferences",
      r"(I)Landroid/content/SharedPreferences;");

  /// from: public android.content.SharedPreferences getPreferences(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferences(
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getPreferences,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_isLaunchedFromBubble = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isLaunchedFromBubble", r"()Z");

  /// from: public boolean isLaunchedFromBubble()
  bool isLaunchedFromBubble() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_isLaunchedFromBubble, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getSystemService = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getSystemService",
      r"(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getSystemService,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_setTitle = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setTitle", r"(Ljava/lang/CharSequence;)V");

  /// from: public void setTitle(java.lang.CharSequence charSequence)
  void setTitle(
    jni.JObject charSequence,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitle,
        jni.JniCallType.voidType, [charSequence.reference]).check();
  }

  static final _id_setTitle1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setTitle", r"(I)V");

  /// from: public void setTitle(int i)
  void setTitle1(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitle1,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setTitleColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTitleColor", r"(I)V");

  /// from: public void setTitleColor(int i)
  void setTitleColor(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTitleColor,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getTitle = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getTitle", r"()Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTitle() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTitle, jni.JniCallType.objectType, []).object);
  }

  static final _id_getTitleColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getTitleColor", r"()I");

  /// from: public final int getTitleColor()
  int getTitleColor() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTitleColor, jni.JniCallType.intType, []).integer;
  }

  static final _id_onTitleChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onTitleChanged", r"(Ljava/lang/CharSequence;I)V");

  /// from: protected void onTitleChanged(java.lang.CharSequence charSequence, int i)
  void onTitleChanged(
    jni.JObject charSequence,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onTitleChanged,
        jni.JniCallType.voidType,
        [charSequence.reference, jni.JValueInt(i)]).check();
  }

  static final _id_onChildTitleChanged = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onChildTitleChanged",
      r"(Landroid/app/Activity;Ljava/lang/CharSequence;)V");

  /// from: protected void onChildTitleChanged(android.app.Activity activity, java.lang.CharSequence charSequence)
  void onChildTitleChanged(
    Activity activity,
    jni.JObject charSequence,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onChildTitleChanged,
        jni.JniCallType.voidType,
        [activity.reference, charSequence.reference]).check();
  }

  static final _id_setTaskDescription = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setTaskDescription",
      r"(Landroid/app/ActivityManager$TaskDescription;)V");

  /// from: public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)
  void setTaskDescription(
    jni.JObject taskDescription,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setTaskDescription,
        jni.JniCallType.voidType,
        [taskDescription.reference]).check();
  }

  static final _id_setProgressBarVisibility = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgressBarVisibility", r"(Z)V");

  /// from: public final void setProgressBarVisibility(boolean z)
  void setProgressBarVisibility(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarVisibility,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgressBarIndeterminateVisibility = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"setProgressBarIndeterminateVisibility", r"(Z)V");

  /// from: public final void setProgressBarIndeterminateVisibility(boolean z)
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarIndeterminateVisibility,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgressBarIndeterminate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgressBarIndeterminate", r"(Z)V");

  /// from: public final void setProgressBarIndeterminate(boolean z)
  void setProgressBarIndeterminate(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setProgressBarIndeterminate,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setProgress = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setProgress", r"(I)V");

  /// from: public final void setProgress(int i)
  void setProgress(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setProgress,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setSecondaryProgress = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setSecondaryProgress", r"(I)V");

  /// from: public final void setSecondaryProgress(int i)
  void setSecondaryProgress(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setSecondaryProgress,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_setVolumeControlStream = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setVolumeControlStream", r"(I)V");

  /// from: public final void setVolumeControlStream(int i)
  void setVolumeControlStream(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setVolumeControlStream,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_getVolumeControlStream = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getVolumeControlStream", r"()I");

  /// from: public final int getVolumeControlStream()
  int getVolumeControlStream() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getVolumeControlStream, jni.JniCallType.intType, []).integer;
  }

  static final _id_setMediaController = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setMediaController",
      r"(Landroid/media/session/MediaController;)V");

  /// from: public final void setMediaController(android.media.session.MediaController mediaController)
  void setMediaController(
    jni.JObject mediaController,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setMediaController,
        jni.JniCallType.voidType,
        [mediaController.reference]).check();
  }

  static final _id_getMediaController = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getMediaController",
      r"()Landroid/media/session/MediaController;");

  /// from: public final android.media.session.MediaController getMediaController()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMediaController() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getMediaController,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_runOnUiThread = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"runOnUiThread", r"(Ljava/lang/Runnable;)V");

  /// from: public final void runOnUiThread(java.lang.Runnable runnable)
  void runOnUiThread(
    jni.JObject runnable,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_runOnUiThread,
        jni.JniCallType.voidType, [runnable.reference]).check();
  }

  static final _id_onCreateView = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateView",
      r"(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;");

  /// from: public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView(
    jni.JString string,
    jni.JObject context,
    jni.JObject attributeSet,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCreateView,
        jni.JniCallType.objectType,
        [string.reference, context.reference, attributeSet.reference]).object);
  }

  static final _id_onCreateView1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCreateView",
      r"(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;");

  /// from: public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView1(
    jni.JObject view,
    jni.JString string,
    jni.JObject context,
    jni.JObject attributeSet,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onCreateView1, jni.JniCallType.objectType, [
      view.reference,
      string.reference,
      context.reference,
      attributeSet.reference
    ]).object);
  }

  static final _id_dump = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"dump",
      r"(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V");

  /// from: public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)
  void dump(
    jni.JString string,
    jni.JObject fileDescriptor,
    jni.JObject printWriter,
    jni.JArray<jni.JString> strings,
  ) {
    return jni.Jni.accessors
        .callMethodWithArgs(reference, _id_dump, jni.JniCallType.voidType, [
      string.reference,
      fileDescriptor.reference,
      printWriter.reference,
      strings.reference
    ]).check();
  }

  static final _id_isImmersive =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isImmersive", r"()Z");

  /// from: public boolean isImmersive()
  bool isImmersive() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isImmersive, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_setTranslucent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTranslucent", r"(Z)Z");

  /// from: public boolean setTranslucent(boolean z)
  bool setTranslucent(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTranslucent,
        jni.JniCallType.booleanType, [z ? 1 : 0]).boolean;
  }

  static final _id_requestVisibleBehind = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestVisibleBehind", r"(Z)Z");

  /// from: public boolean requestVisibleBehind(boolean z)
  bool requestVisibleBehind(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestVisibleBehind,
        jni.JniCallType.booleanType,
        [z ? 1 : 0]).boolean;
  }

  static final _id_onVisibleBehindCanceled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onVisibleBehindCanceled", r"()V");

  /// from: public void onVisibleBehindCanceled()
  void onVisibleBehindCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onVisibleBehindCanceled, jni.JniCallType.voidType, []).check();
  }

  static final _id_onEnterAnimationComplete = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onEnterAnimationComplete", r"()V");

  /// from: public void onEnterAnimationComplete()
  void onEnterAnimationComplete() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onEnterAnimationComplete, jni.JniCallType.voidType, []).check();
  }

  static final _id_setImmersive = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setImmersive", r"(Z)V");

  /// from: public void setImmersive(boolean z)
  void setImmersive(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setImmersive,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_setVrModeEnabled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setVrModeEnabled",
      r"(ZLandroid/content/ComponentName;)V");

  /// from: public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)
  void setVrModeEnabled(
    bool z,
    jni.JObject componentName,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setVrModeEnabled,
        jni.JniCallType.voidType, [z ? 1 : 0, componentName.reference]).check();
  }

  static final _id_startActionMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActionMode",
      r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode(
    jni.JObject callback,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActionMode,
        jni.JniCallType.objectType,
        [callback.reference]).object);
  }

  static final _id_startActionMode1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"startActionMode",
      r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startActionMode1,
        jni.JniCallType.objectType,
        [callback.reference, jni.JValueInt(i)]).object);
  }

  static final _id_onWindowStartingActionMode = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onWindowStartingActionMode",
      r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode(
    jni.JObject callback,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowStartingActionMode,
        jni.JniCallType.objectType,
        [callback.reference]).object);
  }

  static final _id_onWindowStartingActionMode1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onWindowStartingActionMode",
          r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;");

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onWindowStartingActionMode1,
        jni.JniCallType.objectType,
        [callback.reference, jni.JValueInt(i)]).object);
  }

  static final _id_onActionModeStarted = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onActionModeStarted",
      r"(Landroid/view/ActionMode;)V");

  /// from: public void onActionModeStarted(android.view.ActionMode actionMode)
  void onActionModeStarted(
    jni.JObject actionMode,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActionModeStarted,
        jni.JniCallType.voidType,
        [actionMode.reference]).check();
  }

  static final _id_onActionModeFinished = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onActionModeFinished",
      r"(Landroid/view/ActionMode;)V");

  /// from: public void onActionModeFinished(android.view.ActionMode actionMode)
  void onActionModeFinished(
    jni.JObject actionMode,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActionModeFinished,
        jni.JniCallType.voidType,
        [actionMode.reference]).check();
  }

  static final _id_shouldUpRecreateTask = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"shouldUpRecreateTask",
      r"(Landroid/content/Intent;)Z");

  /// from: public boolean shouldUpRecreateTask(android.content.Intent intent)
  bool shouldUpRecreateTask(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_shouldUpRecreateTask,
        jni.JniCallType.booleanType,
        [intent.reference]).boolean;
  }

  static final _id_navigateUpTo = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"navigateUpTo", r"(Landroid/content/Intent;)Z");

  /// from: public boolean navigateUpTo(android.content.Intent intent)
  bool navigateUpTo(
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_navigateUpTo,
        jni.JniCallType.booleanType, [intent.reference]).boolean;
  }

  static final _id_navigateUpToFromChild = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"navigateUpToFromChild",
      r"(Landroid/app/Activity;Landroid/content/Intent;)Z");

  /// from: public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)
  bool navigateUpToFromChild(
    Activity activity,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_navigateUpToFromChild,
        jni.JniCallType.booleanType,
        [activity.reference, intent.reference]).boolean;
  }

  static final _id_getParentActivityIntent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getParentActivityIntent",
      r"()Landroid/content/Intent;");

  /// from: public android.content.Intent getParentActivityIntent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParentActivityIntent() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getParentActivityIntent,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setEnterSharedElementCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setEnterSharedElementCallback",
          r"(Landroid/app/SharedElementCallback;)V");

  /// from: public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setEnterSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setEnterSharedElementCallback,
        jni.JniCallType.voidType,
        [sharedElementCallback.reference]).check();
  }

  static final _id_setExitSharedElementCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setExitSharedElementCallback",
          r"(Landroid/app/SharedElementCallback;)V");

  /// from: public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setExitSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setExitSharedElementCallback,
        jni.JniCallType.voidType,
        [sharedElementCallback.reference]).check();
  }

  static final _id_postponeEnterTransition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"postponeEnterTransition", r"()V");

  /// from: public void postponeEnterTransition()
  void postponeEnterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_postponeEnterTransition, jni.JniCallType.voidType, []).check();
  }

  static final _id_startPostponedEnterTransition = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"startPostponedEnterTransition", r"()V");

  /// from: public void startPostponedEnterTransition()
  void startPostponedEnterTransition() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startPostponedEnterTransition,
        jni.JniCallType.voidType, []).check();
  }

  static final _id_requestDragAndDropPermissions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"requestDragAndDropPermissions",
          r"(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;");

  /// from: public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject requestDragAndDropPermissions(
    jni.JObject dragEvent,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_requestDragAndDropPermissions,
        jni.JniCallType.objectType,
        [dragEvent.reference]).object);
  }

  static final _id_startLockTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"startLockTask", r"()V");

  /// from: public void startLockTask()
  void startLockTask() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startLockTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_stopLockTask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"stopLockTask", r"()V");

  /// from: public void stopLockTask()
  void stopLockTask() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_stopLockTask, jni.JniCallType.voidType, []).check();
  }

  static final _id_showLockTaskEscapeMessage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"showLockTaskEscapeMessage", r"()V");

  /// from: public void showLockTaskEscapeMessage()
  void showLockTaskEscapeMessage() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_showLockTaskEscapeMessage, jni.JniCallType.voidType, []).check();
  }

  static final _id_setRecentsScreenshotEnabled = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setRecentsScreenshotEnabled", r"(Z)V");

  /// from: public void setRecentsScreenshotEnabled(boolean z)
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setRecentsScreenshotEnabled,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setShowWhenLocked = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setShowWhenLocked", r"(Z)V");

  /// from: public void setShowWhenLocked(boolean z)
  void setShowWhenLocked(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_setShowWhenLocked, jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_setInheritShowWhenLocked = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setInheritShowWhenLocked", r"(Z)V");

  /// from: public void setInheritShowWhenLocked(boolean z)
  void setInheritShowWhenLocked(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setInheritShowWhenLocked,
        jni.JniCallType.voidType,
        [z ? 1 : 0]).check();
  }

  static final _id_setTurnScreenOn = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setTurnScreenOn", r"(Z)V");

  /// from: public void setTurnScreenOn(boolean z)
  void setTurnScreenOn(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTurnScreenOn,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_getOnBackInvokedDispatcher = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getOnBackInvokedDispatcher",
      r"()Landroid/window/OnBackInvokedDispatcher;");

  /// from: public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getOnBackInvokedDispatcher() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getOnBackInvokedDispatcher,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_registerScreenCaptureCallback = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"registerScreenCaptureCallback",
      r"(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V");

  /// from: public void registerScreenCaptureCallback(java.util.concurrent.Executor executor, android.app.Activity$ScreenCaptureCallback screenCaptureCallback)
  void registerScreenCaptureCallback(
    jni.JObject executor,
    Activity_ScreenCaptureCallback screenCaptureCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_registerScreenCaptureCallback,
        jni.JniCallType.voidType,
        [executor.reference, screenCaptureCallback.reference]).check();
  }

  static final _id_unregisterScreenCaptureCallback = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"unregisterScreenCaptureCallback",
          r"(Landroid/app/Activity$ScreenCaptureCallback;)V");

  /// from: public void unregisterScreenCaptureCallback(android.app.Activity$ScreenCaptureCallback screenCaptureCallback)
  void unregisterScreenCaptureCallback(
    Activity_ScreenCaptureCallback screenCaptureCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_unregisterScreenCaptureCallback,
        jni.JniCallType.voidType,
        [screenCaptureCallback.reference]).check();
  }
}

final class $ActivityType extends jni.JObjType<Activity> {
  const $ActivityType();

  @override
  String get signature => r"Landroid/app/Activity;";

  @override
  Activity fromRef(jni.JObjectPtr ref) => Activity.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ActivityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityType) && other is $ActivityType;
  }
}
