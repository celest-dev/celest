syntax = "proto3";

package celest.cloud.v1alpha1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/field_info.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/money.proto";

option go_package = "celest/cloud/v1alpha1;cloudv1alpha1";

// Manages subscriptions to the Celest Cloud service.
service Subscriptions {
  option (google.api.default_host) = "cloud.celest.dev";

  // Gets a subscription.
  rpc GetSubscription(GetSubscriptionRequest) returns (Subscription) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/subscription}"
    };
    option (google.api.method_signature) = "name";
  }

  // Change a user's subscription to Celest Cloud.
  rpc ChangePlan(ChangePlanRequest) returns (ChangePlanResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=users/*/subscription}:changePlan"
      body: "*"
    };
    option (google.api.method_signature) = "name,currency_code";
  }

  // Pauses a subscription to Celest Cloud.
  rpc PauseSubscription(PauseSubscriptionRequest) returns (PauseSubscriptionResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=users/*/subscription}:pause"
      body: "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Cancels a subscription to Celest Cloud.
  rpc CancelSubscription(CancelSubscriptionRequest) returns (CancelSubscriptionResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=users/*/subscription}:cancel"
      body: "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Describes current pricing for all subscription plans and tiers.
  //
  // The `country_code` and `currency_code` can be provided to calculate
  // regional pricing. If neither is provided, the user's location is determined
  // from their IP address and the local pricing is returned for the local currency.
  rpc DescribePricing(DescribePricingRequest) returns (DescribePricingResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/subscriptions:describePricing"
    };
  }
}

// A subscription to the Celest Cloud service.
message Subscription {
  // Subscriptions are singleton resources of a user.
  option (google.api.resource) = {
    type: "cloud.celest.dev/Subscription"
    pattern: "users/{user}/subscription"
    singular: "subscription"
    plural: "subscriptions"
  };

  // Identifier. The resource name of the subscription.
  //
  // Format: `users/{user}/subscription`
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // Output only. The parent resource which owns the subscription.
  string parent = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Required. The subscription plan.
  oneof plan {
    // Subscription to the Community plan.
    CommunitySubscriptionPlan community = 3;

    // Subscription to a Builder plan.
    BuilderSubscriptionPlan builder = 4;

    // Subscription to an Enterprise plan.
    EnterpriseSubscriptionPlan enterprise = 5;
  }

  // Output only. The time the subscription was created.
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The time the subscription was last updated.
  google.protobuf.Timestamp update_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The state of the subscription.
  oneof state {
    // The subscription requires payment.
    SubscriptionPaymentRequired payment_required = 8;

    // The subscription is active.
    SubscriptionActive active = 9;

    // The subscription is paused.
    SubscriptionPaused paused = 10;

    // The subscription is suspended.
    SubscriptionSuspended suspended = 11;

    // The subscription is canceled.
    SubscriptionCanceled canceled = 12;
  }
}

// The message for when a subscription requires payment.
message SubscriptionPaymentRequired {
  // The URI to redirect the user to.
  string payment_uri = 1;

  // The URI the user will be redirected to after payment.
  string redirect_uri = 2;
}

// The message for when a subscription is active.
message SubscriptionActive {
  // Optional. Billing information for the subscription, if a paid subscription.
  optional SubscriptionBillingInfo billing_info = 1;
}

// Information about the subscription billing.
message SubscriptionBillingInfo {
  // The time when the subscription will be billed next.
  google.protobuf.Timestamp next_billing_time = 1;
}

// The message for when a subscription is paused.
message SubscriptionPaused {
  // The time the subscription is scheduled to resume.
  google.protobuf.Timestamp resume_time = 1;
}

// The message for when a subscription is suspended.
message SubscriptionSuspended {
  // The reason the subscription was suspended, if available.
  optional string reason = 1;
}

// The message for when a subscription is canceled.
message SubscriptionCanceled {
  // The time the subscription was canceled.
  google.protobuf.Timestamp cancel_time = 1;

  // The details of the cancellation, if provided.
  CancelSubscriptionDetails details = 2;
}

// A Community subscription plan.
message CommunitySubscriptionPlan {}

// A Builder subscription plan.
message BuilderSubscriptionPlan {
  // Optional. The preferred currency for payment.
  //
  // If not provided, it will be inferred from the user's location.
  string currency_code = 1 [
    (google.api.field_behavior) = OPTIONAL,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED,
    (buf.validate.field).cel = {
      id: "valid_currency",
      message: "must be a valid currency code",
      expression: "this.matches('^[a-zA-Z]{3,4}$')"
    }
  ];

  // Required. The instance type for the plan.
  InstanceType instance_type = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).cel = {
      id: "valid_instance_type",
      message: "must set an instance type",
      expression: "this != 0"
    }
  ];
}

// An Enterprise subscription plan.
message EnterpriseSubscriptionPlan {}

// The request message for the `GetSubscription` method.
message GetSubscriptionRequest {
  // Required. The name of the subscription to get.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "cloud.celest.dev/Subscription" },
    (buf.validate.field).cel = {
      id: "valid_subscription",
      message: "must be a valid subscription resource name",
      expression: "this.matches('^users/[^/]+/subscription$')"
    }
  ];
}

// The request message for the `ChangePlan` method.
message ChangePlanRequest {
  // Required. The parent resource where the subscription will be updated.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "cloud.celest.dev/Subscription" },
    (buf.validate.field).cel = {
      id: "valid_subscription",
      message: "must be a valid subscription resource name",
      expression: "this.matches('^users/[^/]+/subscription$')"
    }
  ];

  // Required. The plan to switch to.
  oneof plan {
    option (buf.validate.oneof).required = true;

    // The Community plan.
    CommunitySubscriptionPlan community = 2;

    // A Builder plan.
    BuilderSubscriptionPlan builder = 3;

    // An Enterprise plan.
    EnterpriseSubscriptionPlan enterprise = 4;
  }

  // Optional. The URI to redirect the client after payment.
  string redirect_uri = 6 [
    (google.api.field_behavior) = OPTIONAL,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED,
    (buf.validate.field).cel = {
      id: "valid_uri",
      message: "must be a valid URI",
      expression: "this.isUri()"
    }
  ];
}

// The response message for the `ChangePlan` method.
message ChangePlanResponse {
  // The updated subscription.
  Subscription subscription = 1;
}

// The request message for the `PauseSubscription` method.
message PauseSubscriptionRequest {
  // Required. The name of the subscription to pause.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "cloud.celest.dev/Subscription" },
    (buf.validate.field).cel = {
      id: "valid_subscription",
      message: "must be a valid subscription resource name",
      expression: "this.matches('^users/[^/]+/subscription$')"
    }
  ];

  // Optional. The time to resume the subscription.
  google.protobuf.Timestamp resume_time = 2 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for the `PauseSubscription` method.
message PauseSubscriptionResponse {
  // The updated subscription.
  Subscription subscription = 1;
}

// The request message for the `CancelSubscription` method.
message CancelSubscriptionRequest {
  // Required. The name of the subscription to cancel.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "cloud.celest.dev/Subscription" },
    (buf.validate.field).cel = {
      id: "valid_subscription",
      message: "must be a valid subscription resource name",
      expression: "this.matches('^users/[^/]+/subscription$')"
    }
  ];

  // Optional. Details of the cancellation.
  CancelSubscriptionDetails details = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Details of the cancellation of a subscription.
message CancelSubscriptionDetails {
  // The reason for the cancellation.
  enum Reason {
    // Unspecified reason.
    REASON_UNSPECIFIED = 0;

    // Cancellation requested.
    CANCELLATION_REQUESTED = 1;

    // Payment disputed.
    PAYMENT_DISPUTED = 2;

    // Payment failed.
    PAYMENT_FAILED = 3;
  }

  // The feedback for cancellation.
  enum Feedback {
    // Unspecified feedback.
    FEEDBACK_UNSPECIFIED = 0;

    // Customer service.
    CUSTOMER_SERVICE = 1;

    // Low quality.
    LOW_QUALITY = 2;

    // Missing features.
    MISSING_FEATURES = 3;

    // Other.
    OTHER = 4;

    // Switched service.
    SWITCHED_SERVICE = 5;

    // Too complex.
    TOO_COMPLEX = 6;

    // Too expensive.
    TOO_EXPENSIVE = 7;

    // Unused.
    UNUSED = 8;
  }

  // Optional. The reason for the cancellation.
  Reason reason = 1 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Customer feedback for the cancellation.
  Feedback feedback = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Customer comments for the cancellation.
  string comment = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for the `CancelSubscription` method.
message CancelSubscriptionResponse {
  // The updated subscription.
  Subscription subscription = 1;
}

// A quantity of a unit of measure.
message Quantity {
  // The unit of measure.
  Measure measure = 1 [(google.api.field_behavior) = OPTIONAL];

  // The whole number of units.
  int64 units = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).int64.gte = 0
  ];

  // Number of nano (10^-9) units of the amount.
  // (-- api-linter: core::0142::time-field-type=disabled
  //     aip.dev/not-precedent: False positive --)
  int32 nanos = 3 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).int32.gte = 0
  ];
}

// The request message for the `DescribePricing` method.
message DescribePricingRequest {
  // Optional. The region code to get pricing for.
  string region_code = 1 [
    (google.api.field_behavior) = OPTIONAL,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED,
    (buf.validate.field).cel = {
      id: "valid_region_code",
      message: "must be a valid region code",
      expression: "this.matches('^[a-zA-Z]{2}$')"
    }
  ];

  // Optional. The currency code to get pricing for.
  string currency_code = 2 [
    (google.api.field_behavior) = OPTIONAL,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED,
    (buf.validate.field).cel = {
      id: "valid_currency",
      message: "must be a valid currency code",
      expression: "this.matches('^[a-zA-Z]{3,4}$')"
    }
  ];
}

// The response message for the `DescribePricing` method.
message DescribePricingResponse {
  // The region code for the pricing.
  string region_code = 1;

  // The currency code for the pricing.
  string currency_code = 2;

  // The pricing information for all subscription plans.
  repeated Pricing prices = 3;
}

// Pricing information for a subscription plan.
message Pricing {
  // The plan.
  oneof plan {
    // The Community plan.
    CommunitySubscriptionPlan community = 1;

    // A Builder plan.
    BuilderSubscriptionPlan builder = 2;

    // An Enterprise plan.
    EnterpriseSubscriptionPlan enterprise = 3;
  }

  // The price of the plan.
  google.type.Money price = 4 [(google.api.field_behavior) = REQUIRED];

  // A promotion for a subscription plan.
  message Promotion {
    // The coupon code for the promotion.
    string coupon_code = 1 [(google.api.field_behavior) = REQUIRED];

    oneof discount {
      // The discount amount.
      google.type.Money amount = 2;

      // The discount percentage.
      int32 percentage = 3;
    }

    oneof duration {
      // The promotion is applied forever.
      google.protobuf.Empty forever = 4;

      // The promotion is applied once.
      google.protobuf.Empty once = 5;

      // The duration of the promotion.
      google.protobuf.Duration repeating = 6;
    }

    // Optional. The time the promotion expires.
    google.protobuf.Timestamp expire_time = 7;
  }

  // Optional. The active promotions for the plan, if any.
  repeated Promotion promotions = 5 [(google.api.field_behavior) = OPTIONAL];
}

// A unit of measure.
enum Measure {
  // Unspecified measure.
  MEASURE_UNSPECIFIED = 0;

  // The measure is of mebibytes (MiB).
  MEBIBYTES = 1;

  // The measure is of gibibytes (GiB).
  GIBIBYTES = 2;

  // The measure is of tebibytes (TiB).
  TEBIBYTES = 3;

  // The measure is of megabytes (MB).
  MEGABYTES = 4;

  // The measure is of gigabytes (GB).
  GIGABYTES = 5;

  // The measure is of terabytes (TB).
  TERABYTES = 6;
}

// The type of instance.
enum InstanceType {
  // Unspecified instance type.
  INSTANCE_TYPE_UNSPECIFIED = 0;

  // A micro instance.
  MICRO = 1;

  // A small instance.
  SMALL = 2;

  // A medium instance.
  MEDIUM = 3;

  // A large instance.
  LARGE = 4;

  // A quad instance.
  QUAD = 5;

  // An octa instance.
  OCTA = 6;

  // A hexa instance.
  HEXA = 7;
}
